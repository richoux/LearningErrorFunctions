@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 214  91  60 185 147 224 693 233  42 531 486 784 804 123 151 762 769 824 710 796 825 761  29  37 748  70 754  44 312
 132 735 107  10  77  11 183 747 114 663   8 782 830  26  48 708 816 779 603 688 746 795 228  73 332 201 743 290 734
 721  14 404 293  50  13 695 757 327 253 573 686 776  17  78 725 745 791 828 821 190 744  18  69 137  49   5 730 701
 712  82  74   4 105 175 722  66 378 236 180 763 820 624 323 692 724 781 719 806 727 315  15 714  38  21 651 689  53
 649 679  12 154  84 138 642 108 276 113 241 682 678 102 650 666 801 668 186 807 662 269  46 733 101  96 685 691 590
 760 660  33  22 129  67 648 706 121 271  57 794 579 599  65 507 677 511 633 793 758 576 259 365 218  47 610 728  16
 681 628 153 453 581 247  86 103 169 200  83 546 626 680 484 698  39 717 652 582 611 284 422 583  43  20 574 541 723
 750 505 231 148 631 198 591   1  19 110 111 632 756 635 545 700 810 772 620 653 621   3  30  62 192 204 447 560 672
 675 643 210 587 707 216 646 130 157  90 657 641 634 613 212 512 554 421 558 683  23 126 219   6  61 335 622 729 542
 530 515 298 491 658 223 665 283 339 455 109 584 513 423 596 462 674 532 134  35 474 146 322 639  94 222 567 673 553
 548 597 265 575 525 227   2 112 601 519 434 407 503 494 521 479 562 370 286 459 528 155 136 592 570 304 500 400 538
 445 475 390 518 544 362 623 133 510 135 359  72 382 483 466 381 551 340 696 375 443 163 168 568 625 383 469 640 509
 449 424 313 482 436 166   9 589 325 437 416 522 398 616 588 364 320 565 629 349 460 431 268 442 489 380 386 471 485
 367 492 432 420 392 410 457 343 480 348 481 472 463 384 446 520 372 563 495  85 347 534 514 430 517 353 336 377 379
 556 498 338 490 454 523 476 465 419 549 456 425 399 299 516 450 502 319 418 496 440  68 414 354 275 355 477 470 308
 508 468 374 302 397 559 356 376 799 369 330 344 358 389 488 438 187 250 342 497 411 415 478 435 742 427 405 326 439
 535 391 526 361 254 764 408 448 461 393 605 617 345 413 346 401 289 251 409 296 403 337 385 371 539 473 537 406 245
 307 366 506 341 272 543 805 654 615 433 318 266 334 394 287 387 464 739 417 310 540 292 536 324 252 458 277 331 441
 316 278 741 402 206 664 270 303 260 412 808 321 352 305 281 823 311 360 363 552 300 577 467 150 578 759 249 350 451
 149 309 644 333 598 586 244 661 711 550 189 199 280 561 234 267 282 569 593 329 285 499 713 608 226 690 396 230 274
 444 239 557 240 211 529 294 306 504 829 736 208 144 174 217 195 238 328 527 314 780 783 645 697 835 600 248 203 184
 170 357 676 229 788 687 279 813 704 703 694 172 164 225 670 301 178 167 501 288 159 555 702 263 630 388 351 152 243
 295 765 751 612 194 638 826 317 731 669 193  97 213 785 659  76  40  41 207 191 291 655 606 264 636 802 197 161 297
  80  95 607 789 139 429 202 737 740 571 738 128 220 822 209  25 156 173 262 122 141 585 840 841 812 580 255  79 832
 179 594 749 753 838 671 182 814 705 637 604 215 160 273 773 181 158 104 261 246 256 428 715 221 205 778  81 196 232
  92 237 836 800 752 572  89 533 768 726 242 493 118 177 718 145 162  64  56 116 667 395 818 803 602 833 257  63  75
  28 127 426 809 755 819 524 595 188 647 720 165 131  51 709 171  34 124   7  32  36 547 619 811 775 767 837  71 684
 100 839 797 614 487 777 452 618 627 235 566  93 142 732 786  58  24  27  52 120  54 716 766  98 564 827 176 774  88
 817 106 699 792 798 771 140 258 119 125 815  99  87 790 143 115 770  59  45 368  31  55 831 656 373 787 117 834 609

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00018e+07us (= 10001.8ms, 10.0018s)
Wall-clock time (full program): 1.00639e+07us (= 10063.9ms, 10.0639s)
Satisfaction error: 2
Number of search iterations: 2495
Number of local moves: 914 (including on plateau: 141)
Number of local minimum: 189 (including on plateau: 21)
Number of resets: 1
Number of restarts: 0

Problem in row 3: 721 14 404 293 50 13 695 757 327 253 573 686 776 17 78 725 745 791 828 821 190 744 18 69 137 49 5 730 701 => the sum is 12210 rather than 12209
Problem in row 12: 445 475 390 518 544 362 623 133 510 135 359 72 382 483 466 381 551 340 696 375 443 163 168 568 625 383 469 640 509 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  18  17 753   8 776  78 200 696  87 779 757 806 156 758 781 226 638 164 315 767  79  30 712  64 635 694   5 632 578
 823  53 741  46 788  33 147 130 196 805 798  28 789 760 751 295 657  85 158 814 240 434 726  20 747 209  82 144 710
  37 780   6  40  36 120 194  21 734 802 713 716 652 818 121 594  29 169 827 662 787 171 750 165  63 188 725 718 571
 675 162 752   7 627  61 178 314  70 555 772 785 728 723 152 250 737 199  16 514 289 102 745 129 777  93 495 554 748
 572 769 755  32  10 287 131 479 621 654 703 705 544 552 538 570 359 151 235 630 607 491 640  39 622 117 187 161  48
 605 575 735 664 685 329  62  31 176 637 738 764 100 590   4 275 740  45  12 782 463   2 435 407 690 746  22 796  99
 513 702 454 671 656 173 243 684 532 644 670 636 774 701 706  19 651 160  25 732 179   1   9  60 647  80  55 595 237
 634 743 507 678 499  43  74 346 241 568 468 633 619 655 482 331 587  59 122 731  86  27 756 307 645 186 107 427 648
 582 680 586 650 711 170 667  84 350 608  49 649 709 493 615  38 674  42 145 616   3 267 506 259 626 177  89 533 631
 342 542 593 512 551 395  15 561 613  14 618 556 530 540 283 356 683 516 140 485 381 159 536 105 405 528 418 247 585
 598 599 564 148 511 388 567 505 420 604  67 527 537 483 518 231 198 244 370 281 467 222 220 384 600 494 531 508 423
 566 563 686 653 337 258 496 252 155 550 543 317 535 461 380  95 577 470 300 584 228 174 248 190 547 330 601 620 492
 591  11 293 545 510  13 481 438 569 603 402 509 372 362 460 576 484 588 257 313 338 302 541  92 457 358 553 549 642
 422 345 581 459 625 432 558 184 486 371 404 413 366 296 436  75 280 500 340 354 466 504 565 308 311 415 602 519 592
 465 559 227 347 498 409 374 394 473 376 382 534 202 396 323 523 319 442 424 242 834 560 503 261 400 462 411 477 392
 414 312 497 387 410 431 487 464 433 416 406 397 233 762 501 526 520 298 333 389 378 403 401 478 393 515 332 357 336
 456 318 383 368 437 522 264 365 219 351 589 539 446 524 335 609 574 419 443 391 744 282 353 693 211 440 316 294 324
 327 303 364 253 386 471 398 836 597 448 348 390 277 472 175 628 328 452 373 367 490 739 379 408 297 804 284 349 266
 126 445 417 325 309 697 245 412 292 469 428 375 212  26 474 790 290 216 699 321 666 611 449 580 429 208 268 730 700
 489 272 195 232 426 502 813 341 724 256 192 197 820 238 451 270 234 334 733 822 688 704 306 658 153 444 344 135 236
 301 360 352 439 157 783 807 218 399 249 271 546 224 320 230 729 229 791 623 262 363 525 168 665 214 784 810 299  91
 453 207 127 447 182 610 691 775 668 239 369 114 377 322 185 714 274 672 721 441 687 833 385 529 263 191 276 154 304
 310 166 180 815 215 829 260 521 736 181 221 254 106 269 355 455 143 817 695 137 766 689 771 698 133 475 754 124 134
 288  81 285 799 206 488 742 278 562 119 251 223 803 113 808 707 128 768 480 125 458 579  51 765 112 573 800 326 291
 193 103 101 770 517 673 715 826 548 118 217 273 189 116 430 720  90 641 646 172 629 797 115 663 835 204 612  71 225
 110 279 150 246 183 816 617 837 830 210 343  97  68 205 146 450 201 821 793  56  47 824  96 763  66 809 557 828 761
 203 682 801 812  41 639 759 123 286 425 141 108 111  34 794 660 676 692 679  58 167 792  44 840  35 677 708 149  73
 265 795  72 717 778 727 305 255 109  54 213  24  69 163 643 421 811 681 722  23 614 361  50 841  77 339 659 825 596
 831 786  52 139 142 832 719 839  83 104 136  94 661  57 132  76  98 773 583 138  65 624 749 838 819 669 606  88 476

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00012e+07us (= 10001.2ms, 10.0012s)
Wall-clock time (full program): 1.00617e+07us (= 10061.7ms, 10.0617s)
Satisfaction error: 2
Number of search iterations: 2027
Number of local moves: 814 (including on plateau: 289)
Number of local minimum: 138 (including on plateau: 27)
Number of resets: 0
Number of restarts: 0

Problem in row 12: 566 563 686 653 337 258 496 252 155 550 543 317 535 461 380 95 577 470 300 584 228 174 248 190 547 330 601 620 492 => the sum is 12208 rather than 12209
Problem in row 22: 453 207 127 447 182 610 691 775 668 239 369 114 377 322 185 714 274 672 721 441 687 833 385 529 263 191 276 154 304 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 135 742 152  94 107  18 670 738 759 801 693 784 764 814  71 770  25 737 141 632 142   3 296  51 714 372 230  15 739
 258   7 789 168  23  47 426 496 730 173 758 728 775 733 762  95 802 780 134 761  58 342 312 345 647 323  83   1 653
 200 703 354  38 272  53 505 736 804 698 782 787 791 796 288 295 731 803 232  64  24 148 341  48 735 181   8  73 719
 321 725  12 303 202  31 159 205 662 671 713 723 813 648 745  85 603 726  10 495 100 700  74 260 628  37  99 687 772
 133 629 792  40 309 238  45 627 793 696 806 771 722 776  72  29 754 590  14 777 557  11 378  88 724 545 115  82  96
  32  16 599 211 155   6 425 247 674 649 626 715 580 673 114 604  13 658 424 625 654 692 217   9 645 383 126 708 729
 318 680 786 240  26  77  17 524 746 656  76 769 705 634 565 487 638 622 164 689  81 533  19 128 659 125 132 540 573
 491 712 681  92 269 169  49   5 521 617 302 643 695 691  86 602 461 588 109 768 668 136  98 393 147 402 702 562 550
 511 501 543 470 291 194 585 531  22 477 552 459 409 512 175 537 473 666 335 748  84 547 506 165  34 129 553 605 595
 466 620 621 567 163 518  67 306 644   2 479 468 472 515 154 657 591 661 361  44 445 549 546 204 522 137 193 560 677
 394 485 462 510 231 571 343 158 676 639 304 494 467 572 534 488 490 536 201 221 541 618  28 333  52  39 685 574 563
 514 373 478 228 102 566 520 513 538 623 502 307 329 263 408 500 665 535 293 525 379 633 380 330 474  68 544 616   4
 457 527 215 484 256 652 529 586 454 554 576 458 417 391 475 448  43  20 297 530 608 483 564 340  35 365 390 414 641
 434 532 469 435 262 351 481 437 113 570 503 220 389 465 598 450 444 436 584 316 583 476  21 397 499 298 482 589 375
 416 578 559 339 398 357 441 299 611 453 423 271 480 428 282 528 285 410 606 403 245 300 440 432 427 464 210 664 460
 374 508 370 582 548 555 497 344 359 609 308 388 539 833 196 407 313 396 108 363 486 385 413 489 336 471 331 412 289
 451 334 581 305 678 492 377 255 358 418 278 384 366 405 420 406 743 381 325 415 672 320 222 517 392 319 452 593 350
 455 456 718 421 630 362 433 704 277 411 509 831 353 364 360 253 273 799 493 328 243 267 280 523 192 401 349 317 207
 189 170 234 438 443 337 783 651 579 338 798 575 274 324 195 356 367 422 811 399  89 244 721 551 257 669 382 225 387
 347 199 400 348 650 679 767 587 185 741 268 213 327 371 248 180 386 251 191 821 254 368 694 498 429 781 419 281 326
 747 442 167 640 569 404 284 755 265 290 561 218 172 117 839 355 283 130 601 233 346 286 526 727 208 655 818 322 249
 710 250 314 631 788 270 688 740 236 166 120 174 197 242 797 156 106 209 825 310 376 809 332 516 246 828 757 294 122
 824 119 177 765 637 841 610 235 224 301 439 214 127 151 198 369 395 261 682 276 558 287 823 699 760 635 183 216 203
 805 116 259 636 707 837 778 226 212  54 176 186 190  66 794 709 252 138 607 239 206 121 732 449 779 800 720 227 188
 613  27  79 832 430 815 266 773 352 161 241 157 179  62 834 219 124  91 750 275 810 556 577 817 311 596 838 237 187
 171 112 292 431 734 675 667 162 150  57  60  55 446 123 711  90 315  36 615  97 519 753 717 614 597 756 819 683 752
 820  75 808 507 749 646 542 118  65  46  70 104  42  50 619 790 840  56 785 264 830 178 592 826 103 663 807 184  30
 160 744 229 812 751 612 145 146  61  59  63  80  78 149 568 684  93 131 795 447 816 774 594 697 504 624 600 706  87
 463 827  69 642 829 836 110 105 139 279 223  33 111  41 101 660 701 140 716 144 835 690 766 763 153 143 182 822 686

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00623e+07us (= 10062.3ms, 10.0623s)
Satisfaction error: 2
Number of search iterations: 1818
Number of local moves: 830 (including on plateau: 282)
Number of local minimum: 120 (including on plateau: 40)
Number of resets: 0
Number of restarts: 0

Problem in row 12: 514 373 478 228 102 566 520 513 538 623 502 307 329 263 408 500 665 535 293 525 379 633 380 330 474 68 544 616 4 => the sum is 12210 rather than 12209
Problem in row 19: 189 170 234 438 443 337 783 651 579 338 798 575 274 324 195 356 367 422 811 399 89 244 721 551 257 669 382 225 387 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 775 289 155 711 724  39 727 109  51 766 714  75  33 301 103 740 592 187 354  11 756 762 793 789  18 754  79 799   3
 148  96 414 718 345  38 721 190 544 765 292 552 675 709 265 730 287 162 228   9 699  95 196 749 672   6 725 678 501
 217 670 737 835 208  20  36 343 137 344 755 101 767  84  69 777 176 291 770 650 133 293  48 753 761 747 561 673 253
 316 358  16 298 205 664 731 134 250 605 312 538 813  78 656 723 268 614 707  15 773 772 736 100 556   1 303 659   8
  80  24 311 402  32 644 132 288 542 586 557 318 750 117 430 647 122 138 687 142 788 728 580 110  65 733 758 785 713
  41 597 566  42 143 115 206 128 403 712 486 549 676 780 786 360 126  74 682 540 583 677 631 174 159 560 575 598 240
  50  30 167 278  46 594 810 185 528 553 515 475 628 406 698  94 235 130 261 720 695 642  83 618 601 693 158 613 703
  70 204 102 719  58 660 154 326 805 603 584 574 685 328 667 215 239 145 400 498 200  43 521 543 565 507 738 469 587
 123 651 296 533 149 178 443 256  81 546 488 759 506 620 643 207 113 131 448  17 722 635 636  44 503 821 763 578 319
 569 686 745 593 237 246 339 346 589 752 646 218 409 373 466 105 120 393  66  53 680 627 502 389 572 513 165 340 470
 164 674 496 446 638 411 818  68 485 233  22 632 526 490 611  77  87  21   2 624 595 338 437 523 508 559 658 548 518
 568  34 511 189 541 468 378   7 606 434 607 461 558 499 504  73 551 271  19 252 616 610 640 472 476 391 487 590 396
 555 359 492 320 337 417 743 532 439 489 450 323  31 570 309 234 127 478 395 457 212 336 467 809 412 231 633 479 573
 539 423 440 474 388 562 387 715 480 397 655  52 335 382 216  63 295 505 588 351 509 364 514 519 361 471 334 366 524
 608 456 604 327 429 321 729  35 654 697 428 114 531 454 171 453 413 392 266 516 420 375 536 376 455 362 525 121 441
 263 494 527 227 435 407  92 537 418 331 209 352 383 244 444 166 748 399 260 213 276 433 517 806 787 800 808 369 264
 284 424 622 666 431 465 390 464 427 491 554 692 175 305 270 696 416 688 422 368 160 451 341 653 377 348 259 179 191
 230 401 267 535 313 500 275 449 365 477 269 838 577 564  27 803 637 473 706 460 398 304 342 596 245 512 307 153 186
 493 483 322 774 306 374 168 380 463 404 825 626 372 831 294 257 462 357 802 410 139 353 701 370 274 280 242 150 297
 769 225 452 363 211 497 229 567 379 630 329 563 283 324  37 381 751 581 694 795 106 300 243  14 837 279 223 776 371
 302 742 282 349 801  88 764 735 734 286 522 214 459 248 238 679 791 827 258 710 669 197 183 219 118 232 108 355  99
 481 778 442 299 815 330 202 840 534 290 310 419 222 816 332 458 716 792 136 199 161 732 236  40 146 384 184 198 717
 820   4 550 333 641 251 836 757 220  60 405 629 273 119 609 347 124 652 495 438 241 188 768 432 545 314 192 182 784
 798 201 247 386 690 817 746 315 781 156 350  13 285 157 385 683 826 834 172 170 421 163 576 663  56  49 812  10 447
 177 482 804 262 833 224 135 790  91 147  82 822 281 814 272 484 668 829 823 700 221 249 144 107 317 140  85 415 811
 621 585  57 116 657 741 193 623 226 125  98 254 151 705 771 520 665 579 547 436  97 356 112 671 277 308  72 839 807
 782 612 824 744 602 582  86 625 169 129  25   5 152  89 639 425 691 689 173 830  62 325  93 591 634  26 794  28 783
 704 819 702  76 394 760  55 726 779  90 510 615  54 661 648 367 708  47 645 828  45 681 104  67  71 617  61 195 180
 662 408  59 194 599 796 684 739  29 111 210 426 619 141 649 445 255 530 203 797 832 181 529  12 841 571 600  64  23

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00019e+07us (= 10001.9ms, 10.0019s)
Wall-clock time (full program): 1.00628e+07us (= 10062.8ms, 10.0628s)
Satisfaction error: 4
Number of search iterations: 2215
Number of local moves: 1004 (including on plateau: 316)
Number of local minimum: 191 (including on plateau: 31)
Number of resets: 1
Number of restarts: 0

Problem in column 5: 724 345 208 205 32 143 46 58 149 237 638 541 337 388 429 435 431 313 306 211 801 815 641 690 833 657 602 394 599 => the sum is 12208 rather than 12209
Problem in column 22: 762 95 293 772 728 677 642 43 635 627 338 610 336 364 375 433 451 304 353 300 197 732 188 163 249 356 325 681 181 => the sum is 12210 rather than 12209
Problem in diagonal 0: 775 96 737 298 32 115 810 326 81 752 22 461 31 382 171 166 416 473 802 795 669 732 768 663 317 308 794 195 23 => the sum is 12210 rather than 12209
Problem in diagonal 1: 3 678 561 1 65 174 83 43 722 53 2 271 127 63 171 244 175 838 825 630 734 840 836 817 833 116 824 819 662 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 136  52 203  13 763 817  35 458 725 668  45 839  70 714  85 808  27 530 840  32 428  89 246 792 837  77 595 795 490
 806 797 611 761 700 766  83  47  82  96  64 538 832 357  53 724  50 699 691  30 820 615 117 150 747  56 579 257  81
  74  71 809  49 798 772  46 803 754 154 192 807 826 835 163 238  99 191 145 417  72  88 321 768 775 471 841 607  23
  25   4 823 794 735 801  40 358 676 148 153 104 121 435 128 703 332 680 715  38  26 280 781 692 557 836 478 586 160
  39  58 547 318 764 359  33 702 785 825 254 214 524 392 108 828 156 670 815 135 721 167 441 173 653 127 587 705 110
 169 711 580 350 696 446 101 178 767 141 205  78 161 734 260 730 155 771 180 102 793 181 622 833 651 322 758 289 245
 159 232 661 164 418 386 830 398 791 812   3 268 177 578 188 593 149 712 122 198 733   8 800 519 467 503 831 197 312
 147 227 485 273 759 258 769 658 690 166 132 556 151 829 297 307 346 222 270 271 284 816 139 673 591 220 632 745 296
 838 308 628 231 565 821 171 805 436 360  91 720 265 726 248 324 368 187 315 276 396 288 393 234 384 233 646 722 230
 334 218 515 207 552 406 283 773 608 131 212 262 355 645 353 215 338 389 341 237 686 225 362 540 599 695 757 252 719
 361 243 802 282 621 413 523 274 663 278 223 186 286 319 420 660 399 383 275 704 681 311 277 211 631 394 326 824 239
 370 106 819 219 449 348 481 431 508 347 450 818 331 459 439 541 235 526 137 351 432 300 323 179 510 827 531 240 502
 109 448 330 345 410 443 264 755 731 194 403 682 256 583 437 291 495 749 371 305 272 454 349 320 626 298 548 253 488
 473 342 224 377 461 402 335 303 534 765 356 558 528 302 504 741 455 440 390 438 434 210 520 306 521 381 475  61 373
 416 310 397 466 379 422 395 494 563 408 412 486 569 545 442 482 375 247 709 365  12 542  19 414 343 544 388 514 551
 492 407 505 601 453 281 366 294 445 447 564 285 316 293 573 491 352 427 527 391 559 340 313 405 518 385 451 374 354
 263 560 468 584 469 133 609 522 382 555 507 456 344 208 462 364 174 401 465 543 452 464  37 536 269 424 576 470 512
 474 597  15 667 255 199 415 493 369 463 600 378 421 328 423  75 309 639 501 585 419 594 571 333 299 411 380 511 484
 457 598  41 549 301 625 376 115 206 684 472 329 506 143 479 627 529 444 592 487 574 496 158 476 327 537 184 336 561
 532 674 250 637 425 618 483 175 120  43 671 325 509 170 499 242 656 387 644 201 572 630 400 546 261  69 409 689 372
 694 539 172 516  28 185 623 317 433 517 654 116 554 196 619 577 525 119 533 566  22 553 679 588 129  90 339 633 693
 685 480  66 500 266 193 612 430  92  29 655 614 728 112 834 624 742 498 740 550 602  51 606 460 221 105  20 126 568
 770 648  84 603 226 125 363  73  93 732 822 477 582 190 570 123 723 100  87 710 683 814 489 259 236 739  48  80 760
 665 629 634 716 244 202 664 182  98 784 562 669 713 228 647 279 738  60 513 575 168 636 567  76 176  11 183   1 589
 762 635 217 605 107 746 790 590  36 657 535 617 596  21 649  57 678  79 113 666 251 641 241 229  14 687 152  94 744
 581 698  55   7 144  31 804 337 130 140 662 134   6 727 778 267 643 659  68 613 743 796 779  17 314 786  44 604 642
 717 650 195 620 138  24 789 429 165 780 774  18 638 287 729 114 701 688 304 799 204 707  95 146 124 497   2 200 675
 652 295 706 750  67 290 737 753 118 103 748 610  34  97 736  42 783  63  54 811 111 751 787 616 216 708 157 404  10
   9 672 367   5  16 697 189  62 209 782 788  65 810 756  86 142 677 249 752 813  59 162 777 718 213 776 292 640 426

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00019e+07us (= 10001.9ms, 10.0019s)
Wall-clock time (full program): 1.00627e+07us (= 10062.7ms, 10.0627s)
Satisfaction error: 2
Number of search iterations: 1860
Number of local moves: 661 (including on plateau: 202)
Number of local minimum: 155 (including on plateau: 23)
Number of resets: 0
Number of restarts: 0

Problem in row 5: 39 58 547 318 764 359 33 702 785 825 254 214 524 392 108 828 156 670 815 135 721 167 441 173 653 127 587 705 110 => the sum is 12210 rather than 12209
Problem in row 18: 474 597 15 667 255 199 415 493 369 463 600 378 421 328 423 75 309 639 501 585 419 594 571 333 299 411 380 511 484 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  29 342 724 819  70 785 745 130 139 228 776 774 820 720 728 782 212 805  21 165 223  34  41  48 351 822  26  43 807
 179 410 790 746  75 742  69 809 252 213 802 709 792 762  45 793 104 656 429   3  88 797  10  30 196 700 216  15 777
 292 371 126 821 357 798 119  72 629 147 460 168 800 695 815 759  35  36 719   4 707 778   7 459 282 767  12 175 799
 325 323 362 162 103 733 408 754 260 118 732 739 587 315 756 665  23 418  79 309 758 701 121 676 219 691 178   9 685
 207 387 787 697 690 734 666 736 154  51  96 392 693 181 611 661  80 677 647   2  22 681  13 641   6 687  39 183 788
 272 276  18  38  76 679  74 604 265 464 650 607 689 298 638 708 694 715 705 109 648 540 612 171  67 608  94 289 601
  78 148 539 744 556 698  24 500 639  85 636 660 684 205 678 670  11 613 569 628 713 637 161 134  31 577 167  60 364
 136 158 193 773 619 566 673  20  86  49 658 626 615 588 714 645 100 563 630 141  19  42 597 591  52 562 623 468 702
 116  81 492 609 568 522 551 530  50 105  37 484 571 241 491 593 548 502 285 621  61 703 625 518 301 573 497 336 598
  83  63 565 564 581 646 632 674 114  14  66 635 549  71 599 536 334 533 516   1 473 546 610 618 120 682 584 230 570
 506  55 592 434  57 486 508 322 331 509 194 585 606 186 642 138 510 567  87  17 590 572 467 504 513 476 602 557 596
 512 214 545 470 439 589 547 333 541 550   5 354 586  93 177 561 157 529 394 580 471 461 452 347 317 538 481 523 443
 435 284 576 534 430 253 531 144 671 401 115 511 404 498 514 505 254 480 559 419 142 441 416 337 353 528 544 423 507
 483 520 444 453 457 386 458 482 380 384 490 583 277 402 499 515 373 455 433 479 413 424 411 211 463   8 405 521 400
 543 396 248 488 420 478 442 426 448 379 542 414 517 465 519 427 474 450 422 352 466 374 412 437 259 306 368 398 339
 447 436 409 535 415 355 475 462 307 449 417 472 296 406 316 446 574 403 382 524 389 346 425 503 407 493 360 395 365
 393 712 370 372 244 397 770 494 686 525 293 281 469 327 359 377 431 335 270 319 445 369 326 332 552 348 324 320 769
 330 765 358 376 438 477 250 267 311 554 279 795 295 440 349 366 622 836 350 388 432 261 239 375 421 283 428 620 304
 680 749 232 391 318 381 747 164 361 753 837 286 208 667 314 202 303 390 662 287 231 273 176 300 751 328 367 600 251
 761 786 256 305 236 258 340 155 808 831 313 215 310 766 356 268 727 294 338 692 399 363 343 329 716 271 221 240 312
 655 789 345 229 344 203 226 699 813 825 269 780 308 280 243 537 383 234 227 302 640 242 237 262 669 238 266 740 224
 624 594 257 264 299 180 195 814 341 829 653 200 290 750 163  98 275 245 451 818 156 456 634 288 578 210 768 657 122
 743 617 783 111 775 184 841 274 706 558 644 291 185 485 133 378 721 235 169 527 160 192 255 191 723 278 654 297  99
 711 501 197 152 198 146 187 199 704 560 741 263 117 731 124  68 735 204 209 784 526 575 791 757 668 102 225 812 222
 631 664  82 129 827 166 838 218 804 151 182 174 201 688 190 153 659 140 247 582 755 220 752 188 803  44 839 781 101
 605 643 170 127 737 150 532 206 496 495 595  25 107 246 137 131 718  73 771 729 172 217 772 683 489 764 616 763  40
 627 249 835 106 811 143 159  58 132 614  92  64  62 233 125  28 652  46 817 810 730 826 760 649 675 135 832 816 123
 696 487  90  97 321  27 149 833 725 717 603  89  59 454 145 108 722  65 726 823 801  54 806 834 555  77 633 385 128
 110 189 824 663 748  47  53 830  56 651  32  33 112  16 828  91 779 710  95 794 579  84 738 796 672 113 840 553 173

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00026e+07us (= 10002.6ms, 10.0026s)
Wall-clock time (full program): 1.00635e+07us (= 10063.5ms, 10.0635s)
Satisfaction error: 2
Number of search iterations: 1749
Number of local moves: 583 (including on plateau: 150)
Number of local minimum: 151 (including on plateau: 27)
Number of resets: 0
Number of restarts: 0

Problem in column 15: 728 45 815 756 611 638 678 714 491 599 642 177 514 499 519 316 359 349 314 356 243 163 133 124 190 137 125 145 828 => the sum is 12208 rather than 12209
Problem in column 17: 212 104 35 23 80 694 11 100 548 334 510 157 254 373 474 574 431 622 303 727 383 275 721 735 659 718 652 722 779 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 291  43 817 739 450 810 728 519 841 132 363 123 687  20 763 111 808  38 159 225 711 147 698  65 813  61 114  99 834
  44 835 104 772 230 746 158  77 840 832  71 193 670 135 680 713 136  26 103 660 458 120 760 357 582 213  60 823 811
 137 167 839 816 263 614 233 646 346  52 107  36 765 256 730 561 812 170  93 560 622 174 800 457 217  70 837 579 250
 799  58  64 686 453 794 633 814 145 825 165 200 616 241  81 781 691  55  76 436 692 142 538 665 341 833 108 156 121
 220 222  83 818 820 694 155 134 838 131 285  47 779  23 195  53 791 116 503 757 798 191 790 668 827 164 182 776 149
 259  78 218 247 203 750 162 160 608 275  95 724 221  67  87 703 809 807 388 803 506 139 585 836 620 281 830 607 141
 207 172 288 831 785 683 759 829 276  94 206  29 424 373 824 684 190 287  27 566 613 235 344 751 689 228  48 563 204
 168 390 219 267 274 611 801 236 385 216 178 143 586 407 658 795 133 371 199 423 786 828 784 271 777 322 187 667 127
 300 273 364 280 255 590 787 526 748 105 166 210 783 201 360 609 232 179 299 617 822 227 655 319 277 402 309 767 547
 237 249 338 140 260 327 408 109 270 335 215 185 821 334 404 700 718 431 209 770 610 321 792 802 715 169 362 671 307
 231 355 330 246 721 387 804 253 768 325 161 512 714 409 296 352 542 295 314 211 265 392 595 806 421 188 393 734 189
 310 573 394 292 243 293 429 753 615 643 439 252 618 367 492 383 332 329 154 279 455 466 656 443 298 343 411 380 567
 176 679 305 289 358 584 422 384 528 323 619 395 558 524 349 399 391 234 268 467 175 345 529 379 442 545 502 551 489
 789 251 365 312 308 414 342 796 340 192 428 501 361 435 318 515 290 461 434 403 386 418 544 375 420 523 382 415 491
 229 406 426 339 483 320 313 571 513 356 416 440 374 347 445 396 248 486 427 397 505 269 448 587 499 600 410 500 459
 401 504 449 294 576 398 264 389 487 336 400 405 479 240 366   4 516 372 531 589 495 462 369 490 507 532 548 475 331
 474 465 574 485 555 525 353 493 302 678 578 554 278   6 223 517 212 583 359 599 604 258 311  85 476 464 460 441 297
 456 282 530 602  42 451 598 463 488 368 612 317 257 540 478 511 659 152 481 306 245 452 244  89 484 603 437 509 553
 559 635 661 581 580 242 129 417 254 438  21 537 419 430 588 496 473 641 774   1  19 672 301 543 521 324 432 151 370
 510 572 482 470 570 377 425 522 186  35 677 316  74 649 533 568 444 596  92 381 535 454 333  41  15 654 597 469 632
 549 650 628 447 101 214 601 480  68 733 556 494 205 629 550 433 546 745 706 102   8 717 261 497  49 704  33  57 446
 575 707 762 112 741 562  63 315 351 593 788 705 118 709 642  46  14 117 771 471 198 541  79  54  59 536 640 348 592
 744 569 557 722 719 171  62  16  18 624 565 653 196 520 564 626 639 644 647  40 552 539 128 378 376  50 669  24 197
 477 663 472 119 630   2 238 693 621 637 527 651 163 634 652 122  91 627 508 180  17 726  86 413 144 518 755  82 761
 695 699 793 412 184 354  45  10 350 657 766 623  31 769 224 126  69 636 729 326 130 666  97 534  13 708 676 239 648
 764 673   9 124 727  56 328 605 106 674 685 732 153 701  88  28 720 697 756 638  30 591 150 138 631 681 303 337  84
 740  51 266 662 577 157 675 682 778 773 625 752  37 688 498  25 115 514 712  90 148 710  66 183  98 664   7 173 743
 606 286 125  32  96  80 826 283  39 815 805 742 645 797 110 226 304 819 736 731 749 735 194 208 202 113 737  22 146
 262 702 747  73   5   3 468  34 100  12 690 738 177 758  11 725 284 782 754 181  75 272  72 775 696 716 780 594 723

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00025e+07us (= 10002.5ms, 10.0025s)
Wall-clock time (full program): 1.00631e+07us (= 10063.1ms, 10.0631s)
Satisfaction error: 3
Number of search iterations: 1507
Number of local moves: 651 (including on plateau: 160)
Number of local minimum: 125 (including on plateau: 19)
Number of resets: 0
Number of restarts: 0

Problem in column 16: 111 713 561 781 53 703 684 795 609 700 352 383 399 515 396 4 517 511 496 568 433 46 626 122 126 28 25 226 725 => the sum is 12208 rather than 12209
Problem in column 18: 38 26 170 55 116 807 287 371 179 431 295 329 234 461 486 372 583 152 641 596 745 117 644 627 636 697 514 819 782 => the sum is 12210 rather than 12209
Problem in diagonal 1: 834 823 837 833 827 836 344 828 822 770 314 329 391 515 445 240 278 317 21 35 68 315 62 2 184 124 266 286 262 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  74 791 594 787 206 735 766 245 106 271 236 583 216 330 774 142 343 278 808 431  27 762 784 138 400 204  78 283 817
  69 799 757  17  35 775 153 786 126 822 176 329 198 826 824 215 211 156 827 756  38 730 806 186  12 765 793  20   2
 743 707  63 805 151 711 202  11  75 760 301 572  51 317 733  67  57 120 783  22 724 788 829   8 767 722 237 133 750
 706 708 336  28  36 790 746 728  85 773 101 168 110 678 696  96 162 140 466 689 701 641 710  66 181   1 716 225 726
 693 651   3 662 331 709 712 224 105 801  55  59 220 166 723 691  50 243 675  47 415 777 636 416   7 740 739  64 595
 673 699 223 622  46   6 713 114 263 688 588 102 165 321 683 195 208 277 656 700 734 670 625   4 571 676 100 244 643
 755 340  93 672 158 623 671 307  92 650 591 184  16 290 616  95 203  23 744 640 600  30  37 207 697 772 742 624 737
 749 603 222 705 227 682 556 721 172 668 568  29  54  91 638   9 702  87 639 648 635  72 541 532 103 677 182 111 586
 481 528 149 644 159 637 500 255 270 601 558 189 564  80 632 585 597  97 507 441 332  52 584 567 606 539 310 194 551
 654 562 200 459  89 425 537 247 320  10 465 420 629  19 548  14 478 235 559 661 587 720 460 552 488 620 136 604 511
 372 609  13 590 218 497 514  71 333 517 474  33 578  76 502 569 653 555  40 505 544 566 596 565 563 463  98 534 561
 490 525  84 524 269 543 531 160 300 339 652 512 471 522 454 487 530 356 574 527 190  44 411 423 510 516 192 575 498
 461 513 119 475 341 520 453 577 374 492 468  31 521 428 462 287 417 430 379 284 533 526 545 612 486 398 518 538  21
 349 570 523 482 279 442 455 536 380 494 371 479  26 491   5 480 495 268 509 358 472 508 412 493 364 611 501 467 389
 464 378 399 550 433 476 413 426 335 504 406 401 437 484 407 540 443 438 360 315 357 409 385 418 345 489 410 355 432
 314 368 457 376 503 327 354 352 519 342 258 529 496 424 598 485 388 447 429 384 373 440 836 387 436 367 281 391 348
 370 350 669 266 446 253 324 615 560 249 403 404 299 414 362 366 450 607 312 435 840 298 392 439 402 397 582 344 361
 294 262 811 434 576 238 452 326 549 309 444 681 316 667 347 365 390 456 308 242 542 322 302 422 405 408 573 393 375
 323 359 369 187 748 394 234 589 535 553 785 802 304 821 178 318 254 377 483 286 291 306 337 382 199 445 752 346 252
 177 289 776 295 506 325 273 608 759 828 381 396 313 617 193 386 351 613 383 395 231 147 217 580 698 265 303 694 210
 233 470 311 285 633 338 334 257 363 319 132 800 353 794 171 226 764 692 229 328 448 280 267 664 796 228 628 634 232
 164 293 666 240 645 305 161 738 727 297 130 753 809 499 163 719 718 665 196 205 259 451 127 754 209 221 557 256 282
 276 250 427 174 626 157 816 419 834 274 832 646 763 592 188 789 751 657 288 260 131 248 239 185 212  62 261 685 167
 146 150 823 128 715  99 179 292 778 241 219 780 745 768 272 581 602 680 554 838 264 183 137 296 169  45 112 684 729
 251  94 458 134 779  81 191 695 725  68 807 642 630 473  41 818 686 655 125 107 135 599  56 771 831 115 515 619 108
 143 170 579 815 781 155 803 180 477  58 214 769 795 631 148 627 213 747 141 104 116  79 124 792 835 804 275 610  24
 118 121 839  34 833 129  43 714 736  82 732 469 813 173 123 690 797 660 122 798  88 810 593  73  86  15 814 621  83
 830  18 825  61 782  25  70 819 663 139 717 201 703  42  49 820 144 546  48 649 841 674 109 618  90  39 687 230 770
 837  32 421 758 658 812  53 197 647  60 145 246 614 175 679 547 152 704  65 154 761  77 113 659 741 605 117 731 449

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00027e+07us (= 10002.7ms, 10.0027s)
Wall-clock time (full program): 1.00637e+07us (= 10063.7ms, 10.0637s)
Satisfaction error: 2
Number of search iterations: 1573
Number of local moves: 677 (including on plateau: 218)
Number of local minimum: 103 (including on plateau: 20)
Number of resets: 0
Number of restarts: 0

Problem in column 9: 106 126 75 85 105 263 92 172 270 320 333 300 374 380 335 519 560 549 535 759 363 727 834 778 725 477 736 663 647 => the sum is 12208 rather than 12209
Problem in column 23: 784 806 829 710 636 625 37 541 584 460 596 411 545 412 385 836 392 302 337 217 267 127 239 137 56 124 593 109 113 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 308  83 807 822 344  42 755 746  15 154 753 791 725 781 107  39  13 812 110 547 821 322 179 291 731 142  76 123 770
  63 387 810 679  64  38 799 341 761  52 670 813 752 129 798  36  25 759 227  54 748 778  37  95 823 648 773  34  16
 174 275 145 760  94 767 774 250  17  11 758 766 776 750  84 171 740 736 423 783 745  78 281  30 325 739  41   9 707
 257 111 771 777  10 692 626 139 665 717 711  29 349 728 696  85  12 416  98 691 642 389 158 138   2 786 518 267 729
  40 121 119 795  24 104  58  68 806 412 681 708 607 814 747 671 797 632 225 245 730  27  65 271 331 705 660  28 718
 278 682 727 622  80  18 198 654 751 617 676  35 631 661 606 239 636 637  72 715 260  45 170   8 112 663 589 114 713
 258  75 485 658 576 678   4   1 329 602 621   6 582 615 687 195 653 652 192 619 672 143 249 128  67 633 646 597 586
 255 153 641 699 585 571 286 146 629 690 530  66 418 616 595 491 553 573 124 562 693   3 105 132  32 560 569 277 655
  77 564  97 611 529 657 190 504 473 544 463 640 539 584 635 604 599 662  88 587  23  53   7 199  55 570 482 545 628
 514 487 624 549 510 575 375 579 568  87 520 574 237 512  92 630 513 542 197   5 480  99 516  31 180 550 580 527 556
 499 498 465 483 424 524 300 103 448 609 447 537 127 638 484 492 434 521 355 548 354 348 486  50 274 289 440 558 474
 259 623 593 453 598 596 232 528 502 315 583 136 102 496 390 519 409  43 333 525 592 557 396  20 240 511 460 608 590
  14 540 336 451 421 588 172 455 441 517 490 508 230 507 471 457 523 501  49 402 468 567 522 469 304 477 452 362 515
 133 577  33 506 554 413 565 393 555 420 535 338 415 351 312 428 442 481 340 509 551 410 419 422 314 462 404 449 478
 566 459 382 405 392 444 395 388 403 443 433 543 472 346 339 204 526 406 494 467 476 425 367 436 479 305 400 438 376
 503 350 470 320 407 466 373 307 324 489 323 439 694 497 414 330 347 379 283 458 488 417 371 594 464 431 450 365 456
 287 280 546 296 659 295 559 610 377 437 408 352 779 313 270 386 201 394 381 326 426 384 357 572 837 361 222 538 356
 241 802 205 446 401 432 732 427 826 317 319 353 533 378 242 318 435 328 808 288 445 273 298 686 380 254 363 321 358
 613 301 359 265 282 311 695 792 332 327 836 256 244 302 268 248 185 397 563 263 209 796 345 399 839 639 233 600 309
 625 272 343 285 675 398 500 762 252 724 299 236 243 297 337 234 391 217 495 757 334 294 368 743 605 247 246 819 211
 534 385 188 284 316 264 561 668 677 279 342 191 591 160 262 698 184 196 737 175 735 734 772 733 720 216 303 157 147
 710 749 293 212 148 223 674 581 374 219 134 187 723 210 276 370 116 335 656 220 194 800 840 744 784 364 165 618 290
 789 266 218 292 261 235 454 189 141 369 130 742 505 815 831 306 207 768 738 208 152 644 841 664 552 269 310 155 159
 805 176 714  90 803 775 532 685 200 168 137 461 166 164 229 769  71 215 820 430 178 173 680 793 651  96 238 804 186
 722 741 224 106 818 228 669 643 214 475 115 809 253 177 181 787 156 202 721 167 131 689 612 645 360 163 161 834 206
 765 614 203  89 801 251 109 666 183 231 144 756 193  57 140 780 627 125 649  60 536 811 673 716 603 835 120 372 100
 701 162 366  82 113 764 122  62 824 411  26 169 150  86 828 790 827  61 634 816  59 684 620 704 531 108 782 683  44
 726 829 213  81 719  22 383 429 101 785  69 650 126  74 667 706 833 149 697  79  48 688 712 702 541 135 817 182  46
 493 647 832  91 601 838 117  93  21 788  56 118  47 151 221 226 754  70 700 703  19 578 763 794  73  51 709 825 830

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00023e+07us (= 10002.3ms, 10.0023s)
Wall-clock time (full program): 1.00638e+07us (= 10063.8ms, 10.0638s)
Satisfaction error: 2
Number of search iterations: 1533
Number of local moves: 817 (including on plateau: 314)
Number of local minimum: 102 (including on plateau: 34)
Number of resets: 0
Number of restarts: 0

Problem in row 19: 613 301 359 265 282 311 695 792 332 327 836 256 244 302 268 248 185 397 563 263 209 796 345 399 839 639 233 600 309 => the sum is 12208 rather than 12209
Problem in row 23: 789 266 218 292 261 235 454 189 141 369 130 742 505 815 831 306 207 768 738 208 152 644 841 664 552 269 310 155 159 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 461 797 679 752 719 618  51 670 116 628 685 729  28  85  19  26 741 144  16 603 589 177 165  52 453  83 543 745 835
 258 815 229 671 673 619  77 110  92  68 806 839 114  56  89 226 736 277  90  59 669 748 167 601 822  32 754 840 672
 770 597 832 785 763 629 162 814 163 501  80 602  84  81 232 136 181 198 621  58 829 690  79 734 686 141 370 123 268
 760 570  96 796 732 655  64 127  48 657 203 654 133 697  33  27 768  54  78 623 807 761 192 189 695 800 550 119 321
 817 548 117 217 541 577  69 227 199 696 616 834 269 415  62  60 790 149  97 725 837 207 381 705 361  17 721 274 681
 787 647 174 104 781 146 145 152  74 831 173 811  88 518 128 331 762  75 161 539 801 789 191 805 356 239 743 170 688
 386 742  61 120 678 704 830 793 298 272 271 833 138 359 311 158 836  70 255 534 622 194 196 708 755 118 557 262 148
 332 699 156 233 223 585 211 816 294 668 115 325 295 588 169 201 482 234 248 767 363 712 172 820 740 253 691 154 663
 249 664 267 166 731 794 299 243 810 823 137 558 190 338 256 288 254  86 301 744 504 212 788 139 424 308 838 153 645
 724 337 347  55 596 537 242 397 209 827 382 772 252 506 380 224 368 320 281 808 572 180 303 309 364 263 733 130 791
 650 593 470 431 245 803 385 225 247 680 341 266 297 598 310 313 251 445 780 493 459 323 292 446 486 316 367 433 264
 280 502 475 293 739 358 349 261 674 237 278 328 314 590 357 246 352 260 360 384 841 478 825 286 344 378 423 215 782
 150 231 329 549 496 818 302 342 484 221 527 354 535 300 391 457 525 430 481 452 296 401 330 512 545 413 394 350 594
 676 439 250 450 567 322 236 469 514 395 454 327 473 197 408 219 448 396 326 435 559 499 312 402 661 483 425 463 404
 441 372 282 477 410 346 369 259 428 561 335 362 291 591 411 495 418 383 521 429 375 438 377 336 580 610 334 456 522
 183 195 426 432 305 400 451 515 687 276 365 455 615 507 487 353 406 348 443 497 244 554 366 460 270 595 417 569 388
   1 517 213 532 510 436 393 351  41 390 467 392 333 275 414 427 476 635 289 574 489 416 485 634 389 576 513 398 643
 387 458 472 479 471 442 345 399 531 412 641 159 638 155 508 492 556 503 566 147 240 466 447 533 437 420 257 407 241
  91 551 584 409 371  82 526 586 516 107 480 444 230 343 571 376 612 632  46 494 440 542 582 405 488 465 204 523 509
 605 287 474 530 108 103 646 677 608 379 528 100 562 176 583 723 464 573 519 222 200 498 284 620 193 798  73 552 124
 659 216 468 607 186  93 649 665 315 160 644 238 555 168 713 529 434 419 666  29 324 613 592  67 210 675 106 600 609
 524  49 511 624 187 536 640 648 579 544 490  47 599  65 700 702 306 667 653  39 140 131 611  31 560 575 202 707 142
 578 113 606 500 520  57 711 614 617 208 633  43 692 563 694 658 121 547 660 185 279 564  11  23 235 735 129 540 373
   6  18 626 631  34 105 802 630 122 178 727 374 718 505 538 652  72 783 714 285 135  12 568 604 218 795 171 765 421
 126  42 751 627   9 175 747  13 642  98 773  44 684 422 750 799  94 709 710 639 283 722 759 625  37 565 304   7  53
   5 656 813   3 125 553 682 756 728 636 143  76 716 753 491 775 151 651 764 184  24  35 546 637 102  10 273 757 164
 730 340  15 689  38 339 290 228 587 220  66 581 792 812 717 776 188 778  21 403  36 101 769 319  50 784 771 698  71
 462   8 662  25 134 112 715  40 777  87 819 307 746 720 701 774  99 706 738 109  95 683 693 205 703 758 132  20 179
 111 206 824  22 317 265 821 182 809 449  30 355 828 826 786 766 318 737 804 749 157  63 726   2  45   4 214 779  14

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00014e+07us (= 10001.4ms, 10.0014s)
Wall-clock time (full program): 1.00726e+07us (= 10072.6ms, 10.0726s)
Satisfaction error: 1
Number of search iterations: 1406
Number of local moves: 628 (including on plateau: 249)
Number of local minimum: 114 (including on plateau: 33)
Number of resets: 0
Number of restarts: 0

Problem in diagonal 0: 461 815 832 796 541 146 830 816 810 827 341 328 535 197 411 353 476 503 46 222 324 131 11 604 37 10 771 20 14 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 785 117 528 616 155 832 544  87 839 522 102 623  85 216  90 101 823 787 123 719 151 655 223 446 200 156 796  73 815
 392 753 826 813 348  43 804  55 763 467 648 207  68 637 118 184  39 744 133 631 106 589 278 770  93 140 653  95 812
 112 811  38 417  64 829 179 149 760 182 722  46  74 264 138 489 836 740  80 699 613 731 737 838  52 146 756 566 141
 113 831 807 794 745  58 150 704 104  53 649 119  84 617 183 153 167 534  78 792 776 773 124 193 805 689 108 825 181
  92 191 132 761 822 806 169 263 788 188 469  42 270 478 239 277 238 560 440 738 131 547 159 539 802  61 496 739 772
 331 164  91 163 754 780 663 175 269  56 592 222  40 715 168 134 833 395 359 599 143 543 233 814 652  98 643 821 759
 100 203 306 174 198 115 840 190 470 211  76  66 228 817 165 799 218 824 161 764 428 323 841 827 484 758 644 583 396
 137 126 127 793 234 257 379 819 279  99 501 195 221 721 294 120 837 584 205 610 250 818 292 742 436 777 549 611 196
 152 237 258 246 650 142 344 791 835 209 781 287 310 809 273 266 235 545 254 608 816 409 231 293 377 801 508 300 242
 197 412 420 227 512 189 130 194 517 767 784 311 251 729 160 717 302 418 532 757 217 691 284 192 340 139 662 828 330
 202 399 157 172 177 381 274 401 771 834 435 538 213 296 353 268 439 275 830 434 247 698 285 346 625 186 820 803 350
 339 419 365 256 657 441 283 328 386 387 633 431 262 337 382 329 206 688 797 303 276 630 316 318 391 783 575 297 394
 525 253 494 369 640 383 375 320 245 280 521 289 312 442 272 454 476 342 536 367 450 509 267 271 629 798 514 453 423
 338 462 411 214 378 410 460 333 261 313 424 449 345 332 291 305 452 472 555 554 474 557 490 497 502 741 445 319 425
 520 308 480 413 314 298 166 400 493 513 374 327 357 466 550 569 523 488 363 500 265 526 295 368 429 587 397 487 433
 570 447 248 370 427  83 352 461 542 483 620 605 415 403 499 416 638 437 388 301 389 322 457 705  30 578   3 658 362
 408 405 176 325 364 421 438 504 335 669 230 360 498 530 671 456 373 407 511 515 529 309 414 604 114 485 326 402 430
 676 510 463 491 564 290 459 471 451 551 110   2 651 384 553 505 601 173 481 561 614 299 356 473 220 465 241  20 574
 586 645 380 468 479 495 558 398 148  27 390 358 602 448 507 519 347 503 404  59 516 224 486 537 475 595  94 518 443
 464 703 627 477 482 619 808 609 128  11 135 562 585  32 598 125 567 341 565 208 626 540 624  79 354 458 180  33 670
 755 672 591 606 162 577 779 603  24 646 349 647 552 255 692 681 531 572 243 185   1 204 563  17 351  29 324 154 444
 588 568 735 678 288 642   6   5 422 579 210 636 674 668 594 694 225  82 366  48 105  86 720 622 573 260 144 281 710
 680  88  35  70 334 615  25 593 576 724 249 600 769  28 659 667 726  14 455 582 701 178  97 597 702 682 355 343  65
 766 492 546 580 556 684 158 734 621 581  10 527 685  69 666 618   9 656 147 219 607 376 506  77 307 286  71  23 632
 751 533 687 226  49 535 675 215 121 718 775 786 743  72 524 686 736 111 590  41 765 171 695 109  54 385 371  51  34
 782 697 747   8 129 708 700 664   4 212 229 730 790 199 541 571 707 116 596  21 232 145 660 122 654  44  96 426 679
 733 103  13 693 240 548  63 559 315 432 683 748 795 244 628 677  81 361 673  62 752  57 750 639 727 372  15  45 201
  89  19 711 714 713  12 716 406 706 749 187 768 696 665 612 170  37  18 635  50 725 252 690  67  31 317 661 732  60
  26 641 810  75 774  16 712 778  36 746 321 728 634 336 789 259   7  22 709 282 304  47 136 107 800 393 762 723 236

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00009e+07us (= 10000.9ms, 10.0009s)
Wall-clock time (full program): 1.00608e+07us (= 10060.8ms, 10.0608s)
Satisfaction error: 2
Number of search iterations: 1683
Number of local moves: 800 (including on plateau: 262)
Number of local minimum: 94 (including on plateau: 33)
Number of resets: 0
Number of restarts: 0

Problem in row 20: 464 703 627 477 482 619 808 609 128 11 135 562 585 32 598 125 567 341 565 208 626 540 624 79 354 458 180 33 670 => the sum is 12210 rather than 12209
Problem in row 28: 89 19 711 714 713 12 716 406 706 749 187 768 696 665 612 170 37 18 635 50 725 252 690 67 31 317 661 732 60 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 822 780 809 659 592 597 165 820 500 774 130 700 304  79  81  60 672 193 180  44  91 121 666  89 792 735 162 465 127
 762 311 782 602 118 123 652 151 179 725  76 756 831 149 472  67 838 673 154 103 142 198 676 141  55 793  82 841 757
  92 798 470 609 737  51 155 265 587 833  30 800 112  71 126  98 799 699 107 559 305 690 723  80 129 781 379 768 356
 153 734 801 832 115 312 819 526 807 675  94 197 621 128 243 204 687 221  97  70 223 225 816 191 222 840 113 764 479
 706 829 249 610 452  69 260 158 125 713 124 711 574 216  78 169 836  90  52 135 100 663 803 761 773 765 207 206 775
 146 692 563 425 453 779 293  41 145 810 213 626 119 218 109 136 645 566  66 156 637 254 454 826 160 612 625 812 629
 660 182 143 686 789 362 823 322 187 640 150 729 763 139 164 230 668 202 200 122 270 482 834 177 208 434 147 741 755
 289 384 272 736 259 233 323 647 785 541 321 632 163 137 315 301 481 565 231  63 771 839 634 134 101 790 318 267 677
 778 416 159 777 828 476 276 519 837 279 340 288 210 232 133 730 494 310 275 205 835 253 527 235 111 786 342 157 401
 802 226 264 397 261 374 203 784 399 715 297 830 532 238 815 229 295 492 286 624 375 405 628 274 188 442 282 283 269
 678 176 440 406 547 740 330 518 316 402 795 313 285 410 281 719 319 227 389 298 307 343 590 395 334 528 457 268 398
 551 748 273 536 246 224 308 435 391 524 824 487 339 217 377 776 411 438 355 302 192 448 522 388 537 461 292 248 359
 421 255 352 577 523 386 727 353 404 349 331 228 445 303 306 338 380 622 317 382 502 466 507 242 613 701 327 504 348
 469 417 443 497 105 475 505 509 553 256 346 474 467 447 333 358 336 583 471 455 383 450 290 263 422 654 432 444 372
 493 426 424 393 337 458 237 564 412 501 429 449 376 378 496 414 561 326 300 251 463 548 277 488 335 480 240 538 615
 350 464 451 408 430 484 584 345 329 262 462 539 591 390 385 371 427 550 387 605 468 370 437 332 543 392  15 477 361
 344 320 428 364 530 418 140 351 508 499 560 365 562 420 650 423 195 600 697 396 366 108 328 542 433 325 627 341 369
 614 515 670  48 278 363 576 511 544 367 608 531 619 456 598 517 257 407 244 689 545 381 296  11 357 360  74 314 459
 394 569  96 184 529 446 161 181 441 525 431 635 751 582 540 567 556 236 512 589 373 498 415 649 513 152 657   3  24
 284 555 693  86 633 570 607 638  75 170 586 520  32 580 642 618 596 183 514   9 554 601  46 728 483   8 630  83 485
 606 617 744 239  13 460 665  57  93 436 201 568   1 558 585 578 616 603 685 534  40   7  59 473 731 114 696 572 658
  49 489 639  87 571 636 695 120 252  62 552  27 588 760 175 413 593  77 535 674 490 196 186 575 503 291 708 671 595
  38  68 491 178 620 644  88 599 354 172 478 189  39 604 546 510 174  37 770 733 651 643 439 805 573 294 646 641 185
  45 746 656 234 557  14 409 581 631  42 623 110 702 662  36 703  31  85 516 754 655 742 280  16 709  54 704 667 245
 309  56  26 287  95 400 769 705 579 116 506 166 299 821 716 653 132 648 827 753 759 783  53 691  22   5 797  25 211
 138  84 747 368  47 811 680 710  28 117 732   6 749 721 712  10  50 168 787 266 739 669 247 684 752 250 718 214   4
 347  35  34 199 219 750 171  19 698  65 717 106 720 772 683 521  99 813 806 825 209 745 241 682 724   2  72 664 271
 679 144  73 681 714  21 102  58 324 220 758  33 403 814 794 688  43 804 788 817 549  20 212 594 148 131 766  64 767
 190 173  17 104 611 533 486 722 726 419 495 194  12 707 818 808  18 791 661 796 215  61  23 743 738  29 694 167 258

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00022e+07us (= 10002.2ms, 10.0022s)
Wall-clock time (full program): 1.0063e+07us (= 10063ms, 10.063s)
Satisfaction error: 2
Number of search iterations: 1956
Number of local moves: 806 (including on plateau: 253)
Number of local minimum: 158 (including on plateau: 23)
Number of resets: 0
Number of restarts: 0

Problem in row 6: 146 692 563 425 453 779 293 41 145 810 213 626 119 218 109 136 645 566 66 156 637 254 454 826 160 612 625 812 629 => the sum is 12210 rather than 12209
Problem in row 26: 138 84 747 368 47 811 680 710 28 117 732 6 749 721 712 10 50 168 787 266 739 669 247 684 752 250 718 214 4 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  98 120 825 157 154 726  37 135  87 783 633 742  68  66  59 686  38 713 804 766 720 470 687 722 816 138  67  51 841
  53  94  57 660 657 268 109 810 790 670 740 630  31 836  86 680  42 678 760 812  20 113 624 730 210 100 141 794  14
  97  85 375  69 309 573  64 675 806 723 727 747  15 828 169 756  46 779 549 765 114 111 788 483 323 574 377 151 132
  44 142 561 839  72 568 718 140  62 676 837 803 174 833 107 835  50 795  92 198  82 228 163 724 768 572 694 227 205
  39 743 586 130 829 639 201 150  76 767 732 714 497 195 136 834 137 628 800 180  54 183 746 697 117 605 484 122 188
  35 215 809 255 343 786 124 173 146 654 798 838 134 106 239 618 160 789 755 123 127 128 560 799 260 667 442 381 745
 246 156 698 185 318 583 840 685 143 569 600 704 288 206 242 831  91 526 693 162 226 204 824 231 179 797 175 528 279
 334 144 252 158 278 785 200 826 274 544 643 778 240 187 349 317 283 254 793 298 202 761 758 332 233 659 671 116 540
 155 265 672 295 451 646 159 186 817 570 690 495 222 212 266 608 367 575 269 161 830 259 784 584 316 578 282 211 284
 351 296 223 832 290 780 391 280 207 827 253 311 272 171 257 308 341 535 736 644 267 230 262 772 410 396 735 250 582
 390 177 823 208 345 683 275 178 330 505 627 791 305 218 335 653 315 392 648 300 320 237 241 640 350 692 348 424 459
 373 121 752 247 168 744 303 403 467 764 313 679 261 353 221 650 352 822 468 285 302 203 312 682 358 498 248 294 566
 466 319 481 416 370 429 438 430 400 567 369 304 333 408 328 321 658 322 448 291 412 271 340 276 533 397 807 703 372
 439 384 287 443 273 306 478 814 418 541 445 405 473 342 440 425 382 475 307 270 590 441 401 449 355 413 338 360 515
 366 365 301 380 426 387 530 491 388 414  61 417 509 476 436 432 486 538 411 512 504 458 558 399 356 357 404 453 394
 464 499 547 507   9 325 415 455 344 326 423 362 492   1 510 378 431 532 447 385 450 536 506 428 389 551 446 629 422
 236 625 437 503 462 552 115 595 638 153 402 386  80 502 480 471 500 299 479 395 435 529 407 460 545 376 513 444 190
 537 465 193 477 554 364 546 518 469 336 235  25 557 623 474 293 511 126 522 553 457 427 456 463 520 263 452 597 196
 494 559  73 517 346  63 539 662 433 398 562 238 487 485 472  26 368 527 281 225 454 613 564 581 565 329 214 591 543
 585 632 523 548 531 234 607 619 555 102 516 406 501 421 409  88 525 258 577 621 649 571 434  70 668 172 104 249  34
 587 604 419 493 617 314 664 524 521 371 327 361 610 689 534 482 588 519  83 563  10 602 108 192 496 101  16 490 324
 635 656  95 707 645 331 637   2 461 232 119 166 661 550 616 606 603 374 289 596 579  55 105 199 614 277 243 556 599
 719 749 189 615 647 165  28 589 748  23 251  40 594 576 721 347 612 184 219 655 634 601  60 170 677  36 592 669  99
 801 665 354 691 593  29 611  13 542  90  58  49 706 681 666  78 620  43  74 642 673 688 181 125 741  81 598 420 696
 774 759 674 716  17 152 776 229 651 145 112 194 514 729 622  30 751 110 118 641 702 709  77  19  56 383 245 695 609
 701 712 297  52 769  18 734 773   4  45 339 167 796 699 631  12 663  89  93 738 652 286 733  21   5 220 626 580 754
 715 792 393 256 129 209 717 775  11 133 131  84 819 728 821  48 725 217 264  27 148 818 147 359   3 739 508 711 782
 705  79 164  96 805 213 771  71 684  65  75 176 808  47 763 363 811   7   6 379 815 700 139 310 636 488 731 489 813
 770 787 149 757 802 337 182   8 737 216 191 197 762  41 820  33 753 103 224  22 781 777 244 292 710 750 708  24  32

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00024e+07us (= 10002.4ms, 10.0024s)
Wall-clock time (full program): 1.00636e+07us (= 10063.6ms, 10.0636s)
Satisfaction error: 2
Number of search iterations: 1733
Number of local moves: 681 (including on plateau: 233)
Number of local minimum: 151 (including on plateau: 29)
Number of resets: 1
Number of restarts: 0

Problem in row 3: 97 85 375 69 309 573 64 675 806 723 727 747 15 828 169 756 46 779 549 765 114 111 788 483 323 574 377 151 132 => the sum is 12210 rather than 12209
Problem in row 22: 635 656 95 707 645 331 637 2 461 232 119 166 661 550 616 606 603 374 289 596 579 55 105 199 614 277 243 556 599 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 388  49 819  31 191 174 347 696 661 759 773 807   3 780  13 723 218 813 786 143 820 385 169  11  76 784  46  56 688
 110 377  37 772 752 194 235 775 540  22 783 799 650  53 829 827 114 767 681 168 141 371 333 744 748   7  82 128 170
  32 795  75 717 754 171  64 724 760 325 256 833  54  35 676 812 295 817   8 123 129 134 450 785 638 793  10 797 147
  96 715 669  65 697 105 151 336 318 776 621 686 757 668 790 766 269 815 743  88  89 201  38 823 667   1  67  66 126
  84 706 703 660  98  16 120 689 278 183 742 765 642 701 720 768  14 480 680  79 259 246 271 730   9 745 556  63 202
  20 729 700 634 559  12 125 732 112  27 698 699 751 657 800 586  47 673 644 653  59  74  15   2 625 623  30 712 211
 604 677 691 683 219 161 356 672  86 103 285 652 747 518 632 639 116  18 646 534 108  48   6 705 609 580 117 637 360
  21 735 618 695 199 193 173 209 139 212 622 533 611 562 645 522 624 451 585 658 569 138 495 629  58 517 121 175 500
 506 509 527 643 603 330 262 525  78  26 539 733 502 647 619 524  97 254 663 198 217  93 544 563 594 288 258 593 274
 469 483 573 532 641 311 131 439 298 204 602 521 678 607 687 489 496   4 600 160 649  73 306 564 150 166 342 542 492
 479 383 620 584 568  40  24 654 228  87 423 662 499 592 550 491 640 505   5 552 177 245 319 582 596 503 162 575 464
 635 529 482 512 329 341 316 335 576 135 494 519 475 462 397 541 628 215 538 570 273 307 547 498  69 111 407 508 460
 102 442 566 468 526 453 448 410 384 413 409 581 186 426 523 458 432 449 392 473 588 308 513 417 136 485 236 520 465
 476 459 501 484 403 455 345 514 386 405 361 411 349 424 466 478 395 516 443 497 365 490 504 404 152 387 239 472 428
 488 554 320 421 379 444 408 457 402 332 530 412 456 348 359 334 378 326 414 400 422 394 548 572 446 440 294 477 454
 290 510 317 370 839 406 487 445 419 434 536 481 328 389 399 427 418 309 282 374 327 227 431 375 831 315 366 436 441
 382 393 416 415 430 296 725 741 303 583 346 344 558 280 401 452 286 777 314 376 354 310 321 276 398 433 528 391 380
 437 242 265 364 272 507 474 340 493 553 363 223 352 291 551 353 435 471 447 322 756 595 207 832 208 557 590 425 284
 358 338 362 313 612 561 545 210 367 734 736 241 324 263 396 357 233 731 355 283 244 809 251 149 281 420 606 351 779
 630 368 182 304 727 679 665 337 750 279 463 200 266 243 248 275 339 300 438 666 163 591 718 292 470 429 587 350 250
 267 230 122 180 574 740 728 216 769 597 549 270 372 237 390 343 753 301 238 260 511 778 205 195 571 268 613 299 633
 656 305 197 232 185 655 610 794 627 293 289 225 253 297 255 312 739 659 154 188 373 841 605 189 221 486 824 119 626
 214 224 264 165 323 651 801 222 240 714 302 249 234 190 287 107 713 164 220 567 764 707 803 113 461 805 708 206 791
 798 196 109 153 140 722 684 146 693 608  94 142 226 814 178  77 781 589 181 203 840 726 796 331 261 167 616 127 811
 758 252  99  85 837 671 719 124 159 826  52  61 229 158  91 130 648 133  42 746 737 560 749 156 787 277 762 806 555
 716 106 213 782 179 755 579 247 615 828 172  44 118  57 187 157 614 515  60 789 774 670  81 176 369 709 821 692 184
 818  34 825 155  62 702 381 104 834 599  50  36 711 535  68  51  95  39 792 704 674 577 598 721 537 738 617  80  72
 565 836 115 690  70 694 543  45 148 467  29  55  43 838  23 192 761 101 601 771 682 675 578 144 710  83 816 802 132
 810  33 822 100  41 770 763  71 546 685  90  25 835 137  28  19 631  17 257 664 145 636 808 231 531  92 788 804 830

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00027e+07us (= 10002.7ms, 10.0027s)
Wall-clock time (full program): 1.00635e+07us (= 10063.5ms, 10.0635s)
Satisfaction error: 2
Number of search iterations: 1463
Number of local moves: 734 (including on plateau: 220)
Number of local minimum: 96 (including on plateau: 32)
Number of resets: 0
Number of restarts: 0

Problem in column 15: 13 829 676 790 720 800 632 645 619 687 550 397 523 466 359 399 401 551 396 248 390 255 287 178 91 187 68 23 28 => the sum is 12208 rather than 12209
Problem in column 16: 723 827 812 766 768 586 639 522 524 489 491 541 458 478 334 427 452 353 357 275 343 312 107 77 130 157 51 192 19 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 759 202 236  72 657  28  27  81 533 832  89  82 817 115 634 683 589 103 730 611  97 700 664 143  50 671 812 667 525
  40 641  29 546 697 619  80  37 797 158 728 839 134 160 708 701 725  13 653 209 273  74 726 767  90 666 785 227  87
  69 116 654  79 704 178 628 126 494 756 743  60 802 727 597 219 751 108 758 687 170 379 632 288 174 203 218 765 124
  19 837  55 753 184  95 257  63 810 195 537 147 111 133 835 827 816 129 798 673 309  66 720 150  86 830 841 776 157
 127 125  33 481 826  45 189 738 617 705 755  75 183 194 814 243 465  39 784 670  54  53 833 163 807 693 647 721 130
 300 823 164 119 144 603 110 606 838 507  99 238 185 656 191 635 484 358 754 834 132  43 794 734 159 804 529 169 197
 264 307 836 213 796 239 781 176 640 188 137 118  70 786 212 207 284 113 676 820 278 475 426  83 509 588 622 714 651
 122 196 325 672 193 242 210 468 527 201 600 181 229 801 225 561 252 145 757 737 567 782 799 247 355 531 793 221 270
 268 763 187 571 276 211 190 319 434 620 718 412 369 271 382 563 234 260 222 204 795 345 623 279 208 706 709 809 261
 233 280 245 761 200 298 359 616 599 467 800 380 328 313 177 316 742 534 544 223 306 440 792 283 323 473 613 308 256
 149 314 267 694 317 179 269 251 499 829 748 398 329 828 367 255 451 522 456 248 291 249 627 366 351 646 453 515 341
 396 326 579 392 482 404 476 259 752 362 595 450 410 486 387 466 365 287 556 377 237 370 368 461 331 395 480 459 301
 789 478 373 371 303 285 490 403 438 489 452 364 558 352 135 205 487 240 649 407 397 349 840 152 505 386 541 324 447
 356 315 413 389 518 282 508 289 674 254 347 258 431 436 441 637 344 274 633 378 399 650 391 286 458 293 557 449 549
 388 372 462 418 524 265 376 762 824 340 419 457 444 333 551 375 420 182 442 330 512 148 439 334 206 513 501 443 429
 454 139 336 662 502 230 153 516 400 224 312 535 463 415 488 332 554 532 390 262 565 470 479 394 448 503 446 575 430
 491 514 123 374 548 659 360 408  65  24 493 477 485  62 296 559 423 528 385 631 570 560 299 590 474 469 305 495 542
 357 598 401  98 361 354 573 231  30 498 562 555 586 547 648 626 483 322 321 427 432 663 217 424 381 471 338 175 530
 602 540 500  35 520 553 402 277 117 526 523 510 460 416 621 584 428 609   1 545 511 435 310 601 521 343 383  44 292
 644 625 425 577 578 642 504 639  91 101  67 353 496 605 297 536 643 405 346   7 760 604  23 680 568 253 128  46 566
 591 638 766  85 618 437 713 719 155 741 151 363 660 593 464 433 519 696 350  78 411 263  77 538 543 142  14   6 445
 688 574 455 154 608 711 582  21 156 652 335 517 681  58 655  76 583 707  96 121 629  10 102 614 677 339 171 492 745
 615 281 581 272 564 703  20 764 173 592 596 607  25 715 702  56 710 569 100 214 576 421   4 750 406 161 232 220 580
 768 645 698 241  22  17 769 695 327  92 226 497 716 712 106 675 131 717 320 167 587 552 275   2 682 107 186 692 585
 788  41 610 722  88 813 686 550 172 685 337 472 572 250  26  34  51 735 168 539 661 668 216 624 414 266 311 658  52
 678 302 808 747 783 803 780 691 393  71 594 825  12 244 304  31 105 749 165 732 235 348  38  18 192 417  32 294 818
  59 506   5 740 120 777 744 805 228 318  57 636 790 199 146 612  47 815  36 166 665 684 136 723 729 109 384 162 811
 773 669 821 140  68 731 775 290 180  49 141 724  93 112  61 689 114 699 104 774 787 778  64 736 771 215  94  11 746
 422  42 822 831   8 806 198 409 246 733  48 679 770 690 739  73   9 819  15 138   3 630 295 779 791  16  84 772 342

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00009e+07us (= 10000.9ms, 10.0009s)
Wall-clock time (full program): 1.00621e+07us (= 10062.1ms, 10.0621s)
Satisfaction error: 1
Number of search iterations: 1735
Number of local moves: 679 (including on plateau: 234)
Number of local minimum: 149 (including on plateau: 28)
Number of resets: 0
Number of restarts: 0

Problem in diagonal 1: 525 227 218 830 807 734 426 782 795 223 456 287 487 637 551 415 485 555 523 101 155 21 20 17 88 747 5 669 422 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 114 721 726 819 838 441 122  96 431 571 586  52 167  88 476  31 540 113 690 793  83 816 836 837 109 253 704  91  65
 143 107  58  53 800 646 552  94 542 812 258 112 174  87 148 124 602 683 569 791 564 193 252 138 638 606 814 826 823
  43 186 840 397 725 761 734  77 116 760 795 244 592 628 487  48 175 677 782 783  38 357  86 128 103 507 828 133 179
 839 720 178 792 622 165 613  85 129 206 794 825 472 515  37 201 190 563 688 525  42 768 155 157 111 830 671 108 208
  66 834  64 490 831 728 594 149 833 130 662  76 539 758 389 153 780 501 209 748  30 350 100 261 802  99 799  78 156
 104 723 239 176 789 714 118 821 105 245 788 435 804 631 274 227 745 574 181 336  71 753  56 841 241 225 591 195 207
 168 196 185 578 235 203 827 183 809 119 459 380 555 665 672 217 749 717 147 163 177 684 835 623 317 205 673 231 237
  92 257 330 383 238 379 750 810 260 265 666 268 561 669 461 161 230 773 803 300 194 832 496 306 337 269 675 232 212
 282 215 158 363 152 288 670 221 192 590 731 278 608 560 356 281 787 617 362 242 822 811 381 470 329 189 289 743 222
 279 291 327 600 276 198 784 270 410 712 619 240 807 482 779 292 255 778 766 678 361 322 275 224 213 188 335 294 154
 290 386 298 682 310 449 627 233 218 372 433 272 699 824 698 401 342 817 744 142 323 200 182 685 371 331 191 271 418
 226 216 223 610 162 396 730 299 325 354 403 437 820 769 636 488 256 625 390 210 465 660 287 344 533 360 517 249 219
 141 164 467 576 280 374 703 326 416 448 313 452 829 378 775 398 423 642 293 297 411 424 316 529 321 367 516 302 328
 295 399 455 220 345 312 520 305 475 740 621 508 370 549 460 318 818 338 197 332 364 348 519 286 474 447 451 432 311
 500 395 446 495 264 489 518 438 457 568 485 385 236 369 400 309 347 464 412 541 359 333 553 340 473 607 353 307 366
 440 413 180 140 548 506 415 543 544 649 248 376   6 132 391 468 514 565 486 394 409 582 131 407 434 566 527 579 616
 450 417 551 368 387 426 429 463 499 456 388 303 427 504 392 570 494 171 393 546 408 402 524 430  54 531 419 382 425
 647 436 445 120 324 634  40 774 373 341 481  57 453  75 319 632 572 405 558 304 469 479 550 528 661 532  44 444 512
 421 588 480  89 583 641 102 454 384 522   8 526 169  68 352 493 491 136   1 547 536 624 612 497 537 637 581 710 420
 599 587 626 251 484 653 151 601 406 422 296 562  74 250 106 125 680 204 498 137 511 559 614 556 377  29 510 737 604
 523 585 696 365 492 686 234 676  26 580 246 503   4  50 301 521 483 170 545 334   3 184 513 577 596 598 339 663 716
 759 650 679 458   9 101 277  27 664 211 320 478  28 535   7 705 575  93 314 674 609  60 709 538 605 667 567 462 428
 620 644 505  19 589 654   2 786 645 509  61 633  11 214 187 765  33 115   5 643 719  72 573  97 733 805  55 738 777
 530 603 756 752 697 243 266 715  73 629 259 466 358  90 355 618 110 262  23 635 655 315  12  62 687 630  15 798 595
 691 718 648 764 173  59 273 659 652  35 285 611 349  84 477 584 657 228 159  10 707  63  25 443 471 640 263 700 781
 767 593 747  24 199  22 150 701 639 135 202 681 351 172  14 790  47  82 534 742 736 597 414 554 724  98  70 729 695
 741 127  36 615 711  39 254 343 145  51 134 689 139 442 771 755 144 117 267 308 651 229 713 668 732 815  95 727 751
 693  17 785 247  67 346 708 284 735 757 166 658 806 813 797 772 121 404 439  13 770 123 796 557  80 160  34  16  45
 746  21  81 763  79 656  46 776 706  20 502 702 801 808 692 762  49 375 754  41 722  69 694 126 146  18 283  32 739

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.00769e+06us (= 9007.69ms, 9.00769s)
Wall-clock time (full program): 9.06892e+06us (= 9068.92ms, 9.06892s)
Satisfaction error: 0
Number of search iterations: 1291
Number of local moves: 729 (including on plateau: 267)
Number of local minimum: 64 (including on plateau: 27)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 841  83 132 582 138 130 839 675  56 607 645  63 673 114 555 124 686 133 837  19 838  64 147 835 787  38  11 754 803
  97 820 642  60 261  57  18 102 603  58 691 580 143  94 724 818 771 613  75  35 788 817  31 741 584 718  51 712 505
  43  76 840 113  45  61  39 456 597  49 690 816 170 790 527  33 739 541 826  91 821  52  46 593 799  96 822 781 657
 123 759 427 819  37 118 149  80 135 758 129 697 579 792 789 242 762 156 241 634 121  67 194 565 750 334 273 772 707
 109  92 674 152 760 111  29 561 598 101 830 162 804 177 566 108 732 528 677 178 824  93 174 727 394 180 290 829 749
 151 173 583  62  28 370 153 440 662 249 831 203 684 708 709 197 641 564 208 813 545 150  77 497 744 376 202 554 635
 127 220 715 260 182 692   8 157 734 810 767 212 768  84 702 217 705 706 137 168 770 122 265 738 511 189 279 222 742
 172 468 765 289 115 689 104 683 568 773 630 230 823 237 654 240 184 666 188 353 167 379 323 725 651 254 319 195 365
 307 117 698 154 107 812 291 226 594 836 450 314 181 270 755 335 235 647 536 258 716 366 424 722 728 295 310 198 327
 251 236 703  90  98 733 571 622 275 723 660 832 191 294 305 297 324 775 510 384 301 252 318 659 676 345 280 288 216
 296 259 784 402 186 717 388 494 347 341 355 169 338 282 631 232 196 796 780 357 213 452 482 218 681 805 377 302 329
 400 266 522 383 331 665 540 214 308 352 600 287 828 797 322 416 403 434 381 369 219 372 244 786 475 145 389 425 336
 422 326 604 375 720 623 454 407 255 834 367 276 247 269 359 395 340 621 325 337 391 419 328 300 620 431 348 524 292
 183 358 493 498 815 548 396 200 277 364 448 521 447 281 361 343 462 558 473 362 342 472 356 578 393 417 480 283 500
 433 438 363 471 382 446 380 504 533 420 404 368 439 410 476 390 436 464 637 371 409 190 272 606 432 453 346 406 330
 490 418 444 459 526 309 442  85 398 399 484 485 405 320 491 374 467 449 463 414 469 458 451 246 315 496 507 532 413
 531 478  89 525 495 411 617 105 134 415 225 479 457 466 567 551 538  21 339 397 492 529 573 401 360 518 441 470 585
 523 349 278 421 443 163 445 206 175 481 556 317 378 429 426 542 506 385 387 560 499 373 591 293 392 592 333 539 627
 477 574  72 354 614 210 589 304 125 508 408 590 639 428 303 515 535  23   6 435 474 530 638 110 285 615 624 710 514
 488 569  82 581 610 164 737 166 165 412 608 661 502 519 185 649 486  68 587   3 483 546 552  10 306 460 489 509 612
 605 632 179 678 694 286 221 586 461 550 239 588 599 537  44 667 120  78 455  54  59 628 596  71 311 619 516 577 559
 520 695 321 756 643 351 264 298 501 602 312 487  99 595  41 655  73 350 688 711  87   7 534 437 128 562 653 663 176
 777 570 268 746 670 316   1 633 503  13 224 640 626 211 609 386  65 636 557 563 719 549 618 267 161  66 465 146 204
 764 753 284 547 572   4 729 262 193  27  22 778  16 696 238 575 576 263 693 644 646 650 714  79 205  95 544 616  24
 656  55 299 757 423 553 801 679 601 658 201  25 668   2 160 735 721 313 250 629 332 713 802 209   5 116 672 100  74
 751 833 148 112 699 543 726 731 256 141  32 687  40 795  53 752  50 274 704 671  17 664 611 171  81 740 774  34 119
 144 779 517 680 791 807 701 785 648 229 207 126   9 131 155 776 136 669  36 809 192 747 231 243 248 761 625  12  15
 798  70  30  69 685 512 794 766 682 271  88 513 257 736 344 430 234 245 187 827  48 800 806 159 140 793 769  14 142
 730 743 253 814 139 808 783 782 825 228 106 103 199 745 158 215  86 233  26 763 227 748 811 223  47 700  20  42 652

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.93885e+06us (= 6938.85ms, 6.93885s)
Wall-clock time (full program): 6.99972e+06us (= 6999.72ms, 6.99972s)
Satisfaction error: 0
Number of search iterations: 820
Number of local moves: 554 (including on plateau: 165)
Number of local minimum: 24 (including on plateau: 18)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  24 571  36 644  39 731 710 281 511 643  74 156 124 818 825 614  31 210 642  40  59  77 814 649 558 637 812  44 835
 789 829  17 841  22 756  45 228 504 694 113  72  56 821 134 836 465 768 816 171  41  61 599 581 779 792  63 143 173
 674 667 447 689 102 178 174 149 712 747 256 158 104 832 736 663 577  48 806  28 500   2 255 824 656 715 130 153 227
 764 760 705 309 163 751  43  84 505 679 103  54 111 822 739 610 704  50 184 652  98 721 182 688 632 640 146 220  90
 802 108 159 696 778 272 133 121 675 668 755 131 201 575 776 803 724 273 680 233  49 503 157 543 546 112 138 385 213
 240  85 711 826 197 815 194 110 827 782 446 293  67 274 117 722 759 300 793  73 249 519 120 685 669 794 246 217  79
 225 190 291 633  25 312 811 263 837 677 236 168 708 617 501 653 703 148 335 296 295 566 819 732 628 151  91 211  87
 322 126 426 828 212 214 340 817 840 748 738 415 230 301 222 676 729 187 303 129 181 407 290 830 735 154 319 315 175
 781 192 801 361 431 323 259 253 455 337 347 132 257 658 305 254 526 349 235 118 820 754 123 258 726 771 419 714 250
 200 383 284 831 122 311 244 345 795 555 267 394 203 589 297 193 670 162 316 813 339 657 398 727 678 172 576 427 261
 202 346 647 330 277 454 167 285 833 327 839 412 377 433 307 565 784 279 422 226 231 737 278 252 584 370 310 701 234
 164 266 823 282 354 341 292 275 659 590 325 834 166 265 440 591 838 786 298 353 417 207 338 393 758 434 195 191 334
 403 331 530 552 804 286 483 328 532 321 485 366 648 317 333 381 411 343 351 247 350 559 320 787 536 368 223 376 238
 416 329 264 289 439 243 492 304 528 302 609 294 401 363 374 542 767 379 342 332 613 557 548 441 491 326 378 477 369
 400 458 260 496 490 586 451 436 268 482 521 229 413 522 397 395 489 384 409 428 509 357 386 382 515 367 280 418 481
 466 421 399 177 344 541 573  33 318 435 348 480 524 432 520 313 479 539 375 443 495 283 719 430 463 525 493  80 561
 597 359 507 487 467 595 288 445 362 276 114 453 473 437 562 535 371 450 506 544 405 387 502  53 248 534 468 204 580
 414 513 605 299 626 478 588 410 355 516 389 308  94 579 684 578 251 423 358 683  88 155 356 448  60 604 442 429 476
 537 508 587 540 486 438 391 549  65 550  95 324 664 499 494 402  78 462 161 563 639 136 596  70 206 660 461 564 484
 661 567   8 618 527 523 464 602 165 449 232 554 603 360 424 365 142 517 574   1 592  81 700 180 373 469 475 452 531
 594  76 444 160 600 472 498 538 152 569 551 631 459 625 425 262 115 545 616 408  47 128 512  20 144 695 601 582 740
 510 611 116 518 745 456 718 514 125 176 650 687 654 460  19 380  26 645 673 624 629 216  89 199 189  38 583 471 488
  62   7 306  97 772 743  10 556 140 221 560 615 691 127 662 170 241 593 553 372 638 671   6 533  64 619 716 666 798
 717 621 620 141 728  93 810 763  71  69  21 497 690 237  34 100 119 699 101 762 713 364 797   5 137 336 623 773 568
 106 800 270  23 457 570 218 783 314  66 746 607 572  18 627 139 196 529  14 720 651 733 757 239 406  75 547 404 622
 636 780 630 107 761   9 672 692  86  32 777 741 769  68  55 179 186  12 150 697 269 770 702 198  99  15 681 790 646
 352 612 655 215  58  29 606 665 242  11 808 799 388   4 420  96 396 706 470 796 775 707  42 209 147  57 392 809 742
 135  52 271  35 709 686 750 698 287  82 585 598 774  51  27  83 224 693 634 723 752 169 791 608  37 749 635 188 183
  16 641 390 185 474   3 785 682  46 205 219 807 788 105 753 109 208 730  92 734 765 725  13 245 145  30 766 805 744

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00026e+07us (= 10002.6ms, 10.0026s)
Wall-clock time (full program): 1.00634e+07us (= 10063.4ms, 10.0634s)
Satisfaction error: 2
Number of search iterations: 1480
Number of local moves: 783 (including on plateau: 303)
Number of local minimum: 94 (including on plateau: 36)
Number of resets: 0
Number of restarts: 0

Problem in row 27: 352 612 655 215 58 29 606 665 242 11 808 799 388 4 420 96 396 706 470 796 775 707 42 209 147 57 392 809 742 => the sum is 12208 rather than 12209
Problem in row 29: 16 641 390 185 474 3 785 682 46 205 219 807 788 105 753 109 208 730 92 734 765 725 13 245 145 30 766 805 744 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 840  32  63 813 315   9 739  50  18 732 680 815 125  74 104 123 561 685 618 130 536 156 799 783  57 782 749 810  11
 571 834  95  55  67  37 801  70  68 439 792 592 829 183  96  83 311 763 654 173 626 132 785 828  86  36 705 841 657
 803  82  52  44 703  94 802  62 143 587 818 738  28 176 211 146 579 796 629 613 722 103 769 827 120  40 193 601 728
 646  45  38 117 819 166 202  22  59 642 735 723 194 126 222 822 821 778 700 152 527  73 602 826 209 167 748 195 833
 622 118 171 148 139 542 714 170 114 695 794 698  81 159 160 713 112 649 502 562 223 647 686 683 838 111 185 242 731
 721 181 217 164 730 831 270  93  90 624 777 779  89 201 157  80 781 205 297 145 489 190 770 798  60 261 670 716 823
 752 149 204 191 534 168 825 127 210 718 122 719 106 232 775 768 199 555 525 113 206 203 444 636 839 259 133 772 725
 678 184 280 187 807 617 124 836 806 759 375 252 131 250 161 172 236 832 688 572 346 820 675 356 218 212 147 140 348
 557 453 277 216 251 198 188 287 816 382 392 136 200 215 257 339 643 266 808 737 835 286 577 614 244 208 787 767 273
 644 336 274 267 235 229 292 240 142 817 263 129 490 581 795 264 707 158 761 804 294 301 672 774 241 238 701 314 246
 228 327 234 177 811 755 293 245 837 708 243 359 248 275 377 471 669 268 285 681 345 403 580 472 674 331 279 296 338
 349 830 307 457 321 659 318 343 213 650 265 367 402 800 727 302 281 289 459 637 344 303 416 276 612 309 366 256 351
 381 355 477 445 447 363 383 320 380 295 391 458 559 773 278 454 322 316 434 717 408 352 389 335 467 410 427 533 340
 463 409 487 446 504 404 342 394 524 519 451 374 442 500 488 357 284 397 230 517 378 468 564 271 425 350 413 387 421
 484 362 423 390 510 405 300 433 317 496 319 368 411 609 414 341 260 337 470 494 436 418 603 462 483 450 435 310 469
 437 361 598 422 503 667 393 379 456 415 430 507 473 424 417 518 376 526 520 398 141 474  33 544  41 440 560 396 360
 493 513 370 461 522 385 448 388 568 395 485 512 258 354 399 358 607 516 438 406  76 441  75 369 486 480 528 478 400
 482 325 431 515  27 653 573 521 495 233 704 594 481 600 576 552  49 119 102  99  92 509 347 511 595 499 578 412 535
 432 476 449 662 226 186 575 550 401 371 373 529 497  24 584 567 549 429  88 407  56 593 272 291 479 498 532 530 583
 353 651 539 452 523  46 558 420 627 138 426 540 108 588 501 541 224 506 491 466 137 460 290 175 545 660 227 443 574
  91 677 591 599 582 465 505 547 298  17 531  84 608 621 586 661 283 658 165  79 384 492 304 253 312 615  35 475 691
 151 641 570 551  97 664 671 538 556 110 565 616 428 192 663 537 620 548 154  85 793 105  71 150 655 569 625   2 282
  21 706 747 596  26 682 645 619 589  19 308 386 543 611 590 741   7 635  98 221 169 693 332 546 326 623 107  13 610
 163 771 665 726 553 269 630 648 631  14 566  69 689 604  78 750 182 135 247 305 734 687 330   5 585 628  15 514  16
 329 606 697 656  39 712 333 812 694 372  61  42 676 696 225  54 189 455 364 254 666 639  48 134 824 729 638 255  10
 162  64 756 174 179 652 153 690 632 365 196   6 789 766 239 742 740 109 605 711 673 709 155  30 753  34 634  72 419
  25 684 699 733 784 554   1 805 597 219  66 262 776 324 668 633  65 115 563 328 797 760 101 144 220 765  53 231 237
 323 334 788 736 197  77   3 786 640 180  58 249 791 508 746 116 790  43 214 679 745  12 313  29 764 754 692 464 178
   8 702 710 809 758 720 128 814 288 299  23 306 757 743 715   4 762 121 100 724  31 780 207  87  51 751  47 744  20

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00024e+07us (= 10002.4ms, 10.0024s)
Wall-clock time (full program): 1.00632e+07us (= 10063.2ms, 10.0632s)
Satisfaction error: 2
Number of search iterations: 1636
Number of local moves: 601 (including on plateau: 160)
Number of local minimum: 115 (including on plateau: 18)
Number of resets: 0
Number of restarts: 0

Problem in column 2: 32 834 82 45 118 181 149 184 453 336 327 830 355 409 362 361 513 325 476 651 677 641 706 771 606 64 684 334 702 => the sum is 12208 rather than 12209
Problem in column 10: 732 439 587 642 695 624 718 759 382 817 708 650 295 519 496 415 395 233 371 138 17 110 19 14 372 365 219 180 299 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 812  94 823 839 769 124 819  86 106 258 554 103 188  52  35 105 518 750 757  74 590  88 630 821  65 102 521 686 840
 214 838 200 748 654  50 725  43 241 171 778 716 130  55 628  49 711 626 758  83 742 119 209 737  70 147 802 837 128
 101 187 661 645 827 113 137 804 176 477 728 625 694  78 224 223 261  91 744 180 785  92 213 826  68 807 702 598 142
 836 266 167 476 808 824 504 525 243  58 173 771  60  40 204  27 676 151 664  32 510 828 228 469  53 830 816 730 240
 189 799  99 713 385 203 760 741 183 127 719 705  64 332 489 129 533  80  87 355 655 162 138 659 436 678 673 803 313
 622 143 125 811 191 813 687 766 170 772 600 740 232 273 734 251 680 158 270 202 715  95 218 720 148 116 177 671 109
 146 246 115 793 255 219 347 601 592 291 233 542 114 244 653 394 721 104 756 275 818 182 174 752 227 782 712 777 144
 122 221 316 841 194 230 593 745 248 178 135 384 110  84 517 442 697 334 295 605 683 834 140 637 322 794 743 493 272
 207 285 327 547 503 201 636 358 800 362 208 783 336 168 753 352 780 198 438 193 584 329  75 675 210 163 606 718 414
 155 186 393 797 441 253 172 616 217 736 288 566 348 367 822 388 814 211 792 250 723 133 302 751 300 206 153 569 260
 199 339 301 604 305  97 591 693 310 360 767 446 365 330 691 325 726 222 690 299 646 284 333 370 556 205 359 513 283
 215 216 196 574 277 580 536 494 319 789 242 335 389 386 619 426 278 611 412 262 667 157 434 791 375 395 413 596 225
 396 532 165 544 432 350 356 545 421 776 254 497 391 514 581 463 415 231 467 448 499 321 298 706 265 297 383 433 229
 490 440 161 431 538 406 505 397 239 516 247 599 474 612 402 379 479 259 435 429 459 351 331 444 478 496 306 549 357
 534 401 509 563 245 461 418 400 408 353 447 506 472 271 617 398 249 535 341 466 454 373 464 296 387 410 445 377 409
 453 427 470 294 293 539 315 422  79 603 555 267 382 487 279 484 491 364 458 492 460 528 607 349 380 381 338 425 587
 411 457 405 323 512 417 314 376 568  73 340 390 428 136 468 451 488 399 588 481 342 455 562 485 576 483 558 307 416
 286 404 318 235 452 234 572 559 613 197 531 639 326 392 522 320 486 403 263 345 368 424 665 374 524 583 498 237 439
 456 423 573 257  71 548 152 328 701 508 523 343 473 407 502 465 495 579  12 420 190 668 430 311 449 660 276 346 643
 672  34 529 281 620 557 765 378 561 462 578 363 586 662  51 565 164 471 597  46 282  47 500 132 788 632 226 141 519
 154 629 577  56  31 677 589 371  20 543 688 252 735 627  48 501  54 540 571 729 274 624 669 185 594 682  66 169 553
 644 482 614  26 123 280 564  29 437 641 520 552 595 674 184 575 149 704 635 324 181  76 570  63 527 650 567 308 515
 670 633 550  77 640 732  18 419 692  44 651 507 681 621 372 546 309 551 337 652 179 763  24   4 656  41  96 159 585
 710 530 618  82 511 312   5 443 166 663  30 192 755 727 139 805 112 658 602 790  38 798 608   2 685 317 100 145 666
 831 610 695 118  15 537 366 289 809 344  57  98 615 638 195 832  13 703 108 774  45 708 649  10 738  23 648  85 657
 825 795 631  21 696 582 746 287 768 131 480 160  28 700 354 786 269  16  67 679 111 717 709 238  25 220 264 134 770
 773 642  19 236 609 689   3  89 801 733 775  59 781 684 361  17 256 784  42 699  11 526 541 107 787 212  37 126 810
  72 303 817 156  33 731   6  36 761 304  69   7 759 815 475 749  93 722  22 829 117 707 724 175 714 747 634   9 623
  14 647 835 121 779 450   8 369 560 739  39  62 698 833 290 762 292 754   1 796  81 820 764 120 806 150  90 268  61

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00031e+07us (= 10003.1ms, 10.0031s)
Wall-clock time (full program): 1.00642e+07us (= 10064.2ms, 10.0642s)
Satisfaction error: 2
Number of search iterations: 1525
Number of local moves: 734 (including on plateau: 172)
Number of local minimum: 110 (including on plateau: 17)
Number of resets: 0
Number of restarts: 0

Problem in row 21: 154 629 577 56 31 677 589 371 20 543 688 252 735 627 48 501 54 540 571 729 274 624 669 185 594 682 66 169 553 => the sum is 12208 rather than 12209
Problem in row 25: 831 610 695 118 15 537 366 289 809 344 57 98 615 638 195 832 13 703 108 774 45 708 649 10 738 23 648 85 657 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 799 122 151 749 154 350  59 692 541 713 786 712  32  39  77  76 633 679  46 377 717 581 649 704 241 494  85 118 833
  78 186  23 659 112 690 562 825 764 624 511 687  98  66 618  82 599 189  61 603 104 777 678 802 145 823 628 150  65
 739 673 566 631 133  63 228 816 179 301 744 505 101 126 196 779 129 409  45 226 157 772 834 607 625 730  16 828  51
 125 601 153 832 234 818 352 176 711 682 160 635  42 279  79 837 769 259  26 676 578 840 204 705 474 597  95  90 180
 219 829  27 765 789 295 190 388 746 615  69 792  71  20 724  64 826 238 120 626 738 108 700 785 251 811 182 116 105
 714 670  74 524  73 835 203 225 791 693 132 610 168 139 127 263 252 489  99 147 776 702 728 841 596 695 347  56 240
 169 706 229 634 223 346 831 462 165 361 328 756 212 114 230 183 614 622 131 782 759 197 838 699 232 807 106 201 272
 158 707 195 814 275 701 162 469 660 366 736 641 221 414 184 187 752 534 208 532 761 302 270 393 289 740 331 113  94
 172 646 149 362  72 336 233 217 546 382 509 763 257 282 265 839 793 271 224 432 684 274 836 569 573 800 339 171 213
 261 741 293 308 269 743 175 555 655 731 514 288 343 280 245 264 178 710 353 671 606 358 205 579 236 751 296 335 266
 290 142 378 567 327 166 575 770 612 664 255 753 364 239 291 306 329 585 830 697 526 325 357 262 354 449 360 102 334
 453 441 188 330 248 311 253 504 774 491 373 394 431 473 281 349 299 827 278 781 643 298 342 310 619 521 451 315 231
 450 316 193 247 375 696 386 363 790 391 200 538 732 359 161 503 333 397 355 376 461 322 448 389 817 341 433 425 412
 368 324 483 424 459 369 466 384 729 381 515 371 486 277 506 307 326 419 627 383 484 468 174 396 416 250 332 423 662
 348 305 421 475 465 437 592 498 430 481 492 372 268 420 344 413 623 194 548 287 220 580 426 246 522 574 407 284 537
 456 320 452 379 303 583 488 380 406 495 438 552 313 520 476 297 554 408  43 545 457 411 398 553 512  48 390 434 598
 428 590 656 499 529 227 589 417 422 444 214 400 399 401 482 374 464  75 570  57 440 458 446 429 427 367 415 472 518
 523 410 620 540 542 477 642 216   6 138 405 181 340 402 445 582 454 304 478 455 403 418 439 501 115 550 507 560 556
 463 395 480 510 549  60 513 267 314 565  17 559 527 611 370 525   1 547 496 487 242 588 502 516 192 235 577 485 616
 447 442 543 613 572 490 535 404 443  93 568 215 605 665 591 155 651 146 533 156 392  38 202  62 135 561 661 733 558
 677 141 621 218 519 640 467 338 345 653 530 100 436 689 691 648 207 144 500  22   5 594 674 121 283  36 694 497 719
 563 539 637  53 632 668 639 128  67 273 517 164 387 531 604 571  91 470 593 321 493 681 528  81   7  15 762 630 564
  52 199 650  47 755 206  50 722  92 123 757 222 822 587 544 737 107 720 709 292 286 337 167  96 812   9 778 723 608
 683 117 742 134 460 323 667  12 137 602 666 209 609 804 636 584 576 557 595  24  68 715 244 256 210  29  54 808 688
 663 471 767 365 680 551  21 644 185 136  11   4 750 479 586 658 735  86 652 254  89 237 119 111 508 260 686 783 718
  41  97 801  19 787  55 748 725  40  25 385  44 795 727 806 669  13 768 726 351 148  31 654 140 285  84 645 803 797
 600 124 258 249 657 309  70 143 319  18 629 130 805 780 824 815  10 771 796 617 647 760   2 173 703 198  80 708  14
 536 638 675 159 716 312 747 435 163  83 745 318 775 698  28  33 170 356 813 821 276  30  58 110 820 191 794  37 672
 734 317 784 103 300 152 766  34 177 685   3 294 819 788 798 109 721  35 754 211  49   8  87 773 810 243 758 809  88

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.0062e+07us (= 10062ms, 10.062s)
Satisfaction error: 2
Number of search iterations: 1794
Number of local moves: 582 (including on plateau: 199)
Number of local minimum: 145 (including on plateau: 26)
Number of resets: 0
Number of restarts: 0

Problem in column 13: 32 98 101 42 71 168 212 221 257 343 364 431 732 486 268 313 399 340 527 605 436 387 822 609 750 795 805 775 819 => the sum is 12208 rather than 12209
Problem in column 22: 581 777 772 840 108 702 197 302 274 358 325 298 322 468 580 411 458 418 588 38 594 681 337 715 237 31 760 30 8 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 829 196 809 558  68 831 767 121  50 269 175 824  38  70  23 840 420 507 619 655 776 540 214 119 145  94 808  66 778
  63 834 838 594 682 586 799  31 342 187  42 800 341 332  79 603 812 543 147 394 664 617  65  64 125 133 750 107 635
  49 489 817 629 168 672 775  73  69  41 186 795  37 146  48 650 747 757 139 419 788 816 198 151 780 751 154  95 770
  40 794 711 786 253 810 418 299 241  74 833 646  83 226 126 609 514 820 692 141 110  76 819  88  47 192 798 124 839
 195 813 791 607 460 802 115 815 165  55  96 461 219 208 160 644 373 769 674 250 292 232 777 207 694 184  39 344 768
  77 155 548 684 279 821  85 243 642 267 201 343 281 167  91 675 585 561 721 209 532 771 779 482 177 158 215 772 688
  87 766 752 783 216 823 638 258  99 268 189 218 213 234 170 591 764 804 194 259 513 836 762 113 181 417 118 159 784
 220 260 651 825 156 790 132 785 302 308 238 330 501 350 221 796 818 708 805 142 284 731 120 197 375 306  46  97 715
 297 312 544 573 233 600 334 305 270 464 262 229 781 172 257 275 793 719 801 671 832 183 223 656 367 193 185 378 300
 206 354 237 690 231 426 252 359 390 705 452 283 745 328 248 748 290 524 576 827 319 285 402 247 614 355 298 188 630
 412 287 552 358 164 399 742 383 163 353 331 254 496 200 387 272 716 560 430 822 322 370 315 521 505 835 246 493 321
 296 295 518 316 303 571 686 274 327 314 348 264 533 346 356 429 294 386 608 723 364 205 479 368 661 559 803 372 211
 830 371 389 379 465 415 530 261 434 410 363 409 760 293 510 317 841 456 405 393 282 362 365 428 263 416 235 304 323
 318 432 397 301 271 400 442 395 413 469 746 421 584 446 276 349 433 463 504 325 288 531 326 749 498 374 255 423 380
 333 431 345 369 439 476 444 311 506 774 277 377 435 572 492 519 515 310 278 329 447 398 570 438 273 427 307 337 480
 577 563 604 546 245 101 392 509 500 555 503 502 204 424 449 212 340 455 466 580 388 385 336 450 108 309 357 621 528
 396 467 440 610 511 485 517 471  26 437 381 347  12 611 454 286 376 391 351 407 516 582 313 457 382 487 462 406 628
 443 512 494 448 486 360   5 474 605 589 606 134  75   2 445 458 477 478 162  84 490 484 648 549 525 534 562 554 526
 520 403 236  13 470 411 588 568 472 225 180 566 401 578 542 556 102 425   8 529 599 537 441 404 361 324 565 697 488
 553 522  19  15 497 266 557 665 615 173 669 453 414 596 508 595  59 166   7  27 654 538 695 475 612  80 590 587 602
 499  29  62 202 659 249 541 626  81 491 676 662 495 702 618 114  72 130 459  82 210 677 666 683 581 545 523 696 179
 593 627 230 640 564 149 451 199 653 575 567 473 468 704 673  45  98 182 649 117 227 144 679 550  92 527 481 709 143
 725 622 122 111 701  61 598 174 539 624 720 743 280 483 730 104 123 224   4 579  17   9 647 713 623 547 641 693  52
 738 698  67 148 739 240 191 636 712 668 706 592 536 699 583 105 136  44 137 408 631  36 691  32 222 335 689 700  90
 645  93 131 190   6  43 135 735 761 637 718 714 551 569 717 633 153 242 652 320 685  89 352   3 763 678 733  58 203
 639 422  24 291 807  28 289 741 740 797 687 129 535 753 755 150  51  21 127 601  14 707 128 727 597  30 680 728  11
 744  18 620 251 789 152  34 754 734  56 338 106 737 681 703 138 643 217 256 384  60 663 109 732 724 826  10 710  20
  57 366 100  53 625 171  16 658 632 811 103 112 787 657 782 339 228 169 765 773 729 140  54 792 670 837 634  33 116
 828  78 161 239 722  71 736  86 726 613 616  22 667 660 806 157 436 178 574 759 176 265  35 814 244 756  25 758   1

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0002e+07us (= 10002ms, 10.002s)
Wall-clock time (full program): 1.00631e+07us (= 10063.1ms, 10.0631s)
Satisfaction error: 2
Number of search iterations: 1422
Number of local moves: 525 (including on plateau: 153)
Number of local minimum: 115 (including on plateau: 27)
Number of resets: 0
Number of restarts: 0

Problem in column 19: 619 147 139 692 674 721 194 805 801 576 430 608 405 504 278 466 351 162 8 7 459 649 4 137 652 127 256 765 574 => the sum is 12210 rather than 12209
Problem in column 23: 214 65 198 819 777 779 762 120 223 402 315 479 365 326 570 336 313 648 441 695 666 679 647 691 352 128 109 54 35 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 537  30  91 609  63  64 667 840  65 805  93 567  54 829 764 228 520 812  37 189 575 119  89 675  84 800 739 838 426
 822 823  79 191 224 717 752 674  85 824 841 109 210 804 151 460  72 796 123 199 698 117 463  73 783 232 108 154 625
 705  50 826 187 437 138 779 769  70 110 809 155  49 614 745 543 395 152 747 268 679 106 302  40  80 719 807 806 122
  81  55  59 833 628  57 798 690 136 648 546 249 310 552 494 817 292 184 202 133 811 236 104 825 797 839 547  52 234
 653 159 161 600 831  83 777 770 124 162 780 686 235 557 744 650 458 126 144 314 810 131  45 147 837 629 276 128 192
 699 211 830 203 193 832 749 585 170 802 267 221 239 318 828 765 718 157 168 261 446 200 241 723 251 731 112 174 115
 105 178  56 288 786 156 789 785 258 709 180  78 716 372 222 753 624 293 141 518 715  60 760 794 477 283 113 356 644
 266 385 305 121 784 150 526 485 208 201 383 195 566 671 529 534 583 188 209 821 240 818 330 132 795 348 300 316 820
 367 164 244 139 762 272 554 724 835 635 322 333 327 323 607 728 496 618 512 137 398 331 182 462 183 290 280 165 819
 610 246 317 515 538 253 602 726 134 428 230 172 176 711 247 631 678 418 307 536 259 621 204 279 623 781 319 336 312
 185 616 274 615 782 326 591 545 299 730 695 358 373 270 321 720 516 388  68 328 273 406 262 264 295 381 834 237 257
 836 350 179 294 320 255 581 626 360 198 334 434 619 541 214 572 483 308 364 634 611 365 787 539 311 366 186 207 335
 260 407 370 374 390 393 490 643 815 371 286 238 668 481 353 206 486 401 269 687 556 271 298 325 363 392 304 763 349
 801 533 324 375 167 681 424 443 436 416 341 499 579 309 254 399 508 474 411 173 303 306 772 265 233 478 359 459 487
 297 296 514 461 285 344 435 277 354 500 409 337 402 405 532 410 432 827 387 396 452 479 391 568 510 507 148 468 386
 489 451 400 521 351 252 394 282 329 380 223 630 649 570 528 497 582 412 231 472 397 346 384 376 362 377 332 544 448
 339 419 431 114 498 697 368 315 340 417 488  35 523 429 420 369 342 588 555 444 513 464 414 287 511 352 550 549 438
 509 593 636 491 175 476 301 467 445 313 245 343 638 449 522 382 389  17 408 571 503 439 493 480 501 413 495 469  46
 599 594 415 482 502 525 196 357 453 425 450 492 427 456 561  48  47 484  76 580 652 447 504 519 422 506  74 475 441
 696 471 551 470 149 562 197  34 587  12 378 672 657 142 666  62  61 598 613 102 473 736 590 633 596  10 656 793  42
 457 433 345 701 455 564  18  28 740 220 530 683 669 171 589  25  96 454 573 466 216 627 677 738  69 560  43 440 622
  31 465 651 242 592 663 145  14 527 218 603 125 574 617 700 169  20 646 642 565  71  13 604 645 505 755 107 597 703
 606 680 676 576 517 664 338  77 774 584 531 129 612 181 120 194  82 737 773 403   6 702   1  87  19   5 733 741 661
  99 670 225 535 601  23  58 291 693 569 684 673 212  92  24 704 177 665 595  88 577 757 620 423 563 586 639 103 263
 659 694 748 632   7 217 158 116 608 524  27 803 226 248  41 160 281 654 750 637 130 758 710   4 146 101 655 725 790
 256 712 548  22 163 540 111 278 727 442  67 814 647  39  11 275 682 743 761 767  26 792 729 118 355   2 734 605 243
 135  90 347 707 421 808  75 140 166  44 732 768  95 756 640 215 688   8 662 799 127 100 558 229 559 691 430 641 578
  94 713 791 692 361 722  86  38 658 379 714 660 706 205 284 289 759  29 735  36   3 708 153 788 213   9 553  53 778
  16 721 816 219 227 775 250 190 813 143  21 751  51  97  98 404 742  32 746 685 689 754 542 771 766  66 776  15  33

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00021e+07us (= 10002.1ms, 10.0021s)
Wall-clock time (full program): 1.00644e+07us (= 10064.4ms, 10.0644s)
Satisfaction error: 1
Number of search iterations: 1677
Number of local moves: 640 (including on plateau: 148)
Number of local minimum: 146 (including on plateau: 18)
Number of resets: 0
Number of restarts: 0

Problem in diagonal 0: 537 823 826 833 831 832 789 485 835 428 695 434 668 309 532 497 342 17 76 102 216 13 1 423 146 2 430 53 33 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  13 269 780  60 155 304  18 761 598 760 671  10 666  29   3 679  44 467 282 732 167 773  19 245 783 709 701 752 759
 794   5 807 266 317 427 444 713 484 828 777 157 417  36 678 816 608 428 768   4 154 471  25  23 755 746  21   2 238
  28 596 223 179 143 353  37 297 636 639 733 176 700 421  52 750 781 725 226  80 790 529 804  70 767 727  27  33 687
 718   6 758 139 207 216  20 647  71 387 721 716 242 181  91 763 723  58  22 690 544 793 762 208 747 337 815 581  46
 563 104 741 273   8  35  12 602 654 769 138 652   9  41 800 808 662 183  98 706 776 630 633 144  24 696 670 730  48
 736  92 565  39 256  77 106 570 720 740 281 795 672 149 642 277 743 129 102 686  62 710 653 315  34 515 697 682 164
 681 547 715  68 169 641 313 526 619 116 188 805 675 141 764 170 766 120 121 703 105 504  16 123 606  30 603 657 717
 772 115 631 114 289  67  42   1 635 698 626 624 663 539 604 349 442 339  79 528 124   7 645 359 797 585 738 684 113
  17  69 448 502  14  75  94 618 534 553 110 492 475 745 550 659 215 578 605 481 146 649 495 205 637 554 566 498 625
 719 213 595 521 536  65  49 576  15 617 548 568 676  72 541 397 616 234  51 312 510 546 531 210 184 477 665 533 632
 707 551 668 644 457 200  31 673 524 253  11 107 332 562 591 628 599 251  45 472 549 555 594 345 142 674 530 451  63
 542 651 440 571 538 658 291 558 275 265 500 638 328 514 151 267 597 290 491 224 211 204 305 344 418 324 586 469 559
 331 439 452 503 552 567 177 518 511 573 461 479 473 557 222 338 488 505 348  59 334 314 519 463 218  54 560 572 622
 380 347 393 411 577 480 367 412 450 284 396 453 391 416 405 438 496 325 569 404 437 300 482 410 460 611 335 420 360
 478 458 254 459 296 497 501 221 327 369 370 449 564 540 429 425 493 613 423 206 433 336 485 661 468 486 376 259 333
 455 343 378 382 302 490 592 787 430 375 257 520 357 354 443 466 512 506 407 322 364 330 394 483 535 426 295 432 272
 508 320 316 441 627 403 582 446 436 366 373 326 395 298 271 399 408 507 447 386 434 401 377 409 522 708 615 263 225
 465 509 310 374 303 400 689 193 363 836 319 612 199 532 388 712 494 819 422 389 323 445 454 191 255 308 241 384 280
 279 365 287 219 664 419 643 341 431 584 278 462 260 301 385 318 379 655 841 456 801 288 415 464 523 276 132 372 371
 258 782 321 217 383 667 694 589 244 579 748 329 704 274 286 610 414 311 235 543 156 435 381 561 246 392 186 309 355
 227 270 268 358 737 751 656 262 839 209 516 220 810 346 232 693 230 798 757 140 196 252 398 634 474 294 147 212 283
 233 285 240 413 831 742 669 802 406  86 722 470 778 243 103  99 172 734 368 131 168 827 248 499 517 292 350  90 691
 361 648 340 812 791 609 699 198 197 424 201 250 513 640 194 178 293 125 774 117 806 261 650 390 307 247 231 229 724
 784 822 150 714 695 817 832 163 174 127 749  43 299 629 128 739 134 621 556 195 830 160 108 809 137 264 185 192 153
 101 770 152 607 840 796 692 122 228 342 729 825 158 620  84  38 100 166 600 109 728 130  97 824 402 159 182 771 837
 189 765 352 838 133 726 754 112 161 165 236  95  87 623 811  32 171 786 614 711 126 136 792 646  73 476 818  76 705
 203 588 489 677 574 527 583 202 249  64  57 145  55 753 779  78  88 525 593 789 590  47  53 688 575 601 744 731 162
 180 545  40 821 680  81 788 214 175 118 306  89  74 820 756  26 351 173 785 799 685 362 813 683  66  93  82 775 829
 487 735  96 587 135 119 834  85 823  83 187 702 237 833 826  56 190 239 580 835 660 814  61 803 537 148 111  50 356

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00009e+07us (= 10000.9ms, 10.0009s)
Wall-clock time (full program): 1.0056e+07us (= 10056ms, 10.056s)
Satisfaction error: 2
Number of search iterations: 2142
Number of local moves: 962 (including on plateau: 407)
Number of local minimum: 135 (including on plateau: 45)
Number of resets: 0
Number of restarts: 0

Problem in column 16: 679 816 750 763 808 277 170 349 659 397 628 267 338 438 425 466 399 712 318 610 693 99 178 739 38 32 78 26 56 => the sum is 12208 rather than 12209
Problem in column 18: 467 428 725 58 183 129 120 339 578 234 251 290 505 325 613 506 507 819 655 311 798 734 125 621 166 786 525 173 239 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 382  77 581 639  59 797 114 741 335  45  72  70 647 351 107 320  66 826 283 825 120 769 837  75 119 588 804 730 830
 740 822 153 702  32 676 807 756 616  64 103 594 776  46 145  76 332  95 144 808 253 190  69  65 738 551 767 342 747
 607 512 836 772  39 731 623 762 684  55 770 666 820 167 136  89  71 150 206 779 137 325  78  96  79  60 497 754 709
 790 109  41 671  56 818 633 799 758  83 173 376 553 118 219  47 105 202 182 644 115 507  92 824 761 214 690 819 810
 781 692 100 811 839 236 831 321 524 195 151 181  86 172 108 395  84 801 638 566 652 138 122 157 835 199 717 657 220
 803 204 757 667 212 640 340 124 168 595 239 226 764 104 110 117 322 222 191 829 645 228 323 815 111 205 784 821 643
 568 246 163 802 259 662 841 194 245 130 470 584 479 301 132 569 141 743  99 704 165 270 833 240 281 201 792 814 280
 649 116 358 687 264 271 491 840 723 221 265 558 765 357 230 327 217 225 806 838 155 823 102 106 188 197 646 477 307
 561 149 184 421 125 309 536 619 753 275 186 269 249 337 420 299 286 254 241 613 773 703 336 389 434 777 628 816 267
 656 817 735 223 694 696 718 675 324 461 224 255 294 218 308  43 377 298 409 834 263 427 276  88 334  30 700 632 200
 386 425 175 183 504 232 596 373 448 277 828 798 375 441 266 706 247 216 258 526 210 582 714 380 198 397 535 545 388
 542 371 755 372 274 154 126 443 209 466 300 832 215 486 432 348 465 237 444 481 812 686 405 406 403 339 331 521 354
 394 385 469 398 244 368 548 235 541 282 423 780 387 390 333 641 343 493 416 456 329 505 360 291 313 439 601 417 428
 556 311 537 353 279 318 412 273 381 418 407 460 453 499 517 490 518 435 391 447 302 356 411 410 315 560 510 546 344
 238 355 347 424 454 487 303 430 346 429 538 384 352 488 565 431 522 415 455 500 400 292 578 363 278 408 262 827 338
 234 459 422 458 557 399 314 463 597 359 392 162 457 305 350 326 583 590 600 297 475 312 564 485 401 496 402 268 482
 362 533 462 620 530 436 367 608 520 654  18 365 396 513 285 445 503 602  42  73 366 559 570 451 393 414 379 317 426
 159 514 636 189 310 437 170 532 571 689 468  11 166 695 528  27 489 471 544 112 478 472 574 572 728 562 349 261 495
 187 446 577 450 622 508 289 374 531 179 284  37 473 383 483 248 576 527  58 519 679 550 549 604 516 534 158 257 611
 306 634 677 555 476 511 319 370   3 229 653 256  13  25 598 612 494 509 742 361 603 142 442 554 763 474 193 243 452
 208  33 438 501 631 207 242 655  52 480 464 345 515 625 484 369 433 523 529 330  40 498 739 609 617 732 250 211 449
 290 587   7 440 682 567 659 101 635 727  49 539  87 673 413 693 547 593 618 131  74  61 749 599 719 467 177 192 133
 156 585 589 139 164 615  26 203  90 575 552  54 621 737 752 678 251 626 650 227 586 525  38 668 711 543 185 161 502
 260 176 419 171 665   1  94 492 680 624 610 252 127 716 783 328 685 591 751 180 606 563 710  10 701 663  80  93 178
 196 316 540 296 272 605  22   5 669 760 580 573  98 800 629 661 708 651 744   6 147 364 233 691   2 658 288  81 614
 135 681 169   9 660 128  68 664  35 674 768 378 579 796 729 630 720  63 293  15 688 231 759 637 712  24 121  97 746
 304 791 341  53 775 295 113 123 148 697 786 787 782 707 725 793 721  91 766  29 705 698   8  50  12 699  16 160  34
  44 778 722  51 726  57 794  14  31 771 627 672 174 736 648 713 733 724 642  62 683 287   4 789 404  28 134  21 140
 715  85  19 152 805  48 813  20 592 795 809 745 506  23 774 788 670  36  67  17 748 146 734 785 143 750 213 129  82

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00016e+07us (= 10001.6ms, 10.0016s)
Wall-clock time (full program): 1.00626e+07us (= 10062.6ms, 10.0626s)
Satisfaction error: 2
Number of search iterations: 2104
Number of local moves: 682 (including on plateau: 149)
Number of local minimum: 160 (including on plateau: 16)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 607 512 836 772 39 731 623 762 684 55 770 666 820 167 136 89 71 150 206 779 137 325 78 96 79 60 497 754 709 => the sum is 12210 rather than 12209
Problem in row 7: 568 246 163 802 259 662 841 194 245 130 470 584 479 301 132 569 141 743 99 704 165 270 833 240 281 201 792 814 280 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 829 586 134   3  87 546  73 122 466 668 622 683 500 101 132 727 353 802  70  57 313  62 841  26 338 797 696 769 806
 786 158 114  76  23 521 671  78 830 824 473 813 111 137 604 740 147 617 723 834  50 120 614  98  60 835 304 807  41
 833 496 840  64  36  48 181  75 789 820  42 777  58 145 726 728  65 200  45 695 565  66 808 144 109 620 822 666 746
 628 832 823 150 245 670  84 205 588 511 788 479  46 128 694 253 194 783  69 207 140  72 667  59 606 758 541 204 785
 701 624 130 215 197 497 764  39 599 133 631 648 433 100 742 828 135 795  93 793 180  55 805  74 125 451 691 612 119
 784 773 149 385 688 186 131 163 299 206 684 686 170  92 780 836 189 222 165 148 227 689 210 815 175 603 718 776 260
 256 478 172 136 143 665 831  99 717 584 693 778 376 214 738 211 185 600 410 156 350 254 364 115 517 251 677 560 679
 369 660 138 157 196 765 127 837 839 516 562 708 266  89 735 179 310 791 302 234 248 519 277 314 730 208 720 223 190
 804 504 333 231 355 669 221 819 400 652 770 585 276 151 305 154 171 351 263 380 457 325 724 232 580 326 641 306 224
 230 705 658 809 403 523 141 173 390 825 642 527 176 303 273 250 293 235 178 716 582 311 247 236 794 296 698 298 297
 416 766 267 392 182 803 359 574 287 634 838 736 320 280 262 289 387 827 164 321 288 358 166 381 747 240 430 275 220
 322 663 278 300 243 781 307 407 396 608 707 687 269 295 391 315 258 425 388 429 490 398 461 443 712 422 330 270 213
 193 419 332 336 357 324 817 352 342 702 651 341 249 377 787 294 520 219 507 316 540 383 386 291 563 458 374 337 442
 261 334 264 329 384 356 312 445 378 729 672 484 371 372 362 741 509 367 382 282 347 343 531 354 812 404 483 257 344
 447 327 411 308 437 494 365 450 526 301 405 346 569 399 467 472 438 619 444 439 379 363 349 446 309 498 463 345 393
 534 486 435 409 389 482 414 550 397 564 448 317 408  21 418 184  34 432 505 424 366 412 571 426 441 587 459 470 626
 502 596 454 455 639 427 493 431 529  83 281 428  97 518 348 453  28 536 548 632 218 456 420 535 139 436 423 567 537
 611 110 616 621 226 123 722 487 575 118  82 368 360 590 328 415 568 618 417 543  54 553 501 508 394 201 491 528 481
 524 159 512 370 594  37 465 532 452 552  13 283 577 581 525 474 647 570 449 440 503  44 477 340 161 514 339 545 530
 542 174 583 480 475  91 554 489 244 271 558 168 597 623 515 460 610 421 643  33 476 495 578 471 198 108 637 202 513
 469  51 595 462 402 538 602 607 464 265  96 268 506 744 605 395 635 551 573 579  30 654 609 589  52 155 102  18 593
 566 318 522 591 630 413 676 183 488 252 237  77 592 547  81  53 748  38 499 613 406  31 711 657 225 751 188 555 561
  79 625 601 627 692 195  10 645 656 279 103  11 572 682 104  85 485   5 699 659 754 737  16 638 192 539 203 661 655
   4 361 700 559 719 674 544 510  29 375 323 286 675 818 117  32 739 152 629 557 598 653 116 704 233 241 177  22 662
 107 331   7 703 761 105 549 576  35  63  67 160 556 745  80 731 734 697 752 468 649 768 129 798 650 646 242  94   6
  86 209 710 775 633 238 685 725  24 373 335  17 709 799  47 796 673  95 771 713 760 749  12 169 290   9 191 615   2
 112 228  20 816 753 434  71 644 229 146  90 292 779 755 167 246 759  43 743 274 678 767 492 800 792 706   8 239 126
 187  19 721 814 680 319 284 733 216  49 124 255 801 821 664 153 714  56  15 199 750 762  14 772 732  88  40 826 401
  27 217 690 636 640 285 756 259  25 106 272   1 790 782 212 715 681 142 763  68 811 810 113 774 533  61 121 162 757

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00615e+07us (= 10061.5ms, 10.0615s)
Satisfaction error: 2
Number of search iterations: 1566
Number of local moves: 696 (including on plateau: 302)
Number of local minimum: 120 (including on plateau: 29)
Number of resets: 0
Number of restarts: 0

Problem in row 12: 322 663 278 300 243 781 307 407 396 608 707 687 269 295 391 315 258 425 388 429 490 398 461 443 712 422 330 270 213 => the sum is 12208 rather than 12209
Problem in row 26: 86 209 710 775 633 238 685 725 24 373 335 17 709 799 47 796 673 95 771 713 760 749 12 169 290 9 191 615 2 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 620   3  98  38 718 537 251  47 145 824 791 232 591 707 705 199  71 758 362 128 776 806 441 752 258 792 403 147   9
 808 431 724  46 769 107  27  40  54  67 775  81 491 816 744 150 127 802 233 319 670 781 673 811 743  88  89  13 730
 782 130  82  41 757   1 117  52 275 751 768 350 676 736 764  87  84 771  70 113 702 693 746  48 195 819  28 749 822
 628 179 807  20 778  43 167 685 310 794 710  34 370 703 621  80  19 699 155 121 554 603 260 613 747  11 404 315 779
  14 218 809 170  24 214 722 582 698 793 512  72 207 619 607 615 396 636 125 148 507 594 343 711  30 580 254 249 760
 723 383 546 385 739 377  12   5  21 129 762 138 269 721 639 645 265 681 714 242 561  58 255  29 740 606 198 732 634
 601 200  22 115 572 231 355 173 568 731 798 623  91 616 662  63 380 678 492 191 123 631 382 683 629 663 224 168 544
 577 299 691 518 595 647 545 120 508 419 611 105 364 448 680  90  32 569 530 101 597  96 473 505 704 656 122  50 557
 583  60 654 485  23 684 713 571   6 649 543 618  93 659 563 119  31 738 600 236  26 558 169 538 694 617  86 279 614
 632   8 562 386 522 529 671 701 570   2 576 525 116 565 625 521  15 445 499 264   4 556  35 526 487 549 247 573 498
 551 535 477 552 407 367 646 514 581 515 313 334 118 660 463 369 221 501 159 271 189 504 136 590 476 433 197 564 566
 457 585 450 439 447 534  10 641 596 398 335 246 160 237 598 440 446 536 371 220 126 559 205 540 531 575 481 588 458
 314 461 547 374 574 425   7 462 322 516 378 415 416 511 451 421 438 460 467 204 638 550 162 605 474 644 183 483 307
 599 567 548 395 368  25 490 456 541 453 489 387 455 390 388 193 417 353 506 262 400 427  66 360 677 528 488 468 513
 465 420 578 391 423 363 442 418 533 366 486 410 524 478 389 437 472 381 328 288 372 324 346 284 411 520 182 357 821
 409 754 235 408 413 240 627 471 323 318 502 337 454 475 452 317 340 376 331 500 341 330 735 430 480 402 459 399 351
 274 327 308 444 296 652 436 297 466 494 358 443 648 496 379 375 449 405 276 497 532 484 759 426 329 273 392 352 342
 287 213 469 813 424 805 356 733 397 250 283 495 320 336 332 393 209 192 359 527 401 479 509 434 326 278 414 345 830
 291 679 281 294 272 177 428 243 311 256 470 234 728 624 263 325 774 406 277 820 655 267 742 292 298 194 589 797 222
 252 633 316 253 349 201 338 135 270 832 241 304 826 309 238 482 587 178 773 560 643 174 429 248 785 161 766 658 268
 321 664 293 290 141 302 303 305 700 365 223 682 756 347 171 229 689 435 825 708 799 152 622 295 348  51 726 286 181
 108 777 306 657 432 164 668 715 156 361 196 384 519 144 239 709 741 103 593 579 517 823 203 257 226 259 650 592 131
 280 301 202 686 151 612 831 149 153 143 215 835 640 111 412 688 745 216 767 727 523 339 841 154 163  68 780 266 211
 285 555 261 586 100 834 212 422 818 112 133 725 667  78 300 712 784 208 814 828  97 166 344 839 146  65 672 373  73
 289 717 651 810 833 788 836 165 503 210 245 815 227 110 139 772 753  18 206 542 653 132 635  57 244 109 626  79  45
 225 610 312 493  99 602 812 750 188 228 176 720 553  37  74 837 729 333 185 755 172 104 464 217  64 838 748 789  95
 134  44 829 696 800 158 675 770 716 354 190 804 137 175  62 695 719  49 186 665  33 180  94 817 184 761 604 642  36
  39 790  75 734 114 763 230 786 783  83  77 674 669  85 157 637 584 142 219 687 539 102 510 106 765 608 394 840  17
 661 666  76 690  69 827 282 801 697 796  53 187 124  16  92 609 692 140 787 706  59 737 630  42  55  61 803  56 795

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.86553e+06us (= 9865.53ms, 9.86553s)
Wall-clock time (full program): 9.92688e+06us (= 9926.88ms, 9.92688s)
Satisfaction error: 0
Number of search iterations: 1410
Number of local moves: 741 (including on plateau: 242)
Number of local minimum: 80 (including on plateau: 30)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 703 782 613 560 748  58 137 585 605  63 162 680  24 140 108 112 804  13  27 482 720 100 771 760 638 120 788 476 430
  87 537 592 481 608  99 593  71 553 735 823 730  42 126 145 144 355 102  40 128 801  62 577  72 660 654 729 824 839
 534 106 831 810 571  64 103 589 758 802  92 135 717  60 173 193 624  49 104 164 778 296 811 261 790 166 751 146 731
 132 180 725 775 360  89 369  86 737 833 101 710 557 154  80 250 472 224  68  96 761  88 772 347 723 838 171 825 686
 227 121 734 762 841 354 113 277 798 110 241 161 781 176 155 195 705 183 827 118 706  91 828 260 711  93 322 666 653
 539 186 818 754 789  47 160  81 586  95  57 230 715 199 130 231 559 695 232 158 542 198 770 743 249  79 834 768 765
 728 213 662 689 799 259 826 293 441 174 821 210 516 274 107 136 663 479 319 141 622 169 453 157 588 125 280 840 225
 708 185 415 432 721 657 211 251 633 175 184 815 445 344 127 205 803 182 201 329 580 740 750 300 244 238 202 444 688
 668 203 753 749 817 693 216 358 612 170 364 245 830 159 279 200 269 312 521 240 386 374 610 297 221 292 206 522 643
 148 337 192 598 352 218 165 305 384 793  94 784 805 194 291 115 785 658 607 836 644 189 673 152 265 330 299 252 744
 436 114 275 590 411 268 246 755 764 685 178 276 535 338 390 317 545 235 556 253 816 236 667 295 371 450 310 219 678
 214 431 363 583 332 417 361 234 591 285 395 519 807 326 365 393 463 383 738 429 651 345 465 301 367 243 462 423 323
 687 468 381 523 346 306 362 389 309 398  78 460 414 190 325 524 491 700 783 408 483 426 596 237 382 339 324 419 461
 376 331 484 674 454 321 473 335 353 467 480 595 512 587 273 529 340 404 373 412 413 456 485 315 290 466 188 421 402
 435 207 470 447 357 271 548 387 648 298 343 495 272 459 446 471 493 397 394 489 437 486 449 517 359 370 406 416 442
 327 282 499  46 388 487 391 420 475 514 410 599 497 540 303 530 247 433 304 308 396 434 532 407 469 503 452 573 443
 575 572 528 349 464 525 401 500 424 438 544 458 311   6 543 368 509 508 490 284 623  25  41 641 510 498 502 258 314
 378 477 634 372  84 392 541 536 377 627 294 418 614 533 616 328 403 531 570 567 151 629 248 547 527 316  53 348  98
  70 356 611  75 558 538 518 507 526 474 455 448 385 646 563 564 513 208   2 546 266 631 440 215  14 602 375 597 506
 552 579 320 255 257 604 698 676  51 405 600 640  20 569 682 603 143 267 757 554 181 561  73 635   3 636 494 283 111
 318 568  85  61 562 427 776 742  34 632 551 581  66 609 677 661 163 637 264 578 289 584 197 549  12 511 457 451 167
 342 645 177 122 399 777 691   9 263 505 565 380   1 752 496 550 142 138 694 679 134 617 187 639 409 626 692 336 242
 574 606  55 229 147 722  21 727  77 697 690  83 366 478 630 707  45 555 212 501  22 650  31 594 619 724 702 628 117
 220 813  69 223 217  19 812 576  65 773 615 439 379 675 620 656 109 837 262 671 133 681  82  35 696 714  18 153 647
 204 808  54 149  37 684 659  15  43  28 796 704 105 520 665 652  26 488 428 672 239 664 209 732 492 756 621 669  90
 655 683 129 400 116 566 769 601 124   4 625   7 233 767 736 763 222 814 307 766 168 726  38 800  50  23 699 131 287
 642 618 422  36 123 718  67 350 150 709 832 119 226 820 780 787 341 333 741 504 139 716  44 819  29 733 172  48 191
 719  10  16 286  97 794 270 809 313  39 786  32 746 739 713 228 196 795 806 822  52 701  59 425 747   5 670  56 278
  11 791 302 179 254 835 712 745 515 281  33 256 288 829 792 797 779 649 582  74  76 334 351 156 774 759  30  17   8

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.00622e+07us (= 10062.2ms, 10.0622s)
Satisfaction error: 2
Number of search iterations: 1575
Number of local moves: 731 (including on plateau: 243)
Number of local minimum: 112 (including on plateau: 26)
Number of resets: 0
Number of restarts: 0

Problem in column 15: 108 145 173 80 155 130 107 127 279 291 390 365 325 273 446 303 543 616 563 682 677 496 630 620 665 736 780 713 792 => the sum is 12210 rather than 12209
Problem in column 24: 760 72 261 347 260 743 157 300 297 152 295 301 237 315 517 407 641 547 215 635 549 639 594 35 732 800 819 425 156 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 143 471 799  13 784 774 808  64 797  68  32  26  51  60 801 773 816 357 771 812  17 796  33 727 316  12  70 804 214
 587 829 803  41 792 249 806 798 302  45  27 204  11 616 781 815 810  24 319 345 243 222  62 768 778 110   6 757  59
 239 566 758 453 785 140 761 244 740  72  73  92 123 378 736 706 753 198 717 769  93 805  87 161 163  54 730 788  25
 283   7 745  84 787 742 728 257 651 635  94  21  53 260 747 723 809   4 751 694  89 772 338 708 318   9  79 735  86
 288 682 649 179 756 690 802 245 737 127 169  28 160 341 697 639 678 107 684 645 120 658 154 743   3 375 129 709  15
  49 721 674 504 722  38 634 278 688 705 685 165  58 128 628 700 731 156 670 692 201 600 121  16 669 139 226 593  18
  20 714 622 659 734 702  31 573 665 620 113 171 361  42 676 646 585  97 623 584  95 605   1 699 309 303 217 546 197
 560 609 556 648 604 644 643  23 663 116 601 178 588  34 463 543 619 621 672 650  83   8  98 673 250 220 251 586   5
 100 614 657 617 544 567 402  75  30  44 618 192 625 564 696 541 552 602 632 558 199 599 317 624 325 174 472  35 234
 574 455 509  10 578 656 641 125 538 190 259 579 500 152 530 555 531 130 557 629 252 582 525 568 124 354  65 713 328
  47 638 516 655 486 595 269 114 598 550 136 241 553 540 539 528 534 513 449 615 307 481 310 511 184 270 185 563 282
 591 683 395 397 501 315 467 532 426 529 437 106 612 134 495 527 518 594 575 606 188 480 293 454   2 237 551 322 242
 377 476 433 364  14 510 422 576 458  50 537 444 141 521 491 506 474 479 450 478 368 559 456 503 385 469 436 441 391
 561 457 189 493 520 267 461 492 562 468 296 465 298 526 448 517 515 489 406 177 155 424 411 497 597 321 446 418 333
 369 825 348 439 484 370 412 380 359 498 419 360 414 507 404 326 427 388 440 410 477 475 340 417 400 428 323 372 398
 432 425 494 488 392 352 434 429 399 464 451 583 366 502 416 387 394 329 405 331 445 374 342 452 631 299 355 353 485
 430 291 356 381 407 390 367 396 334 533 401 304 524 379 413 443 308 349 386 420 522 286 389 363 770 652 292 382 741
 384 263 314 330 294 442 332 246 347 409 431 415 320 839 346 371 358 301 421 312 811 335 496 235 732 733 607 362 423
 289 280 297 324 344 435 350 782 272 290 542 403 240 666 351 221 313 337 752 305 505 383 487 393 569 473 691 273 642
 695 261 247 276 168 339 285 693 266 499 256 482 373 365 264 281 287 258 343 833 408 274 592 158 813 490 680 746 577
 783 311 248 807 194 268 254 726 817 208 238 667 209 681 253 300 207 210 224 229 830 205 336 230 581 596 613 376 608
 818 225 164 295 102 142 138 636 271 202 570 838 523 228 173 211 148 755 167 146 828 837 711 236 508 703 724 200 710
 227 203 284 687 215 462 466 580 193 671 590 841 630 212 149 265 182 661 216 180 572 327 790 223 725 438 279 150 791
 701 187 126 218 137 840  80 133 191 571 762 647 780 547 231 172 183 653 118 255 729 166 834 794 306 565 545  78 660
 554 460 219 712 470 112 170 233 122 626 750 668 749 195 162 131 151 719  85 232 824 213 686 720 147 779 548 117 654
 777 159 175 459 181 157 105 512  52 821 775 776 718 627  55 115  90 689 186  46 754  82 820  81 135 822 789 535 716
 145  96 447 793  74 196 206 664 603 835 766 767 759 662  29 176 108 610  43 153 611  99 836  66 675 633 277 132 748
 637  39 109 764 103 738  56 589  67 536 483 831 763 826 144  69  57 819  36  40 744  48 640  88 519 765 800 104 795
 549 262  76 119  37  77 679 814  61 827 698 715 707 677  91  22  71 760 111  63 739 514 704 101 275 786 823  19 832

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00022e+07us (= 10002.2ms, 10.0022s)
Wall-clock time (full program): 1.00633e+07us (= 10063.3ms, 10.0633s)
Satisfaction error: 2
Number of search iterations: 2019
Number of local moves: 643 (including on plateau: 179)
Number of local minimum: 154 (including on plateau: 24)
Number of resets: 1
Number of restarts: 0

Problem in row 7: 20 714 622 659 734 702 31 573 665 620 113 171 361 42 676 646 585 97 623 584 95 605 1 699 309 303 217 546 197 => the sum is 12210 rather than 12209
Problem in row 25: 554 460 219 712 470 112 170 233 122 626 750 668 749 195 162 131 151 719 85 232 824 213 686 720 147 779 548 117 654 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 816 609 730 621  93 822 686 688 164 657 157  36 616 728  30 114 770  73  40 349  55 625 771  68 838  81  48 116 808
 798 807 650 182 824 676 710 128 437 608  61 136 658 652  45  75 799 134 104 831 152 638  82 153  85 121 105 738 820
 733 751 572 142 118 797 443 300  97 525 587  83 805 789 385  62 743 195 447 812 171 123 200 140  60 117 835 336 841
 829 677 741 811  92 120 663 327 746 712 280 199 821 684  42  74 756 122 544 814 150 158  58 154  52 569  37 253 724
 739 823 190 605 839 809 403 119 174 761 133 510 623 755 242 252 777 196 232 620 231 209  71 800 364 295 159 129 149
 726 707 193 833  56 102 827 176 759 560 236 172 810 682 775  77 772 206 425 748  49 187 184 674 284 331 381 166 111
 598 708 268 368 204 672 796 747 225 791 316 258 768 700 127 145 302 238 711 541 135 197 830 240 198 632 139 261  94
 776 192 215 794 163 219 263 781 216 668 819  98 337 704 361 286 619 420 691 778  38 721 303 235  63 276 143 267 763
 543 784 630 313 262 289 226 350 782 779 837 309 523 169 213 189 723 456 766 567 745 147 218 241 487 224 103  88 246
 418 257 208 211 380 485 351 220 815 813 421 637 614 126 291 370 438 765 802 335 167 233 156 729 515 626 357 170 299
 256 634 774 271 400 279 260 698 305 359 801 419 611 478 214 207 319 635 607 538 414 292 205 455 482 671 173 202 250
 320 402 646 367 315 352 248 345 281 645 375 683 432 475 223 180 269 398 661 518 709 412 294 160 826 422 426 454 371
 304 314 278 307 471 459 409 832 340 408 310 504 591 378 585 308 272 659 648 579 344 407 288 274 415 383 391 481 270
 282 325 324 334 489 372 413 273 461 540 342 445 297 836 434 613 594 348 467 373 306 382 397 453 228 444 449 509 479
 353 508 201 266 442 417 483 427 473 495 393 405 377 384 457 354 477 589 618 428 557 347 343 410 502 469 404 396 234
 524 329 466 374 362 290 376 687 512 323 564 497 480 222 450   2 355 251 622 317 492 424 245 673 388 358 533 539 554
 517 338 318 369 505 390 513 549 500 499 511 602   6 387 394 535 249 386  46 287 488 532 498 312 439 463 577 547 452
 389 346 395 669 451 259 436 582 423  54 696  14 124 583 654 651 468 366  76 227 527 573 435 506 490  80 649 555 531
 217 365 465 501 333 406 491 526 460 503  11 516 392 458 470 484  15 321 254 203 486 563 462 476 542 660 529 519 581
 431 528 446 522 592 662 507  17 536   3 647 561   4 576 441 633 556 113 101   7 562 440 496 399 551  79 588 665 546
 230 108 545 433 146 641 719 301  89 162 416 264 530 168 553 764 697 430 265 194 326 615 640 714 558 595 521 552  33
 474  51 568 667 596 627 631   8 574  50  21 586 429 575 559 628 112 161  59 191 693  44 604 448 606 411 597 655 584
  86 186 537  57 685 679   1 692 653 132 717 550 293  91 610 690  26 243 229 141 593 636  13 758 494 401 599 702 715
 137  27 548 125 580   5  39 578 179  64 642 600 285  31 565 828 534 762 603  78 178 703 725  25 699 514 722 706 727
  95 239 330 131 790 464 601 590 731 328 689  24  90 138 752 612 244 795 356 773 675  72 744 566  35 624  22 656  43
 183 298 181 834 472 749  70 629 695 210 115 788 311  20 736 769  96 678 332  32 735 322 664  23 493  19 840 694 221
 151  41 571 277 130  84 165 296 360 144 283 783  28 188 740 760  34 718 617 339 818 701 716 803 643 767 341  67 644
 275 680 110 670 666  18 100 106  10 363  87 705 255  47 713 754 177 817 247  69 732 720 787 570 806 785 804  29 107
   9 175 109 155 753  65 379 237 212  53 742 825  99 185 148 793  16 734 639 520 681 786 780 750  66 792 737 757  12

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.79522e+06us (= 8795.22ms, 8.79522s)
Wall-clock time (full program): 8.85624e+06us (= 8856.24ms, 8.85624s)
Satisfaction error: 0
Number of search iterations: 1509
Number of local moves: 849 (including on plateau: 347)
Number of local minimum: 97 (including on plateau: 46)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 807 773 320 700  50 681 720 804 235 743 792 117 822 758  26 658  38  99 276  25 431  73  95  35 508  30 767  77 749
 771 493 176 735 258 775 709  68 167 744 175  93 757  31 782 724 801 226 141 565 730 648  65  47  16  22 654  41 795
  40 823 228 643 132  69 725 438 716 799 779  29 764 469 139 678  36 829 673 761 686 687 685 164  52  44  15  82  24
 706 753 256 640  42 770 739 392 797 661 165  12 697 645   9  28   1 238 349 665 721 288 183 102  62 787 675 229 597
 710 704 146 637  34  94 738 576 671 370 251 651 470 649   5 159 736  45 108 699 606 634  72  19 222 731 669 110 693
 777 660 109 826 620   8 752  80 627 601 245   2  63 177  20 740  23 145 166 487 668 800 284 242 705 679 820 278 605
  27 624 350 718 567 723 282 106 391 518  54  37 628 587 618 713 659 280 150 717 480  58 155 185 543 564 596 195 684
 755 600 271 525 690 462 591 294 190 492 149 571 529 791 672 503 664 137  92 530 527  21   7 237 156 522 516 179 536
 540 631  98 726 120 719 656 231   3 603  53 515 683 425 602 655 333  86 186 201  43 549 329 297 287 728 691 635 584
 561 286 233  85 746 588 703 138 283 562 551 639 595 663 593 182 437   4 128  32 274 604 101 119 557 586 626 695 638
 599 566 302 646  51 488 548 555 153 653  33 577 580 463 455 520 513  18  67 737 135 666 406 298 178 410 542 458 592
 572  46 460 478 594 553  48 484 589 269 614 667 136 512 517 632 264  66 267 435 507 447 610 142 133 514 496 535 622
 499 613  11  17 538 582 526 279 442 523 421 598 497   6 473 448 539 590 474 464 456 272 433 200 446 533 399 429 501
 306 400 468 581 485 439 262 534 483 475 315 378 436 304 383 511 537 408 461 430 541 472 104 451  74 608 524 491 348
 500 617 495 477 343 403 471 482 375 426 374 409 290 494 393 427 386 402 371 327 510 556 398 467 353 416 345 259 443
 379 289 432 414 404 452 434 388 509 389 545 347 642 418 419 546 331 486 481 361 273 254 619 373 476 554 351 411 232
 390 420 652 309 454 504 285 621 459 268 352 191 423 453 506 444 689 415 457 296 424 407 489 547 372 358 367 397 260
 295 204 796 422 396 316 490 249 727 224 814 355 450 250 317 394 198 312 789 519 368 381 676 754 405 199 338 243 328
 498 364 550 558 221 281 113 742 334 413 528 342 380 223 301 360 376 332 778 382 466 241 835 560 225 385 340 745 336
 357 308 756 252 677 300 395 793 502 763 341 401 187 838 310 263 344 815 544 412 369  91 230 563 417 196 152 387 246
 210 219 365 305 324 337 303 330 825 158 702 335 291 363 326 277 325 729 766 313 253 359 339 824 670 692 194 647 428
 236 207 570  59 234 292  79 531 732 127 607 630 257 266 760 218 318 579 708 818 314 833 205 625 827 362 307 215 293
  97 247 609 377 323 160 356 319 786 240 680 209 776 255 784 197 162 698 816 134 578 819 449 366 220 384 121 701 346
 147 126 722 143 322 812  90 629 239  56 780 781 111 831 208 575 157 817 790  89 163 193 774 840 712  71 131 785 115
 275 321 682 227 839 203 118 636 114 112 641 174 214 217 809 170 270 747 441 173  81 694 762 696 711 440 311 832 299
 103 189  14 445 479  78 741 148 161 168 261 841 265 169 688 623 811 532  84 116  64 657 828 830 611 836 813 644  10
 154  13 707 107 751 768  88 583 559  49 206 805  61 151 244 211 794 759 505 248 130 354 810 769 616 202 144 615 806
  96 521 798  87 750 181 123 650  83 748 212 788 105 216 662 213 734 803 568 465 574  76 714 674 834 172 180 122  60
 802 192 633  70 765 171 124 129  57  55 569 715 100 585 188 140 733 612 573 808 837  75 552 783 821 184 125 772  39

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0003e+07us (= 10003ms, 10.003s)
Wall-clock time (full program): 1.00636e+07us (= 10063.6ms, 10.0636s)
Satisfaction error: 1
Number of search iterations: 1488
Number of local moves: 846 (including on plateau: 320)
Number of local minimum: 80 (including on plateau: 37)
Number of resets: 0
Number of restarts: 0

Problem in diagonal 1: 749 41 15 787 222 242 155 21 43 32 67 66 539 511 393 418 423 355 528 763 825 531 356 812 839 445 707 521 802 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 201  70 193 832 188 840 218 678 176  29  44  99  21 139 779 757 165 805  67 780 841 681 636 203 815 748 701  95 408
 112 775 767  47 104 750  39 700  88 205  66  82 122 537 670 728 120 791 133 585 593 125 721 824  92 626 781 697 329
 752  86 234  58 553 654 769 152 838  15  34  73 231 566 821 725  41 826 115 819 811 668 563  79 151 483 540 194 358
 154 249 784 810 600 705 209 703 114 108 616 100 175 828 827 603 116  96 281 756 547 224 742 187  52 264 735 208 416
 186 251 664 174 813 753 661 630 153 156 128  98 121 747 836 602  59 829  53 733 330 745 343 109 476 727 673 103  56
  42  90 608  46 145 830 782 799 246 795 147  10 105 130 286 268 250 477 113 702 213 770 496 839 335 808 611 740 526
 132 143 561 212 283 676 837 510 586 279 134 425 230 766 734 149  85 210 341 778 347 621 576 184 570 709 473 342 316
 131 290 737 786 300 688 613 773 652 217 261 336 192 774 331 206 222 189 106 141 797 708 739 181 142 609 690 258 140
 239 399 722 353 245 614 687 738 835 271 285 373 257 818 418 293 291 197 215 241 359 649 265 135 370 686 759 196 299
 195  71 653 292 161 543 768 647 834 659 273 356 214 367 275 334 235 276 252 628 783 263 831 321  45 714 428 242 549
 338 424 548 372 298 415 620 729 595 229 771 247 314 516 718 458 237 326 327  94 289 383 419 221 744 248 713 255 361
 792 426 312 460 363 512 454 385 765 736 355 504 345 313 475 366 306 577 396 216 238 304 348 491 256 308 382 407 417
 380 296 384 377 240 430 381 393 274 803 434 376 420 429 344 294 807 442 469 379 288 227 584 394 619 457 414 236 638
 297 493 465 254 556 568 513 444 441 804 389 371 533 368 282 449 482 303 244 500 559 387 324 448 582 228 277 284 364
 390 386 357 309 427 199 534 405 446 552 421 354 487 332 362 351 447 833 410 369 461 438 541 267 200 631 489 402 409
 439 349 350 452 243 398 378 468 528 456 531 497 495 522 412 400 445 532 323 403 317 431 287 437 538 494 478 436 170
 506 451 505 453 455 280 525  17 406 466 607 320   4 440 617 523 514 346 502 352 519 337 572 554 322 432  61 508 615
 423 318 521 544 665 392 155 479 463 644 404 180 474 467 471 517 395 325 555 536 401 529 319 594 499 202  91 527 119
 450 669 464 551 443 123 136  13 459 612  62 579 558 422 488 530 435 798 498 573 507 596 413 307 388 204 262 492 178
 583 589 211 486 490 207 643  18 118 618 481 411 515  84 164 574 581 564 639 501 560 597 472 557 591  89  28 656 182
 679 588  50 622 545 480  65  37   3 578 571 755 715  36 524 682 698 546 509 625 110  27 219 632 310 137  43 777 646
 462 569  63 657 675 260 160   9 637 518 610 695 565  72 604 635 539   2 598 270 650   5  69 606 726 171 148 511 723
 707 694 138 674 503 159 124 633 190 315 710 764 562 520  76 712 587 333 671 129 163 648 225 629 360 172  14 624 173
 666 683 535  30 730 126 790  55 680 301 266 567 732 232 144  75 788 684 642   7  83 623 117   6 772  32 365 693 785
 590 592 220 575  24 102  48 645 605 599 696 663 677  78 107  25 760 720 640  40 162 580 627 601  12 375  33 761 651
  20 692 542 754 706 311  81 305 339 340 716 731 719 689  57 177 667   1 806 168  51 183 127 691 233  74 550 685 794
 796 704 269 711 763  80  97 198 191 485 655 816 817 101 157  19 724  68 812 150 179 169 185 802 433 662 328  49 789
 801 751  93 295  31  54 146 272  77  22 717 793 800 758  64 741 391  87 820  35 749 253 223 743 762 278 658   8 787
 746 111 259  23 660  60 776 374 470 397 825 634 809 158 166  16 822  26 672 699 302  38 226 167 814 641 484 823  11

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00616e+07us (= 10061.6ms, 10.0616s)
Satisfaction error: 2
Number of search iterations: 1555
Number of local moves: 684 (including on plateau: 201)
Number of local minimum: 114 (including on plateau: 13)
Number of resets: 0
Number of restarts: 0

Problem in row 19: 450 669 464 551 443 123 136 13 459 612 62 579 558 422 488 530 435 798 498 573 507 596 413 307 388 204 262 492 178 => the sum is 12210 rather than 12209
Problem in row 25: 590 592 220 575 24 102 48 645 605 599 696 663 677 78 107 25 760 720 640 40 162 580 627 601 12 375 33 761 651 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 374 386 738 776 711   7 113  93   9 802 158 811 792  67  25  49 769  53 373 276 743  26 805  14 788 793 799 103 756
 147 713 636   6 766  10 651  45 755 643  43 659 806 250 194  92 675  50 761 270 737  21  13 764 778  46 748 637 293
  63 710 395 751 348 198 115 132 750 809  87 786 774  84 180 193 702  76 170  79 734  55 586 297 753 795 828 596 163
 775 663 681 356 492 632  33  86  22 773  56 688 733  30 223 167 583 260 421 155 284  36 739 785   2 723 654 496 661
 704 735 672 736  15 179 721 229  28  85  60 550 814 166 153 696 727 212  62  20 649  94 768 549 808 772 582 252 171
 691 668 588 794 218 102 233 143 275 685 203 508 667 119 140  18 574 192 177 292 674 650 609   8 652 716 625 594 394
 765 732 700 626 100 135 202 578 604 687  91 382 718 145  90  48 656 630  58  17 555 248 269 722 566 669 708 474  34
 684 559 677 553 208 189 590   4 552 534 514 217 539  66 120  35 638 570 114 363 633 173 694 622 620 509 709 392 131
 533  68 701 728 242 352 641  95  29 556  65 416 640 645 557 501 500 366 561  19   3 580 504 730 642 435 489 606   5
 608  31 535 653 185  23 607 390 118  11 717  16 310 266 655 493 666 680 597 130 503 236 707 598 575 699 456 611 133
 381 569 495 518 454 156 448 274 595 470 312 463 460 515 161 522 634 481   1 123 367 473 388 389 571 548 420 538 483
 488 121 330 536 271 241 482 497 599 565 576  54 543 165 528 516 365  27 558 178 359 562 441 529 614 450 572 479 563
 547 116 449 444 545 378 511 705 499 277 414 117 384 573 507 337  72 377 190 387 600 436 433 646 370 683 531 164 517
 424 471 380 428 427 437 225 288 560 361 615 333 603 398 445 418 498 412 452 303 512 397 407 440 355 453 304 404 459
 494 455 344 328 417 546 411 299 325 486 364 540 400 372 385 472 268 340 358 593 660 520 524 447 362 316 282 462 439
 351 280 475 465 399 402 409 469 431 219 287 466 468 438 458 740 403 322 490 476 477 429 376 502 422 318 425 478 334
 391 329 519 281 423 480 760 302 294 209 584 506 406 345 369 350 338 837 184 525 336 357 321 824 451 461 537 227 263
 296 314 335 841 419 510 446 379 313 307 432 613 430 331 383 434 464 720 298 551 323 289 393 513 349 283 360 568 315
 810 783 317 264 375 729 300 368 523 169 396 679 309 610 467 339 301 262 741 532 243 410 256 408 255 265 332 413 353
 127 342 781 457 258 746 247 592 129 771 160 605 200 690 253 199 272 442 742 777 305 664 182 291 273 324 244 354 782
 426 290 176 246 807 587 159 693 585 222 644 346 157 726 183 226 211 237 648 554 829 673 487 187 206 319 326 347 712
 231 521 154 191 254 623 758 618 789 343 836 201 285 629 803 752 822 415 647 617 174  81 151 249 232 139 251 215 228
 221 530 146 238 491 602 832 686 245 142 308 371 286 757 818 791 106 224 485 541 214 628 821 213 267  97 124 327 698
  89 128 172 306 631 505 136 581 797 197 831 719  88 754 820  98 320 261 239 715 443 833  70 787  38 138 311 401 801
 278 235 544 195 747 796 341 662 137 230 527 589  24 207 257 697  73 658 745 815 105 295 234 279 816 205 149 827 542
 188 706  64  69 657 724 749 823 671  99 484  37  41 567 744 763 181 759 220 813  40 689  42 152 108 812 148 240 619
 186 678 134 144 526 624 703 627 780 141 838  75 150 767 798 762 126 830 635 639  77 839  74 104 110  52  47 122 621
 112  32  12  83 259 601 175 826 216 616 790 405 111 692 779 770  61 834 670 665  39 840 819 109 125 107  80 804 577
 825  44  59 196 564 695 210 725 579 800 817  57  71 835 714 731 204 682 612 784 591 676  96  51 101  82 168  78 162

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00626e+07us (= 10062.6ms, 10.0626s)
Satisfaction error: 2
Number of search iterations: 1438
Number of local moves: 698 (including on plateau: 212)
Number of local minimum: 95 (including on plateau: 25)
Number of resets: 0
Number of restarts: 0

Problem in column 7: 113 651 115 33 721 233 202 590 641 607 448 482 511 225 411 409 760 446 300 247 159 758 832 136 341 749 703 175 210 => the sum is 12208 rather than 12209
Problem in column 22: 26 21 55 36 94 650 248 173 580 236 473 562 436 397 520 429 357 289 410 664 673 81 628 833 295 689 839 840 676 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 707 269   4   9 792 309 629 168 112  67 154 127 802 733 727 660 813 132 677  13 799  52  80 693  98 687 706 791 399
 118 767 656 786 709 789 250  24 211  14 721 268 703 735 714  23 788 306 754  15 715  40 678 108 139 478  35   6 659
 417 731 160 437 775 353 214 752  68  54 225 119 691 772   1 253   3 294 683 646 708 201 666  38 699 777 333 671 468
 702 581 621 161 740 129 401 446  39  36 349 207 784 753 668 670 801  19 152 669 820 149 653 106 121   5  21 658 749
 652 191 416 642 681  86  20  42 741 198 492 187 639 722 663 574 724 163 111  46 625  95 651  25  11 696 705 698 713
 644 146 615 338  18  85 613 692  63 381 524  93 686 814 291 665 647 105  94 662 723 186 589  83 695 243 507 697 310
 362 596 344 648 570 287  75 685 600 167  71 135 755 569 664 661 610   7   2 593 605 464  10 579  66 103 688 732 561
 391 320 575 567 518 475 573  77 483  50 281 122 640 790 633 729 514   8  34 572 554  99 701 673 173 239 153 704 560
 424 100 624 454 510 115 655 557  47  33 249 551 614 448 543 496 608 426 293 591  22 585 541 635 480 304 599 512 193
 548  70 367 583 594 178 408 609 618 285  49 509 760 632 457 375 488 329 251  64 612 308 623  69 487 563 672 604  97
 546  51 649 547 378  17 394 421 501 247  82 538 451 500 564 607 628 491 218 531 522 330 627 616 486  58 472 438 299
 377 528 508 520 576 481 597 550 357 157 497 165 592 545 414 405 588 398  12 523 237  92 650 542 406 470 490 477  55
 532  45 312 744 467 101 527 471 434 385 469 571 456 323 413 530 383 473  16 682 482 540 453 499 636 181 485 452 147
 634 411 494 430 396 419 368 334 584 252 565 474 553 322 326 315 301 327 418 558 307 536 412 384 389 423 566 463 248
 556 431 429 637 380 449 407 559 254 363 465 360 428 441 425 303 577 348 582 505 298 319 484 400 379 197 476 364 393
 215 354 445 436 444 316 495 513 440 498 415 552 515 758 328 439 409 290 342 227 455 395 390 502 387 516 271 359 503
 288 356 694 373 388 340 742 169 450 580 443 355 236 205 358 313 517 220 459 737 284 796 305 427 318 525 257 433 641
 372 382 835 817 241 386 262 203 374 602 332 823 410 270 232 302 274 325 260 174 461 770 404 544 555 276 311 172 840
 771 756 764 261 275 347 689 365 321 700 282 226 235 317 447 229 341 798 506 210 370 562 297 403 346 619 199 361 212
 838 803 192 336 113 809 324 295 222 511 831 204 140 292  91 265 277 519 759 768 296 643 234 189 300 601 712 179 466
 376 131 278 343 195 797 128 810 841 773 710 245 233 216 264 783 240 568 763 116 432 392 258 489 273 620 345 331 259
  96 598 711 209 141 736 176 832 539 734 769 719 267 266 136 162 263 718 748 150 142 587 170 350 206 200 750 208 626
  37 202 314 337 221 535 638 774 231 578 717 196  72 180 272 246 537 781 435 815  73 611 811 194 217 371 800 824 190
 188 224 256 279 138 690 166  90 175 676 595 776 213 238 743 603 159 720 766 185 746 778 422 335 728 549  88 286 397
 182 630  31 155 821 526 751 177 223 812 442 675  30 144  53 795 280 757 339 402  27 622  57 825 834 819 137 184 479
  60 645 164 807 827 529 125 289 837 674 124 606 123  32 158 134 148 617 590  89 244 684 143 762 533 826 747 171 521
 151 631 667 109 110 462 679 120 779 830 794 785  78  76  26 242 133 808 504 145 104 657 730 745 828 228 493 230  65
 219 726  43 183  84 725 822 816 836 787 102 839  59  29 780 351 130 804 761 716 420  62  56 255 833 283  74  48 366
 806 534  41  61 107 738  81 369 829 765 460 782  44  87 818  79  28 458 680 805 126 654 114 739 586 352 117 156 793

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00003e+07us (= 10000.3ms, 10.0003s)
Wall-clock time (full program): 1.0061e+07us (= 10061ms, 10.061s)
Satisfaction error: 2
Number of search iterations: 1852
Number of local moves: 945 (including on plateau: 319)
Number of local minimum: 115 (including on plateau: 45)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 702 581 621 161 740 129 401 446 39 36 349 207 784 753 668 670 801 19 152 669 820 149 653 106 121 5 21 658 749 => the sum is 12210 rather than 12209
Problem in row 8: 391 320 575 567 518 475 573 77 483 50 281 122 640 790 633 729 514 8 34 572 554 99 701 673 173 239 153 704 560 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 415 666  37  80 793 778  89 600 707 784 837 324 833  75  43  83  92  42 102 126 665 367  72 757  56 765 826 798 397
 518 827 108 127 803 767 685 239 717 828 100 133 715  55  68 144 130  93 117  91 815 787 192 818  67 684 681 841  59
  53 755 512 122 840 321 187 109  74 691 800 812 810  66 113  47 574 105 128 225 595 700 777 669 687 516 629 158 134
 834 762 214 771 796  79 200 150 155 795 678 807  39 132 713 136 131  81 447  71 251 813 167 659 298 382 819 115 714
 208 792 107 125 731 689  36 123 584 186 736 337  97 190  85 181 645 106 152 580 816 764 586 673 751 754 749 216 210
 104 743  50 116 825 839 164 121 165 829 832 168 172 229 160 219 148 184 732 271 806 811 458 835 185 820 802 286 135
 265 672 662 359 768 215 428 728 138 525 628 189 330 161 154 174 490  86 535 781 280 622 782 705 224 252 739  99 218
 258 838 772 282 383  60 361 696 356 281 244 157 632 204 322 149 701 704 230 607 545 478 409 549 114 752 790  90 245
 235 579 373 250 770 314 261 836 531 269 340 318 228 223 173 272 205 169 774 615 748 610 395 695 519 532 294 414 267
 188 559 310 277 533 284 365 146 110 730 259 236 254 398 297 288 642 396 290 797 775 780 641 773 112 821 462 289 197
 217 587 384 241 355 213 407 808 247 380 719 207 320 328 199 331 746 232 809 590 434 658 520 481 253 524 274 368 377
 306 540 329 275 385 417 325 451 304 551 596 530 448 346 369 374 422 343 480 694 453 591 233 463 371 508 278 387 440
 483 496 402 468 445 411 309 392 260 386 588 363 413 194 408 347 495 581 390 358 486 583 420 560 376 425 349 509 312
 421 399 517 473 400 263 412 436 419 255 410 353 431 426 824 505 515 550 456 442 295 291 352 459 482 366 176 536 345
 370 357 327 429 372 316 487 391 279 514 406 313 510 222 439 570 435 438 432 339 388 311 830 488 534 455 364 404 489
 423 360 333 430 389 335 521 539 449 162 511 576 379 504 405 302 341 466 471 196 469 427 552 381 454 513 323 507 491
 433 338 606 618 452 457 315 201 350 537 464 506 206 474 332 403 608 418 268 494 497 220 344 416 393 501 557 450 351
 441 156 541 467 248 492 336 577 479 503 465 424 293 611 401 594 476 477 562 145  28 193 182 257 564 470 582 633 612
   5 319 538 604 307 191 484 547 597 522 249 623 443 543 565 544 170 498 437 209 472  98 593 299 575  23 578 634 542
 680 171 571 677 303 646 183 546 317 460 326 500 599 548 698 485 178 573 231 142 461 266 605 262 626 362 246 529  18
 499 301  11 636 221 528 598 601  27 527  15 652 523 592 526 568 180 614 631 554 243 270 234 237 683  94 493 585 566
 653 195 688 686  22 563 674  70 589 693 139 760 650 619  34 617  69 620  73 203  96 502 256   2 706  29 555 785 661
 616 120 647 627  10 635  16 238 630 179 643 119 613 603 657 558 276 648 147 675 639 163  64 242 553 240 202 716 733
 654 101 723 602   7 118 670 569 660  45 308  58 664 776 621 745 556 703 676 226  82 198  35 296 446  51  76 741 801
 692  84 151 712 342 702 663 710  62 348  25 638  48 725 822 637 656 720 747 354  44 129 264  19  41 227 137 766 744
 668  88 738  65 166 708 679 444 817  33 159 734 682 667 711 759 561 742  38 375 153  26 729   8 740  14   3  31 671
 735   4  54 718  63 655 823  12 651  20  30 103 709 783 804 649 722 761 334 567 211 378 763  95 609 283  21  13 640
 786 394 690 699 305 212 726 140 756  52  78 625 111 788 791 697 292 572 721 724 177 141  17  24 750  77  61   9 794
  49   6 814 273 175   1 805 789 779 124 624 644  57 727 475 831 753 287 799 758 285  32 737  87  40 769 143 300  46

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0002e+07us (= 10002ms, 10.002s)
Wall-clock time (full program): 1.00626e+07us (= 10062.6ms, 10.0626s)
Satisfaction error: 2
Number of search iterations: 2367
Number of local moves: 1087 (including on plateau: 332)
Number of local minimum: 145 (including on plateau: 45)
Number of resets: 1
Number of restarts: 0

Problem in row 24: 654 101 723 602 7 118 670 569 660 45 308 58 664 776 621 745 556 703 676 226 82 198 35 296 446 51 76 741 801 => the sum is 12208 rather than 12209
Problem in row 27: 735 4 54 718 63 655 823 12 651 20 30 103 709 783 804 649 722 761 334 567 211 378 763 95 609 283 21 13 640 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 449 771  50 666 742  53 832  78 640 108 722  57  27 680 628  32 128 474 116  82 793 763 775  61 817  93 830  42 700
  40 645 720 801 426 671  91 211 189  37 839 285 489  94  65  48 670 181 606 673  46 705 603 824 728 621  69 102 730
 209 604 497 792 663 107 198 301 337  72 786 123 545 176 796 135 552 163 639 183 188 712 755 836 564 109 230 140 797
 550 783  58 794 738 105  87 103 805 201 214  39  54 237 635  49 203 825 784 554 162 660 447  71 747 837 607  79 781
 519 568  33 828 833 278 159 685 581 100 157 254 501 260 657 199 147 665 776 124 597 623 770  77 816 171 610  85 136
 190 823 252 693 558 531 186 142 215 182 273 185 646 213 809 119 287 835 811 205  74 624 740 822 572 274 576 200 172
 294 721 152 196 834 461 656 167 245 222 321 243 674 195 725 125 840 732 335 815 284 599 814 144 250 121 658 247 139
 574 575 206 261 677 562 224 838 711 263 345 244 757 306 367 219 218 339 240 813 104 818 570 239 221 265 681 249 323
 676 316 819 266 741 168 120 126 788 288 317 207 618 270 831 408 802 283 369 251 267 620 255 174 756 133 769 161 410
 708 544 521 164 290 242 739 232 731 821 354 272 600 416 787 155 310 197 277 365 276 425 668 233 238 407 688 291 258
 687 352 413 484 803 378 223 282 790 401 308 231 799 390 655 304 389 299  99 726 379 526 264 191 256 228 691 359 302
 178 374 313 372 717 358 795 322 325 217 320 412 789 382 684 443 309 442 281 506 259 439 437 268 194 827 508 343 395
 469 494 735 257 318 391 798 487 418 450 476 275 405 292 349 404 356 342 498 454 202 504 428 478 409 279 493 333 415
 490 296 315 376 481 541 800 444 529 533 353 520 456 399 334 448 366 347 420 403 398 491 368 397 433 187 385 351 348
 525 396 384 393 430 357 571 473 587   5 364 312 457 595 314 331 327 559 503 440 496 380 512 429 441 427 269 375 557
 569 377 455 480 436 605 346 514 411 524 330 311  24 435 400  21 523 466 402 535 305 360 271 463 555 637 515 488 451
 538 388 386 462 154 472 422 653   1 477 460 336 468 537 381 482 467 511 371 216 434 293 539 392 453 534 542 419 421
 158 548 566 485 406 246 590  55 714 608 459 540  88 486 141 495 695 137 573 341 417 387 300 518 432 592 170 502 560
 530 492  81 483 363 414 332 475   7 513 438 593 177 579 113 585 340 551 549 319 471 361 229 613 464 596 589 452 500
 431 598 253 619 241  12 602 594 479 446 629 690  30 662  34 543 505 686 423  90 547 329  47 580 642 601  92 654 150
 577 204 633 583 528   8 643 651   9 383 697 744  35 470 338 750 127 588 667 584  38 227  68 509 146 516 286 622 578
 115 148  96 679  10 733 522 785  11 746 465 699 130  45 210 649  84 626  75 627 689 394 510 586 664 517 131 698 565
 151 567 683 659 122 764  19 678   2 727  22 424 106 719  51 644 616 614 631 295 617 328 145 737 179 536  64 527 582
 324 114 806  26 326  31 636 532 248 615 804 561 297 499  89 736 672 611  56  36 652 118 632 625 160 165 638 591 609
 280  97 702 208 153 675 350 713 743 753 706 761 303 648 235 707 630 507  83 762 641  70  41 193  25  62 373 715  73
 773  60 694  86  59 749 298  76 132 355 692 546 716  29 344 829 634  95 669 754 723 212 703 226 184 169 262 778 362
 220 156 650  14   4 704 556 745 445 709  80 760 458 661 192 812 612  17  63 236 779 112 149 729  43 791   3 758 751
 289  23  18  66  13 810 370 780 563 752  98 777 734 767 820 765 166   6 134 710 647  28  52 774 138 766 173 841 129
 696 175 718  16 143 782  44  67 553 701 180 808 826 768 225 772 234 111 759 110 724 101 117  20 682 748 307 807  15

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00013e+07us (= 10001.3ms, 10.0013s)
Wall-clock time (full program): 1.0062e+07us (= 10062ms, 10.062s)
Satisfaction error: 2
Number of search iterations: 1581
Number of local moves: 785 (including on plateau: 330)
Number of local minimum: 96 (including on plateau: 36)
Number of resets: 0
Number of restarts: 0

Problem in column 6: 53 671 107 105 278 531 461 562 168 242 378 358 391 541 357 605 472 246 414 12 8 733 764 31 675 749 704 810 782 => the sum is 12208 rather than 12209
Problem in column 14: 680 94 176 237 260 213 195 306 270 416 390 382 292 399 595 435 537 486 579 662 470 45 719 499 648 29 661 767 768 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  52 772 715 771  45  30 268 786 764 808 326 717   9 501 104 743 703 741 709 280  25 758  76  50 722  53 368 297  16
  17  26 200 777 736 776   8 712 686 767 801 211  48 800 749 672 734  12   1  38 773 670 804 134  55  94 148   4 756
 753 799  37 598 112 789  35 682 782 805 746 707 111 738 714  36 792  15   5 159 762 731  49 157  57  98 149 601 190
 677 629 147  33 785 716  28 209 710 529 397 747 621 769  32 696 600  24 708  65 656 181 719 137 676 463  67 105  83
 750 588 150 652 320 794 602 140 687 787 595 138 691 674 669 188 653 790 689  40 725  23   2 162  39  97  22 535   7
 597 684 492 702 665  19  95 108   3 658 774 176 113 705 755  80 768 655 649 614 628 250 683 357 458 118 155 179  69
 700 153  62 648 643 630 350 103 748 594 673 679 651 623  42 213 609 613 585 713 737  71  63 275 282 364 115 186  84
 668 795  43 718 751 650 189 253 382 606 490 568 678 579 680 166 675 551  14 661 637  13 554  11 219 144 450  44  20
 599 164 638 733 385 693 302 106  88 532 539 596 536 666 591 146 730 646   6 660  18 499 444 184 325 495 168 109 611
 336  64 540 384 493 754  85  81 491 624 584 132 569 524 639  27 503 695 327 572 531 586 573 127 291 553 508  91 525
 366 519 433 460 644 575 470 110 276 515 341 480 583 616 567  51 578 582 119  46 526 610 550  21 178 477 562 546 408
 571 517 120 522 400 288 185  10 593 457 565  34 615 432 494 622 506 566 557 472 353 152 563 225 312 528 552 456 542
 507 419 393 559 466 592 392 102 484 204 545 246 448 475 561 482 411 478 534 435 359 328 399 183 510 442 410 348 497
 523 520 631 502 511 406 352 642 300 485 469 372 443 445 117 547 193 439 465 577 317 303 479 222 446  31 512 505 455
 214 412 541 590 396 403 342 428 316 377 356 564 488 363 509 481 462 347 334 365 516 496 248 464 474 256 476 379 612
 570 473 362 304 437 498 417 423 315 135 413 521 337 461 398 369 407 436 504 367 839 290 272 361 447 811 355 266 421
 441 234 232 230 434 335 548 426 452 305 798 354 833 273 145 343 386 345 429 371 405 760 198 752 763 269 239 376 533
 251 331 314 309 416 440 422 370 659 310 471 451 388 414 402 807 218 826 415 244 329 487 321 783 574 271 293 344 349
 199 306 330 438 277 339 729 603 518 662 409 391 555 241 311 779 201 247 721 208 332 338 831 640 395 263 298 390 258
 313 236 373  89 229 806 667 617 249 375 237 292 296 431 378 587  77 158 401 817 267 295 635 711 633 279 657 820 284
 270 228 819 205 340 380 514 530 383 286 318 781 425 191 430 704 324 245 486 224 821 285 287 723 387 420 692 278 233
 255 252 289 216 301 196 389 827 154 319 265 784 351  58 299 607 360 257 143 619 174 765 308 802 620 815 645 513 626
 133 544 728 404 381 136 813 663 322 254 227 226 139 283 210 791 167 203 192 165 262 757 346 688 627 264 828 690 766
 182 358 793  70  78 418 796 632 220 126 231 605 197 294 449 538 221  90 207 818 238 217 797 810 543 735 307 558 681
 242 235 697 100 823  86 618 468 537 261 169 187 701 212 576 580 260 122 128 759  92 459 171 647 259 830 720 636 634
 243 163 824 835  29 114 549 654 170  75 240 177  41 215 608 274 194 745 778 151 604 727 121 816 142 560 641 739 780
 101 699 394 175 131 161 803 664 698 124  96  79 424 107 427 130 195  74 724 454 156 116 812 467 840 814 834 740 770
 838 500 706  56 172 125 453 527 123  87  66 323  93  47 173 489 223 581 694 832  54 281 822 744 160 837 836 742 625
 841 589 206 129 809  60 788 333  99 141  68 671 825  72 180  61  59 726 685 483  73 761  82 556 775 829 202 732 374

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00016e+07us (= 10001.6ms, 10.0016s)
Wall-clock time (full program): 1.00621e+07us (= 10062.1ms, 10.0621s)
Satisfaction error: 2
Number of search iterations: 2052
Number of local moves: 791 (including on plateau: 257)
Number of local minimum: 152 (including on plateau: 26)
Number of resets: 0
Number of restarts: 0

Problem in column 10: 808 767 805 529 787 658 594 606 532 624 515 457 204 485 377 135 305 310 662 375 286 319 254 126 261 75 124 87 141 => the sum is 12208 rather than 12209
Problem in column 26: 53 94 98 463 97 118 364 144 495 553 477 528 442 31 256 811 269 271 263 279 420 815 264 735 830 560 814 837 829 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 789 806 616 719 829 251 760  30 611  21 794 153 816  39 203 837 241  79 151 355 103  92 726 769 311 102 107  68 831
 727 118 827 716 811 814 812  25 771  61 540  26 639  16 170 630  73 813  51  48  22 758  66 363  38 381 714 832 347
 710  70 535 801 128 569 818 645 149 375 613  81 790  14 112 796  80 839  44 169 562 168 822 775  43  84 503 825  89
 745  99  75 440 160 667 692 227 514 115 609  96 702 255 282 635  87 109 467 797 835 721 191 651 165 840 761  77 195
 833  78 127 739 817 693 685 156 622 646 828 142 804 289  97 772  50 683 100 664  69 134 206 585 834 106 171  40 239
 799 257 821 653 218 787 777 201 819 120 715 174 234 606  85 139 264 754 200 589 144 274 189 824 253  60 773 215 265
 680 216 309 686 738 632 836 147 779 210 792  98 810 742 146 182 152 196 231 581 154 108 411 782 193 208 252 130 808
 757 285 433 805 263 343 601 791 523 186 597 233 271 623 308 275 217 306 238 547 300 830 368 838 232 325 111 258 345
 642 164 463 593 167 764 584 270 759 443 511 317 405 841 294 184 248 358 129 310 767 209 389 700 334 755 177 287 145
 665 359 462 578 226 296 536 297 652 826 492 299 695 688 175 273 458 143 229 678 292 194 268 788 288 621 331 181 219
 508 400 465 576 185 493 445 338 364 302 423 351 554 690 379 188 350 614 415 468 361 453 482 735 447 366 237 322 298
 532 316 190 633 266 362 476 342 437 211 336 484 295 641 365 457 353 712 387 404 426 807 380 553 354 734 192 305 259
 406 247 178 469 315 699 414 424 478 357 301 276 441 449 763 393 517 491 242 626 333 332 344 466 390 596 352 376 534
 495 521 236 615 373 500 452 377 328 460 497 410 243 537 397 326 419 494 533 483 367 444 392 370 428 349 371 473 319
 341 594 401 327 416 542 470 420 480 425 395 335  90 431 320 329 435 519 293 544 565 464 450 402 434 499 454 398 436
 360 442 396 348 388 391 504 346 374 448 369 407 557 430 552 446 283 418 527 356 439 403  28 574 516 555 539 339 474
 408 214 277 172 399 486 262 417 321 413 526 303 485 541 705 570 421 518 488 573 222 568 571 221 455 383 429 372 489
 386 422 286 284 378 583 318 490 512 158 479 502 612 481 459 509 427  93 510 549 505 498 119 337 409 412 543 477 471
 385 602 314 205 580 582 260 599   7 507 249 662 538 223 575 531 304 600  33 113 506 643 323  45 603 515 432 751 522
 150 647 592 224 472 394 204 312  86  32 180 550 561 577 487 579 551 624 564 290 663 548 525 162 451  95 559 563 567
  74 513 610 278 670 126 199 558 267 649 496 628 202  71 640 524 324 183 675  37  35 605 607 141 560 684 666 631 556
 261 520 704 280 475 157 104  52 131 588  72 636 587 340 590 530 696 307 591 140 529  76 595   1 781 697 677 438 654
  31 707  29 212 746 155 330 671  24 586 122 713 148 291 701 655 674 659 634  63  20 679  47  54 620 668 528 698 744
  17 729 604 279 619  62 114 756 197 676 213 566  94 207 598 638 809  42 658 235 681  15 617 250 802 256 138 650 687
  46 618 776 136 124 546  56 625 228 728 572 669  53 384 637  65 786 545 823 766 501  55 780 173  18 627  64 117 691
  88 770 105   2 736  57  91 778  67 456 187 795 313 711 720 382 660 703 689 269 661 656  19  34 743  83 741  36 657
 198 718  12 123 694  58  23 748 281 725  49 798   3 254  59 110 793  10 800 176 730 747 749 220 752 717 672 750 240
 163   9 629 137  11 159 225 706 820 753 244 740 135 116 682 121 733 125 784 648 644 724 783 166  82 245 709 815 101
  13 768 737 179   5  41 161 461 608 732   8 765 132 722 708 133 803 272 723 731 774   4 762 230 673 246   6 785  27

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0003e+07us (= 10003ms, 10.003s)
Wall-clock time (full program): 1.00656e+07us (= 10065.6ms, 10.0656s)
Satisfaction error: 2
Number of search iterations: 1473
Number of local moves: 875 (including on plateau: 283)
Number of local minimum: 92 (including on plateau: 30)
Number of resets: 0
Number of restarts: 0

Problem in column 17: 241 73 80 87 50 264 152 217 248 458 350 353 517 419 435 283 421 427 304 551 324 696 674 809 786 660 793 733 803 => the sum is 12208 rather than 12209
Problem in column 21: 103 22 562 835 69 144 154 300 767 292 361 426 333 367 565 439 222 505 506 663 35 529 20 681 501 661 730 644 774 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 829 625 139 613  91  79 790 809 612 172 673  29  20 362 556 817  40 206  69 472 503 189 768 118 724 552  73 818 461
 838  60 314 741  41  49 803 730 778 157 566  59  82 111 130 821 146  24  92  77 743 823 798 159 839 828  30 534 836
 102 830 808 684 153 664 708 722 266 649 825 229  36  56 840 444 117  47 128 123 148 164 632 745 824 134 773 198 160
 709 819 104 797 608 801 631 180 786 166 634  85  68 162 816 676 215 478 115 196 125 812 780  90 710 440  35  99  72
 110 835 618 603 834 204 304 777 161 589 764 232 262 656 704 810 203 586 119 244  83 641 600 145 485 126 212 147 155
 297 735 192 694 131 782 179 579 103 169 802 101  52 723 822 841 185 617 122 135 152 767 804 501 557 584 197 114 272
 120 622 191 569 154 474 734 762 138 811 599 275 209 691 781 199 255 224 177 225 315 287 827 319 702 831 213 193 312
 239 637 202 240 217 254 487 789 393 243 576 805 195 807 333 237 142 738 621 121 271 837 633 230 671 521 190 246 334
 742 677 141 748 369 257 636 200 754 328 593 309 281 674 168 242 313 668 184 235 832 373 645 151 658 245 303 261 222
 299 354 336 716 409 216 468 527 109 498 561 316 770 772 415 342 283 428 327 826 329 833 247 258 693 127 249 221 280
 233 345 277 248 294 574 533 317 282 792 381 470 433 746 263 408 251 700 820 411 343 544 755 220 306 430 338 227 268
 426 610 371 390 335 365 406 285 163 379 541 346 689 223 429 418 241 815 508 416 382 604 326 783 289 410 370 352 337
 256 398 173 388 427 290 538 234 260 265 483 331 270 629 269 729 760 347 292 341 340 766 442 670 648 350 476 443 394
 404 407 399 276 463 661 405 396 385 776 446 324 540 380 417 660 320 436 360 391 530 323 383 219 441 344 392 376 355
 480 375 511 403 413 351 425 432 349 389 504 475 332 454 397 278 330 348 524 377 447 293 435 529 505 506 386 452 509
 437 400 462 455 412 488 402 422 459 467 401 565 361 449  18 414 457 493  22 339 542 357 489 588 535 387 310 563 515
 537 423 532 554 458 549 174 305 450 514 321 497 502 547 367 284 507 567 522 445 482 464 490 395  21 149 564 439 150
 614 558 420 356 448 518 183 259 553 473 264  34 471 536 453 431 273 308 465 525 469 460 510  11 595 479 384 578 581
 496 573 517 644 601 137 231 523 616  76 325 494 548  50 624 516 711  94 526 424 451  70  27 650  43 545 560 555 582
 609 539 500 486 466 366  71 491 638  28 167 605 495 211 136 477 669 133 672  45 627 438 238 194 311 712 758 596 531
 623 291 657   4 551 302 590 546  97 713 181 492 374 528 519 513 615 132 575 611  75  16 570 583 129 201 434 543 744
 307 158 598 113 550 659 250 188 619  53 226 699 626  48 484 572 597 562 585 697 630   5 178 606  74 107 665 698 655
 654  42 752 124 732 499 318 647 568 707 165 683 267  55 170 571 662 587 286 687  51 175   3 607 108 105 680 651 653
 646 186 706  23 696  19 635 279 580 300 208 620 643 421  17  37 594 368 663 675 652 353  93  67 252 577 666 642 591
  81 176 679 592  33 628 214  14 739 210  64 690 695 171 705 100 678 481 731 715 703 296  10 520   7 800 747 717  13
 682 236 779 182 686 372 718 144 559 728  46 736 685 378 274  78 512  98 358 640 771   6 143 765  89  87   2 774 681
 359  61  31  95 737 187  15 116  65 775 769 156 756 759 701  62 667 639 753 720  57  88  38 602  96 761 692 727 725
  54   9  12 253 814 714  63  80 688 749  66 796 784 288 295 207 740 721 799 301 363 806 205 733 785  84 791   1   8
  26 228 788 218  86 750 298 456  39  32  58 757 763 322 106  25 726 364 794 795 793 419 140 751 112 787 719  44 813

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00013e+07us (= 10001.3ms, 10.0013s)
Wall-clock time (full program): 1.00579e+07us (= 10057.9ms, 10.0579s)
Satisfaction error: 2
Number of search iterations: 1538
Number of local moves: 845 (including on plateau: 315)
Number of local minimum: 95 (including on plateau: 36)
Number of resets: 0
Number of restarts: 0

Problem in column 10: 172 157 649 166 589 169 811 243 328 498 792 379 265 776 389 467 514 473 76 28 713 53 707 300 210 728 775 749 32 => the sum is 12208 rather than 12209
Problem in column 12: 29 59 229 85 232 101 275 805 309 316 470 346 331 324 475 565 497 34 494 605 492 699 683 620 690 736 156 796 757 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 448 692 578 828 818 556 685 765  68  67 791 840 841  27 667 140 495 732  34  33  66  15  99 725 704  85  45 157 208
 695  87 635  96 811 804 838 753  86  20 787 172 832 101 835  98 679 455  19 716  10 107 662 677 661 152  46 169 206
 247 631 434 608 480 630 836 755  89  38 682  72 837  39 671  54 670 572 191 697 185  62 236 731 666  76 824  77 119
 565 651 644 825 737 601 603 548  16  65 798 128 754  44 711  50 690 149 143 700 116  79 177 785 610 154 577 183 106
 616 801 720 698 147 778 724 202  42  91 761  84 779 167 826 243 211 817 171 115  37 120  75 639 829 136 730  81 569
 827 708 432 571 497 652 248 650 173 198 707 175 132 138 813 345 757 205 160 109 117 166 275 771 808 250 612 203 510
 739 233 773 563 229 576 678 600 272 212 819 269 251 162 823 209 258 103 232 124 217 123 833 547 783  59 680 218 624
 776 714 657 782 501 802 281 618 204  35 227 244 163 134 518 315 288 237 347 353 118 292 174 784 790 291 831 158 575
 749 769 246 717 349 505 839 693 799 190 165 224 249 282 327 270 830 338 105 259 215 274 314 511 153 263 719 187 668
 193 245 648 654 164 687 300 683 277 814 264 225 306 390 286 365 699 342 271 812 235 260 179 625 319 362 638 308 658
 257 305 777 703 253 752 821 665 324 323 261 331 358 368 313 367 310 222 336 637 304 231 279 468 326 479 694 255 490
 240 807 378 593 834 473 316 289 192 756 371 389 405 398 239 273 220 815 425 348 346 318 278 820 332 303 268 399 384
 284 406 396 743 325 669 298 411 340 334 810 461 471 404 360 295 312 400 355 392 359 219 604 478 381 307 617 414 364
 472 452 321 379 352 374 435 330 363 595 373 311 443 376 474 459 557 351 372 431 444 422 397 441 506 413 481 427 458
 395 156 494 383 451 587 412 252 430 410 333 527 503 465 401 446 532 466 450 502 388 509 385 447 409 299 341 442 394
 476 419 337 445 517 467 436 423 322 402 356 460 228 418 407 454 380 424 386 484 449 482 463 433 469 369 535 377 391
 350 528 512 453  94 297 464 382 420 524 562 417 493 589 542 483 296 585 370 201 555 558 403  36 438 366 486 485 320
 489 421 439 241 537 328 530 194 541 428 491 521 354 570 543 533 182  90 504 507 496 500 580 266 522 514  30 549 309
 609 568 189 294 526 262   3  57 538 499 462 597 429 550 456 559 111 539 561 437 520 516 606 408 596 440 127 574 176
 508 515  73  80  22 254 457 553 633 343 536 525 598 540 566 477 523 488 529  43 581 545 361 256 584 591 276 607 145
 498 582  28 223  56 130   2 293 470 646  88 647 519 513 573 675 615  64 554 613 676 594 626 188 560 475 426 546 329
  51 552 280 230 689   8 628   1 619 641 592 564 599 567 344 551  21 684 534 139 643 640 653  82 150 797 265 636  49
 121  95 197 234 660 199 102 216 705 735  92 659 634 780  23 721  40 673 672 357 734 712 416  48  14 686 210 768 706
 142  53 168 387 605 125 137 184 723 602 579 492  69 623  52 664 583 113 718 544 726 789 663  63  97 645 339 793 531
 180  24 133 135 126 146 285 588 727 681  71 809   6 696  74 715 590 620 805 655 713 758  47 301   4 751 207 748 614
 214 238 629  11 774 170  12 144 627 788  78 764 642 691  32 649 200  70 745 586 740 632 762 181 148 611 317 736  18
 122 112 622 290 621  58 287 161 729 688   9 794 151 744  31 267 131 701 702 487 763 806 129 155 221 767 100 795 766
 196 335 186  26   5 178 393 792 770 709  83  93 108 759  60 772 213 728 722 195 800 742 786  41  25 822 775 114 781
 750 110 283  17  29 141 159   7 710 375  61 415  55 674 242 760 816 226 796 733 656 738 747 302 104 746  13 803 741

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.39375e+06us (= 7393.75ms, 7.39375s)
Wall-clock time (full program): 7.45455e+06us (= 7454.55ms, 7.45455s)
Satisfaction error: 0
Number of search iterations: 1089
Number of local moves: 641 (including on plateau: 171)
Number of local minimum: 65 (including on plateau: 21)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
   6 753 125 797 759 789 800 827  36 600  51 710 133 812 793 606 231 214 317 690 157 738  25   2 169 203  28 798  40
  20 805 828 787 310 764  61 795 138 719 741 743  64 813 339 684 660  79 726 345 110 211  22  99  18 401 648  17 262
 717 314 139 612 769 810 723 709   9 783 298 771  91 799 748 739 547  67 666  44  81 698  39   5 105 156   3 693  74
  14 230 674  13 637 673 774 704 665 802 609 715 168 737  29 730 761 202 767 683 116  50  30 143  31  37 331 708 176
 733 201  38 770   1  12 714 749 455 729 721 772 296 675 321 672 218 431 725  75  96 685   4 119 289 740  54 785 129
 622 768 587 668  45 115 124 594 604 834 629 555 100 712 559 724  62 144 779  65 734 633  73 344  92  95  66 595 287
 146 159 655 611 630 647  32 742 713 667 705 566 590 699 134 636 279 108 776 692  87 646 438 207  90  85 180 106 183
 751 523 718 669  47 701  94 681 534 782 493 728 392 632 109 645   8 568 620 596 222  60 359 280  56 123  11 575 232
 703 206 569 702 511 627  55 538   7 663 530 567 631 635 136 516 148 597 552 598 259 605  26 175 208 189 679 491  86
 553  15 541 643 574 526  69 654 548  34 483 479 533 656 149 579 163 641 508 495  49 626 346 286 223 613 477 634 112
 420 562 141  35 426 525 576 551 154 517 518 236 496 529 539 543 505 349 484 485 528 591 288 117 210 492 506 285 601
 499 544 509 592 514 381 628 225 615  42 456 489 188 155 583 315 481  63 446 546 524 475 215 323 221 614 436 700 430
 469 126 478  27 364 150 618 490 512 577 550 461 322 443 167 556 536 531 413 247 519 476 608 193 199 532 462 610 573
 390 425 342 377 334 423 368 260 603 442 224 554 439 472 393 571 400 335 482 333 409 467 463 415 520 362 510 452 444
 405 445 380 427 399 437 250 268 449 404 451 379 433 416 535 521 564 375 373 503 371 369 498 580 422 374 316 504 361
 582 311 341 394 542 464 432 261 272 383 599 363 351 474 294 265 616 418 453 372 235 329 459 662 560 384 457 391 545
 398 240 355 350 284 424 448 421 171 561 745 419 488 407 337 397 817 402 318 515 414 366 473 589 586 332 450 249 253
 292 274 458 353 403 306 480 466 255 304 410 791 251 313 801 343 348 434 165 412 305 378 557 624 727 640 435 428 256
 389 376 198 454 220 174 441 164 228 382 497 258 406 340 835 302 765 429 818 191 328 356 621 500 385 658 307 365 822
 408 664 209 309 354 257 185 173 283 465 181 325 367 440 677 395 680 357 330 695 565 585 570 736 642 263 625 172 297
 196 750 190 299 291 303 243 338 754 271 195 229 417 184 558 352 277 757 387 162 744 166 494 639 735 775 276 411 816
 347 808 216 270 170 244 245 522 619 200 370 266 205 213 358 237 707 233 282 670 746 756 659 678 682 252 336 122 796
 326 720 809 111 661 227 468 158 281 101 278 388 300  24 773 275 513 760 204 160 830  80 792 396 584 234 623 447 686
 537 238 320 130 360 460 706 246 836  84 290 131 840  19 617  82 732 219 197 127 826 128 824 386 644 755 781 187 507
 186 113 821 839 841 295 563 140 248  41 145  52 588 118 471  78 179 273 107 758 657 151 676 784 838 649 823 194 581
 264 716 267 486 688 572 540 254 178 312 137  23 806 241 114 293 177 780  16 147 527  98 650 694 691 152 803 831 752
 815 319 487 327 786 638 790  72 762 120  68  10 671 121  70  77  57 811 135 651 324 711 607 747 763 687 242 102 239
 217 501 212  53 192 182 689 161 778 301  58 153 829  71  48  43 470 807  21 820 652 226 696 833 731 593 766 269 837
 804 103 602 104  97  83  93  46 502  89 777  76 814  59 722  33 308 825 142 132 794 549 697 653 788 819 578  88 832

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.94372e+06us (= 9943.72ms, 9.94372s)
Wall-clock time (full program): 1.00047e+07us (= 10004.7ms, 10.0047s)
Satisfaction error: 0
Number of search iterations: 1414
Number of local moves: 753 (including on plateau: 228)
Number of local minimum: 99 (including on plateau: 40)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 253 752 812  74 762  75 149 167  98 490 134 739 102  86 617 728 572 693 736 354 112 106 499 828 766  49 124 491 841
  27 494 834 817 838 802 155 208 183 821 627 683  72  57 798 717 827  68  89 146 170  44 582 569 558  43  92 145 742
  37 710 722  82 772  91 159 457 741 135 109 731 131 241 613 836 198 458 459  55 257 210 703 824 573 152 204 830 719
 825 818 119 375 688 650 263 535 133 153 161 730 162 123 826 740  65 176 797  54 130 823 747 559 628 136  38  99 656
  71 597  77  73 701 140 150 194 216 138 214 593 599 113 737 840  70  80 744 794 694  59 799 831 833 702 156 316 679
 520 691 125 247 318 779 236 178 273 127 163 144 705 268 814 839 104 837 784 648 278 107 763 835 647 252 116 238 173
 561 577 258 249 815 383 769 191 201 265 272 122 668 185 697 682 187 192 657 635 276 323 374 761 615 764  76 285 169
 190 795 202 670 809 218 365 829 137 341  88 228 184 317 110 654 357 174 347 653 264 805 632 789 718 625 142 299 267
 270 607 372 181 269 298 309 157 478 314 271 385 621 277 390 622 212 785 225 780 832 560 304 406 813 765 172 294 240
 213 624 243 108 207 230 319 429 211 601 195 414 816 177 760 331 203 332 509 822 224 251 782 748 618 793 305 301 442
 424 606 405 261 197 419 433 349 333 262 344 256 696 345 339 334 282 284 788 713 359 432 712 449 404 580 330 447 426
 358 519 470 410 306 489 386 366 399 439 342 658 672 417 250 392 335 551 293 770 217 320 360 514 393 778 171 312 322
 297 545 436 303 280 165 371 485 325 557 443 481 570 651 488 438 804 421 373 422 418 356 275 336 441 326 469 378 355
 302 475 456 571 364 337 608 484 266 235 472 480 328 440 416 553 362 431 503 338 352 479 313 444 395 539 446 420 401
 517 368 290 397 222 610 391 412 389 296 555 379 681 529 291 411 387 308 350 377 474 348 398 388 477 381 496 281 806
 409 248 452 382 525 340 482 531 462 550 536 465 427 400 329 532 315 538 428 487 361 407  29 467 380 288 508 497 434
  23 451 154 396 609 394 483 590 523 435 425 537 274 351 518 448 384 324 289 583 369 498 445 245 534 544 507 376 500
 413 205 584 528 468 521 464 453  48 589 437 495 430 455 592 506  13 454 463 460 232 605 579 292 549 493 598  24 259
 543 186 660  16 321 206 680 637 603 505 367 515 408 540 568  36 578 581 327  45 511 492  25 246 533 128 563 724 665
 548 522 659 562  79 370 501  14 642 596  42 461 141 631 504 148 649 486 620 510 526 242 527 255 215 604 423  35 698
 542 363 633 403 556 677 471 552  56 547 279 602 166 307 588 233 546  69 734 139   7 310 684 254 283 594 709 673 231
 576 239 611 619 530 450 554 132 600   9 667 595 193 725 574 512 524 586 103 229 661   3  84 286  20 200 646 652 629
 689  67 674 774  51 513 564  61 641 643 707 623 541 638  58  78 801 692  17 180 614 716   8 223  11 226 687 616  96
 745 115 415 750 502  53 686 819 585  10 743 300 473 786  28  47 612 727   6 221 735 640 565   5 120 188 706 575  52
 566 126  39 700 143 671  66 630 758 227 626 219 343 636  87 234 757 591 726  81 645 699 129 168 179 587 476 634 466
 676  97 704  12 567 751 714 729 792 800 820  32 182 775  64 121 663  22  21  50 771 746 237 105 164   2 753 777  62
 796  85   1 723 175 690 711 811 669 662 721 151 516 220  26  19 732 708  30 678 244 189 147  90 114 808 715 695  83
 803 287 644 759  34 100 675 768 664 655 639  31 755 781  94 118   4 346 773 209 720 685 196 199 111 260 790  46  63
  15  40 158 767 101 787  95  41 783 807 810 160 353 738  33  60 666 295  18 776 756 754 311  93 117 402 791 749 733

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00018e+07us (= 10001.8ms, 10.0018s)
Wall-clock time (full program): 1.0063e+07us (= 10063ms, 10.063s)
Satisfaction error: 6
Number of search iterations: 1406
Number of local moves: 894 (including on plateau: 356)
Number of local minimum: 62 (including on plateau: 39)
Number of resets: 0
Number of restarts: 0

Problem in row 2: 27 494 834 817 838 802 155 208 183 821 627 683 72 57 798 717 827 68 89 146 170 44 582 569 558 43 92 145 742 => the sum is 12208 rather than 12209
Problem in row 5: 71 597 77 73 701 140 150 194 216 138 214 593 599 113 737 840 70 80 744 794 694 59 799 831 833 702 156 316 679 => the sum is 12210 rather than 12209
Problem in row 10: 213 624 243 108 207 230 319 429 211 601 195 414 816 177 760 331 203 332 509 822 224 251 782 748 618 793 305 301 442 => the sum is 12208 rather than 12209
Problem in row 14: 302 475 456 571 364 337 608 484 266 235 472 480 328 440 416 553 362 431 503 338 352 479 313 444 395 539 446 420 401 => the sum is 12210 rather than 12209
Problem in row 20: 548 522 659 562 79 370 501 14 642 596 42 461 141 631 504 148 649 486 620 510 526 242 527 255 215 604 423 35 698 => the sum is 12210 rather than 12209
Problem in row 21: 542 363 633 403 556 677 471 552 56 547 279 602 166 307 588 233 546 69 734 139 7 310 684 254 283 594 709 673 231 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 513 116  20  60 792 634 576 605 503 833 734 218 701 747  58 178  31 807 466 591  84 515  41  95 561  42 454 713 521
  46 696 125 828 616 645 841 706 594 168 834 360 693 480  94  50 210 719 183 155  17 620  44 133 829 253 312 830 128
 839  75 100 790 796 623 140 716  14  49 551 120  97 718  89  82  83 802 742 618 263 729  96 370 750  40 840 289 788
  68 186 357 332 329 695 180 813 774 141 739 761 150 763  76 545  72 775 260 689 197 760  86  77 593 815  71 803 102
 124  98 157 764 778 673  35 649 582 825 795 158 743 647  85 146 126 732 254 727 819 677  79  52 419 169 101 681 114
 110 835 220 773 691  65 771 777 654 173 165 103 820 188  26  74  63 675 738 751 211 786 450 768 684 219 243 122  54
 115 271  51 231 699 628 505 793 817 275 203 770 755 232 105 288 331 549 244 680  92 564 831 366 700 292 247 228 347
 297 303 267 151 838 812  99 832 522 334 221 338 801 242 119 127 251 287 294 758 135 818 170 285 826 762 836 300 184
 286 142 264 161 248 800 230 757 626 255 257 578 753 274 837 154 361 279 644 707 305 721  33 216 816 546 313 282 364
 204 811 200 209 615 617 309 589 664 326 235 670 371 223 181 147 315 403 823 166 208 557 396 406 439 604 377 822 322
 327 261 369 448 354 568 191 493 805 445 342 804 373 622 324 278 381 193 536 363 410 569 335 238 397 782 453 234 314
 236 399 276 447 348 612 226 588 715 290 245 703 596 413 356 479 198 730 386 401 277 585 298 325 391 523 520 351 295
 438 423 266 687 717 496 237 537 339 442 306 336 414 405 388 345 375 352 741 349 196 415 233 690 333 491 250 421 587
 470 293 187 224 291 535 323 607 468 307 435 437 273 584 365 452 355 402 379 500 554 781 341 358 320 560 563 404 441
 524 418 478 430 533 431 455 433 281  87 458 531 195 417 337 619 383 581 575 422 174 393 429 302 541 495 394 432 461
  21 462 656 611 476 362 558 256 132 412 527 463 586 384 443  70 538 483 344 565 504 317 380 566 411 265 378 567 472
 416 602 385 353 409 456 487 304 512 436 481 499  64 318 457 465 469 299 425 510 544 268 451 424 473 428 340 542 392
 498 283 570 467 407 311 630 367 400 635 459 214 427 574 528 601 449 156 199 547 590 408 477 548 398 192  12 603 259
 330 514 519 625 227 343 571  88 497 446 121 143 577 526 653 486 494 507  24 529 642 246 490 484 308 249 572 492 506
 474 489 319  28 543 310 464 301 272 129 485 440 434 376 501 426 444 583 516 420 648 144 509 550 222 387 662 502 631
 518 608 597 475 175 182  34  11 389 698 525 138 598 113 638 678 488 641 374 117 688 270 646 511  66 599 580 202 650
 754 610 579 552 107  39 562   9 139 559  61 189 686 460 555 668 667 534 201  78 712  15 708 658 671 109  32 666 629
 789 639 614 720 153  22 508 160  25 517 633  90 162   2 692 661 736  93 482 149 632 145 735 532  56 269 613 737 643
 606 130 676  73 118 471 652  37  69 595 609 540  53 152 702 814 745 321   7 660 779 134 772  47  59 163 725 748 752
 794 682 806 346 328  19 530 148 106 723 636 694  55 621 624 669 704  29 215  43 258 206 749 714 296 350  48  36 780
 776 731 769  10 171 137 592 159 627 679  57 194 190 665 824 640 697  45 212 284 783 108 728 239 252 756 657 104 123
 799 573 809  18 172 368 726 164 213 705 372 759 185 111 674 539 655  91 659 225 798 112 177 722  62 787 663  67   4
 810   3 808 711  16 179 395 229 390   1 710 600 240 672 651 784 797 136 733  38   6  30 740 767 131 241 746   8 637
  27 556 765 685 262 176 382  81  80 724  13 359 217 280 827 744 791   5 553 167 683 316 785 766 205 821 207  23 709

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.28791e+06us (= 8287.91ms, 8.28791s)
Wall-clock time (full program): 8.34877e+06us (= 8348.77ms, 8.34877s)
Satisfaction error: 0
Number of search iterations: 1191
Number of local moves: 581 (including on plateau: 195)
Number of local minimum: 78 (including on plateau: 21)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 165 736 754  60 635 730 786 749 267 200 806  44 726 138  27 769 734  29  64 245 775  55 798 713 148 250 320  74 412
 796 628 783 801 766 693   8 790 800 300 781   4 811  57   9 803 373  28 709   1 793 272  87 233 197  18 453  30 185
 780 186  19 682 755 659 332 792  42  75 578  26 815  21 701 719 249 690 317  77 716 539 615 631  15 226 597  90 265
 679 771 116  85 741 115  62 359 788  24 738 111 797 222 639 720 464 585  22  50 772 594 698 735   6 375 834   3 104
 696 705 742 425  10 711 725 334 136  54 764  68 634 149 676 744 366 627  40 113 363 691 807 706 123  16 729  20  35
 671 740 745 244 722  11 555 687 812 268 715  52 518 134 613 689  71 582 174 410  82 331 667 673  79  94 624  48 198
 537 449 643 289 170 633  37 586 678 275 718   2 662 167 732 712 166 646   7 285 587 625  41 620 721 176 567 218 260
 617  99 727 140 702 599 577  34 501  58 590 181 552 550 571 495  43 655 632  97 611   5 629 573 616 238 758 231 128
  13  86 506 178 562 753 110 556 668  49 593 423 219 127 743 569  67 663 565 576  23  81 622 580 509 549 680 530 609
 605 505 672 192 514 675 579 574 543 189 303 247 489 202 558 603 153 210 568 432 596  91 535 560 519  36 477 551  31
 542  17 415 251 563 561  45 461 777 287 112 139 408 575 480 440  88 498 286 385 557 621 459 608 529 262 669 536 638
 540 473 637 445 532 433  73 534 481 101 392 589 636 484 411 500 214 144 516 290 538 121 545 602 312 522 527 547  70
 520 479 595 486 455 493 513 431 388 417 467 526 246 541 380 383 564 340  12 362 510 361 463 502 323 341  25 598 488
 448 400 476 478 468 524 559 482 450 427 503 472 402 418 346 406 374 350 521 295 339 377 471 497 399 305 311 273 438
 462 517 430 390 379 403 307 604 421 426 336 496 434 581 381 384 483 407 485 119 499 474 466 376 494 441 357 327 330
 465 188 456 398 512 414 397 276 394 458 452 443 386 470 298 437 365 444 405 652 419 328 266 413 393 507 345 409 819
 460 606 252 508 354 378 283 324 353 451 258 364 439 333 309 420 294 491 299 515 424 728 367 428 297 348 814 435 677
 442 395 129 674 211 253 404 487 207 731 623 824 387 304 322 310 695 416 396 657 264 318 382 347 344 369 282 681 355
 724 391 370 645 209 422 746 454 447 714 349 338 236 326 259 308 748 257 201 614 360 401 325 271 319 525 301 296 653
 337 278  96 717 171 293 782 187 351 710 368 666 436 358 190 315 644 661 321 751 277 228 193 352 292 429 791 248 767
 205 270 145 446 213 184 371 137 826 649 572 566 356 703 288 254 688 255 737 343 804 817 302 142 342 665 155 553 221
 163 389 240 784 194 279 618 828 269 823 204 774 314 651 306 313 504 291 588 813 237 779 335 160 177 591 100 261 224
 191 256 243 650  89 151 827 199 232 626 125 684 280 583 106 274 708 242 752 492 206 168 816 196 757 694 215 660 787
 220 612 154 169 203 785 263 212 475 776 227 683 372 704 157 162 281 118 584 528 284 570 158 840 239 765  98 802 768
 135 685 225 122 832 642 216 147 217 809 179 822 234 610 143  95 697 172 789  78 208 548 120 146 841 733 195 808 761
  39 607 152 117 150 235 818 131 159 469 180 770 173 805  53 175 699 759 223 692 664 773 182  66 795 831  83 670 739
 164 108 647 833 230  92 229 641 241 554 102 750  59 592 836  33 531  51 763 810  84 640  61  38 830 457 654 656 523
 546  14 747 161 821  56 658  80 156 778  65 544  63 756 837  72 316 762 533 707 114 183  76  69 799 760 107 829 600
  47 619  93 839  46  32 329 133 130 511 109 601 126 648 838 105 630 835 700 820 103 490 723 132 794 686 141 825 124

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00013e+07us (= 10001.3ms, 10.0013s)
Wall-clock time (full program): 1.00622e+07us (= 10062.2ms, 10.0622s)
Satisfaction error: 4
Number of search iterations: 1939
Number of local moves: 713 (including on plateau: 242)
Number of local minimum: 134 (including on plateau: 30)
Number of resets: 0
Number of restarts: 0

Problem in column 13: 726 811 815 797 634 518 662 552 219 489 408 636 246 402 434 386 439 387 236 436 356 314 280 372 234 173 59 63 126 => the sum is 12210 rather than 12209
Problem in column 18: 29 28 690 585 627 582 646 655 663 210 498 144 340 350 407 444 491 416 257 661 255 291 242 118 172 759 51 762 835 => the sum is 12208 rather than 12209
Problem in diagonal 1: 412 30 597 375 123 673 41 5 23 432 286 144 564 406 381 470 439 824 349 710 826 828 827 785 832 117 647 14 47 => the sum is 12207 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 142 780 782 623 165  79 201 728 742   6 768 722 398  12 410 816 625 171 765 791  35 135 773 372  83 192  86 804   3
  51  61 762 812  72 699 375  63 305   4 775 766 256 756 366 693 101  41 819 309 247 197 658 741  16 703 151 661 749
   9 270  49  77 251 643 122 758 811 781 810 605 217 669  45 738 233  74 772 748  14   5 795 582  26 666 395 314 730
 648  53 788  64  78 710 194 799 794   1 682 637 359 714 185 786  25 128 735 672 130  96 411 221 500 681 186 240 692
 708 716 695 601  10  39  52 736 779 125 745 683 189 747 306 790   7 241 731  69 178  47 763 131  84 656 134 572 675
 715 621  20 813 273  60 117 698 649   2 514 497 732 655 644 608  21 320 487 630 120 172 283 300 263 723  57 563 652
  24 547 632 678 291 660 250 573 633 686 739 645  99 712 191 653   8  87 684 700 208  85  28 338 182 591 323 202 760
  19 670 770  65  46 555  82 207 647 671 564 381 272 588 145 490 654 570 459 663 538 435 662 252 628 551  11  34 580
 522 558 495 357 264 616 146 607 280 541 548 529  23 650 180 668  33 629 355 533  30 577 587 325 707 594 188  48 618
 687 718 509 271 232 640 228 641  56 575 679 526 665 589  58 557 174 560 546  89 593 143 535 112 585 386 167  54 634
 657 689 705 297 236 603 543 470 382 513 467 562  80 704 235 627 110 433  50 536 446 223 449 103 477 545 249 307 511
 571 531 385 401 224 469 561  17 636 525 502 706  18 399 102 579 556  71 416 596 549 550 576  40 434 581 520 237 457
 537 566 480 507 312 483 363 472 688 554 431 517 136 510 108 365 286 339 453 488 350 384 380  92 622 530 429 473 354
 440 422 462 376 489 442 394 284 340 388 389 503 494 496 290 528 552 559 369 461 397 404 364 348 468 800 190 268 292
 485 332 427 542 505 491 299 474 451 436 492 454 565 501 476 402 466 231 298 508 421 337 244 419 452 391 310 336 465
 512 631 584 720 409 438 358 213 373 518 455 439 481 285 408 414 267 260 595 450 424 515 295 471 437 368 183 417 289
 383 168 378 319 448 139 610 346 329 204 242 428 771 407 761 175 322 343 441 521 413 524 426 814 308 456 597 815 121
 351 294 318 371 691 327 344 347 342 210 245 823 733 379 356 141 482 460 390 396 330 287 423 415 254 418 619 767 696
 243 420 392 458 614 464 445 345 540 405 506 326 484 504 377 324 592 331 258 148 374 615 635 353 341 367 527 599 222
 316 463 321 193 430 352 806 239 184 282 200 198 642 275 750 406 349 544 255 826 574 612 281 777 274 195 753 639  73
 296 387 443 216 626 333 553 412 832 475 238 152 727 218 755 360 578 432 257 203 361 229 265 774 155 261 604 801 266
 215 335 225 743 701 248 776 831 302 212 116 138 211 403 836  27 711 362 220 313 783 677 246 785 276 157 600 498 262
 725 328 226 752 646 150 702 209  76 787 301 176 680 123 444 105 724 835 317 214 370 447 833 315 303  70 709 478 164
 834 205  94 230 841 840 253 334 106 828 161  66 602 156 519  43 740 824 269 590 820 827 144 199 293 104 674 516  97
  42 147 119 567 721 169 807 259 196  36 234 288 793 279 713 109 697 617 304 227 676 784  93 598 837 181 818 129 769
  13 278  29 133 821 757 606 126 534 792  15 166 532 113 817 100 746 778 179 115 638 673 163 586 829 726 569 277  98
 789  91 797 493 719 486 651 160 127 805 114  67 613  88 499  32 754 685 187 118 830 690  31 583 764  81 734 162  59
 796  90 173 311 400 111 803 132  37 825 153 154  44 107 425  62 737 664 523 137 609 822 798 624 802  95 759 839 177
 479 838 149 219 694 206 568 729  38  22 124  55 393 170 808 611 659 620  75 158 751 717  68 539 809 140 667 159 744

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00025e+07us (= 10002.5ms, 10.0025s)
Wall-clock time (full program): 1.00634e+07us (= 10063.4ms, 10.0634s)
Satisfaction error: 2
Number of search iterations: 2043
Number of local moves: 786 (including on plateau: 347)
Number of local minimum: 165 (including on plateau: 36)
Number of resets: 0
Number of restarts: 0

Problem in row 9: 522 558 495 357 264 616 146 607 280 541 548 529 23 650 180 668 33 629 355 533 30 577 587 325 707 594 188 48 618 => the sum is 12208 rather than 12209
Problem in row 15: 485 332 427 542 505 491 299 474 451 436 492 454 565 501 476 402 466 231 298 508 421 337 244 419 452 391 310 336 465 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  85  59 781 673  33 585 734  90 813 540 541 112 710 146  61  16 818 643 812  51  30 749 105 660  82 707 821  73 679
  86 513  57 125 114 613 735 820 547 838 797 565 498 704 115  40  50 602 840 174  66 799 670 132 785 133 529 113 149
 409 123 832 808 362 401 811  47 676  88 510 124 697 789 171 142 151 183 791 571 110 626  60  41 831 809 251  54 741
 563  34 201 794 224 641 793  45 150 817  56 787 671 121 465  48 117 144 753 437 708 804  49  99 795  65 668 321 839
 457 228 106 617 816 694 270 139 239 141 765 815 685 441 157  36  72 625 589 213 691 379 173 204 833 230 783  38 773
 600 118 162 245 496 508 828  63 294 127 272 841 772 807 358 211 266 700 616 160  96 778 166 215 803 301 524 192 689
 582 225 216 102 232 663 824 312 770 298 128 495 607 129 499 360 147 738 619 154 104 769 835 311 168 728 372  79 743
 531 282 191 259 667 801 703 836 236 257 209 148 792 326 331 199 116 827 577 829 185 830  91 134 252 365 194 315 726
 586 220 318 376 706 608 233 107 823 253 305 771 276 145 296 382 662 698 658 161 377 776 255 193 405 260 766 300 293
 750 323 263 307 690 779 273 369 111 388  92 730 249 335 484 390 290 715 601 538 203 588 448 393 333 378 460 384 345
 834 431 231 361 519 798 316 177 764 221 234 523 359 324 543 103 242 826 720 170 250 396 380 342 256 814 742  44 289
 669 344 503  67 288 398 281 306 217 363 428 699 788 367 763 688 297 837 548 500 404 578 219 280 268 341 308 189 271
 711 374 291 299 695 528 304 453 458 274 479 449 309 317 195 400 320 262 542 408 327 805 822 502 172 427 178 497 411
 425 391 429 527 403 480 461 386 397 521 283 278 385 395 713 417 354 442 399 314 356 373 530 447 336 421 413 470 463
 525 415 412 471 313 235 375 244 351 487 560 486 261 402 325 446 348 490 414 464 436 337 605 454 443 420 587 509 394
 445 353 435 426 188  94 545 478 438 319 475 254 504 387 520 334 659 450 284 595 522 338 329 507 569 423 467 539 332
 152 407 357 724 339 473 483 269 549 574 614 553 532 482 451 592 347 410  89 176 406 182 636 493 570 534 501  74 240
 187 554 381 515 352 432 536 474 491 492 494 392 452 634   2 434 422 181 364 207 466 477 214 444 424 489 544 564 591
 550 597 580 645 468 248 439 537 108  42  27 481 559 472 627 349 433  15 512 567 628 229 612 488 430 200  52 648 666
 267  43 686 330 264  46 462 584 618 440 518 416 456 514 167 633 485  28 258  39 719 202 606 383 721 624 506 622 572
 286 511 774 535 546 223 389 526  12 557 654  87 246 455 737 505 459 165 303 594 566 159 732 476 137 295  95 581 604
  55 661 277 368 109 186 156 656 639 718 649 169 222 593 573 516 576 247 119 680 682  11 623 469 683 556  93 644 279
 180 650 642 647 206  58   7 629 672 637 590 237 101 638  97 714 596 153  75 555 677  80  21 775 759 558 609 568  78
 130 693 599 100 552 122  77 678  69 722 583 664  14 692 343 652 631 135 143 767 681 226 790  26 603 674  17 744  83
 355 825 646 651 138  22  10 727 533 784 346 598  24  32 350 640 562 184  71 561 752  31 806 705 302  68 635 610 241
 243 702 620 551 758 120 736 575 675  62 709 131 158  81 751 716 579 198 265 655 786 340   6 760  84  29   1 754 164
 419 630  53 665 657 287 140 731  35 701 696 155  64 725 615 761 687 322  76 218   4  37 611 712  20 653 517 810 208
 370 780 748  18 292 366 275 739 196 238   5 179 621   9 745 729 777 227   8 632 802  25 717 768  19 684 371 733 136
 757 723 418   3 782 800  13 212 328 310 190  70 197 747 755 756 746 762 163 819 175 285  98 796 126  23 205 740 210

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.00629e+07us (= 10062.9ms, 10.0629s)
Satisfaction error: 2
Number of search iterations: 1402
Number of local moves: 663 (including on plateau: 229)
Number of local minimum: 104 (including on plateau: 26)
Number of resets: 0
Number of restarts: 0

Problem in row 6: 600 118 162 245 496 508 828 63 294 127 272 841 772 807 358 211 266 700 616 160 96 778 166 215 803 301 524 192 689 => the sum is 12208 rather than 12209
Problem in row 24: 130 693 599 100 552 122 77 678 69 722 583 664 14 692 343 652 631 135 143 767 681 226 790 26 603 674 17 744 83 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  14  34  24 745 724 738  58  96  91 794  33 227 249  18  52 769 798 704 796 776 807 136 797 742 350 751  28 786  72
 748  20 785 290 247 754 825  43 164 838  31  70 190  49 719 774  77 631 186 809 717 767 808 195 175 773 252  36 236
 799 778  15  29 759  89 804  83 196 801 146  11 253  10 716 792 791 212 689 279 288 654 223 218 676 789 274 650 185
 734 743 749 105 768 685 762 515 257 169 226  25 229 361  54 756 285 246 334 779 668 699 711 261 698 265  46   1  78
 626 760 761  42  12 683 793  37  95 634 681  38  87 370  71 722 647 198 410 671 700 365 771 116   6 657 231 795 230
 602 478 805 573 728 675 677 118 287 620 652 191  26   8 673 737 262 128  93 590 183 679 691  17 727   5 264 580 140
 615 718 616  16 636 658   3 649  81 638 574 203  51 127 628 562 307 323   4 630 701 687 466 730 585   2 335 542 122
 697 772 696 328 559 510 642   9 113 545 588 176 168 216 563 565 567 110 153 678  41   7 648 586 576 740 148 629 179
 596 550 581 149 541 640 641  59  27 564 710 591 325 263  32 661 538 112  55 571 621 667 469 224 692  57 166 578 529
 623 552 609 637 494 653 599 566  85  35 474 603 611 411 582 553 233 282 470 109 507 292 551 137 503 102 143 556 237
 524 594 536 568 579 569 475 449 332 584  13 391 622 481 592 570 338 131 152 558 464 527  21  76 606 208 267 477 505
 587 504 517 519  64 425 561 583 383 528 412 555  30 193 535 526 154 458 501 597 403 476 500 516 376  19 369 530 388
 547 447 250 421 617 523 457 430  40 544 557 238 496 479 420 308 303 393 456 511 533 522 389 506 443 133 353 372 521
 441 483 484 534 390 276  22 614 381 433 460 398 442 450 415 382 362 439 465 448 539 432 444 482 434 199 404 543 413
 436 445 343 532 490 644 397 374 424 520 349 351 486 293 417 440 431 340 371 385 518 302 670 341 493 254 451 392 320
 492 426 508 428 446 401 326 384 537 454 379 491 463 406 299 311 593 427 471 395 472 205 333 418 498 375 363 377 531
 452 354 462 356 422 301 295 243 731 344 461 405 627 712 378 453 803 316 758 321 429 245 214 364 468 357 386 239 313
 296 314 435 269 327 355 416 304 509 336 298 618 339 688 360 291 259 402 260 744 368 502 305 324 814 605 549 437 485
 409 396 408 373 407 210 220 277 499 345 713 352 400 746 215 272 645 294 826 330 317 625 248 300 145 399 680 346 812
 367 207 331 720 318 366 270 306 560 319 394 660 157 600 228 177 781 820 242 358 286 221 347 800 283 337 757 222 775
 188 244 241 632 380 278 322 359 480 201 182 280 827 612 289 194 589 633 764 135 765 387 213 790 297 608 753 315 251
 255 200 281 158 141 240 310 839 755 348 788 266 834 329 828 268 664 752 487  23 161 824 273 142 204 419 512 284 624
 256 217 202 813  74 150 821 729 832 258 702 674 726 577 156 104 160 780 312 197 171 423 822 225 189 488 414 162 575
  84 125 138 607  47 783 219 601 829 165 187 833 604 819 714 163 111 619 119 184 695  90 144 830 206 613 666 342 672
  86  67 129 708 818 134 192 787 643 178  48 659 747 181 815 232  50 655 705 173 467 721 120 159 766 459 540 130 840
  98 784 234 651 235  75 114 810 635 180 732 703 739 770 132  60 546 271 662 124 115  61  80 816 174 841 707 170 690
  92  44 275 777 835  79 108 733 682 211 514 823 763 782 139  73 802 513 706 103 151 155 100 694  94 309 817 172 663
 107 836  53 147  63 106  69 489 837 497 806 693 123 572 548  39  45 495 665 121  66  65 750 554 669 709 598 831 656
 438 117 741  82  88 209 811 723 725 126  99 684 595 686 639 455  68 525  97 610  56 473 101 646  62 735 736 715 167

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00021e+07us (= 10002.1ms, 10.0021s)
Wall-clock time (full program): 1.00635e+07us (= 10063.5ms, 10.0635s)
Satisfaction error: 2
Number of search iterations: 1550
Number of local moves: 896 (including on plateau: 378)
Number of local minimum: 67 (including on plateau: 45)
Number of resets: 0
Number of restarts: 0

Problem in column 9: 91 164 196 257 95 287 81 113 27 85 332 383 40 381 424 537 731 509 499 560 480 755 832 829 643 635 682 837 725 => the sum is 12210 rather than 12209
Problem in column 26: 751 773 789 265 657 5 2 740 57 102 208 19 133 199 254 375 357 605 399 337 608 419 488 613 459 841 309 709 735 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 688 124 757 786 792 265 107  19  48 580 533 663  33 259  41 120   8 127 711 188 687 643 794 769 672 661  55 765 314
 106  54 747 840   3 693  37 141 675 799 791 783 130 191  20   7 346  11 728 123 798 760 803 137 702 788 190   5 801
  78  15  66 808 736 780  69   4 683 759 734 646 262  45 210  24 252  43 708 135 669 752 724 785 804 806  62 520  30
 294 132 709 727 696 567  73  10 448 713 556 680   9 332 131 524 184 723 691  82  18 756 772 790 676  36  92 750  38
 280 155 145 698 805 703 212 602 426 745 577 455  53  39  17 699 216 392 674 136 701 717 588 737  28 682  40 638  49
 196 321 784 671 764 227 578  44 619 498 595 650 296  59   1 410 225 664 574  27 679 219 606  42 684 781 176 630 189
  96   6 731 504 601 603  26 579 594 670 616 743 370 233 177 208 256 380 710  14 763 744 119 465 597 695  21 656  32
 172 171 480 553 741 767 673 582 631 700 478 570 109 105 168 389 165 352 508 117 291  29 652 599 644 523 110 637 293
 169  83 566 732 267 386 482 625 173 645 596 636 164 550 270 600  75 593 487 445   2 449 495 562 629 563  74 583 308
 185 287 551 519 576 121 651 462 443 503 655 607 281 532 555 329  16 559 492 186 526 604 528 388 642 613  63 129 206
 420 457 572 394 632 527 484 609 584 284  65 627 315 414 586 268 151 421 101 211 474 590 466 560 589 647 266 470  25
 507  64 409 719 156 575 431 341 564 591 539 615 180 471 464 214 162  60 509 565 592 371 485 514 493 415 323 585 295
 500 535 335 489 569 298 499 423 428 327 468 393 351 417 545  58 313 624 447 543 517 494 488 544 433 522 278  72 299
 432 511 251 307 333 456 469 412 373 483 242 424 379 439 355 617 529 446 309 552 429 458 398 460 620 571 108 385 461
 316 408 437 427 381 249 434 344 338 442 369 347 451 419 473 275 541 438 490 367 540 505 365 516 340 325 787 372 513
 395 610 361 479 542 707 450 374 158 358 496 336 422 689 778 255 452 328 274 363 359 515 285 353 390 288 502 289 401
 310 407 247 320 349 534 334 405 755 218 402 345 815 283 377 657 399 382 290 512 557 383 306 413 403 360 491 501 454
 418 561 475 387 396 286 350 357 766 375 337 813 546 253 376 477 640 525 243 400 342 213 273 364 263 248 568 481 476
 317 463 518 237 330 178 411 416 821 187 833 304 510 618 425 397 558 222 231 817 436 348 354 240 232 311 547 326 622
 235 440 300 384 506 230 239 472 305 811 356 324 538 378 254 729 740 209 139 814 362 430 391 143 159 406 649 831 435
 768 705 215 302 161 774 224 179 830 444 312 264 608 621 318 221 789 238 303 192 722  88 549 279 366 181 697 537 322
 742 807 202 207 368 250 174 819 203 104 331  77 611 715 775 690 776 175 258 770 244 681  70 204 220 245 706 150 635
 467 667 126 234 228 282 836 193 199 195 147 343 712 795 733 677 628 205 246 634 548 200 241 223 226 153 822 531 718
 797 581 257 148  50 404 276 653 198 277 623 152 739 827 809 163 536 236 170 771 269 301 194 824  99 146 812 229 668
 497 738 773 142 662  81 614 197 573 167 292 125 704 272 639 297 486 832 102 761 166 183 144 829  93 201 735  84 820
 678 665 138  22 271 122 793 762 157 116  12  79 726 319 659 453 796 725 834 441  98  57 753 115 839  34 730  67 748
 694 605 825  56 113  91 818 777  52 118  90 154 530 749 721 782 633 802 260 692 111 554  89 217 114  76 810  35 641
 826 837 100  46  47 339 779 754  80  87  61  31 716 598 612 828 816 751 261 666 149  68 182  51 140 838 660 128 758
 626 800 133  71 134 714 686 654  85  13 103  23 648 587 720 841 521 746 459 685 160  97  95  86 112  94 835 823 658

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00005e+07us (= 10000.5ms, 10.0005s)
Wall-clock time (full program): 1.00612e+07us (= 10061.2ms, 10.0612s)
Satisfaction error: 2
Number of search iterations: 1615
Number of local moves: 903 (including on plateau: 435)
Number of local minimum: 91 (including on plateau: 52)
Number of resets: 0
Number of restarts: 0

Problem in column 3: 757 747 66 709 145 784 731 480 566 551 572 409 335 251 437 361 247 475 518 300 215 202 126 257 773 138 825 100 133 => the sum is 12210 rather than 12209
Problem in column 13: 33 130 262 9 53 296 370 109 164 281 315 180 351 379 451 422 815 546 510 538 608 611 712 739 704 726 530 716 648 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 834 106 803 749 772 774 784 564 681 659 195 111 118 306  63  50  47 182 713 679  38 125 746 532   6 692   7  58 815
 830 285 841 745 634 727 514 817 787  77 668 246 272  46  42 157 736 127 838 221  29  71 639 603 107  18  37 415 680
 673  36 202 101 613 491 837 570 234 184 611 654 155  45  32 818  70  94 814 773  34 642 537 576  22 831 792 580 188
 419  92 836 839 643 816 832 185 698  78 282 625 444  39 133  75 801  55 676 150 342  79 806 391 287 422 166 163 835
 733 112 143 766 455 563 147 708 807 409 507 248 651 130 138 113  12 168 768 161 134 144 539 535 482 311 751 741 833
 264 199 696 781 598 428 653 343 717 123 810 400 251 241  88 193 154 194 233 824 139 252 788 825 785 151 136 723 220
 531 203 811 326 798 726 786 495 770 122 581 336 162 142 800 197 294 175 411 276 286 536 794 602 178  52 149 368 302
 828 120 235 211 796 443 540 744 268 253 686 370 217 325 799 247  11 753 212 242 552 819 780 231 256  95 206 769 201
 360 295 808 237 737 731 541 239 812 489 607 584 826 205 174 366 110 171 829 189 675 131 187 438 280 108 129 722 229
 587 288 222 266 317 704 493 332 156 374 716 632 180 274 783 380 351 804 190 760 348 501 735 371 186 322 293 335 309
 338 243 365 395 328 604 347 719 226 225 436 614 232 469 683 117 339 805 434 344 418 261 416 626 299 823 452 386 265
 262 424 260 318 560 435 597 827 173 748 644 447 423 258 426 301 238 721 433 533 404 840 292 218 319 334 316 307 152
 467 297 321 313 350 542 396 571 213 523 379 303 820 296 214 373 821 291 354 394 446 223 255 813 472 432 448 462 420
 271 407 454 381 492 475 413 279 403 663 383 304 362 461 329 181 471 300 341 219 406 590 425 645 498 310 822 458 466
 431 572 346 305 377 457 450 353 578 516 284 474 476  60 521 277 544 361 518 421 582 460 349 254 393 488 387 410 565
 314 499 524 511 508 357 384  69 522 496 376 259 487 145 633 549 367 520 589 412 228 529 610  93 558 503 196 512 459
 369 480 561 390 509 385 375 363 372 191 608 312 333 566 429 543  85 358 485 484 534 629 463  27 656 298 506 567 331
 568 408 442 554 275 352 153 257 618 577 116 204 513 517 473 763 405 478 281 661 159 490  98  21 527 714 657 479 449
 526 530 612 398 430  25 320 623 630 699 164 208 364 557 378 465 510 308   1 468 601  35 545 638 114 641 631 399 389
 401 599 515 445 273 278 451  68 553  14 615 546   3 655 244 548 569 547 579  48 550 497 105   8 724 605 621 486 662
 249 758 414 477  83 397 437 160 148 359 109 337 355 688 240 441 528 591 573 702 616 636 179 146 635 666 707  40 538
 562 687 504 502  26 267 236  44 500  19 169  53 771 617 427 754 660 646 289 388 669   4  24 170 695 559 710 700 556
 575 622 100  30 135  61 224  80 104 712 124 694 711 685 684 594 756 382 470 648 588  99 701 198 595 551 586 270 230
 207 697 672 762  67  87 119   2 691 743  84 315  33 647 678 728 555 323 121 742 464 637  15  89 706 658 649 627  91
 140 456  31 585 402 330 483 628  72 624  17  51 620 777 682 776 592 494 132 115 764 619 245  49 802 600 583 481  59
 283 664  57  86 440  73  54 667 210 665 505 765 593 761 327 738 693 392  97  20 640 747 172 797 739  16 650 158 200
  64 670 137  74 126 192  62 715 167 718 674 606 775 790 345 791 755 574  90 176 778 671 183 809  13  43 103 356 752
  82 703  81 596 215 324 525 759  23 209 519 779 793 725 677 609   5 690   9 720  96 652 128 795 141 177 417  10 750
  41 757 216  66 250 165  56  28  76 740 340 732 269 782 767  65 730 705 729 439 689 290 453 709 734 789 102 227 263

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0003e+07us (= 10003ms, 10.003s)
Wall-clock time (full program): 1.00636e+07us (= 10063.6ms, 10.0636s)
Satisfaction error: 2
Number of search iterations: 1554
Number of local moves: 776 (including on plateau: 278)
Number of local minimum: 111 (including on plateau: 26)
Number of resets: 0
Number of restarts: 0

Problem in row 12: 262 424 260 318 560 435 597 827 173 748 644 447 423 258 426 301 238 721 433 533 404 840 292 218 319 334 316 307 152 => the sum is 12210 rather than 12209
Problem in row 22: 562 687 504 502 26 267 236 44 500 19 169 53 771 617 427 754 660 646 289 388 669 4 24 170 695 559 710 700 556 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 573  40  89  25 704 205 279 459 266 664 783 359 816 167 785 727 229  50  51 799 751  59 776 777  18 819  64 781  94
 198 212 109 715 716 338 180 703 766  20 782  48 789 299 743 723 349 133  68 738 346  13 747 812  46 693 132  69 722
 697  78 390 137 792   2 234  49 480 300 598 771 759  42 698 594 329 171 427 774 742   6 780 442  79 801 235 223 579
 761 542  75   9 691 689 131 760 755  27 647 713 627 173 763 746  62 152 642 283 275 125 662 622  26  87 185 600 379
 767  28 107 147 498 215 282  70 737 565 721 726 674 140 769 750 213  61  90 671 735 228 164 728   8 744  22 725 624
 520 562 183 462 546 257 156 796 672 612 637 786 719  12 602 648 160  81  82 784 195  73 554  21  53 661 105 608 663
 695 575 356 646 745 452  15 527 770 588 281 629 614 139 692 506 117 104  95 676 696 316  19  11 294 707 124 765  55
 592 557 337 153 712  29 150 163 567 667 677 635 607 197 688 630 177 143  98 685 561 255 495 250 553 466  23 653 489
 545 570 144 418 610 549  34 597  52 534 538 631 397  24 467 655 269 593 135 659  91 335 586 615 548 574  10 633 396
 576 621 327 324 496 595   5 656 606  39 454 625 643  58 539 583  67 550 596 493 116 170 613 240 536 559   3 515 604
 683 305 386 517 749 474 381 175 513 497 438 531 481 463 504 619 136 569 511 486  35 149 603 189 492 102 121 499 601
 590 494  32 502 469 533 580 509 457 120 658 276 507 541 564 401 528 227   1  38 395 348 406 628 415 679 184 611 516
 432 522   7 440 605 400 320 666 479 518 484 447 503 547 307 560 500 192 445 478  33 476 444 556 318  47 475 455 552
 403 382 535 407 450 591 436 566 623 220 398 334 468 461 352 417  16 449 581 512 430 465 378 524 341 295 297 425 453
 464 589 429 585 296 448 409 435 330 510 371 298 358 377 328 414 292 391 472 218 309 501 543 408 526 426 540 434 508
 431 756 473 310 245 363 471 274 490 384 702 221 367 482 487 458 657 362 393 483 364 340 441 405 285 388 423 355 399
 443 644 617 345 375 740 419 353 366 376 428 280 313 584 413 187 433 336 477 322 437 402 369 668 525 412 374 217 354
 360 616 626 319 422 226 460 261 368 563 231 238 222 306 342 288 347 775 331 311 410 802 267 424 839 326 807 420 302
 214 365 609 411 387 350 301 421 225 673 729 284 339 416 439 315 537 246 652 372 762 259 304 446 241 333 805 380 394
 122 157 618 568 243 814 808 332 312 831 293  86 317 809 286 303 720 532 253 773 718 521 193 344 291 272 373 194 126
 118 249 456 686 251 273 752 268 800 343 233 202 172 736 186 236 787 748 166 224 794 530 188 733 385 404 829 208 252
 179 392 649 244 129 730 681 803 127 811 325 289 148 599 239 203 754 290 632 357 256 555 271 196 795 321 682 265 287
 216 191 505 687  99 791 825 168 684 308  83 451 151 700  56 219 670 717 678 100 112 675 817 210 778 138 711 232 237
 159 190 578 741 230 260 813 582 263 383 130 258  54 790 106 155 788 665 841 113 361 577 370 709 650 270 832 165 176
 314 278 651 514 323 201 558 551 182 181 206 146  41 389 162 277 701 645 680  44 264 753 732 108 779 797 806 798 128
 141 200 818 836 154 158 640  72 161 199  31 169 262 694 211 247 587 815 768 572 772 810  43  93 706 485 654  74 837
  71 710 739 248 101 641 708 254  76  92  88 828  30 731 242 145 660 838 758  66 519 821 351 209 724 103 734  84 638
 110 840 571 174 111 820 690 620  37 470 178 834   4 634  97 123 636 705 757  63 207 822  36  77 824  96 826  17 830
 835 544 793 639  60  65 491 119  45 714  85 114 827 699 142  80 488 669 529 115 523 823  57 764 134 204 833 804  14

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00022e+07us (= 10002.2ms, 10.0022s)
Wall-clock time (full program): 1.00629e+07us (= 10062.9ms, 10.0629s)
Satisfaction error: 2
Number of search iterations: 1670
Number of local moves: 715 (including on plateau: 197)
Number of local minimum: 115 (including on plateau: 19)
Number of resets: 0
Number of restarts: 0

Problem in row 6: 520 562 183 462 546 257 156 796 672 612 637 786 719 12 602 648 160 81 82 784 195 73 554 21 53 661 105 608 663 => the sum is 12210 rather than 12209
Problem in row 13: 432 522 7 440 605 400 320 666 479 518 484 447 503 547 307 560 500 192 445 478 33 476 444 556 318 47 475 455 552 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  66 768  46 841  62 627 839  68  52 195 713 647 587 837 736 115 237 622 703 766 643  47  41  67 718 305 652 139  70
  53 211  39 618  91 781  96 656 158 838  30 764 569 776 803  49 501 555  89 763 320 658  65  12 143 178 753 821 819
 120 428  60  82 767 619  73 621  99  90 499 634 632 827 112 826 771 792 506 459 545  76 136 294 138 631 516  44 812
  88 623 725  43  48 430  83 374   8 238 472 442 150 831 740 190 660 762 605 682 541  80  32  54 752 832 723 177 824
 122 769 169 231 272 657  72 791  79  78 425 209 685 737 189 825 563 546 646 223 795 550 154  85 701 520 739 147 230
 191 157 206 173  58 806 118 639  98 181 170 808 679 134  59 835 782 749 637 823 716 145 689 107 775 786 242 232 214
 298 267 207 174 162 727 182 810 164 193 562 802 537 772 221 830 773 707 310 324 686 141 156 285 234 742 457 245 241
 365 219 222 114 235 556 295 675 151 201 578 815 816  36 265 184 774 148 478 666 514 840 251  93 684 730 642 347 315
 396 335 255 205 369 743 179 528 787 288 226 340 754 291  64 187 275 603 818 721 833 328 140 256 744 410 477 311 346
 185 316 254 212 331 728 358 811 276 820 755 599 829 246 101 349 317 146 809 279 356 668 268 198 561 247 591 386 213
 168 697 284 667 289 834 366 733 376 271 780 253 257 283 250 389 351 332 836 264 338 300 308 306 741 432 544 299 261
 336 490 576 287 339 321 342 602 304 293 750 290 407 397 239 409 329 828 705 297 330 553 402 404 180 333 735 352 379
 345 481 408 462 424 302 361 367 648 363 712 461 244 309 301 422 312 371 448 384 594 628 732 280 373 393 517 327 240
 418 322 359 220 589 260 199 435 380 492 565 429 486 354 375 479 303 353 437 401 635 548 431 357 570 382 719 277 434
 307 419 344 262 362 364 296 388 515 343 447 450 372 443 460 475 423 392 398 559 406 508 440 394 453 433 248 798 510
 482 326 455 485 471 491 519  75 512 498   3 552 489 439 348 385 458 470 558 488 383 183 415 480 436 496 391 387 534
 476 446 377 465 473 381 620  45 474 360  95 502 567 417 542 334 543 531 124 568 583 378 411 454 487 399 278 313 566
 438  50 467 532 522 236 390 529 341 551   2 414 464 655 662 535  20 564 629 606  69 282 533 683 601 370  84 575 405
 539 421 494 483 588 196 525 171 593 636   7 427 495 503 524 463 699 121  87 456 368 197 484 509 469 598 243 497 416
 678 133 449 468 445 142 574 200 700 804 215  42 210 507 695 560 680 577 130 573 269 523 526 616   4 159 176 582 572
 609 709 611 208 444 194 617  29 746 597 225 127  63 706 518 521  13 105 163 451 318 595 625 571 108 538 420 724 654
 586 649 714 511 645 224 738  22 579 540 337 536 286 186 557 400   6 663 202 549 203  61 734 612  27 111 466 441 624
 796 710 696 784 513 155 144 249 669 664 641 160  56 585 600 547 608 258 274 137 149 613 126 590 323 161 403 504  94
 584 102 731 745 614  10 751 165 554 708 314 530 610  55 630 113 670 640  57 319  92 426 711 673   5 109 172 493 626
 500 677 758 765  25 217 760 218 676 672 581 131  86 596 644 691   9  14 153 167 259 527 722 807 653  97 128 659  17
 650 693 759  81 694 266 592 228  77  26 355 263 229 123 789 726 715 117 281  19 674 757 580 604 252 702  71 770 116
 777 720  28 615 794 413 661 817 797 651 395 119 292  23  11 135  15  16 273  21 270 785 729 805 188 350  37 671 801
 822  38 717 788 790  24 761 638 704 166 748  51 233  31  18 132 175  35 779  40 104  34 681 800 783 665 633 690 129
 814  33 799 688 793 505 698 325 692 452 607 412 125 110 756 103 227 192  74 204 216 778 687 813 106 100 152   1 747

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.13829e+06us (= 9138.29ms, 9.13829s)
Wall-clock time (full program): 9.19945e+06us (= 9199.45ms, 9.19945s)
Satisfaction error: 0
Number of search iterations: 1788
Number of local moves: 643 (including on plateau: 268)
Number of local minimum: 145 (including on plateau: 26)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 253 822 151  62 520 154 550 588 815 625 632 489 546 566 819 462  75 603 709 219  94  77 212 135 834 629  69  66 433
 641 821 793  56 730  60  65  33 563 757 761 829 408  46  95 835 841  28  58  80 166 192 797 839 216  32 105 824 538
  96 136 766 572 645  97 780 112 681 517 612 806 176  30 808 827 838 117 185 746 118  73 500 803 146  45 833  87  57
 123 173 446 810 710 103  86 616 778 799 682 689 535 125 422 791 111 700  35 738 138 153 271 137 740 832 237 182  47
  90  48 775  84 817 663  91 233 659 770 143 836 753 338 178 687 758 194  37 205 562 825 186 148 796 309 211 230 583
 540 291 200 147 564 789  55 224 748 768 741 749 306 717 128 413 210 802 162 248 250 179 618 814 221 183 346 542 254
 109 124 648 191 831 198 840 190 837 804 490 654 634 652 126 752 177 157 119 708 283 139 755 180 127 144 351 206 783
 794 163 274 155 712 150 108 285 692 828 601 226 823 774 256 772 443 238  83 234 615 695 724 181 279 100 225 267 512
 820 196 691 323 287 367 429 515 644 114 795 231 779 655 220 431 189 195 826 384 430 377 731 277 208 257 222  68 548
 592 349 294 255 270 130 356 807 608 364 327 293 260 784 300 342 553 326 280 734 386 288 694 305 325 523 360 286 818
 788 188 404 420 262 830 164 247 301 172 816 275 268 671 317 522 415 258 370 289 702 214 811 373 432 251 239 409 801
 707 322 252 382 463 299 363 765 318 276 278 284 418 677 303 376 672 426 312 227 635 209 661 308 263 272 514 480 747
 473 269 398 249 547 442 232 581 435 316 447 229 660 720 434 335 680 485 330 812 347 417 392 406 399 348 296 235 295
 246 334 361 362 343 358 653 729 297 245 459 359 357 590 282 411 591 387 379 439 354 428 395 580 552 492 414 440 372
 333 454 471 438 541 499 521 320 475 400 457 441 302 393 304 450 315 419 513 368 202 614 389 407 468 455 486 437 336
 236 602 461 314 502 448 281 132 506 383 390 536 481 345 365 170 311 559 259 554 474 472 491 391 483 493 504 537 529
 337 465 611 310 674 604 402 292 321 497 388 498 115 401 565 534 416 184 421 487 145 385 477 425 577 544 424 543 167
  71 649 396 636 628 394 638 466 352 464 587 140 558 241 507 102 532 509 533 476 350 412 122 518 599 110 478 366 375
 560 527 444 405 495 479 620 458 355 319 341 427 503 217 501  67 340 453 469 397 328 582 374 549 452 410  79 519 539
 576 573 129 467 531 380 524 484 578 782   4  44  54 106 678 496 339 617 665  43 449 381  42 610 567 662 626 589 213
  51 658 510 619 171 621 732   2 265 494 101 656  64 264 470  93 568 451 526 505  72 579 482 445 586 726 706 574 218
 403 516 551 596  98 569 646  19  59  39 116 557 585  34 511 561 530 556 683 701 187  26 160 647 776 690 594 598 201
 704 754  74 698  76 667  11 353 242  17 595 696 313 344 609 639 332 675 762  22 714 666  21 684  61 575 743  29 133
 324 624 298 613 142  49 605 771 156  53   3  38 197 378 733  99 456 688 606 244 763 792 204  52 607 744 555 764 651
 460   1 571 773  24 597 767 261  27  88   7 134 104 161 721 165 584 630 640 623 679 686 369 600  81 742 727 697 290
 168 715 436  23 307 718 158 622   8  63 175 174 627 528 725 593 676 693 657 273 769 798 159 525 508   9 643 193 266
 633 745   6 631 152  89 777 545 199 703 371 736 664 737  36  41  40 120 809 699 781 131 722 215  92 107  12 711 705
 331   5  85 805 149 670 739 800 169 223 650 113 669  78 786  15  14 719 756  31 488 751 207 642 141 735 787 570  82
 750 685 713 813  18 785  16 759 121 329 240  70  50 637  10 228 203  20  25 723 728 668 243  13 673 790 423 760 716

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00024e+07us (= 10002.4ms, 10.0024s)
Wall-clock time (full program): 1.00646e+07us (= 10064.6ms, 10.0646s)
Satisfaction error: 5
Number of search iterations: 1527
Number of local moves: 709 (including on plateau: 255)
Number of local minimum: 138 (including on plateau: 25)
Number of resets: 0
Number of restarts: 0

Problem in row 15: 333 454 471 438 541 499 521 320 475 400 457 441 302 393 304 450 315 419 513 368 202 614 389 407 468 455 486 437 336 => the sum is 12208 rather than 12209
Problem in row 28: 331 5 85 805 149 670 739 800 169 223 650 113 669 78 786 15 14 719 756 31 488 751 207 642 141 735 787 570 82 => the sum is 12210 rather than 12209
Problem in diagonal 1: 433 824 833 832 796 814 755 695 430 734 370 426 680 411 304 345 115 140 341 782 265 19 11 49 24 23 6 5 750 => the sum is 12212 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 708 132 792  48 173 711 665 748  53 594  77 106 642 754 330 835  27  33 396  66  22  38  61 685 475 802 744 680 812
 731 291 837  40 105 798 652 827 474 737 839  96 807 810  36  97 141  82  69 571 121 656  78  80 816 650  57 695  16
 761  89 581  74 481 609  60 627  79 772 289  37 790 631 829 197  98 672 824 207 211 139  19 112 749 834 580 764  94
 646 178 808 747 118 769 788 805  84 784  46  45 776 775 768 143 101 335 128 138 172 274 122 153 530 513 730 707  26
 605 174 767 187 339 838 718 202 124 774  68  52 826 786 399 215 104 637 201 129 505 284 159 160 817 649 733 469 288
 696 158 809 183 109 773 253 416 193 600 168 110 555 823 705 836 190 255 360  64  32 212 151 820 290 700 750 782 216
 676 120 717 188 233 789 799 200 282 724 461 156 821 758 239 230  95 704 140 111 261 268 830  99 175 603 728 502 300
 612 346 645 146 587 238 743 781 264 617 243 165 660 236 610 266 162 265 217 482 222 801 176 272 170 670 681 796 136
 364 184 675 343 459 223 189 574 756 841 232 179 550 588 526 369 260 389 249 273 734 270 262 301 234 621 714 551 299
 738 257 497 206 628 408 608 567 297 537 278 229 506 312 362 269 171 557 599 813 250 113 209 241 367 591 716 663 220
 204 490 500 706 540 383 285 205 281 615 324 840 353 235 638 388 298 522 762 302 186 114 213 280 376 584 647 597 341
 252 394 519 313 410 292 368 442 473 491 378 351 242 794 348 391 392 226 210 437 586 712 582 307 326 590 295 572 516
 385 815 531 381 400 304 338 710 219 601 415 320 438 356 380 395 259 303 602 448 411 169 365 393 337 445 308 833 347
 322 287 327 404 358 407 763 384 423 405 451 352 514 488 283 489 454 441 504 379 317 425 546 495 293 414 267 562 455
 332 382 443 450 701 397 446 439 363 470 370 319 418 321 498 315 565 361 463 430 431 328 354 688 432 398 286 532 277
 493 507 412 440 464 525 421 424 547  24 466 458 570 345 422 434 444 357 333 592 375 521 340 503 484 254 311 334 409
 520 635 323 569 108 374 544 419 494 420 435 390 133 496 296 480 479 471 558 373 449 465 403 349 483 227 486 429 401
 314 552 329 512 195 518 524 436 509 462 534 325 478 456  67 476 566 316 533 596 428 523 371 560 406 245 350  87 541
 585 492 276 426 214 579 554 237 499 331  23 535 372 529  58 564 655 247  18 623 447 487 703 377 549 427 460 310 632
 553 539 271 501 511 669 279 240 629  10 575 573 256 413 148 417 598 576 386  43 664 472 606 477 624 208 468 198 305
 457 693  62 634 196 515 528 318  12 182 622 614 548 228 545 589 593 577 595 485   8 517 563 402 618 119 203 154 633
  51 542 294 619 177 453 607  17 643 149 640 653 152 538  91 115 729 702 568 626 785   6 667 727 583  54 167 344 510
 142 689 181 604 692  92   2 536 673  29 719 678 117  63 251 620 636  41 648 698 658 674 433 745 527 150 248 107 556
 147 757 263 662 613  35 508 578 691 246 651 686 218   7  93 679 677 135 699 697 611 467 275  20 639 244  73  85 753
  21 657 164  88 387 130 145 559 766  55 709 770 126 161 787 715 661 625 644 694 713 741 732 641  65 123 155 116  59
  44 630  30 359 751 127 100 309 725 191   9 795 163   1 185 793 666  90 654 720 778 671 682 687 690 452 144   3 760
  86  49   4 742 684 125 224 137 740  13 668 722 102   5 721  31 683 723 616 803 822 831 806 199  50 134 561 131 797
 221 366  71 818 811  72  15  25 759 180 783 828  42 225 814  70 726 832 194 306 258 800 755 777  28 166 336 192 739
 543 804  81 819 765  56  83  47 157 355 736 825  34  75 780 791 779 735  39 103 752 231 746 659  76 342  11  14 771

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00021e+07us (= 10002.1ms, 10.0021s)
Wall-clock time (full program): 1.00644e+07us (= 10064.4ms, 10.0644s)
Satisfaction error: 3
Number of search iterations: 1749
Number of local moves: 930 (including on plateau: 427)
Number of local minimum: 115 (including on plateau: 65)
Number of resets: 0
Number of restarts: 0

Problem in row 13: 385 815 531 381 400 304 338 710 219 601 415 320 438 356 380 395 259 303 602 448 411 169 365 393 337 445 308 833 347 => the sum is 12208 rather than 12209
Problem in row 21: 457 693 62 634 196 515 528 318 12 182 622 614 548 228 545 589 593 577 595 485 8 517 563 402 618 119 203 154 633 => the sum is 12210 rather than 12209
Problem in diagonal 1: 812 695 580 513 817 820 830 801 734 813 762 226 259 489 498 345 133 325 23 10 12 17 2 35 387 359 4 366 543 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 836  75 479 670 791 669 816 703   2 778  53 483 248  28 301 800 729  12 165  35 134 805 802 198 169 671   3  36 718
  84 840 668  95 174 821 789 694 772 116  27 637 702  15 457  25 638 113  54 184  43 616 681 356 250 128 726 783 721
  72 687 271 112 236 257 697 139 373 831 276 733 818 147 675 120 613  63 100 104 660 628 795 815 803 307 253 158 466
 188 541 827 839  57 774 776  59 392 152 426 689 768  83 630  21 817 212 108 228  48 296 823 281 163 799 246 156 811
 111  52 606 164 501 705 814  90 643 145 559 755 804 223 581 133 810 129 297 119 178 227 646 284 838 758 125 122 790
  93 527 397 762  97 685 577 162 326 186 688 537 665 206 575 837 332  85 109 194 160 605 841 439 712 300 114 238 760
 142 819 812 480 211 383 720 148 476 274 216 797 825 241 565 233 741 143 115 240 131 833 793 175 170 736 571  60 159
 305 157 769  94 177 429 351 679 259 587 809 623 561 378 766 232 289 266 512 367 199 244 511 279 781 200 192 806 387
 203 171 275 138 348 684 651 312 787 187 678 360 719 283 456 270 725 376 542 269 813 252 708 255 214 273 798 280 182
 153 728 619 282 262 625 788 730 380 692 354 323 277 311 496 189 724 309 371 648 287 306 488 340 218 195 231 661 222
 235 834 785 249 353 828 431 209 230 265 710 374 706 377 618 421 272 251 754 285 418 317 610 580 213 264 381 137 102
 428 569 555 372  92 777 494 347 254 308 370 493 292 335 318 330 344 315 324 226 446 753 642 667 820 224 513 302 299
 343 337 523 267 394 544 652 229 404 400 401 536 484 368 485 386 465 331 288 342 204 295 533 739 334 458 357 832 278
 361 450 341 319 408 328 633 411 393 352 369 510 548 346 592 379 316 391 478 514 487 504 632 489 375 290 362 345 286
 434 234 469 474 491 366 440 414 505 461 554 539 398 359 509 467 384 365  45 448 339 388 364 545 412 549 516 382 358
 395 473 520 526  42 338 176 449 415 477 452 420 402 447 654 444 396 406 432 405 355 413 437 445 417 436 522 482 433
 530 475 416 349 525 535 336 410 321 459 403 210 534 596 441 462 463 430 313 427 455 517 464 190 390 573  65 329 591
 419 472 500 540 245   6 124 568 363 423 636 664 495 468 327 451 320 593 531 291 515 528 294  74 443 551 498 298 572
 453 118 197 595 560 471 481 656 435 624 117  22 407 546  49 650 570 586  89 547 576 620 314 168 350 574 261 611 562
 612 110  82 507 583 492 293 385 151 101  78 263 425 603  19 566 589 518 578 585 711 557  37 486 655 529 553 635 506
 490  71 207 503 649 497 225 519 202   1 621 609 268 608 185 792 422 579 658 325  24 584 172 704 532 499 673 454 135
 686 524 183 682 502 219  34  47 550 629  14 558  39 563 304 470  96 794 715 552 626 196  99 217 564 588 543 615 600
 759 201  13 538 641 144 221 567 707 644 590 239   9 693 127 717  91 663 627 508 653  73 167 424 598  44 764 756  31
 779 123 205 765 767 121 146  20 700 683 597  55  87 622 247 594 243 601 634 757 748 103  56 105 310 699  77 691 674
 698 659 737 399  23  32  86 645  30 773 140  81  79 602  41 676 141 640 460 695 657 173 130 763  18 604 731 780 716
 775 822  88  58 761  69 150 556  61 106 193 136  98 770 242 599 260 666 647 701 734 191  70 732 631   5 617 744 727
 824 322 107 738 826   4 220 639 771 746 303 154 161 722  50  68 166 829 714 830 782 180  29 723 208 614   8 438  33
  51  67 409  11 709  17  62 745 786 743 835  76 258 662 752 696 237 735 742 582 672 749  64  46 442 215 796  40  10
 750 751 149 680 784 389  26 677 521  66 740 333 132 607 747 181  16 808 807 801 155 256   7 690 179 126 713  38  80

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00032e+07us (= 10003.2ms, 10.0032s)
Wall-clock time (full program): 1.00642e+07us (= 10064.2ms, 10.0642s)
Satisfaction error: 4
Number of search iterations: 1467
Number of local moves: 849 (including on plateau: 393)
Number of local minimum: 95 (including on plateau: 50)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 188 541 827 839 57 774 776 59 392 152 426 689 768 83 630 21 817 212 108 228 48 296 823 281 163 799 246 156 811 => the sum is 12210 rather than 12209
Problem in row 21: 490 71 207 503 649 497 225 519 202 1 621 609 268 608 185 792 422 579 658 325 24 584 172 704 532 499 673 454 135 => the sum is 12208 rather than 12209
Problem in column 4: 670 95 112 839 164 762 480 94 138 282 249 372 267 319 474 526 349 540 595 507 503 682 538 765 399 58 738 11 680 => the sum is 12208 rather than 12209
Problem in column 21: 134 43 660 48 178 160 131 199 813 287 418 446 204 487 339 355 455 515 576 711 24 626 653 748 657 734 782 672 155 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 437 775 829 838 326  51 612  73 582  44 825 784 173  36  66 553  20  47 649 580  92 118  38  85 627 772 709 823 645
 176 526 605 839 717 114 111 646 537 833 830  91 132  83  94 121  87  39 551 117 684 211 116 626 762 715 240 812 794
 837 778 836 824  86 820 757 150 828 115  19 220 136  32  49 387  35  59 802 774 205 813 123  88 791 434 267 145 799
 143 197 706 841 768  74 644 667 575 832 377 281 144 563 140 151 127  14 674 298 803 314  33 172 795 821 819  43 193
 249 183 342 196 840 288 167 676 745 811 186 146 245 157  96 711 103  79 782 451 749 640 160 108 822 765 399 320 793
 233 641 628 633 206 236 258 122 817 263 230 155 188 520 827 657 259  61 810 760 182 257  16 594 763 743 750  98 302
  67 175 796 673 395 128 826 248 177 209 354 149 414 699 202 686 134 234 732 804 639 162 808 159 729 224 786 327 273
 416 221 318 174 169 216 818 834 751 158 178 223 138 779 232 272 139 287 747 835 755 720 141 285 624 152 268 652 707
 346 807 754 292 217 338 161 771 463 199 168 252 275 583 247 337 456 425 831 341 378 198 367 467 724 246 586 210 770
 319 200 322 261 195 343 766 379 687 495 225 239 278 797 333 296 336 642 798 701 785 352 185 297 535 656 260 289 238
 445 664 806 192 359 226 163 334 244  56 460 235 407 630 243 682 351 369 505 487 718 345 447 478 546 311 725 392 389
 171 242 372 213 325 179 744 400 573 365 544 469 408 632 361 522 301 613 353 321 621 106 433 384 602 306 738 567 344
 293 212 291 385 439 726 276 295 300 386 250 362 421 454 350 666 636 271 780 410 670 348 231 391 539 403 412 576 436
 388 380 393 366 413 254 816 659 444 316 420 417 347 525 256 517 455 286 459 315 458 312 427 424 453 426 418 435 430
 357 147 356 470 486 607 340 422 472 335 329 440 600 294 405 390 499 432 550 509 446 552 401 536 423 404 442 201 364
 476 370 229  90 479 599 411 449 457 623 473 317 572 692 394 429 428 481  13 409 280 279 488 443 363 484 397 528 556
 547 448 208 450 381 310  25 438 494 650 501 253  53 637 468 560 331 541 222 402 441 557 508 497 308 485 313 506 675
  10 601  84 502  31 323 493 207 566 462 500 595 554 415 584 303 568 471 299 510 489 374 339 548 265 542 521 466 587
 792 519 490 661 561 398 129 549 371 482 110 540 578 109 452 593 474 396 124  63 277 102 672 590  60 564 702 266 585
 530 492 503 532 529 562 619  55 538   6 307 611 697 431 643  62 543 654 290 125  95 635 514 491  81 558   2 512 592
 622 531 513 574 648 629 524 480  27 309 668 527 511 660 571 180 184 375 131 305  40 419 634 328  29 332 262 608 588
 373 170 189 579 591 570 119   4 137 683 698 679 690 282 565  80 756 614 194 101 349  17 604 704 382 719 214 663 483
 616 507 533 609  52 752 376 534  34 696 461 559 589 358 689 647 516 741 304 610 368 475 716 142  75  69   1  50 130
 496 228  68 658 773 383 477 693 190 671 721 545 625 283 631 677 734 577  11 569 710 191 274  15 104  72  82 638 113
 748 787 515 105   9 653 597 759 148  71 742 680 708  24 617 181 728 712  26  64 264 651 761 355 465 133  28 581  97
 733 164 153 112 694 166 678 518  22  18 596 620 788 218 790  99 758 498   8 154 126 764 776 769  12 736 681 504  54
 598  93  89  41 703 700  70 120 135 685 665 723 800 215 731 603 809 662  58 691 270 805 615 777 227   7 100 187  30
 746 464  78  57  77 783 156 523 165 722 324 330 735 406 555 606 737 815 255 284 269 753 669 655  37  23 727  21 237
  45 688 203  42 740 781  76 204 730 714  48 767   3 695 618 241 705 814 251 219  46 739 713 801  65 107 360 789   5

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00018e+07us (= 10001.8ms, 10.0018s)
Wall-clock time (full program): 1.00627e+07us (= 10062.7ms, 10.0627s)
Satisfaction error: 2
Number of search iterations: 2004
Number of local moves: 829 (including on plateau: 277)
Number of local minimum: 126 (including on plateau: 22)
Number of resets: 0
Number of restarts: 0

Problem in column 2: 775 526 778 197 183 641 175 221 807 200 664 242 212 380 147 370 448 601 519 492 531 170 507 228 787 164 93 464 688 => the sum is 12210 rather than 12209
Problem in column 25: 627 762 791 795 822 763 729 624 724 535 546 602 539 453 423 363 308 265 60 81 29 382 75 104 465 12 227 37 65 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 611 613 220 102 571 806 802  78 805 166 121  66 818 124  92 539 799 782 650 686 775 711  97 695  49  72  68 172 119
 699 421 499 529 616 498 841 659  67 737  60  45 743 113  58 621 490 714 231 821 807 128 109 589  54 790 127  59  84
  47 640 691 104 701 765 730 823  61 278 162  42 660  64 117 582 373 757 784 772 463  85 150 813  93  82 763 196 411
 149 579 497 761 125 600 752 165 148 764 722  41 827 105 146 776 262 661 716 517 808 190 258 755 223 247 120 242  53
 187 630 474 739  25 814 155  52 114 816  35 292 671 211  44 570 230 834 598 735 791 830 194 106 817 277 798 141  29
 183 648 544 173 504 286 305 453 142 833 221 272 831 132  99 575 324 692 212 663 809 259 123 684 315 826  95 825 181
 226 741 618 103 236 254 728 745  70 631 112 245 824 349 195 651 536 838 129 234 488 217 839 703 116 401 249 164 567
 176 769 747 325 359 312 346 835 246 780 227 163 139 840 209 683 720 440 152 206 290 653 186 378 314 253 412 287 762
 157 680 642 243 786 299 244 576 800 837 256 336 250 294 158 643 547 238 260 513 672 396 665 795 182 193 241 101 205
 291 746 687 188 811 383 306 729 370 534 191 219 471  96 235 758 778 269 115 666 275 361 189 751 326 588 328 255 293
 354 614 685 819 465 284 615 338 591 625 207 288 451 350 180 276 389 301 607 261 381 218 302 342 289 562 267 417 731
 313 323 636 167 252 344 229 770 311 560 353 424 355 316 403 330 725 609 726 228 773 405 327 371 388 264 337 494 476
 285 404 414 384 473 542 232 456 347 482 295 265 531 274 656 617 644 357 767 514 322 433 447 335 416 222 248 429 418
 280 329 492 348 812 446 321 487 439 475 364 394 341 434 266 419 197 376 386 334 351 358 468 369 559 664 828 332 340
 365 178 820 500 435 479 391 407 507 308 413 426 420 303 360 402 345 395 333 702 393 410 377 397 469 555 409 310 400
 458 551 390 425 444  16 450 298 441 523 452 496 530 495 489 620 461 457   4 455 392 503 408 526 184 462 415 442 422
 593 538 225 427 215 550 518 398 573 431 480 423 177 491 459 541  33 481 448 548 363 595 478 512 375 472 445 399  21
 535  56  48 374 438 519 501   7 603 406 521 520 372 657 486 318 210 140 270 428 532 667 510 537 528 508 379 561 578
 380 208  81 436 477 565 558 467 612 317  39 637 307 273 587 454 169 483 108 634 470 623 506 556 768 144 356 449 545
 502 147  69 557  88 592 546 198 543 203 610 601 522 485 689  73 385 432 387 160 577 590 443  71 563 300 682 549 645
 484  51 145 581 705  94 599 511 343  57 566 715 552 584 596 493 509 602 466 159  22 606 639  50 515 320 460 696  89
 698 296  31 524 676 100 527 110 608   9 759 655 633 694 594 237 382 516  11  46 569   1 649  36 585 568 670 744 281
 710 175 137 662 638 727   2 540 777  20 673 723 136 635 464  80 505 171 268 580  27 170 624 240 533 668  98 629 597
 732 200 151 626  43 437 658 143 688 224 654 753 199 564 766 111 214 122  91  79 154 605 168 628 646 574 604 789 586
 553 525 251 754   5 706  75 430 366 331 779 674 204 756 652  13  74  55 583 192 133   8 760  12 572 712 627 700 707
 788  34 319 675 669  24 362 216 794  62 719 734  10 733 815 213 678  23 554  28 233 622 161 202 718  14 690 822 297
 697 239 279 647 367 641  63 271  37 339 709 793  83 783 801 131 352 130 803 201  76 708 619   6 785 724   3 135 787
 738 748 681  17  15  40  90 679  32 282 717 138  65 771 796 174 185 304 810 134 156 704 836 632  77  26 749 832 781
  18 126 736  19 257  86 263 368 774 179 792 829  87 283 797 309 693  30 740 713 107 153 677 118 750 721 742  38 804

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.00622e+07us (= 10062.2ms, 10.0622s)
Satisfaction error: 2
Number of search iterations: 1844
Number of local moves: 535 (including on plateau: 125)
Number of local minimum: 158 (including on plateau: 11)
Number of resets: 0
Number of restarts: 0

Problem in column 5: 571 616 701 125 25 504 236 359 786 811 465 252 473 812 435 444 215 438 477 88 705 676 638 43 5 669 367 15 257 => the sum is 12208 rather than 12209
Problem in column 27: 68 127 763 120 798 95 249 412 241 328 267 337 248 828 409 415 445 379 356 682 460 670 98 604 627 690 3 749 742 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  38 149 132 743 756 774 107 772 237 722 247 717 773 716  14 422  13 790 754  83 184  48 276 248  77 700 755 807 155
 789 328 296  81 795 139 245 752  44 783 224 644 812 787  60  94 746  40 686 179 728 504  39 740 804  29 758  26  57
 806 212  41 632 719 788  78 713 702 674 110   6 744 738 154  27 113 780 725  52 143 235 218 776 721 255  24 766 257
 705 311  88 244 770 793  69 672 236 595  96 118 707 739   1 105 117  10 659 180 335 615 142 767 622 723 748 660 382
 681  28 679 320 137 685 133 476 691 669 280 678 769 782 712 153 573 794  54 167  71 571  92 653  11 252 185 628 285
 710 521 345 671 144 602  55 518 687 266   3   4 673 537 392 696 711 763 690 437 507  17  58 387 591 369 183 543 129
 665  56 649 346 487 683 214 136 642 635   7   5 495 464 703 701 557 492 584 648  18 123  70 765 609  67 625 647 116
 317 605  15 631 588 611 279  21 682 376 159 643 624 554 541 656 637 195 623 520  75   9 106 608 221 241 493 596 583
 569 564 630 284 658 664 527 181  59  20  16 594 621 525 650 604 477 542 519 461  64 617  12 614 694  95  43 785 120
 619 576 634 140 490 589 188  36 585   8  32 636 473 522 582 505 732 545 677 112 552 607 261 363 481 271 170 550 273
 463 616 508 198 451 598 528 259 551 429 323 466 531 586 514 449 509 491 158 566  65 529 416 610 546 138 104 404 203
 436 532 516 192 499 497 570 230 626 563 162 488 125 489 383 446 460 291 204 475 496 513 343 641 223 454 515 572 268
 577 440 459 150 390 438 500 227  33 699 293 544 427 402 575 506  73 498 618 470 581 560 384 365 533 510 455 378 124
 442 432 395 447 344 601   2 469 526 372 301 629 352 480 484 202 405 457 412 434 620 502 428 423 450 456 355 574 215
 393 374 386 231 468 406 472 305 444 517 396 342 415 400 483 397 298 458 561 553 340 413 414 419 408 559 549 360 448
 332 426 391 530 398 358 485 587 385 453 652 356 465 539 445 556 420 217 441 294 474 368 592 295 409 299 337 274 431
 462 304 430 381 675 222 253 325 316 329 558 482 822 394 249 452 347 425 350 334 801 512 535 351 364 278 290 547 421
 327 370 281 733 349 348 389 565 373 306 837 742 361 471 424 225 310 148 399 339 313 220 538 655 309 354 322 433 768
 377 270 267 411 303 331 315 606 775 741 813 478 338 367 228 262 288 503 443 501 341 314 579 292 326 661 264 336 479
 286 307 747 662 250 157 240 831 189 824 567 282 366 379 308 111 114 380 388 762 226 524 568 238 312 760 251 401 779
 330 319 786 698 287 216 657 692 410 260 704 141 359 201 101 219 277 272 100 130 840 796 403 171 548 706 670 207 709
 736 689 275 737 300  79 757 417 200 263 697 206  68 128 199 173 418  66 375 283 829 830 802 232 727 612 194 318 599
 152 439 714 597 289 233 627 666 820 121 834 797 213 102 160 205 209 172 246 324 792 163 718 108 258 753 651 115 731
  76 145 146 603 175 839 729 196 166 269 494 362 176 353 814 182 357 234 734 805 832 126 580 810  82 645 555 190 534
 333 730 668  19 833 254 720 302 197  87 715 242 122 210 761 798 127 103 243 177 600 684 750  30 791 467 562  22 663
  98 229  51 708 156 151 826  42 771  50 726 639  97  86 808 777 816 836  35 835 135 693 646 168 256 745 211 131 486
 193 817 841 191 164  84 676 751 523  34 735  85  45  31 784 640 613 799 186 578 821 208 759 134 161 109 435  63 749
 119 827  61 536 165  46 803 371 265 511 540 811 174 147 590 818 667  89  49 815 239 809 800  25  37 654 781  53 407
 178 593 778  93 169  23 764  91  74 633 688  72  62  80  90 828 825 819 297 695 187  99 680 321 638  47 724 823 838

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00027e+07us (= 10002.7ms, 10.0027s)
Wall-clock time (full program): 1.00633e+07us (= 10063.3ms, 10.0633s)
Satisfaction error: 5
Number of search iterations: 1337
Number of local moves: 905 (including on plateau: 352)
Number of local minimum: 73 (including on plateau: 37)
Number of resets: 0
Number of restarts: 0

Problem in row 25: 333 730 668 19 833 254 720 302 197 87 715 242 122 210 761 798 127 103 243 177 600 684 750 30 791 467 562 22 663 => the sum is 12210 rather than 12209
Problem in row 26: 98 229 51 708 156 151 826 42 771 50 726 639 97 86 808 777 816 836 35 835 135 693 646 168 256 745 211 131 486 => the sum is 12208 rather than 12209
Problem in column 7: 107 245 78 69 133 55 214 279 527 188 528 570 500 2 472 485 253 389 315 240 657 757 627 729 720 826 676 803 764 => the sum is 12208 rather than 12209
Problem in column 19: 754 686 725 659 54 690 584 623 519 677 158 204 618 412 561 441 350 399 443 388 100 375 246 734 243 35 186 49 297 => the sum is 12210 rather than 12209
Problem in diagonal 1: 155 26 24 723 11 387 70 9 64 112 158 291 73 202 483 539 822 742 813 824 410 417 627 839 833 708 841 827 178 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 565 257 610  12 554  95 832 660 122 787 102  32  67  86 313 765 172 467 124  62 796 150 654 754 714 755 779 119 804
 822 811 694  35 525  84 670 739  81  38 491 104  56  55 526  64 507 734 195 452 792 116 793 790 835 527 184 186 303
 831 839 750  34 841 213 591 114  68  53 134  90 109 245 405  46 748 813  71 701 770 111 669 762 316 692 206 196 791
 724 596 819 815 814 623 699 120  99 144 200 810 216 239 294  66 676 675 635 171 771 128 781 141 560  49  94 127 123
 836 585 469 215 758 194 279  70 137 222 167  98 132 107 772  85 443 700 719 101 648 684 715 164 805 838 322 199 745
 769 726 645 201 721 782 740 187 255 103 238  60 265  23  80 244 735 558 149 162 266 258 566 174 614 828 821 214 825
 809 705 829 190 486 151 664 230 330 113 317 228 165 225 547 785 657 487 110 146 747 276 653 827 761 204 189 197 181
 603 802 711  69 818 176 777 572 376 240 229 342  91  26 541 292 816 659 351 175 268 823 338 159 597 365 231 463 299
 638 668 729 290 663 345 285 161 780 160 277 262 183 723 674 237 833 404 391 301 672 336 252 581 173 371 347 212 261
 586 472 665 138 688 115 302 636 263 824 135 254 363 264 439 350 473 656  59 786 337 131 826 251 775 435 233 352 401
 321 366 315 274 626 283 725 647 421 320 427 383 284 296 399 644 253 820 666 170 193 475 359 502 717 368 339 207 409
 318 766 413 278 518 334 577 789 306 256 375 837 271 130 513 310 281 348 632 449 420 232 419 430 742 335 249 326 354
 324 707 248 493 448 418 353 794 456 344 223 447 803 397 378 331 428 840 458 328 270 496 236 269 329 373 311 358 349
 374 267 471 385 498 465 629 834 280 304 384 415 235 830 488 423 381 501 503 382 389 388 396 275 211 431 178 403 489
 341 451 485 390 203 460 437  21 289 394 497 362 286 461 470 555 407 333 651 519 673 453 402 499 343 534 484 432 377
 241 523 356 300 360 398 412 529 218 417 386 319 538 400 259   5 520 446 524 476 492 481 532 612 522 515 512 506 410
 260 556 462   9 361 441 380 454 543 483 357 355 588 474 536 466 346 234 568 429  92 387 535 533 628 307 411 455 559
 247 191 504 583 226 722 242 288 477 545 464 433 434 510 217 569 219   2 169 600 478 595 661 630 426 414 425 494 444
 550 106 517 667 282 592 147 422 546 393  41 295 698 364 180 509 652 479 192 530 528 445 500  72 143 549 540 633 637
 272 163 168 552 152 607 416 406 598 574 544 643 584  82  88 649 205 155 606  10 620 505 587 640  43 718 495 619 508
 563  79 177 764  65 539  96 314 557 564 618 578 562 655 118 642  63 332 308  75   8 571 537 589 516 521 604 641 553
  97 370  93 450 105 686 442 561 682 482 681 531 704 806 250 590  45 438  57 677 297   4  83 605 156 609 593 720 395
 209 243 117 768  76 617 392 570  16 573 696 689 613 599 690  37 639 594 153 480 634 658 551  78 208 133 511 624  42
 273 291 121 716 157  31 424 287 646 615 709 579 737 683 148 760 576  51 608 774 671 602  50   7 188 136 783 575  11
 246 298 305 713 327 710 158 459 746 542 567 801 627 788 582 702 125  52 468 379  47 727  15 744   1 154  27 773 126
 140  28 210 621  87 145 340  22 730 797 631 548 625 756 616 685 309 166 650 776 179 580  24 662 457  18 749 622  36
  44 224   3 706 325 679  25  14 733 778 753 751 372 440 731 680 112  54 697 678  13 693  19 312  40 728  48 798 759
  77  58 185 741 436 703  33 514 763 408 767 743 784 807 198 490 367  29 687 708 108 611  17  73 369 100 732   6 695
 129  61 139 800  89 601 142 795 691 736 799 220 817 738 757 227 221 182 808 712  30 293  39  74  20 202 812 752 323

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0001e+07us (= 10001ms, 10.001s)
Wall-clock time (full program): 1.00618e+07us (= 10061.8ms, 10.0618s)
Satisfaction error: 5
Number of search iterations: 1455
Number of local moves: 838 (including on plateau: 347)
Number of local minimum: 96 (including on plateau: 48)
Number of resets: 0
Number of restarts: 0

Problem in row 12: 318 766 413 278 518 334 577 789 306 256 375 837 271 130 513 310 281 348 632 449 420 232 419 430 742 335 249 326 354 => the sum is 12208 rather than 12209
Problem in row 23: 209 243 117 768 76 617 392 570 16 573 696 689 613 599 690 37 639 594 153 480 634 658 551 78 208 133 511 624 42 => the sum is 12210 rather than 12209
Problem in column 3: 610 694 750 819 469 645 829 711 729 665 315 413 248 471 485 356 462 504 517 168 177 93 117 121 305 210 3 185 139 => the sum is 12210 rather than 12209
Problem in column 16: 765 64 46 66 85 244 785 292 237 350 644 310 331 423 555 5 466 569 509 649 642 590 37 760 702 685 680 490 227 => the sum is 12208 rather than 12209
Problem in diagonal 1: 804 186 206 49 805 174 653 823 672 786 666 348 428 423 470 400 588 433 41 574 557 561 392 31 327 621 3 58 129 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 105 124 691 125 780 129 135 589 744  27 834 614 390 754  67 701 806 646  78 576  69 631 766  65  42  16 811  81 813
 210  98 656  87 254 168 501 190  88  79 819 828 625 663 470 574 837 690  82 102  44 782 821 752  66  33 827  40 823
 804  29 367 776 712 170 131 142 598  38 193 736 626 749  73 535 816 809  39 557  47 722 623 149 733 137 687  61 150
 814  26 682 815 772 182  60 123 739 111 426 199 423 698 134 768 728 602  94 790  90 218 662 181  63 830 771  36 172
 120 266 745 802 836 832 119 684 240 143 309 697 432 570 566 461 702 705 164 215 310 807 678 126 157 222  59  86 156
 803 138 773 127 192 826 344 162 121 114 249 785 730 651 284 717 841 145  53 680 306 223 660 825 628 178 191 216 247
 267 196 778  89 835 246 775 158 198  99 812 585 761 799 488 791 654 781 171 163 250 213 565 314 600 234  51 106 230
 235 180 638 118 657 236 277 643 328 103 419 217 743 708 831 700 786 258 203 753 116 840 655 325 280 346 289 174 151
 382 211 720 316 579 342 285 798 731 255 838 621 538 324 275 295 445 337 243 329 839 340 760 320 197 293  91 205 300
 350 251 569 428 767 219 220 718 343 765 801 396 779 305 307 820 544 187 239 265 298 231 671 202 290 224 288 345 387
 318 356 636 372 615 531 194 818 256 732 207 386 710 391 248 582 741 268 365 233 292 358 541 245 459 165 339 385 466
 221 321 548 362 331 361 441 674 695 261 612 253 338 296 402 540 214 748 601 303 458 370 529 283 793 351 353 281 269
 359 226 549 486 278 425 384 770 380 287 668 360 472 463 262 414 407 462 440 381 494 487 633 375 555 201 227 315 449
 368 443 403 404 436 399 469 489 471 437 543 545 400 401 334 552 302 363 424 374 393 415 479 366 273 322 446 560 398
 513 515 523 304 474 388 333 323 330 530 568 408 274 454 447 554 442 456 395 510 430 252 518 335 354 347 434 409 389
  19 392 376 405 547  22 536 429 648 561 478 422 416 605 200 519 377 453 369 241 427 383 348 664 520 444 511 503 394
 634 413 282 411 313 452 533 412 451 421 184 539 431 583 166 484 152 433 476 635 580 485 410   5 464 573 418 373 496
 563 438 272 647 483 349 506 457  50 495 286 572 144 439  41 209 159 480 420 571 588 595 378 630 490 455 450 508 534
 521 499 271 542  24 526 639 341 658 608 308 467  32 564 259 225 139 460 645 550 507 532 355 546  84 406 492 481 528
 584 590 327 475 204 498 559 177 661 435 473 482 122 167 468 264 104 500 613  76 477 683  10 578 525 607 509 537 504
 493 553 297 629  95 622 666 110   9 689 299 599  17 115 567  55 577 516 596  75 517 618 279 527 147 659 632 746 505
 448 789 352 653 176 627 685  92 491 759 317 611 276  64 128  25 238 726 649  14 524  11 229 558 575 755 312 603 522
 497 637 173 417  72 551  12 465 594 620 597 195  71  15 747 148 244  43 711 677 610 502 161 724  85 681 715 652 593
 512 672  70 592 581   6 822 364   7 586 237 154 160 291 619 260 186  23 263 727 693 703 112  37 665 808 692 763 604
 734 751  97 714 514 670 764  58 556 257 371  80 669 679 762  83 228  34 810 737 132  96  21 101 294 644   4 673 676
 640 829 108   8  62 696 587 606 155 609  13 117 185 206 792  48 212 100 797 183 642  52 270 650 704 624 800 774 740
 591 709  20  31 301 784 188 397 616 719  49 107 787 169 824 140 113 133 757 723 758 141  46 796 783 686 109 729   3
  74 788 232 738 242 175 725 641 694 794 153 189 332  68 742  57 179 130 805 713 562 208   1 795 667 136   2 750 617
  30 769  54 336  77 777 319 379 357 675 146  45 326  18 706 688  35 721 707  56 756 311  28 735 716 833 699 817  93

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00003e+07us (= 10000.3ms, 10.0003s)
Wall-clock time (full program): 1.00612e+07us (= 10061.2ms, 10.0612s)
Satisfaction error: 3
Number of search iterations: 1453
Number of local moves: 496 (including on plateau: 104)
Number of local minimum: 135 (including on plateau: 15)
Number of resets: 0
Number of restarts: 0

Problem in column 17: 806 837 816 728 702 841 654 786 445 544 741 214 407 302 442 377 152 159 139 104 577 238 244 186 228 212 113 179 35 => the sum is 12208 rather than 12209
Problem in column 26: 16 33 137 830 222 178 234 346 293 224 165 351 201 322 347 444 573 455 406 607 659 755 681 808 644 624 686 136 833 => the sum is 12210 rather than 12209
Problem in diagonal 1: 813 40 687 830 157 825 565 840 839 265 365 748 407 552 447 605 431 572 308 435 9 92 12 6 514 8 20 788 30 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  10 705 615 802 328  18 713 736 371  20 308 781 139 218  66 764 704  68  67 253 496 758  16 748 233 723 747 759  43
 114  22 650 696 477  13 322 415  35 658 630 675 768 804  70 200 765 145 803  15   7   5 136 807  30 719 817 666 745
 127 153 246 823 128 708  19 643 284 487 220 690 618 714 773 702 703  47 741 609 175 659  11 312  33 125 789 629  41
 309 822  32  12  14 183 729 637 684  94 194 793 118 254 744 795 767 514 732 161  28 761  42 601 100 721 563 181 624
  31 796 627 801   6 645 742 617 638  34 335 805  86  25 524 115 799  79 574 579  56 590   4 712  24 245 726 279 715
  44 554 628 722 109 599 147  92 142  61 107 505 606 725 706 576 709 257 170 589 614 756 222   1  75 530 616 662 685
 141 651 548 775 103 681 333 297  90 276  52 543 119  23  36 772 626 372 782 568 648 738  88 635 265 360 636 448 603
 593 560 471 517 151 578 595  17  60 244  69 654 239  49 727 687 519  21 486 641 642 598 176 621 357  46 668 631 592
 270 591 683 580 475 572 474 562 490 602 203 647  58  26 571  38 466  40 697 507 317 513 296 632 213   2 682 377 625
 585 440 612 480 532 613 672 478 491 596  93 558 544 278 634 482 521  27 573   8  50 277 182 523 178 197 533 503 549
 499 570 502 567 597 555 561   3 427 657  87 429 495 584 577 469 531 588  77 451  76 303 298 506 464 331 397 150 458
 565 356 540 395 525 587 542   9 667 494 380 324 416 633 550 512 541 129 450 432  80 536 154 437 389  83 583 382 518
  96 511 359 425 529 465 528 341 325 498 358 453 504 409 418 607 408 375 419 361 488 457 352 443 228 566 351 479 456
 473 288 557 539 180 485  85 354 431 470 417 526 452 422 392 522 455 527 569 411 348 594 383 444 307 463 538 273 304
 424 398 339 462 164 461 426 665 393 438 353 300 605 439 467 302 306 500 546 207 347 342 610 388 509 446 262 663 447
 818 368 385 653 545 226 157 269 364 442 516 497 407 379 365 283 434 332 330 492 404 318 483 459 661 396 350 435 441
 366 623 770 345 337 363 673 762 406 299 484 373 172 420 362 378 280 460 346 449 410 811 552 171 510 193 234 399 261
 291 340 692 209 575 515 289 355 198 338 784 319 334 290 421 159 258 644 374 809 316 430 520 387 656 699 367 400 240
 314 403 825 394 386 243 201 831 412 286 564 401 329 428 185 376 315 639 294 196 390 247 680 282 501 717 221 716 433
 272 391 320 287 369 132 414 445 156  59 694 468 720 749 292 321 326 828 311 652 695 104 718 251 678 260 231 839 227
 402 177  48 256 295  54 301 349 836 126 743 212 798 797 232 838 336 753 242 266 788 405 508 219 739 778 323 215 173
 751 274 131 305 310 236 786 833 794 268 230  73 785 211 186 436 344 710 267 163 711 787 384 264 423 586 255 454 252
 701 158 190 370 671 168 206 235 143 664 677 223 693 734 122 293 250 674 313 752 733 214 735 229 746 731 120 216 248
 724 105 205 162 757 755 281 148 766 777 649 249 189 783 834 138 208 381 237  62 217 204 611 829 551 619 343 285 140
 820  45  37 169 815  53 146 556 812 841 763 192 608 679  95 476 144 553 271 779 792 263 835  82 688 160 241 195  99
 493 133  91 149 691 698 113  51 167 774 655  72 481 670 123 152 102 534 816 780 676 117 810 165 760 832 130 184 790
 707 108 837 112 800  57 830 689 737 106 489 135 604 155 730 179  71 581 559 224 547 259 821 111 750  81 121 187 622
 669 827 191 137 640 740 808 646  98 776 620 110 225 210 819  55 238 771  89 754 472  29 813 124 728  63 166 327  64
 600 840  78  65 700 806 116 174 791 824 535 202  97 101 188 582  84 660  74  39 686 134 769 826 413 537 199 275 814

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00012e+07us (= 10001.2ms, 10.0012s)
Wall-clock time (full program): 1.00617e+07us (= 10061.7ms, 10.0617s)
Satisfaction error: 2
Number of search iterations: 1553
Number of local moves: 751 (including on plateau: 233)
Number of local minimum: 88 (including on plateau: 38)
Number of resets: 0
Number of restarts: 0

Problem in column 9: 371 35 284 684 638 142 90 60 490 491 427 667 325 431 393 364 406 198 412 156 836 794 143 766 812 167 737 98 791 => the sum is 12208 rather than 12209
Problem in column 17: 704 765 703 767 799 709 626 519 466 521 531 541 408 455 306 434 280 258 315 326 336 344 250 208 144 102 71 238 84 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 793 645  73 695  95 631 796 782 194 745 739 111 146 727 115  43 147 771  78 110 759 618  41 174 733 464 107 139 738
 822 761  34 654 810 781 830 134  61 367 711  87 693 788 119  85  75 767  53 668 836 460  82 161 477 295 103 374 121
 218 191 805 221 104 804 840 691 137 807 594 132 600 762  76 138 100 748  45 838 602 403 154 639 786 144 437 133  60
  77 102  58 831  90 777 561 230 196 646 681 130 685 665 398 180 207 760 143 307 828 579 698 616 597 357 179 220 411
  62 794  81 331 768 776 682 457 535 621 254 114 677 187 212 135  84 734 649 833 542 749 188 128 293 120 176 792 235
 153 291 280 797 116 498 737 238 741 624 343  59 724 227  96 164  49 725 536 557 829 821  91 841 811 297 228 262  74
 275 241 438 612 708 277 566 151 287 593 659 340 769 764 345 125 222 289 791 160 608 559 720 197 772 127 136 261 217
 202 109 209 163 203 239 785 546 198 652 705 206 819 826 809 124 255 258 742 812 834 619 466 184 418 253 231 123 219
 448 215 516 405 798 341 484 488 818 715 213 359 305 408 248  99 288 232 595 243 380 802 563 266 414 225 407 265 669
 242 385 302 234 730 814 752 456 226 696 736 240 719 189 195 375 279 268 377 815 673 642 210 276 313 177 257 249 382
 369 223 205 256 368 765 423 630 424 273 716 244 270 193 475 264 415 703 575 317 458 827 591 433 439 379 211 469 294
 173 298 394 531 325 250 676 182 229 214 572 692 346 304 333 269 386 233 587 412 514 479 451 284 713 520 634 383 825
 178 356 296 168 329 299 525 339 271 431 224 462 640 416 839 442 817 282 835 395 476 444 491 318 400 300 272 455 509
 425 432 283 517 358 342 512 578 376 391 503 362 355 390 378 530 365 350 586 322 381 371 532 658 406 481 320 332 373
 410 392 441 500 324 576 427 347 352 399 501 387 445 467 454 312 389 428 190 679 483 599 338 472 409 281 490 351 366
 538 404 372 465 183 384 482 583 327 434 573 607 422 393 508 486 353 349 497 208 388 447 251 440 585 321 419 420 370
 360 515 495 449 446 175 259 306 315 292 543 523 417 443 252 606 354 554 363 534 430 487 452 401 471 570 555  54 588
 521 545 263 623 489 499 334 171 429 549 492 463 237 552 526 603 511  13 547 610 336  70 626 533 473 149  63 529 453
 301 496 613 396 548 505 309 478 592 330 323  25 470 632 528 435 615 426 504   9 204  55 402  50 474 544 779 601 565
 609 493 567 267 524 712  36 246 647  22 421 527 502 644 582 580  68 655 290  18 326  92 150 662 436 560 635 678 260
 485 569 518 625 519  42 166 551 106  46 122 308  37 541 747 584 335 540 236 638 101 247 344 667 710 726 674 564 461
 596 480 614 627 641 680 162 311 522  65  32 773  15 510 506 562 577 656 131 666 117  97 337 697  26 558 663 571  17
 661 704  12  47 553 622 348 574 732 637   7 657  27 643 683 689 688 670 159  83 199 172  21 126  89 653 746 513 494
 707 604 751 620 636   4  52  29 789 364 286 723 537  88 108 628 763  38 285 709  94 319 700  11 141 757 568 717 181
 718 550 633  98 201  67  71 753 784 539 170 706 112 152 722 750 629  69 450 140 216 278 118 755   5 740 651 468 664
 611  30 702  40 605  93  19 598 155  48 617 758 413  33  28 687 799 145 581 770 200 507 775  56 699  14 731 820 675
 459 701 744  51   8 148 157 650 806 156  39 660 556  80 816 837 824  72 274 186  57 245 801 590  66 735  20 743 728
 790 648 756 314 729  64 105  24 165 192 129 774  86 169 714 690 832 158 800 167  10  79 803 808  23 684 823   2 671
   6  35 754 672   1  44 113 686 795 361 303 780 185  16 397 787 783 316 310   3 328 142 813 766  31 778 694 721 589

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.00615e+07us (= 10061.5ms, 10.0615s)
Satisfaction error: 2
Number of search iterations: 2125
Number of local moves: 795 (including on plateau: 145)
Number of local minimum: 163 (including on plateau: 21)
Number of resets: 1
Number of restarts: 0

Problem in column 11: 739 711 594 681 254 343 659 705 213 736 716 572 224 503 501 573 543 492 323 421 122 32 7 286 170 617 39 129 303 => the sum is 12208 rather than 12209
Problem in column 25: 733 477 786 597 293 811 772 418 414 313 439 713 400 406 409 585 471 473 474 436 710 26 89 141 5 699 66 23 31 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 327 258 160 713 776  52 557  64 764  44 721 736 673 805 700 688  45  58 796 127 135 150 737  79 740 794 123 296  91
 765 479 200  73 241  49 307 774 783 795 801 116 715 807 810 730  50  84 702 686  32 290 190  26 772 797  93  39   3
 674  59 189 769 768 205  48 102 704 689 552  37  51 778 787 722  53  24 637 646  67   2 734  83 741  41 565 781 701
 742 280 219  23 589 318 158 583 798 615 591  62 603 668 691 731 663 172 770  97   7  21 226  54 735 372 601 162 658
 755 652 146 239 400 101 573 732 766 610 750 682  19 760 792 548 137 157 720 109  14  25 144 289  15 733 680   4 657
 654 266  17 633 643 391  30 661 576 642 563 690 524 719 581 676  63  90 314 195 415 163 541 338  96 653  16 353 706
 631 199 184 692 695  68 411 484 604 694 277 422  75 635 639 660 500 143 217 149 638 340 471 121 599 495 397 133 636
 498 595  85 155 664   1 482  34 697 670 586 572  38 605 287 634 590  36 607   6 608 356 669 238 596 613 481 246 560
 449 582 124 224 716  61 194 666 165 602 328 462 181 650 593 518 656 519 494 176 517 496 588 112 622 571 549   5 389
 678 644 416 218 483  35 139 551 444  55 264 493 115 510 592 497 624 537 579 506 145 523 530 114 540 671 619 132 555
 569 148 453  11 512 404 559 516 458 285 410 578 623 420 454 570 616 473 365 235 244 236 696 134 470 515 469 396 390
 446 435 439  33 467 100 509 427 461 520 628 542 311 463 503 501 491 475  42 186 392 215 539 451 556 621 597 229 630
 321 513 419 373 492 222 521 477 502 507 315 364 442 366 489 406 193 561 645 445 611 138 424 334 485 361 387 526 370
 651 450 322 511 455 106 531 545 466 381 476 377 310 534 465 331 440 554 294 418 385 363 286 351 358 407 474 478 490
 414 543 378 417 480 538 428 505 344 456 171 580 309 421 532 433 228 460 261 323 354 791 550 546 298 375 242 431 401
 408 438 291 342 360 817 725 430 566 553 395 304 436 432 270 326 346 355 379 368 335 386 332 529 380 413 564 423 306
 292 345 488 278 319 412 303 464 384 472 352 830 347 362 297 840 425 265 349 448 399 426 393 369 295 816 402 443 394
 486 835 754 359 240 452 717 367 272 567 105 247 316 832 788 320 403 283 197 312 308 434 350 803 325 336 141 398 262
 232 216 269 598 747 767 383 487 267 313 388 371 273 174 198 333 699 317 649 225 820 376 288 659 535 329 382 584 330
 815 125 703 339  80 718 274 437 667 698 762 271 763 207 675 230 527 257 119 499 245 429 281 606 282 201 252 468 279
 305 156 806 729 254 508 154 441 211 255 756 214 800 231 237 248 839 301 409 707 447 585 206 575 204  46 665 708 212
 337 299 612 727 202 749 811  57 203 357 177 166 568  87 131 268 164 777 536 829 284 821 152 687 324 208 726 723 227
 233 276 620 562 251 711 823 220 300 249 126 348 625 183 151 221 684 739 250 745 577 600 804 574 196 142 107 629 263
  69 693 662 544 275 757 609 169 104 459 188 182 809 153  82 192 170 822 681 685 824 457 260 504 209 178 714 648 110
  20 117 746 256 780 547 594 130 341 118 812 191 640 210 179 147  92 786  78 528 167 614 738 617 827 302 632 825 175
 113 838 627 833  13 779 728 168 185  71 173 253 213  22  29 243 293 771  66 587 831 808  72 793 136 813 161 753 837
 187  99 514 234 111 744  43 374  56  81 405 743 724  40 129  89 785 655 799 641 782 647 834 683  28 140 159 710 773
  10 828 618 522  74 784 533 525  18 108  77 818 679  88 120  12 761 712  31 705 790 758  76 751 775 180 752   9  95
 128 841 748 802 122 814  65 819 103 343  60 558  27  47   8  94 672 826 223 626 836 759  98 789  70  86 259 677 709

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00026e+07us (= 10002.6ms, 10.0026s)
Wall-clock time (full program): 1.00633e+07us (= 10063.3ms, 10.0633s)
Satisfaction error: 2
Number of search iterations: 1380
Number of local moves: 706 (including on plateau: 151)
Number of local minimum: 90 (including on plateau: 17)
Number of resets: 0
Number of restarts: 0

Problem in column 6: 52 49 205 318 101 391 68 1 61 35 404 100 222 106 538 817 412 452 767 718 508 749 711 757 547 779 744 784 814 => the sum is 12210 rather than 12209
Problem in column 16: 688 730 722 731 548 676 660 634 518 497 570 501 406 331 433 326 840 320 333 230 248 268 221 192 147 243 89 12 94 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 197 816 785 728 723 679 780 762 429 201 760  83  56 101 649  97  99  89  64 818 536 331 784  70 776 271 145   5 375
 747 840 838  27 708 673 742 633 682 653 837 788  81  42 440 230 112 129 113 130 102 681 819  33 795  24  32 207  71
 491 137 565 789 793 824 794 631 801 544 833 116  40  63 711 111 134 160  25 186 117 176 736 763 730 178 471  21 269
 803 165 718 826 659 743 680 140 592 744 121 830 560 136 515  85  18  13  90 181 123 783 704  55 575 827 199 169 156
 127 782 750 663 168 124 809 295 811 834 832  59  51  98 460 146  93  30 240 276 821 524 542 413 839 702  95 389 236
 835 753 746 603 772 695 664 256 531 212 804 217 122 120 177 328 218 249 226 363 125 330 638 825 755 171  35 193 246
 740 288 210 585 596 741 525 417 167 778 430 823 359 270 166 267 228 154 203 696 802 503 357 215 552 335  66 273 463
 667 190 713 543 706 158 561 836 735 820 260 195 348 353 748 358 222 294 321 189 128 828 342 253 473 194 247  91 436
 752 304 727 749 656 822 556 608 722 344 174 370 173 235 786 180 319 172 309 143 672 745 396 198 139 132 114 142 570
 300 313 774 660 275  94 563 703 221 175 421 292 233 252 274 141 787 391 562 732 385 645 720 371 709 265 204 379 368
 400 208 255 641 250 377 737 518 771 350 392 279 209 220 829 386 390 286 347 192 303 779 534 446 354 443 365 339 609
 188 185 312 694 280 337 324 767 439 495 268 628 283 266 841 272 361 658 405 483 408 526 327 343 393 606 432 332 356
 369 225 302 506 591 412 416 683 395 366 445 420 214 290 373 308 775 581 409 248 467 447 322 301 523 651 419 384 367
 425 206 527 338 831 314 538 364 411 380 382 401 508 566 548 428 530 383 509 470 213 477 374 316 336 378 418 289 349
 441 399 264 458 424 472 387 459 540 287 478 480 584 410 481 434 547 510 297 484 388 497 448 227 320 442 310 435 306
 462 341 261 450 553 444 162 315 284 223 323 407 607 602 352 381 496 568 449 455 464 329 489 558 333 325 422 454 699
 346 555 528 334 305 293 479 404 632 593  11 469  15 488 457 654 438 551 573 453 715 578 243 595 277 522 191 403 107
 372 677 465   2 529 461 159 539 414 282 456 340 639 505 426 486  17 474 205 513 311 263 546 493 499 451 614 644 427
 487 318 599 245 362 516 262  28 557 564  80 406 485 437 110 490 616 589 476 532 452 622 511 164 586 468 580 559 108
 402 635 500 394  19 600 521 224   7 147 619 629 423 504 131 621 507 501 514 126 688 151  43 675 598 571 648 572 239
 512 601 502 144 152 678 231  38 170 182 554 466 605 630  52 579 623 494 583 278  48 234 610 545 431 537 689 626 415
  46 714  82 103 577  79 106  65 615 433 661 618 666 705 701 574 624 569 611 625 482  44 104 604  57 296 814 519 115
 285 150  87  76 157 588 291 492  26 118 535 690 597 587  92 777 351 590 716 549 670  73 398 640  77 687 692 520 698
 251 686 196 229 138 662 238 163  45  72 697 307 550 724 200 710 397 567 317 533 258 674 183  34 541 613 768 646 810
   4 669  67 202  20  39  96 187 676 808  68 281 733 594 612 815 617 770 634 376  60 244 100 721  12 627 805 582 790
  88 725 211 355 643 219 498  74  22  47  53 759 765 797 216 105 647 360 796 671 754 179 620 738 109  84 637 739 298
 642 257  23 726 135  14  50 766   8 242  10   6 812 650 232 729 652 665 791 758 237 326  16 807  86 657 299 813 800
 254  41 153  61 133   3   9 149 345 517 636 119 806 799 475 817 684 655 668 691 761  36  62  37 259 751 781 773 734
 576  29  49  78  54 148  31 693 161 798  69 731 685 764 155 700 707 757 756  58 719 184 241 769  75   1 717 712 792

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00005e+07us (= 10000.5ms, 10.0005s)
Wall-clock time (full program): 1.00612e+07us (= 10061.2ms, 10.0612s)
Satisfaction error: 4
Number of search iterations: 1992
Number of local moves: 858 (including on plateau: 392)
Number of local minimum: 185 (including on plateau: 40)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 803 165 718 826 659 743 680 140 592 744 121 830 560 136 515 85 18 13 90 181 123 783 704 55 575 827 199 169 156 => the sum is 12210 rather than 12209
Problem in row 16: 462 341 261 450 553 444 162 315 284 223 323 407 607 602 352 381 496 568 449 455 464 329 489 558 333 325 422 454 699 => the sum is 12208 rather than 12209
Problem in column 14: 101 42 63 136 98 120 270 353 235 252 220 266 290 566 410 602 488 505 437 504 630 705 587 724 594 797 650 799 764 => the sum is 12208 rather than 12209
Problem in column 28: 5 207 21 169 389 193 273 91 142 379 339 332 384 289 435 454 403 644 559 572 626 519 520 646 582 739 813 773 712 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 833 789 791  80  38 608  71 641  99 103 796 501 769 814  81 505 132  79  75  56 836  72 663 116 811  94  90 840 826
 544 823 807  59  61 612  34 777 816  46 697 673 792 837  73 752  70 121  66  83 561 740 474  67 718  49 741  64  52
 137 790 222 745 141 801 815 782 138 651 596 577 798 690  60 591  41  50 252 460 730 108 102  47 570 126 723 315 151
 541 698 240 732 812 687 583 676 154 173 125 582 832 757 207 181  45  77 114  95 630 139 615 225 806 800  57 432 194
 649 838 819  33 739 269 835 751 135 109 142 830 117 733 101 794 144 113 204 140 164 590 531 628 787 242  69 465 238
 551 180 704 188 747 145  74 793 182 100 266 664 827 594  91 624 178 259 228 104 785 703 557 818 631 156 231 606 223
 554 744 170 306 136 556 738 765 217 210 568 169  93 786 261 803 193  36 200 281 758 724 834 190 781 288 302 385 161
 672 265 199 780 206 824 841 153 167 219 152 839 129 627 186 478 304 254 227 408 712 537 597 105 708 333 330 681 276
 772 229 310 218 308 829 230 753  53 198 560 622 216 344 275 725  42 292 301 390 755 633 831 176 750 195 244 559 399
 614 277 189 469 187 205 378 438 348 821 354 721 279 257 431 352 248 146 313 799 374 783 813 236 623 353 356 600 245
 727 328 825 184 366 671 273 359 123 293 808 289 736 324 262 253 430 251 290 234 318 670 748 442 516 337 371 653 128
 822 203 457 515 386 332 255 393 296 258 220 395 226 667 334 350 483 349 285 317 437 717 689 436 565 357 458 688 319
 705 468 810 419 270 435 646 426 776 271 280 820 297 341 295 456 250 327 283 314 368 214 329 427 520 420 444 282 316
 459 397 490 497 494 519 355 347 365 428 340 298 405 192 439 381 828 345 489 409 414 389 286 360 447 513 379 613 331
 443 243 479 686 425 300 361 416 391 552 326 320 521 362 471 466 463 311 215 384 502 323 493 512 530 429 509 382 394
 358 404 480 201 351 213 445 547 527 380 287 369 534 410 610 401 392 504 498 398 526 481 472 503 367 309 632 177 433
 467 423 510 638 440 549 411 514 448 450 453 147 339 454 274 321 370 412 574 424 555 303 299 523 415 417 462 106 511
 197 562 396 441 529 232 655 464 506 571 486 133 451 524 538 546 375 403 500 377  35 470 305 602 322 579 461  16 533
  86 522 553 196 402 364 449  82 477 406 342 482 525 473 620 558 543 675 422 603 635 134 118 434 346 601 496 157 508
  58 487 680 246 550 168 475 566 485  31 735 120 528 507 492 605 604 652 545   4 573 421  89 587   2 648 661 202 488
 166 233 607 495 701 127 598  28 517 618  32  96 576 569 629  63 563 770 617 619 484 208 159 657  11 636 578 263 589
 267 640 148 536 647 150 175  20 637 572   5 455 581  26 621   6 625 666 584 715 110 692 312 540 376 539 665 221 678
  87 518 185 542 643 162 373  25 691 662  68 532 749  88 548 592 626 658 731 659 122  85  21 535 158 616 695 239 599
 307 115 634 609 585  39 700  37 499 702 593  84 564  92 669 709 684 611 644 729 119 294 241   3  14 212 654 407 660
  55 130 107 809 575 452 711 325 696 278 759 111  54 174 586  24 761 734 595 693 291 171 272 766  44 668 249 413 706
  98 642  43  12 224 284  13 674 742 722 762 179  51 183 768  17 710 817 645 746 209 247 388 124 160 802 588 677 682
 211 191 343 726 476 656 580 155 256 797 418 372   7 163 788 260 639 773 760 737  30 779 336 764 172  97  22 683  18
 446   8  10 716 694 335 112  65 714 784 264 491  48  78 771   9 699 805 778 763 149  15 235 679  19 650 713 363 795
 383  62   1 131  76 685  23 237 754 804 775 338 165 143 728 387 767 719 774 268  27 567 400 707  40 743  29 720 756

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00022e+07us (= 10002.2ms, 10.0022s)
Wall-clock time (full program): 1.00627e+07us (= 10062.7ms, 10.0627s)
Satisfaction error: 2
Number of search iterations: 1473
Number of local moves: 660 (including on plateau: 268)
Number of local minimum: 111 (including on plateau: 34)
Number of resets: 0
Number of restarts: 0

Problem in row 24: 307 115 634 609 585 39 700 37 499 702 593 84 564 92 669 709 684 611 644 729 119 294 241 3 14 212 654 407 660 => the sum is 12210 rather than 12209
Problem in row 28: 446 8 10 716 694 335 112 65 714 784 264 491 48 78 771 9 699 805 778 763 149 15 235 679 19 650 713 363 795 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 710 838  49 745  86 144  97 556 822 251 116 799 168 749 649 124 808 481 384 751  57 730 108  48 635  41  46 840 377
 686 784 242 794  92 787 689 538 819  56  40 829 138 110 166 219  63 826 142 810 417 770  42 595 539  45 614 190 167
  89 824 818 832 112 137 120 821 835  39 187 830 837  77 261 476 545 805  65 569  76 786 159 643 447 126 344  72 277
  66 807 578 443 222  64 717 522 782 107 150 766 827 836 171 489 134 670  67 175  52 680 243 743 122 833 602 135 206
 161 504 579 147 802 103 131 801 640 274 257 577 828  60 209 250 158 795  90 780  59 702  91 565 771 809 732 117 217
 136 776 205 141 199 834 234 432 823 682 182 806  62 176 336 544 722 740  37 709 118 550 133 800 752 562 151 215 152
  93 796 245 155  79 301 793 754 508 156 119 200 164 718 735 733  74 210 314 703 295 266 841 543 389 759 816 237 213
 246 701 186 541 104 179 172 715 510 798 228 272  83 781 769 642 665 235 162 758 305 260 125 757 641 684 394 198  98
 127 607 248 370 154 101 256 739 430 258 129 763 279 211 363 480 777 304 347 317 762 313 811 831 325 587 785 271 264
 227 572 788 293 358 281 364 812 657 422 280 193 204 285 244 797 629 661 184 594 303 269 318 615 338 741 332 218 230
 366 428 188 284 297  96 153 839 698 700 817 249 484 362 270 659 651 575 429 197 298 180 276 767 368 605 259 231 483
 354 586 525 262 445 500 378 420 512 738 240 685 312 192 454 696 288 345 300 331 323 275 360 414 407 736 616 229 286
 306 608 273 173 464 369 380 509 482 558 328 466 455 320 507 457 404 326 486 361 555 439 779 375 359 424 341 452 253
 339 357 511 203 374 349 289 498 456 728 208 475 435 392 372 537 335 459 499 467 309 278 748 491 492 399 458 307 444
 418 436 356 524 342 400 327 311 474 433 353 348 431 405 350 324 479 494 667 477 448 397 514 478 393 462 423 333 412
 576 496 437 351 441 609 379  35 371 566 650 493 263 505 225 398 395 468 283 438 461 687 542  53 254 530 519 502 282
 501 181 518 469 564 598 446  47 402 449 606 600  14 560 386 473 427 540 403 373 224 520 487 292 143 346 488 599 553
 410  99 415 503 624 460 451 390 216 111 421 148 674 529 513 315 471 343 495 383 663 563  23 490 723 536 223 470 547
 450 381 376 633 388 425 409 355 207 658 737 573 668 178 652  68 597 406  29 308 612 291 531  25 352 232 551 527 590
 604 294  22 601 644 497 727 299 337 419 546 221 521 549 568 100 365 440 533 102 656 434 319  95 526  38 534 596 622
 574   7 591 523 588 582 583 183  30 214 485 532 571 552 628 109   5 580 570 554  28 632 726  75 139 442 630 517 559
 720 453 660 121 627 620 515 268  61 189 648 140 760  50 132 316 265 174 773 676 618 160 746 426 472 236  31 673 679
 561  54  18  33 634 825   2 252 528 387 813 567 692 593 191 322 382   9 584 699 619 589 413 334 113 465  88 803 639
 669  84 592 691 654  19 637 194 202 290 535  55 697 165 638 416 621  85 681 185 408 163 613   1 713  16 742 623 820
 646  69 610 716 516 655 707 287 130 557 653  11 774  82 114 170 581  15 756   3 631  81 603 238 396 123 765 694 626
 772 302 611 677 705 672 201  78 115 704 239  43  51 662 804 195 296 169 744 149 712  26 617 645 506  10  32 683 789
 815  58 783 145 177  87 625 241 106 196 675  13  27 666  24 790 747   8 778   6 708 671 310 391 695 636 411 706 714
 367  34 768 128 753 724 734 233  12 721 775 226  71 688 664 647 255 725 729   4 761 340 146 267  94 385 247  21 690
 220  73  17 711 764 791 693  80  44 548 792 329 719 755 814 463  70 321 678 330 731 157 585 212 105 401  36 750  20

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00041e+07us (= 10004.1ms, 10.0041s)
Wall-clock time (full program): 1.00651e+07us (= 10065.1ms, 10.0651s)
Satisfaction error: 2
Number of search iterations: 1440
Number of local moves: 782 (including on plateau: 281)
Number of local minimum: 83 (including on plateau: 34)
Number of resets: 0
Number of restarts: 0

Problem in column 14: 749 110 77 836 60 176 718 781 211 285 362 192 320 392 405 505 560 529 178 549 552 50 593 165 82 662 666 688 755 => the sum is 12208 rather than 12209
Problem in column 27: 46 614 344 602 732 151 816 394 785 332 259 616 341 458 423 519 488 223 551 534 630 31 88 742 765 32 411 247 36 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  88 491 826  68 833 370 115 730 668 108 762 686  42 103  30 119 545 307  78 820  31 631 605 780 226  71 582 656 838
 194  67  54 733 726 809 807 735 505 104 815 742  62  95  45  43 754 520 165 511  92 133 661 765 811 210 664 340  47
 789  52 746 111 691 714 666 728 220  85 818 781  99  21 157 336 619  89 106 162 170 644 716 829 764 761 107 208  20
 182 618 105 271 678 577 127 828 712 112 831 680  26 120  39 122 741  48  29 766  90 130 620 839 824 840 613 472 169
 643 510 174  97 635 627 816 747 178 572 604 658 141 123 109  96 612 176 247 693 118 113 628 598 748 478 471 538  59
 264 195 142 171 763 841 158 785 551 163 188 808 114 110 185 202 787 641 181 688 219 153 782 606 256 783 583 653 237
 217 167  80 698 642 607 143 794 240 155 725 146 144 324 293 251 756 722 180 530 279 743 827 245 225 514 777 523 262
 255 521 168 191 257 813 218 554 632 206 227 776 129 159 215 312 793 622 177 703 201 837 799 699 204 281 527 499 234
 284 295 140 196 229 546 260 532 774 305 268 283 303 309 186 342 830 358 207 737 836 727 252 352 504 580 423 792 359
 273 192 203 285 258 720 212 821 345 233 269 328 689 288 193 366 243 803 214 770 291 337 704 266 286 649 825 773 373
 213 332 254 616 306 574 310 539 280 322 351 380 275 509 316 311 349 189 791 565 339 416 367 321 425 734 834 672 319
 646 819 330 438 222 494 364 564 331 301 248 341 576 388 333 274 420 400 348 790 391 209 250 403 363 650 713 299 304
 384 353 347 300 292 369 318 623 810 378 346 265 417 297 377 308 344 822 272 676 398 385 317 414 386 418 670 454 469
 405 410 335 473 456 395 432 445 298 387 393 413 355 408 477 519 374 470 397 524 313 325 440 721 382 356 442 436 428
 498 409 296 362 365 465 379 361 501 464 449 441 404 517 406 430 392 376 399 419 433 475 558 412 372 457 479 315 375
 468 421 496 466 447 455 314 429 446 463 483 535 424  64 402 427 528 525 516 555 437 451 490 394 183 453 439 460  38
 327 482 518 467 502 448 489 149 548 381 503 534 360 550 444 500 422 390 533  86 371 435 389 411 540   3 543 426 458
 544 148 603 579 508 249 590 277  49 570 549 487 452 601 492 488 493 164 474 231 495 559 431 253 531 407 263 242 480
 571 126 630 639 547  81 415  46 150 461 481 563 537 485 569 484 542 184 401 172 591 599 513 589 660 224 278  79 592
 595  76 459 270 609  98 615 205 594  63 596 568 593 573 575 561 512 581 566  28 536 557  61 586 626 617  11  16 462
 506 116 655 567 634 343 541  60 151 522 515 637 486 610 560 584 179 552 578 228 675 710 368  22  82 236 230 241 621
 267 645 608 588 602 443 662 338 562 600 614 556 625 553 647 667 124  15 585  17 692   1  77 654 190  53  94  51 679
 526 757 768 232 648 134  25 139 135 700  83  13 669 651 702 597 132 137 695 334 665  40 677 507 671 261 329 238 744
  73 801 624 497 121  10 673  24 587 701 663  23 350 718 750 696  70 290 729 166 694 638  65 102 715  14  72 684 659
 755 731 640 682 117 246 611 131  41 784 145 136 745 683 697 740  84 636 302  91 629 690  34 147 434 396  37 128 717
 687 674 652  75  74 276 706  50 326 779  12  36 798 709 738 800 199 357 705 289  19 320 216   7 707 778 287 175 758
 814 739 529 708   8 156 723 223 450 681  18 197 832 657 752   5  87 775 736 323 719 724   2 125  58 160 239 760   9
 685 244 772 633   6 138 476 154 771 805 152  35 767 749 751 806 221 259 812 100 732  27 173  69   4  66 294 797 711
  56 817  55 796  33 211  44 198 354 804 101 161 795 835 769 823  57 802 786 235 753 200 187  93  32 759 383 282 788

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00003e+07us (= 10000.3ms, 10.0003s)
Wall-clock time (full program): 1.00612e+07us (= 10061.2ms, 10.0612s)
Satisfaction error: 3
Number of search iterations: 1498
Number of local moves: 687 (including on plateau: 221)
Number of local minimum: 105 (including on plateau: 35)
Number of resets: 0
Number of restarts: 0

Problem in column 2: 491 67 52 618 510 195 167 521 295 192 332 819 353 410 409 421 482 148 126 76 116 645 757 801 731 674 739 244 817 => the sum is 12208 rather than 12209
Problem in column 18: 307 520 89 48 176 641 722 622 358 803 189 400 822 470 376 525 390 164 184 581 552 15 137 290 636 357 775 259 802 => the sum is 12210 rather than 12209
Problem in diagonal 0: 88 67 746 271 635 841 143 554 774 233 351 341 417 408 406 427 422 164 401 28 675 1 677 102 434 778 239 797 788 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 436 187 740 299 785 704 644  87 809   7 587  66 771 334 767  14 651 638  73 769 344   3 750  46 201 137 256 459 645
 713  28 773 789 795 693 754  92 212 768 413 206 702  22 817 132 711 786  29 724 147 116 758  42 144  18  88  49 688
   5  19 470 737 672 624 820   8 218   6 383 168 634 582 827 358 784 631  81 770 736 205 367 307 301 763  21 224 488
  52  53 703  47 186 791 749 217 753  30  33  89 751 730 774  41 723 775 541 719  27  98 476 130  72 726 588 625 710
 613 242  17 671 691  40 669 196 772  13 127  95 755 800 709 268 695 635 250 739  26 234 538 370  23 708  12 609 692
 547 190 725 667 729  38 686   4 209 616 646 153 701 462 630 152 712 787  79  56 537   1 707 456  36 654 317 604 108
 637 154 662 600 732 620  37 183 653  25 657 113 580 133 576  60 675 670 585 650 762  54  62 261 254 798  99 540 377
 659  35 528 543 647 573 794  10 157 592 566 549 661 591 734 129 554 681 102 648 469  15 601 282 228  94 135 562  70
 586 226 507 508 557 664 539 380 364 559  82 581 699 642 398 105 680 632 146 427 172 320 674 106   2  96 497 526 534
  32 195 652 606 611 717 569 211 636 656  71 252 689 560 283 673 571 567  20  61 495 453 363 173 374 551 463  84 621
 589 255 563 503 599 291 493 618  80 690 122 351 553 421 593 278 410 504 318 595 550 238 531 272 279 338 407 422 346
 532 285 450 640 365 522 561 614 434 425 628 382 371 429 506 474 431 465 269 715 257 548  16 124 294 280 482 126 584
 594   9 515 479 502 568  34 399 500 489 293 468 404 472 759 577 337 490 513 570 394 525 249 378 432 329 486 405  39
 602 270 452 362  31 517 357 390 354 527 558 330 511 305 612 400 396 397 546 608 306 379 388 439 442 247 627 369 487
 350 343  11 336 622 451 475 545 510 473 464 340 287 544 445 200 441 480 523 619 393 519 485 409 356 327 376 424 461
 530 455 731 361 458 499 492 575 381 457 313 466 430 349 417 443 326 386 339 395 222 524 438 373 471 423 324 335 296
 384 838 359 355 368 310 428 392 333 414 237 536 454 406 347 281 236 331 505 288 188 533 684 483 477 496 633 435 478
 814 756 323 316 267 319 251 412 401 491 783 516 185 174 290 418 385 446 440 403 535 372 312 494 520 437 572 273 304
 402 697 311 216 387 233 415 158 733 433 743 303 348 802 166 448 170 297 366 277 360 574 284 641 649 416 391 302 687
 253 831 231 375 352 260 225 221 683 481 210 700 243 220 165 389 246 271 705 449 745 629 298 714 682 175 808 322 325
 276 718 411 341 289 264 258 639 836 227 509 598 244 229 223 757 198 314 408 103 605 240 182 696 822 309 666 552 295
 265 512 248 447 207 148 232 830 556 204 824 426 161 263 230 797 444 315 521 262 274 810 345 777 676 156 811 266 202
 292 825 115  83 142 109 321 801 177 180 728 716 179 169 150 741 119 163 579 213 665 766 819 796 617 738 615 300  91
 123 835 214 241 110 498 275 790  65 748 219 781 134 747 107 603 744 239 420 578 678 706 193 816 607 151 328 139 120
 162 760 286  45 840 215  63 727  77 308 761 752 159 184 164 829  93  55 834 199 197 720 623 694 484 145 245 782 806
  78 764 208  24  48 668 192 590 194 780 117 419  74 837 125 555 160  86 778 118 828 658 788 610 805 542 189 176 799
 804 742 839 823 100 111  59 735 332 679 181 203 171 596  76 501 104  68 721  69 235 514  85 660 565 597 655 841 143
 114 518  75  97  50 136 140 821 722 793 128 832 191  51 178 779 112  43 833 121 803 663 149 529 813 746 776 643 353
 765 467  90 698  67 626 677 564  58 138 826 818 167 155 141 807 101  57 685  64 259 792  44 131 583 812 342 815 460

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00036e+07us (= 10003.6ms, 10.0036s)
Wall-clock time (full program): 1.00582e+07us (= 10058.2ms, 10.0582s)
Satisfaction error: 2
Number of search iterations: 1512
Number of local moves: 812 (including on plateau: 261)
Number of local minimum: 106 (including on plateau: 34)
Number of resets: 0
Number of restarts: 0

Problem in row 20: 253 831 231 375 352 260 225 221 683 481 210 700 243 220 165 389 246 271 705 449 745 629 298 714 682 175 808 322 325 => the sum is 12208 rather than 12209
Problem in row 26: 78 764 208 24 48 668 192 590 194 780 117 419 74 837 125 555 160 86 778 118 828 658 788 610 805 542 189 176 799 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 572 835 833  58 109 728  61 792 805 643 697 138 787 101 132 144 682  52 527 202 118  39 221 681 547 157 721 273 554
 765 828 712 123 804 619 107 829 116 706  96 151 426 740 186 110 640  55 112  37 570  91 546 573 249 344 800  36 838
 154 569 720  88 126 598 208 135 166 724 788 622 688  72 212 195 716  48 134 204 121 541 840 821 689 278 790 156 806
 553 715 793 823  60 832  45 103 327 435 827 162  64 222 250 104 453 261 172 534 280  30 661 775 122 834 738 251 783
 338 686 282 196 752 632 161 197 714 158 809 193 782  92 213  86 658 742  68 139 128 155 762 767 824 175 565 233 702
  81 672 771 185  31 549  65 133 776 317 801 141 691 150 389 111 653 819 297 231 239  69 778 826 705 153 798  78 700
 623 825 779 100 295 710 831 194 234 147 238 268 152 106 419 276 761 525 191 247 299 332 555 587 701 219 713 206 675
 624 214 812 382  84 785  94 763 757 164 536  38 750 188 492 201 617 207 229 225 163 836 730 283 662  75 580  79 639
 666 393 670 263 189 837 198 407 463 296 698 390 174  63  54 335 312 808 511 597 340 160 145 796 462 246 476 802 458
 777 266 179 148 165 645 377 452 769 841 223 260 600 342 211 140 315 443 433 484 167 385 839 374 595 334 695 226 524
 615 309 411 292 353 603 180 774 631 262 469 272 589 447 399 115 406 267 814 289 325 300 339 489 656 235 551 236 581
 810 228 606 448 253 635 358 348 461 182 391 370 503 359 243 445 410 618 456 248 252 392 285 466 758 307 659 143 575
 614 384 401 402 791 594 660 397 459 242 355 215 488 483 232 508 430 218 444 405 305 472 281 322 383 500 515 241 468
 744 708 159 366 352 577 291 647 314 611 319 455 321 274 259 343 379 395 311 245 566 381 480 439 364 579 375 460 495
 277 254 415 550 507 441 539 400 286 413 490 530 512 345 478 436 356 494 365 432 457 284 420 372 387 394 425 422 528
 403 310 473 485 568 465 380 368 544 408 347 532 326 328 376 373 501 416 318 471 409 510 431 417 584 331 337 474 324
 438 388 275 505 481  12 562 487   7 571 526 567 313 428 442 588 371 418 349 517 427 316 556 516 323 665 329 529 303
 491 404 412 414 612 181 464 482 357 454 187 351 521 429 360 753 302 533 599  17 652 535 209 496 440 557 369 398 230
 514 224 477 493 602 127 446 506  80 561  99 509 131 479 578 386 664 210  62 748 585 560 582 641  50 718 294 537 346
 240 450 626 759 576 205 563 504 265  41 269 542 520 583 590 677 543 813 545  25 423 497 378 117  95 630 192 513  28
 362 613 540 637 674  76 755 531 467 434 564 642 304 470 350 633 227 293 616 651  22 669 173  83 256  43 199 592 333
 168 648  67 663 519 298 288  27 654 657 627 636 169 621 486  57 634 341 754 523 733  16  90 451  82 722 216 756 306
 264 559 102 671 683 124 475 200 424 655 421 601 574 449 437 735 649 610 625 538 591 723  74  10 171  21  46 607 170
 257  77 320 650 552 271 354 604 667 176  32 548  34 766 768 707 108 220 811 361 772 711 190 120 336 751  42 703 301
  29  97 125 136 184 203 690 747  66 628   6 737 609 818 803 816  73 237 704 745 629 644 178  56 518 687 290 605 149
  87 498  49 760  51 270 746 749 522  47 638 558 130 586 620 608  59 693 726 736 596 780 673  15 183   1 113 696  19
 287  18   9 807 741  20 795 258 114 692   8 308  44 680 820 773  24 786 279 822 668 217 396   3 684 743 363 731 119
 367  33  98  71 593  26 784 105  85  35  23 676 830 789 764 739 129 685 717 817 678 794 142 699  53 729   5 499 244
  89   4  93 734 502 146 732  70 679 709 725 797 177 799 646 815 137   2  40 719 694 770 255  14 330 781  13 727  11

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00023e+07us (= 10002.3ms, 10.0023s)
Wall-clock time (full program): 1.00944e+07us (= 10094.4ms, 10.0944s)
Satisfaction error: 2
Number of search iterations: 1867
Number of local moves: 846 (including on plateau: 308)
Number of local minimum: 142 (including on plateau: 44)
Number of resets: 0
Number of restarts: 0

Problem in row 7: 623 825 779 100 295 710 831 194 234 147 238 268 152 106 419 276 761 525 191 247 299 332 555 587 701 219 713 206 675 => the sum is 12208 rather than 12209
Problem in row 29: 89 4 93 734 502 146 732 70 679 709 725 797 177 799 646 815 137 2 40 719 694 770 255 14 330 781 13 727 11 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  31 802 665  72 659 815 104 631 709 834 678  79 557  41 698 502  39 113 819 524 139 148 681  42  89 758 193 733  54
 833 761 664 136 450  80 102 824 584  66  71 825  93 759 841 692  63 123  75 535 783 771 134  37  40 430 641 735  61
  62 666 657  44 700 454 540 124 696 161 590  77 519 110 186 679  69  24 740 495 647 832 119 129 361 721 839 784 184
 241  85 512  78 526  73 137 160 623 518 118  55 731 608 737 400 234  46 762 288 823 837 755 729  35 446 809 643 200
 131  94 552 228 791 125 166 189 716 133 222 176 723 175 632 760 101 409 813 770 827 730 116 135 776 480 181 219 840
 206 132 624 185 804 703 838 197 597 223 178  48 214 820 836 835  57  51 708 128 662 159 215 821 115 797 628 220 208
 229 437 718 202 670 572 829 151 199 120 162  30 556 766 768 464 182 639 792  87 818 150 822  91 172 614 105 754 109
 100 179 757 218 541  82 697 830 782 145 310 144 663 789 324 677 247 560 630 264 615 669 190 297 272 672 149 147 259
 260  88 235 357 775 595 269 155 800 239 236 338 831 777 205 690 211 736 660 568 637 328 152 355 191 810 209 250 252
 117 177 258 322 710 498 388 305 717 801 311 262 732 413 225 796 316 683 596 431 419 240 207 299 438 767 270 266 245
 380 237 321 238 673 785 249 194 459 244 626 410 773 210 276 711 339 774 427 826 278 404 293 294 428 414 385 360 201
 188 423 253 379 636 772 334 122 394 359 183 587 335 332 452 654 263 812 610 726 396 213 352 433 383 284 612 290 432
 451 358 315 281 492 418 187 350 382 405 471 327 282 415 562 477 828 425 642 472 375 347 351 329 411 638 295 476 447
 478 506 342 341 467 469 421 429 491 412 337 363 456 325 377 445 462 309 620 573 416 523 362 317 561 424 230 441 312
 474 444 386 463 439 333 510 420 458 443 435 440 465 570 449 536 390 292 279 434 403 345 354 485 453 318 442 448 301
 479 401 343 501 246 436 500  20 353 551 457 344 494 346 504 368 475 522  98 503 275 538 417 426 564 483 602 508 455
 468 533 461 553  34 370 484 397 547 559 497 487 143 374 507  64 488 550 283 545 514 563 381 408 389 348 393 470 399
 604 372 525 515  97 307 489 529 367 558 567 398  90 583 531 204 391 280 482 575 221 539 313 392 555 232 574 532 387
 548 378 505 667 243 277 616 581  92 496 516 369 203 601 499 287 371  32 521  67 330 511 365 720 769  95 528 627 395
 466 646 589 486 289  28 633 571 625  60  21 527  99 490 598 153 481 168 314  18 617 534 537 513 600 599 509 565 473
 656 580 154 613  58  84 629 578 163 712 816 645 554  23 517  14 530 585 323  36 257 594 675 493 376 158   6 685 695
 747 618 224 687 298 422  38  70  26 671 649 406 261  81 170 233 407 753 366 691 544  13 591 644 606 171 460 655 707
 593 549 742 609 274 592 650 682 248 787 402 719 121  86 126 195 724 331 217 520 140 640  76 607 588 267  47  74 603
 668 605  22 745  56   8 577 748 546 781 566 653 192 746  83   5 702 173 141 648 611 582 622   2 701 227   3 112 684
 741 699 704 680 296 114 273 635  65 303 542 705 576 674 156 356 688 256 106 226 326 336 198 715  68 254 693  45 779
 569 661 212 271 165 795 586 722  27 788 765 686 216 349 108 174 803 713 157 138  16 373 543 265 676  19 793 300 319
 798 725  15 734  96 749 242 743 196  17 780 714 306 291 689 251 786 752  11 706  25  53 763 764 127 164   1  59 652
 658  49 146 814 384 634 579 621 167  29   9 744 268 169  50 285 751 320  10 304  52 107 817 728 738 364 807 799 806
  33   4 308 790 340 619 142 231 180 794 694 651 756 286 103 302 811 778   7 111  43 130 808 739 727 255 805  12 750

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.00617e+07us (= 10061.7ms, 10.0617s)
Satisfaction error: 3
Number of search iterations: 1871
Number of local moves: 709 (including on plateau: 245)
Number of local minimum: 143 (including on plateau: 37)
Number of resets: 1
Number of restarts: 0

Problem in row 5: 131 94 552 228 791 125 166 189 716 133 222 176 723 175 632 760 101 409 813 770 827 730 116 135 776 480 181 219 840 => the sum is 12210 rather than 12209
Problem in row 7: 229 437 718 202 670 572 829 151 199 120 162 30 556 766 768 464 182 639 792 87 818 150 822 91 172 614 105 754 109 => the sum is 12208 rather than 12209
Problem in diagonal 0: 31 761 657 78 791 703 829 830 800 801 626 587 282 325 449 368 488 280 521 18 257 13 76 2 68 19 1 799 750 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 838 377 821 756  52 181 480 451 159 663 101 187 826  44  66 740 366  42  63 485  33  50 829 822 758  35 583 787 614
 820 840  68 341  32  54  39 802 195 672 190  75 818 133 118 212 544 278 563 127  74  85 729 805 482 720 837 790 766
  60 526 679 684 489 203  83 830  51 800  70 221 836 137 158 172 727 103 477 666  57  76 712  93 308 768 781 811 631
 143 491 816 708  27  45  43 839 109 697 224 253 823 153 149 508 665 123 139 111 804  82 819 152 578 764 573 744 627
 810 120 113 798 587 315  31 554  88 695 515 108 694  84 119 144 461 466 112 259 613  46 757 791 801 116 690 728 594
 256 217 825 559 255 841 162 536 553 834  97 156 131 196 293 737 330 124  67 759 700 102 630 755 773 204 209 216 692
 509 215  86 835 318 300 831 655 184 570 106  59  95 222 128 725 783 199 833 705 219 327 314 247 746 270 795 197 736
 350 667 207 734 637 180 788 494 295 557 213 488 283 291 166 750 550 275 194  58 285 281 575 257 135 373 828 634 664
 241 546 370 571 611 248 789 629 236 619 200 670 268 198 147 650 713 231 245 282 814 161 582 178 287 799 284 342 298
 173 806 186 344 786 220 322 415 540 752 227 817 258 710 260 303 600 230 134 761 280 267 652 271 809 334 286 243 223
 210 803 301 305 681 269 192 320 392 516 688 632 188 239 288 368 735 387 808 704 401 276 395 244 246 307 770 333 211
 174 754 249 340 411 423 250 520 388 353 343 827 590 603 229 390 716 254 439 359 311 394 577 310 701 262 277 319 446
 339 337 484 378 235 385 369 454 317 338 323 347 449 386 419 472 832 309 381 658 294 523 685 374 505 349 425 361 481
 420 312 397 424 336 487 476 460 302 328 464 238 824 486 427 404 453 581 376 456 325 497 335 501 418 442 313 324 403
 428 365 410 367 467 436 441 416 407 470 435 458 412 383 358 444 529 372 457 414 356 360 644 375 363 384 263 462 533
 400 348 393 171 273 448 493 299 434 512 433 430 408 499 431 506 234 469 513 429 475 413 398 504 399 592 422 391 492
 519 352 530 355 468 345 438  61 379 495 421 177 521  56 518 452 417 455 503 502 409 437 357 473 471 541 450 542 565
 598 609 580 524  18 527 500 514 447 326 474   3 389 606 478 445 218 104 511 545 522 561 251 426  99 510 620 440 364
 569  64 564 507 165 432 543 265 633 463  14 601 595 723 528   4 164 639  10 572 579 549 226 589 228  16 657 702 608
  48  23 483 525 539 625 687 233 351  22 588 558 371 552 496 640 321 626 593  20 635 675 237 459  80 551 185 607 479
 618  96 591 621 566 531 638 206   9 306 680 599 201 586 585 535 115 649  53 490 145 760 266 731 225 538  37 662 170
 380 532 547 169 289 584 615 189 794 296 623  90 517 574 696 610  21 780 646 661  34  55  47 678 100 555 362 605 160
 534 191 721 125 154 643  17 272 648  89 636 556 616 242 739  29  26 617 782 624 717 612   8 602 443 677 726  69  94
 698 405 659 202 683 568 175  77 747  30 676 715 706 622 707 703 205 653 674 297 122 732 114   6 117 724 140  28  24
 719 396 562  78 560 742 548 138 673  49 402 567  71 656 596 604 240 784 132  40 691 774 498 751  25 576 130  81 126
 660 290 110 179 647 738 722 711 645 105 792 332   7 769 777  41 232 651 671 129 714 812 148  12 682 182 107 136 208
  36 743 279 304 354 641 741 693 779 193 763 699  72 642 767 214  65 628 382 689 745 778  87  62 121 274  38 168 252
 654  13 176 150 807 797 331  19 785 167 718 597 142 669 753 316 151 775 765 146  79 815 264 730 537 163 329 346  15
   5 771   2 155 762   1 465 157 668 292 793 749  98 748 813  91 796 406 686 261 776 709  73  11 772 183  92 141 733

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00029e+07us (= 10002.9ms, 10.0029s)
Wall-clock time (full program): 1.00641e+07us (= 10064.1ms, 10.0641s)
Satisfaction error: 2
Number of search iterations: 1621
Number of local moves: 581 (including on plateau: 121)
Number of local minimum: 119 (including on plateau: 20)
Number of resets: 0
Number of restarts: 0

Problem in column 9: 159 195 51 109 88 553 184 295 236 540 392 388 317 302 407 434 379 447 633 351 9 794 648 747 673 645 779 785 668 => the sum is 12208 rather than 12209
Problem in column 18: 42 278 103 123 466 124 199 275 231 230 387 254 309 581 372 469 455 104 639 626 649 780 617 653 784 651 628 775 406 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  12  15 303  83  85 101 786 222 231  76 794 821  24 709 166 780 779 804 165 823 340 828 740 795  72 760  82 766  47
 758  60 596 154 723 115 272 673 493  40 798 747 112 438  71 386 788 646  39 806 772 444 722 139 280 107 391 104 535
 789 738  36 216 737  92 746 751  21 717 732 790 208  66  61  57 189 827  48 813 602 752 761 638  18  96  22  29 657
 762 532  32 484 606  77 705 603 144  10 819 699 650 184 666   3 494 765  55 754 763 645 711 118  56 162 117 582  11
 744 572 251 163  45  69 551 736 114 648 691 714   5 324 316 739  59 696 221 687 644 697  19  25 410 609 230 680 550
 743 670  73  53 698  34 777 595 132   6 172 690  67  70 148 731 181 742 636 684 776 600 601   4 211 773  63 675 604
 685 694 127 160 625 169   9 718 254 702 624 735 167  13 121 628 309 590 158 587 660 725 512  52 223 105 577 629 651
  79 608  16 135 672 259 605   8 301 695 679  49 635 113 588 407 182 543 770 703 615 111 692   2 281 630 568 704 559
 556 707 483 396 584 562 416 473   7 273 578 573 284 125 170 524 491 575 382 570  23 585 599 389 220  74 489 564 537
 592 641 642 385 553 147 617 661 618 531 381 507 506  28 122 659  31 658 534  27 467 460 591 286 198  20 194 476 677
 528 540 131 332 583 126 453 504  35 554 503 481 555 246 649 514 450 418 593 495 378  33 552 274 233 626 610 269 544
 541 291 457 106 569 175 654 417 613 526 384 561 432 110 520 639  38 429 425 477 408 563 557  14 318 652 611 490 232
 619 399 470 317 383   1 517 643 622 278 533 566 474 469 451 412 265 662  17 297 443 329 414 465 342 547 419 475 380
 421 338 468 492 472 439 353 549 326 558 536 580 192 434 373 351 471 458 571 405 436 344 363 466 289 360 395 287 482
 415 352 565  78 518 283 392 397 527 576 462 393 501 488 487 409 454 404 545 370 511 374 519 538 403 128 377 375 368
 431 521 478 379 310 427 428 440 435 499 322 262 446 505 388 498 343 376 509 433 390 401 728 349 500 313 197 479 422
 186 420 302 337 300 748 411 567 282 325 348 426 480 793 336 330 812 248 400 263 529 229 292 508 637 782 355 339 224
 293 367 299 796 530 676 441 362 449 141 298 294 515 814 295 239 314 345 369 413 356 586 319 394 485 792 430 333 264
 307 288 320 818 225 712 387 277 706 209 455 290 305 631 215 398 808 663 834 202 228 151 335 774 548 275 321 359 168
 124 226 655 616 323 513 260 235 464 502 402 255 212 678 756 217 665 279 715 268 445 607 311 308 459 437 811 219 247
 334 306 805 361 267 674 244 341 781 365 372 237 240 791 802 253 797 149 171 366 826 152 195 542 496 350 497 243 252
 285  91 708 767 271 833 357 838 669 364 261 176 830 612 463 109 783 173 236  64  97 347 354 801 620 546 266  50 238
 145 234 730 486 120 724 800 371 682 296  87 270 671 688 815 177 574 183 249 423 257 185 190 621 627 276 358 199 771
 727 119 406 581 667 522 784 157 312 734  89 214 598 668 461 768 258 156 835 201 153 116  94 647 681 516 242 315 188
 196 210 539 733 839 775  51 142 701 178 327 245 745 759 331  86 424  98 250 241 164 769 130 803 785 304 510 191 683
 146 810 653 456 205 749  46  93 741 841 227 204 755 213 633 129 448  88 200  75 133 134 753 778 594 634 614  41 816
 203  99 831 832 155 822  26 161 719 757 140 143 218 442 824 159 123 150 726 597  81 206  68 579 686 560 829 817 256
  65 836 640 729  42 721  37 138 623  58 100 179 693 452 174 820 589  54 840  62 632 180  44 713 700 328 825 799 136
 523 525 193 764 102 664  84 137 207 750  95 108 689 346 807 787  90  30 716 103  80 656  43 187 837 447 809 720 710

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.71856e+06us (= 9718.56ms, 9.71856s)
Wall-clock time (full program): 9.77941e+06us (= 9779.41ms, 9.77941s)
Satisfaction error: 0
Number of search iterations: 1586
Number of local moves: 760 (including on plateau: 294)
Number of local minimum: 107 (including on plateau: 28)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  25 245 814 496 672 798  83 826 767  71 135 737 136  70 202  26  50 121 782  88 621 632  52 830 731 699 644 701 155
 840 558 102 518  48 169  68 819 705  81 104  94 610  39 725 109 209 125 651 709 117 698 170 130 828 585 812 841 745
 132 609 744 752 836  77 101 653 591  86  59 810 564  53 806  43 683  92 156 764 721 336 221  75 689 144 573  66 773
 118 713 740 622 213  28  90 759 546 159 217 818 325  72 688 243 276 151 730 776 199 804  65 139 829 796 122 210 761
 148 485 645 732 766 160 805 793 635  89 112 720 560 120 401 289 571  85 191 646 248 637 791 230 772 203  98 161 116
 311 824 235 671 668 833 167 636 839 189  60 147 562  62 758 182 328 205 718 679 238 190 231 271 808 545 107  95 650
 174 586 299 827 206  57 800 652 702  73 569 201 663 223 595 111 301 490 722 634 143 682 834 234 692 247 131 197 164
 306 823 146 648  54 140 424 576 837 225 138 222 831 241 693 285 379 342 152 792 337 835  74 133 628 226 821 113 788
 124 660 351 581 251 582 204 716 457 631 137 176 711 187 681 278 178 257 268 710 779 253 229 316 304 254 817 357 760
 376 777 354 473 267 334 787 330 346 832 215 382 790 208 680 303 422 141 353 816 438 393 255 275 383 219 748  96 216
 119 822 287 838 420 315 256 389 188 400 795 340 803 394 696 369 341 288 563 616 273 391 430 237 262 270 608 326 173
 302 218 318 729 433 366 775 305 385 183 428 446 343 419 358 269 440 753 596 212 561 298 350 329 606 458 743 372 214
 317 359 370 471 295 300 416 452 536 246 373 439 296 387 547 427 670 364 492 309 286 426 472 293 361 403 583 510 809
 441 529 751 344 556 447 442 406 498 410 450 314 386 552 384 355 263 380 307 449 239 259 408 388 282 292 557 522 598
 417 260 414 168 469 347 478 290 629 470 425 464 542 448 319 497 335 599 486 377 476 421 349 397 277 345 535 501 475
 517 272 332 331 551 396 291 521 516 367 338 480 462 224 371 395 423 527 484 555 405 443 503 375 390 494 404 429 413
 544 374 445 348 339 402 658 110 398 519 572 525 196 324 461 673  18 327 294 483 459 513 577 322 553 541 172 554 508
 528 321 368 356 566 515 250 456 297 313 684 451 512 489 308 468 499  41 530 587 399 436 258 381 123 593 509 460 511
 502  82 487 179 643 365 415 477 392 479 184 533  42 584   8 418  64 481 431 579 411 733 589 434 444 590 466 649 548
 685 180  99 150 638 617 474 491 437 232 597 500 624 549 211 432 667 543 200   1 550 506 641 482 280 611 194  14 603
 604  80 435 274 520 538  45  87 323 534 537 514  91 455 333 578  27 523 592  23 605 703 647 706 261 639 463 607 465
 690 412 504 265  31 588 749  19 106 659 574 676 115 750 362 618 657 352  78 134 626   2 691 712 575 540 186 505  33
 565  97 627 185 495 532  13 630  34 580 619 623 149 813 108 678  69 559 100 220 620 145 781 825 454 675   4 811 198
 697  61 707  84  55 281 601  51  56 686 724 799 240 726 114 568 735 757  35 453 640 612 708  11 126 602 524 539  17
 567 310 694 233  12 774 661  79 175 763 642  16 236 747  20 695 669 742 613  93 755 128 244 666   7 526 193 783 166
 778 467  21 409 738 664 488 249 363 656 734 719 158 771 228 754 815 615 700 192 227  38 165 797 129   6  15  29 284
 717 283 493 320  36 801 594 171  67 807 739   9 266 802 360 723 570 769 157 153  58  40 614 714 177   5 531 600 633
 662  37 378 142 727 736 762 163 105 728 264  44 207 785  46 768 770 794 674  32  22  30 665 820  76 677 407 507 181
   3 765  49  63 704  47 312 103 279 741 784  10 789 715 746 655 780 786 154 127 756 625 195 687 162  24 242 654 252

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00005e+07us (= 10000.5ms, 10.0005s)
Wall-clock time (full program): 1.00614e+07us (= 10061.4ms, 10.0614s)
Satisfaction error: 2
Number of search iterations: 1655
Number of local moves: 678 (including on plateau: 207)
Number of local minimum: 118 (including on plateau: 34)
Number of resets: 0
Number of restarts: 0

Problem in row 15: 417 260 414 168 469 347 478 290 629 470 425 464 542 448 319 497 335 599 486 377 476 421 349 397 277 345 535 501 475 => the sum is 12210 rather than 12209
Problem in row 20: 685 180 99 150 638 617 474 491 437 232 597 500 624 549 211 432 667 543 200 1 550 506 641 482 280 611 194 14 603 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 767 200 661 531 833 133  61 575 813 686 622 462 636 800  91  18 743  49 725  60 109 182  29 178  24   6 651 726 838
 812 156 103 567 793 446 746 822 831 134 801 841 624 675  62  50 548  42 121 823 106 110  51 808 115  55  65 836  66
  37 187 638 824 794 741  87 777 821  69 311 806 704 662  34 111  83  78 112 598  43 769  53 721  63 332 788 760 206
 566  67 681 744 839  52 162 699 136 208 757 529 609 212 167 108 826 114 754 621 165 181  46 739 140 410 773 703 201
 183 830 113 569 253 163 246 600 804 218 723 468 215 174 210 175 735 104 768 667 126 369 728 827 127 159 790 718 147
  40 233 315 776 511 139 142 784 786 145 674 810 742 219 168 243 409 255 745 707 264 738  85 797 194 118 224 711 235
  79 171 240 665 782  72 261 795 556 170 722 612 679 102 316 151  97 437 720 555 272 672 648 161 154 510 715 518 377
 241 333 172 803 669 225 180 499 195 223 608 671 414 164 348 633 641 216 766 714 259 454 269 589 386 234 792 262 249
 231 329 285 604 787 214 334 558 602 295 737 817 256 276 166 185 753 238 299 798 778 260 160 562 357 190 197 676 265
 443 323 267 365 625 343 284 610 840  57 448 620 736 263 149 774 338 271 339 564 327 716 328 685 298 294 157 270 475
 132 245 350 382 572 340 148 632 258 266 837 597 814 431 292 211 780 312 693 392 390 729 193 281 427 514 434 250 307
 120 221 326 649 772 413 229 626 128 227 342 546 668 304 654 321 375 374 301 825 402 643 279 349 352 363 709 313 378
 230 550 484 351 623 419 314 533 274 252 300 371 493 408 463 457 470 576 507 251 512 401 322 487 496 372 447 418 428
 432 400 425 430 309 288 403 287 478 366 471 439 452 394 310 750 515 383 438 453 420 549 433 248 353 481 423 415 464
 361 337 345 280 373 551 380 535 359 509 319 611 395 336 501 237 387 465 442 406 606 607 347 176 396 441 344 593 570
 297 543 524 444 226 461 399 537 196 367 360 317 268 305 324 467 574 422 389 460 393 424 421 701 436 540 407 519 488
 364 552 472 355 479 308 513 459 527 384 341 482 542 458 440 450 388 275 354 553 505 435 449 489 289 306 506 277 257
 538 579 520 429 539 494 594 325 490 376 473 282  95 411 568 525 417 100 485  88 296 368 614 291 521  48 508 618 617
 397  20 504 554 205 559 426 370 517 416 480 177 588 502 117 491 731 695 331  73 544 547 702 232 184 573 476  90 708
 591 526 615 242 143 677 398 320 318 456 483 477 131 466 603 474  47 495 385 222 500 522 530 492 590 664 584 244  14
 528 534 497  13 412 673 557   4 561 644 290  56 213 660 650 577  71 653 639 123 286 455 486 628 583 635   2 198 581
 645 629  76 582 122 155 816  28  92 532 137 186 595  70 656 616  77 692 659 498 596 756  75  54 647 658 605 146 809
 807 536 599  58  31 563  23  32 335 811  39 199  84 592 585 781 587 666 691 130 630 228 758 207 689 565 202 124 657
 560 613 135  16  35 404 779  74 541 684 188  22  21 631 835 789  94 834  82 303 705  36 785 405 571 687 503 125 752
 637 829 578 330  41 445 763 173  96 652 209  86   1 655 748 640 153 545   3 469 783 203 680 116 828 712  99  11 724
 764 719 761   5 239 751 805 144 302 799 220 158 379 713 694  68 189 663  81 362 759  59 770  89 818  26  44 138 690
 755 820  19  17  93 688 670 204 141 791  27 179 381 619 727 358 580 706   7  30 646 129 586 523 697 732 391 678  15
 627  10 733 278  45 696 749 169 107 762  98 236 283   9 601 734 451 802 254 217 775  33 700 101 642 765 293 356 683
  25 717 771 346  64 796 740  38 105 710 192 152 191 698 730 815 150 747 119 247  12 634 682 273 832 819  80 516   8

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.63668e+06us (= 6636.68ms, 6.63668s)
Wall-clock time (full program): 6.69845e+06us (= 6698.45ms, 6.69845s)
Satisfaction error: 0
Number of search iterations: 767
Number of local moves: 564 (including on plateau: 144)
Number of local minimum: 28 (including on plateau: 13)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 538 380  96  64 345  77  63 330 337 677 230 815 641  18 686 737 277  31 154  62 320  38 761 790 809 720 787 697 729
 249 645 739  99  36  58  56 371 780 306 147 196 773 816 833 680 682  88 191  19 812  94  66 617  35 675 651 803 691
 190   5   4  57 626 140  85 637 796 775 179 782 724 607  48 768  81 743 122 683 678 111 298 151 712 106 794 608 699
  25  39 785  26 610 126 715 329 619 765 209 786 758  37 763 774 199 752 210  33 201 159 270 559 700  11 781 158 810
 156 172 731 173 184  71 788 339 698 705 222 654 819 650 708  69 180 162  93 175 382 104 746 766 491 665  12 560 734
 206 146 719 113 192 174 573 468 716 630  28 664 564 702 728 131 272  84  51 725 333 182 239 727 590  83 689 733 747
 168 282 580 748 653 429  16  17 629 197  24 696 571 409 527 378 295  61  54 681 583 258 328 596 657 703 599 522 548
 141 108 652 487 189 600 507   2 628  41 144  46 659 738 671 570 127 303  13 670 632  23 647 497 535 644 606 709 620
 292 666 778 318  14 554 544 195   1 521   6 757 408 568 467 669  70 401 358 594  10 176 245 300 802 602 567 658 668
 496 545   7 627 592 616 662   8 581   3 475 634 376 462 582 518 340 615 347  21 157 325  82 430 443 661 532 405 667
 557  20 459 603 635 633 605  74   9 425 326 472 706 470 490 526  92 601 474  72 414 241 105 555 514 591 525 505 510
  27 488 485 458 556 504 503 499 439 243 483 177 767 476 721 563 569 578 374 440 319 163  22 317 344 584 240 502 368
 495 450 534 323 428 451 395 363 595 660 480 553 398 481 463 537 372 391 457 546 461 205  50 359 469  79 343 370 501
 436 586 416 445  30 508 489 477 167 435 585 375 524 309 351 301 574 361 471 424 536 164 204 561 336 541 533 530 540
 618 420 366 417 388 494 500 562 612 482 412  86 517 313 498 444 531 403 415 542 394 432 284 506 236 438 422 434  43
 392 384 528 360 373 400 255 621 407 410 593 354 515 418 248 813 419 516 342 242 749 512 386 364 215 381 379 256 377
 465 302 464 315 316 426 427 367 296 383 695 449 349 402 513 271 690 357 237 493 456 523 486 387 283 454 453 672 278
 310 460 478 321 281 663 314 789 304 433 276 406 223 413 341 307 755 693 791 188 624 558 777 260 275 334 224 200 211
 308 311 399 431 694 356 202 707 389 285 479 246 353 346 355 297 736 274 509 348 834 704 835 254 124 208 473 233 519
 631 234 232 839 821 235 225 638 362 824 441 109 213 726 229 244 446 186 760  80 801 623 550 396 266 238 352 220 288
 598 251 299 744 259 279 369 772 800 350 289 322 263 143 265 261 799 214 714 332 685 814 390 808 327 193 218 139 312
 764 252 227 169 783 290 404 385 130 756 740 841 117 338 393 823 646 257 838 134  45 831 589 331 207 145 411 170 194
 639 717  42 125 587 711 219 604 181 575 753 273  98 572 212 335 565 293 613 576 153 597 832 132 294 754 269 183 305
 679 723 231 701 217  73 820 287 228 566 611 216 203 826 253 116 579 779 793 511 171 614 421 684 365 112 160 120 150
 178 827 817 640 520 250 798 549  90 107 750 114 123 324 291 118 397 588 687 437 648 622 447 577 264 797 103 102  44
 751 676  29 268 655 804 656 674  49 280 625  75 262 166 187  15 818 837 529 776 552 784 442  89 198 792  78 110  32
 718 742 247 771 484 636 155 551 543  40 692 138 165 226 149 713  60 807 741 770 115 795 745  76  52  87 828 129  34
 730 609 732 762 455 811 643 466 135 267 642 148  55 101 137  95 547 649 161 829  47 735 423  53 836 119 121 759 142
 452 769 133 805 286 840 221 128 688  68 673 825  65 152 100 136  91 185 710 806  97 822 539  67 830 492  59 722 448

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00004e+07us (= 10000.4ms, 10.0004s)
Wall-clock time (full program): 1.00612e+07us (= 10061.2ms, 10.0612s)
Satisfaction error: 2
Number of search iterations: 2187
Number of local moves: 901 (including on plateau: 303)
Number of local minimum: 165 (including on plateau: 37)
Number of resets: 1
Number of restarts: 0

Problem in row 2: 249 645 739 99 36 58 56 371 780 306 147 196 773 816 833 680 682 88 191 19 812 94 66 617 35 675 651 803 691 => the sum is 12208 rather than 12209
Problem in row 22: 764 252 227 169 783 290 404 385 130 756 740 841 117 338 393 823 646 257 838 134 45 831 589 331 207 145 411 170 194 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 780 614 818 202 705 707 610 452 131 123 581  90 822  99 522 821  23 776  29 602  68  53 790 647 116 232  67  87 642
 644 271 732 137 589  52 697 420 633 765 702 102 764 830 593 179  19 680  95 468  57   9 786 308  70 833  47  42 685
 121 729 820  21 696  91 825 812 191 654 628 165 543 834 450 823 104 254 100  43  45 212 601 636  27  79 826 108 771
 791 273 526 535 743  54 573 128 145 393 836  50  83  36 711 797 105 482  25 517 144  71 808 754 204 824 837 219 545
 684 181 415  17 811 112 716 801  76 189 631  56 792 113 725 738 103  85 167 537 205  24 624 741 809 171 787 209 690
 713 728 789 376 293 637 840 827 126 141 261 227 673 233 832 817 174 114 317 234  30 215 757 383 237  33 193 207 802
 682 129 611 163 712 810 605 194 122 249 807 176 739 252 671 686 467 153 134 694 159 303 484 839 222 150 198 223 575
 726 270 772 311 572 841 717  86 260 240 502  81 369 210 719 318  97 139 277 668 195 806 701 708 384 361 180  84 615
 258 256 514 819 354 763 618 201 130 192 723 368 302 663 656 381 272 571 119 733 784 164 519 221 199 289 307 220 613
 259 350 513 274 773 782 324 216 322 170 622 187 596 231 639 262 349 433 294 829 280 162 500 388 527 805 257 279 586
 325 370 759 301 722 265 341 669 323 359 816 481 230 674 831 142 288 375 306 408 828 133 268 329 391 343 226 158 548
 661 345 657 464 214 242 778 720 652 287 213 373 333  88 330 286 236 299 419 328 285 835 342 364 496 225 775 407 555
 557 332 745 448 803 229 734 304 356 278 404 567 238 282 382 367 246 371 316 208 355 310 520 838 290 456 284 394 595
 321 528 480 267 266 710 327 239 518 541 263 479 228 411 497 340 379 539 432 406 443 524 309 344 462 474 429 521 532
 374 435 400 337 296 353 402 547 634 422 405 431 366 338 385 378 606 588 492 264 486 386 454 410 434 418 470 362 336
 401 460 389 423 357 398 372 529 536 395 670 495 312 169 457 152 579 499 399 508 425 363 335 315 560 478 516 387 331
 577 649 253 485 530 487 396 574 292 377  55 509 471 603 549 447 110 348 510 250 597 416 305 291 559 424 409 397 339
 465 562 203 515  65 440 609 430 553 511  41 426 569 576 390 640 498  16 544 143 392 455 365 472 709 346 438 501 334
 380 551 297 626 506 600 211   4 504 703 352 441 493 466 115 525 538 313 568   1 413 587 146 643 436 326 550 594 320
 578 218 173 445 446 592 473 453 638  44  46 451 427 590 149 476 796 275 641 178 561 512 442 475 459 461 421 617 172
  18 489 200 196 523 533  59  26 449 653 224 625 554 646  62 630 546 727 552  64 566 683 439  15 783 672 599 490 186
 458 565 177 700  92 563   2  60 619 612  22 607 604 580  69  58 666 747 531 469 542 507 217 148 556 570 558 659 251
 564 691  38 704   6 190 428 677 616 766  73 804 414 358 444  72 627 665 629   5 675 793 463  34 118  49 585 658  63
  80 693  11 751 175 244  77 695 660 755 248 687  32  20 295 664 706 698 491 505 437  35 235  66 742 650 591 800 166
  98 678 106 718 483 247  96 503 477 748 125 534 300 667 127 319 582 168 777 185 730 608 151 241 769 488 635 494 155
  10 621  39 298 132 314 101 689 124 724 620 651 182 756  93 655 785 688 798 584 269 813 140 245 746  28  51 770 283
 255 111 360 721 109 138 147 156 681  40 154 662 623 736  78  31 715 351 781 815 740 744  82  74 737 676 583 774 135
  12   3 276 188  75 403 117 749 679 758 540 731  61 735 157 197 779  94 714 768 699 794 243 648 160 598 206 788  37
 417 107 136 767 161 412  14  48 762 120 645 753  89  13 281   8 814 761 752 795 799 692 183 632   7 750 184 760 347

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00033e+07us (= 10003.3ms, 10.0033s)
Wall-clock time (full program): 1.00643e+07us (= 10064.3ms, 10.0643s)
Satisfaction error: 2
Number of search iterations: 2071
Number of local moves: 867 (including on plateau: 198)
Number of local minimum: 160 (including on plateau: 23)
Number of resets: 1
Number of restarts: 0

Problem in row 16: 401 460 389 423 357 398 372 529 536 395 670 495 312 169 457 152 579 499 399 508 425 363 335 315 560 478 516 387 331 => the sum is 12210 rather than 12209
Problem in row 18: 465 562 203 515 65 440 609 430 553 511 41 426 569 576 390 640 498 16 544 143 392 455 365 472 709 346 438 501 334 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  32 801 817 747  37 841  73 307 183  75 275 820  46  86 702 288 793   8 836  48  40 123 821 805 828 816 714 206  41
 811 804 758 723 143 521  52 369 688 268 194 803 248 577  30 184 414 814 505 129  34  76 722 636   4 813  28  49 812
 745 605  23 794  44 808 224 650 649  38  12 810 141 136 279   6 251 304 633 664 526  14 777 725  17 766 620 236 712
 729 763 738  36 312 659  90 392  89  21  66 740 768 100 641 435 437  22 733  33  43  96 772 704 687 684 776   3 640
 665 743 599 573 506 753  97 332 182 164  72 720  26 168 148 169 249 746 713 221 145 117 678 819 130 626 589 597 662
 806 759 671 516 121  35   5 375 661  79 645 751  24 269  74 235 240 627 715 622 207  88 565  47 653 586 591 594 648
 583 654 562 732 344  20 433 771  15  16 192 556   7  77 106  13 496 638 669 658 592 569 105 538 567 727 508 324 737
 617 533 670 606  85 721 217 300 119  31  19 532  67 321 604 135 220 773 726 588 356 229 613 697 429 628 474 158 741
 700 568 602 570 186 707 311 609 159   2 185 490 486 673 639  84 124 668 564 322 552 336 283 598 380  29 666 161 555
 601 396 574 730 563  39 281 242 330 374 621 492 559  87 469 173  53 752 453 190 462 345 440 632 644 623 337  56 691
 549 445 551 593 399 560 289 170 596 362 172 466   1 541 421  11  68 647 600 485 495 197 554 412 595 290 557 488 695
 284 394 614 153 539 637 157   9 646 328 305 465 685 534 450 225 575 477 585 187 547 258 580  27 618 616 395 501 418
 481 363 548 535 525 417 416  18 515 517 527 366 512 381 459 292 101 484 504 503 360 475 110 480 470 451 478 467 454
 264 630 318 458 404 409 287 468 566 427 578 553 438  69 308 426 603 537 301 681 213 387 402 511 230 259 431 615 436
 456 317 309 272 464 315 373 419 306 370 619 473 447 531 513 397 500 550 355 291 314 607 371 410 390 441 376 494 529
 422 326 420 785 267 476 510 444 274 625 358 391 353 629 378 822 276 398 252 349 278 448 400 457 389 408 463 334 277
 104 388 430 581 382 406 576 518 483 449 364 460 472 455 333 323 273 331 297 346 679 403 286 432 809 377 489 584 179
 347 479 118 246 660 383 634 694 341 514 348 257 522 731 298 359 293 482 270 443 579 543 423 368 340 405 329 672 131
 285 234 133 519 690 357 587 631 572 656 590 413 386 208 253 754 682 195 831 439 165 351 209 319 361 393 147 434 415
 256 365 320 216 343 561 509 674 689 675 367  25 189 780 384 582 706 232 222 698 302 372 491 379 231 193 385 797 266
 109 342 263 237 310 764 446 530 544 835 327 233 212 774 219 802 770 241 114 214 834 748 299 499 167 294 303 651 128
 282 228 127 338 335 138 701 833 239 788 824 247 829 692 428 677 767 411 425 260 350 825 122  57 203 171 166 686  60
  71 202 354 215 352 407 765 683 761 520 693  98 711 781 132 757 676 401 262 524 295 719 471 199 250 201 226 265 218
 243 204 196 227 789 838 635 487 528 717 655 271 611 254 705 498 507 255 144 716 223 778 210 452  63 191  99 536 177
  83 152 150 497 837 140 540 643 155 612 198  50 795 839 782 642 786 154  51 238 710 339 142 624 815 174  94 792 175
 244 156  92 151 523  65 735  58 736 818 734 313 798 652 112 696 502 149 163 739 787 718 296 108 796 667 160 134 107
 827 103 245  95 571  82 775 442 211 608 783  64 558 325 703 680 125 826 146 760 542 461 180  55 261  81 188 728 784
 120 116 200  54 779  91 749  61 791 663 724 280 610 424 840 800 176  42  78 111 823 832 709  93 769 137 830 102 205
 493 139 807  10 699  59 742  80 181 657 762  70 708 115 799 744 546  45  62 750 756 755 178 126 113 162 790 545 316

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 5.02347e+06us (= 5023.47ms, 5.02347s)
Wall-clock time (full program): 5.08417e+06us (= 5084.17ms, 5.08417s)
Satisfaction error: 0
Number of search iterations: 649
Number of local moves: 508 (including on plateau: 108)
Number of local minimum: 18 (including on plateau: 7)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 502  73 584 106 743  25 552  77 826 767 115 702  48 836 295 175  66 133 148 546 765 807 123 135 786 534 512 814 414
 181  67 678 309 825 100 806 818 839 600  64  71  40  60 137 107  76 121 834 811 652 632 102 832 688 223 773 610 153
  99 243 496  19 761 797 216  62 700 646 192  52  32 664 300  50  63 525 572 672 627 821 147 819 709 227 831 233 634
  96 193 737 829 777 127 656  82  88 687  53 776 132 626  39 194  41 172  84 578 685 581 528 802 816 817 618 255 140
  59 345 640 252 795 563 548 114 827 608  49 142 108  57 141  68 124 150 281 588 805 772 724 213 837 703 164 820 712
 446  75 793 185 717 783 532  35 735 810 206  55 456 298 284 214 280 207  91 654 794 787 363 257 113 762 815 324 138
 313 234 593 237 708 182 796 722 302 613 110 134 718 122 200 169 176 139  54 741 617 710 840 229 620 775 727 198 230
 597 265 663 128 368  31 387 666 205 731 154 249 299 833  97 155 236 173 838 789 707 824 129 162 788 614 159 203 759
 279 235 282 212 573 195 566 166 692 823 179 734 258 220 218 270 250 120 374 521 822 808 357 321 239 800 705 260 730
 171 294 698 259 592 240 770 701 841 491 264 774 310 362 366 269 397  94 339 740 468 297 426 105 318 689 263 375 296
 333 247 785 421 448 314 544 713 156 557 792 750 377 450 201 304 307 231 305 812 408 379  78 400 371 278 248 191 809
 835 464 347 431 616 251 189 290 338 430 433 542 320 385 174 488 384 407 361 425 261 602 445 342 474 594 378 334 669
  51 402 272 381 505 364 401 828 409 559 292 560 524 510 350 504 428 576 224 460 383 319 536 390 351 254 340 386 650
 332 507 315 458 562 830 344 543 410 506 609 352 622 498 271 293 515 312 416 466 288 217 449 420 343 274 273 481 303
 736 452 500 267 331 392 219 473 291 641 423 508 356 540 411 341 398 365 519 301 394 241 439 328 486 568 327 440 522
 335 393 470   7 403 329 388 336 429 349 547 637 418 360 535 396 475 497 553 358 441 444 412 438 472 477 583 372 355
 484 550 606 435 287 348 163 582 434 457 442 395 277 399 545 465 380 503 612 427 373  33 382 514  83 595 346 538 554
 635 476   3 487 167 621 221 404 549 118 556 389 455 462 511 558 539   5 611 463 461 183 574 469 520 679 569  65 459
 210 323 178 661 443 675 211 490 516 306 437 479 289 454 657 633 419 495  23 232 415 565 601 533 471 131 417 432 513
  93 631   1 638 482 160 184 571 367 376 596  10 619 630 447 413 537 577 453 325 406 591 667 509 604 116 478 699  29
 146 499 197 647 283 501 268 517 531  72 529 262 589 624 579 467 695 555 798  38 337   9 615 567 518  13 136 523 694
 690 642 561 693  47 489  90  14 144 117 607 665 643  42 739 587 424 742 681 286  27   2 658 526 485  80 691 728 109
 603 686 551 451 285 648  28 317 494 308 684 370 149 480 575 696 625 676 541 104 204  30  15 706 369 492 359 677  86
 628 751 111 744 246  22 564 311 570  12 760 483 768 586 580 590 729 605 165  43 215 126 598 170  92 242 145 671 682
 527 738 101 745  18 186 655 711  61 119 674 276 673  37 746 813 769 749 763  70  17 225 668 644  95  20 680 103 326
 723 780 168   4  24 764 755 645  58  74 747 256 659   8 721 758 653 804 715 222 158 253 436 196 275 422 202 660  69
 716 781  21 754  89 704 226 161 199 354 228 757 725 726 599 784 791 756 782 177 157 391 125 639 244 180  11  87  45
 623 130 670 752  16 790 152 330 112  44 714 748 662 208 720 799 803 719  46 209  56 322 187 353  36 405 316 651 636
 766 733 188 697  98 779 778 530  85  34 753  81 683 732 771 649 629 801  26 151 266 238 585 190   6 245 143  79 493

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00019e+07us (= 10001.9ms, 10.0019s)
Wall-clock time (full program): 1.00629e+07us (= 10062.9ms, 10.0629s)
Satisfaction error: 2
Number of search iterations: 1596
Number of local moves: 663 (including on plateau: 153)
Number of local minimum: 128 (including on plateau: 23)
Number of resets: 0
Number of restarts: 0

Problem in column 6: 25 100 797 127 563 783 182 31 195 240 314 251 364 830 392 329 348 621 675 160 501 489 648 22 186 764 704 790 779 => the sum is 12210 rather than 12209
Problem in column 9: 826 839 700 88 827 735 302 205 692 841 156 338 409 410 291 429 434 549 516 367 531 144 494 570 61 58 199 112 85 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 735 782 402 741 793 825 776 201 725 105  80  82 687 218 701 178  68 834  38  71 206  63 840 835 813  66 112 111 121
 779 688  88  72  91 160 668 127 159 637  69  89 841  36 708  57  24 836 552 655 635 162 713 586 777 110 567 783 540
 119 681 780  40 828 769 749  58 197 136  83 802 707  51 213  62 379 839  94 266 700 109 745 829 785  56 827  48 257
 789 145 205 766 833 683 658 130  15 222 122 740 118 219 768 175 133 838 243 120 788 674 715 187 627 102 345 107 742
 113 796 182 227 225 104 812  46 784 146 115 135  86 234 800 341 541 309 758 645 753 176 798 832 497 240 623 242 649
 123 186 232 138 370 837 781 101 522 185  19 263 711 254 718 200 534 281 174 172 651 774 744 551 755 260 720 181 772
 823 149 775 214 304 183 830 134 184 152 289 821 204  92 303 221 680 410 194 820 426 751 826 300 570 247 764  67 476
 439 685 288 164 180 207 543 794 153 166 547 321 193 131 665 157 239 137 195 719 757 803 728 475 626  99 537 611 650
 210 271 340 275 441 287 622  95 773 264 259 244 369 261 319 284 816 313 236 558 787 198 285 338 760 297 817 831 660
 140 154 128 262 238 170 579 336 249 791 334 233 291 296 738 673 607 705 424 819 563 737 299 192 654 343 609 129 516
 163 158 375 274 235 272 585 255 801 251 525 368 250 374 217 449 323 417 672 717 657 371 807 229 617 231 702 331 583
 294 278 451 276 290 215 521 588 301 385 529 416 147 237 605 241 632 559 389 230 613 320 510 273 582 310 564 644 809
 330 253 446 316 712 106 528 283 457 324 333 190 361 560 492 573 498 425 489 436 808 359 298 518 411 480 488 332 403
 390 491 362 546 327 458 818 434 279 382 328 479 815 418 356 252 315 339 409 539 406 349 503 347 342 358 396 380 391
 526 462 499 346 383 354 351 495 378 473 471 486 348 386 397 268 513 428 508 531 606 325  49 482 393 549 265 454 483
 377 538 535 407 520 523 307 381 392 350 367 597 422 485 399  32 556 437 465 414   2 463 506 435 574 401 459 460 405
 398 376 432 568 277 469 292 596 474 388 384 481 357 527 554 413 387 566 412 450 431 445 477 352 167 433 555 246 302
 478 322 429 517 500 536 293 662 580 373 470 444 427 515 467 507  96 216 329 286 188 682 511 571 305 468 438 456 143
 442 584 487 561 404 443 116 730 415 466 363 484 524 544 509 504 151 619 365 514  53 419 464 562 282 472  85 557  90
 394 533 703 639 447 493 408 542 572  79 502 640 600 440 548 590  74 420 455 124 256 631 448 421 161 734  84 228  42
 614 117 530 733 634 686 169 648  93 690 759 576 490 643 196 306 592 223 604  75  29 578 173 168 245 638 211 612 177
 647 577 400 581  31 452 353 337 756 395 519 594 603 620 258 599 171 311 671 430 295 312 139 575  26 569  70 739 179
 628  50  17 608 550 667 248 610 565 723 494  76 616 618 663 545 326  65 633  73 267 630   7 642 189 602 203 750 144
 676 103 636 698 679  87   3 697 461 364 591  77 659 699  33 704 601 615 670 209 126 589 100   1 148 664 141 666 512
 797 661 646 621  11 693  27 678 335 736 731  10 716 624  52 767 142 669  45 156 355  78  98  34 360 732 208 804 423
 694 114 308   5 598 695  28 696 652 824 641 269 593 747  81 748 795  16 721 722 226 317  60  43 132 366 108 692 318
  21 810 706 684   4  61   6 532 743 675 746 790  12 714 202 822 786  25 653 553  54 270  30 125  55 771 656  14 689
  23 453  64 220 709 754  97 224  39 765 761 811  44 770 212 727 729  13  59 625 372 587 314 629 165 806 505   8 724
  47 792 763 710 595  20  41 799 155 762 778 691  18 496  35 814 501 344 752 280 199  37  22 677 191 805 150 726   9

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00618e+07us (= 10061.8ms, 10.0618s)
Satisfaction error: 3
Number of search iterations: 1312
Number of local moves: 772 (including on plateau: 227)
Number of local minimum: 76 (including on plateau: 29)
Number of resets: 0
Number of restarts: 0

Problem in row 9: 210 271 340 275 441 287 622 95 773 264 259 244 369 261 319 284 816 313 236 558 787 198 285 338 760 297 817 831 660 => the sum is 12210 rather than 12209
Problem in row 20: 394 533 703 639 447 493 408 542 572 79 502 640 600 440 548 590 74 420 455 124 256 631 448 421 161 734 84 228 42 => the sum is 12208 rather than 12209
Problem in diagonal 0: 735 688 780 766 225 837 830 794 773 791 525 416 361 418 397 32 387 216 365 124 29 312 7 1 360 366 656 8 9 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  46 277 784 102 750 709 139 772 707 104 366 179  81 731 792 340 644 319 310 698 814 746 755  83 119  19  18 801   4
  39 496 203 222 807 311  15 274 492 323 128  29 686 773 830 606 721 794   3 253 612 793 197 389 282  55 775 383 718
 646  67  27 220 262 384 181 664 751  97  54 116 669 804 798 289 810 693 725  73 660 697 154 626  61 266  31 769 615
  96 168   2  12 808 158  28 691 723 109  34 101 225 638 627 571 625 705   9 248 733 687 685 662 710  13 645 774 722
 738  36 576 163  50 271  14 737 295 143  70 194 258 579 715 195 682 720 557 695 658 566  16 706 396 156 699 696 628
 753 265 668 174  52  26 330 642 681 151 133 178  33 643 549 241 624 221  42 680 525 735 520  11 651 724 618 610 729
 712  47 745  23 574 702 464 609 632   8  88  30 278 714 818 601 767 297 370  17 573  43 196  84 657  94 730 683 653
  95 617 785 130 648  41 307 453 105 166 145 173  37 623 635 506 708 604 495  20 636 465 641  48 650 726 778 482 490
 261 551 754 318 560  85 204 640  78 288 387 123  99 459 431 614 622 553 501 564  62 603 569 476 539 630 517  56 665
 112 674 584 436 526 107 224 555 437  24 391 581 177 619 629  82 417 153 656  10 597 488 540 468 583 652 498 457 532
 429 406 559 368 522 159 188 511 655 231 443 191 408 422 416 507 502 605   1 578 410  66 516 562 538 481 519 430 586
 276 666   5 371 585 602 401 438 294 336 346 554 113 512 548 600 654  51 435 440 649 315   7 694 192 589 588 590 358
 536 420 531 172 493 403 313 639 475 424 270 505 463 521 434 598 357 542 469 419 426 450   6  90 374 462 499 414 504
 596 452 432 433 535 309 251 508 399 259 286 458 480 478 372 375 322 467 461 292 545 385 563 500 572 530 228 394 327
 446 479 561 308 558 533 415 447 460 448 449 473 397 454 390 247 335 411 341 364 382 324 444 489 423 402 425 418 386
 451 487 348 477 255 363 491 518 365 356 359 212 398 824 325 541 421 404 445 442 552 587 405 314 350 360 466 316 377
 647 321 381 497 393 337 513 367 567 528 523 334 388 347 470 217 529 328 759 544 407 226 355 409 354 152 575 361 380
 611 344 326 484 301 235 599 175 744 550 514 412 524 304 472 527 246 667 428 303 509 243 379 305 392 312 352 556 395
 756 245 338 537 287 822 486 413 281 832 441 242 791 257 232 776 167 789 400 376 267 298 342 291 637  74 283 176 373
 351 285 339 717 208 786 494 302 616 456 547 223 829 483 233 704 250 593 684 727 216 343 273 256 237 219 353 272 213
 234 254 293 621 300 728 821 279 815 595 672 543 659 122 189 345 332 317 819 260 210 269 747  60 594 299 329 264 239
 362 742 201 752 333 676 607 826 125 703 510 809 631 185 190 661 200 218 320 229 149 716 252 765 349 187 198 227  86
 290 761  53 736 162 275 825 182 613 777 663 800 748 115 184 741  91 240 215 781  69 284 268 766 207 797 238 199 129
 209 779 141 671 205 770 734 117 171 782 719 764 591  64 280 120 186 546 378 331 768 534 214 780 150 111 169 135 790
 230  72 142 739 828 263 565  75 369 732 700 802 608 183 138 620 161 146 100 806 427 157 206 592 834 813 670 110 121
 503 762  71 455 147 743 713  45  63 485 799 758 568 144 236 306 677 439 783 211  77 160 515 749 134 831  22 633 180
 127 675 805 678 131 580 474 108  76 812 771 835 140  38  93  87  80 164 170 689 126  98 820 796 193 840 839 827 137
 841 803 795 701 837 249 673 165 155 679 711 757 296 148  59 103  44  21 763 688  32 817 788 106 244 577  68  40  49
 816  58 760 692  92 582 740  57  65 811 690 833 634  25 124  89  35 202 570 471 118 114 836 132 787 838  79 136 823

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.75109e+06us (= 9751.09ms, 9.75109s)
Wall-clock time (full program): 9.81226e+06us (= 9812.26ms, 9.81226s)
Satisfaction error: 0
Number of search iterations: 1545
Number of local moves: 729 (including on plateau: 225)
Number of local minimum: 110 (including on plateau: 36)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 832 754 813  60 108  36  79  96 707 121  33 830 715 827 692 716  37  54 288 839 132 544 503 666 155 623  48 553 348
  83 835 820  30  80  85 766  69  66 126 109 567 541 753 626 660 130 186 778 663 838  89 780 519 179 136  94 772 829
 823 679 162  86 112 781 551 259 788 120  75 278 160 702 704 165 169  91 237 451 202 256 795 807  81 724 594 635 722
 196 507 793 821 104  53 240 123 158 618 100 687 372 187 709 350 258 784 227 177 127  72 755 571 815 822 141 767 675
 154 783 727 693 277 143 819 115 756 275 244 562 631 113 701 534 117 164 281 101 405 221 252 729  59 496 469 614 774
 144  67 354  74 176 841  95 184 166 739 210 804 547 358 598 703  98 343 790 131 825 139 761 802 309 810 224 262 655
 128  82 654 209 188 190 833 287 129  65 116 583 311 203 764 834 185 809 828 228 280 253 748 799 286 607 347 518 745
 303 443 174 296 138 182 180 840 236 510 248 697 826 137 741 836 337 211 368 229 721 740 346 265 223 752 200 694 336
 231 711 331 461 271 161 298 249 789 749 235 450 637 199 222 713 577 234 448 213 134 463 604 255 193 543 529 665 644
 413 243 251 201 335 192 125 212 457 837 260 785 770 305 720 649 332 333 204 317 230 233 611 817 316 831 295 613 322
 318 738 353 239 394 279 219 312 442 726 437 806 708 444 456 684 389 283 232 168 299 490 302 218 133 633 563 559 385
 313 719 730 378 341 475 273 167 173 744 274 321 677 615 447 465 397 458 300 327 453 326 363 315 238 688 293 294 645
 393 268 220 391 454 310 371 342 340 824 409 492 524 245 381 324 314 325 364 382 307 429 624 383 424 728 556 555 530
 420 661 241 513 351 374 247 483 484 485 441 440 365 602 491 297 291 352 345 375 493 339 301 415 462 523 747 276 395
 539 628 502 593 473 520 357 459 370 416 282 355 536 266 436 285 438 396 376 386 533 208 525 215 601 189 379 482 464
 433 414 418 411 392 480 468 292 582  11 390 150 401 546 630 511 360 573 505 538 404 467 638  46 478 270 472 477 452
 290 195 434 470 455 489 398 431 584 361 400 367 460 410 479 408 600 581 422 417 426 777 205 599 585  32  92 246 596
 526 369 487 554  87 306 535 474 676 528 570 439 366 407 476 206 421 495 359 466 689 566 323 384   2 254 425 387 432
 471 328 597 501 568 672 548 500 616 428 446 163 110 402 515 135 512 606  18 498 481 589 214 610 532 106 334 537 172
 668  93 664 691 732 377 681 494 449 531 561  62  97 696  49 171 504 731 486  76 552 488   4  47 734 373 595  58 545
 522 267 148 560 605 508 550 669 657 242 580  84 445 608  20  21 656 579 646 497 105 712 542 263 549 156 380  51 587
 558 565 569 399 572 757 652 622 435   1 629 170 146 639 122 423 647 619 427 641 540  64 178 183 592 527 330 194   8
 710  41 107 576 514 674  50 320 564 149 499 226  31 648 640 603 671 625 643 509 521 517  22 578 586 362 516  90 217
 632  55 159 620 773 406  63 506 695 430 787 344 250 609 102 642 575 124 775 651  52 760  77  24 617 118 750 329 284
 714 388  45 797 590 705 682 801  23 349 685  78 412  16  71  40 723 659 746 751 147 765  42 634   5 225 678 319 119
 658 419 769   7 680 627 763 759 670  99 811 191  61 557  44 198  88 742   9 735 574 216 175 621 698  57 690 151 140
 673 650  43  15 818 814  13 791   6 356 794 667 207  26  70  39 808 737 257 612 717 743 725 261 776 403  14 157  17
  29 304 588 771 816  73 591 700 181 636 798 272 706  27  34 289 796 103 736  28 264 718 111  38 800  68 768 812 152
  35   3  56 792 805 699 762 653  10 733 786 338 197 662 269 308 779  12 114 803 758  25 683 145 782 153 686 142  19

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00021e+07us (= 10002.1ms, 10.0021s)
Wall-clock time (full program): 1.00629e+07us (= 10062.9ms, 10.0629s)
Satisfaction error: 2
Number of search iterations: 1455
Number of local moves: 759 (including on plateau: 308)
Number of local minimum: 91 (including on plateau: 35)
Number of resets: 0
Number of restarts: 0

Problem in column 12: 830 567 278 687 562 804 583 697 450 785 806 321 492 440 355 150 367 439 163 62 84 170 226 344 78 191 667 272 338 => the sum is 12208 rather than 12209
Problem in column 25: 155 179 81 815 59 309 286 223 193 316 133 238 424 462 601 478 585 2 532 734 549 592 586 617 5 698 776 800 782 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 828 159 112  88  66 705 699 528 780 643 561 116  70 416 808  45 124 529 511  46 711 839 731  84 813 763  94  58 282
 534  82 728 664 678 781 657 759  25 765 724  37  64 518 584 111 670 130 118 295  42  96 630  56 818 597 822  98 126
 639 715 788 106  76 103 841 608 510 830 682  49 211 804 521 132  79  86 292  92 594 619  93 133 814 786 776  61 169
 598 782 823 820 136  53 408 537 426 567 653  74 147 642 638 235 793 107 601 134 131 191 834 145 760 752  40  62 120
 647 797 121 115 838 144 624 622 461 831 832  83  81 552 655 170 218 296 746 232 205 143 683 153 824 709  85 215 127
 751 742 105  95 193 821 181 836 446 717 722 141 108 741 494 168 477 113 550 155 571 148 652 819 658 173 190 178 264
 686 214  80 125 224 266 551 787 574 660 827 293 474 391 789 306 274 265 651 157 196 117 840 268 800 784 248 195 167
 677 162 150 189 204 369 825 676 517 240 740 343 216 288 756 182 206 245 553 253 745 337 628 252 654 625 257 149 771
 632 701 287 198 247  97 833 733 837 222 380 142 201 385 589 223 560 304 592 185 806 188 583 330 578 805 154 187 230
 302 826 315 259 277 323 672 614 487 322 301 371 485 720 262 209 260 221 835 817 424 212 679 225 605 324 251 409 202
 255 801 310 333 237 447 272 263 616 276 357 303 774 712 737 241 250 271 798 320 365 334 796 352 368 285 402 345 389
 331 581 425 362 280 460 668 346 607 372 318 406 275 356 684 351 509 563 327 379 359 383 568 228 695 353 358 217 448
 496 314 436 341 465 422 637 317 311 299 546 459 256 376 338 308 629 434 735 335 396 325 554 281 587 468 290 454 400
 443 307 298 300 452 349 350 462 811 450 384 309 404 455 508 344 405 427 438 407 829 388 375 381 226 411 418 445 433
 392 378 531 364 355 386 480 520 203 458 401 467 442 481 488 456 390 479 394 403 499 370 444 289 319 361 501 476 482
 580 423 398 519 419 522 428 421 102 493 498 366 471 512 545 377   9 516 504 354  48 437 547 441 440 470 410 566 393
 469 429  19 502 464 339 457 397 135 374 399 535 328 507 161 478 439 466 606 533 414 373 413 497 382 623 490 495 484
 360 617 541 555 595 449 174 420 100 483 417 342 475  10 523 435 184 101 278 591 557 530 246 430 472 453 649 609 613
 575 491 549 431 548 564 176  27  72 666 395 492 572  99 527 415 177 486   4 473 532 577 332 569 273 505 663 463 556
 152 559 525 558 610 620 329  55 122  59 612 524 432 239  22 573 767 542 539 543   2 674 194 540 336 503 340 636 602
 119 213 585 665 586 536 219 596 286 590  67 729 514   8  91 599 387 667 267 633 618 669  33 634  35  28 604 661 570
  63 588 513 650 579 621 316  21 210 515 294 538 600 305  65 707 506 593 220 626 451  77 160 641 229 179 603 693 646
 234  54 659 696 698 526   1  68 718 165 192 700 258 489 227 662 697 243  47 635  87 680 412 671  20 562 500 726 582
 164  11 576 790 770  18  71 180 254 199 163 794 656 283 261 795  69 688  52 644 648 706 326 750  14 231 708 703 685
  60 313 611 615  12  15 151 312 689 128 110 645 736 714 114 734 769 631 367 270 297 762  73 702 137  24 721 758 739
 175  36 681   7 692 748 197 138 146  29 233 627 725 710 284 691 673 565 109 348 129 807  89 810 242  13 816 799 690
 172 544   5 291 738 723  31 139 730 772 156 743 753 244 249 777 166 640  90 764   6 783 104 766  39 236  57 778 713
 171 347 363 768  26 785 761 749 279  34  38 802 727 208 238 694 775 792 716 812 815 123 158  75  30   3 719  16 186
 704  23 675 803 744  17 200  78 755  50 207 779 754  44  51 791 747 809 269 773 732 321  32 687  41 183  43 757 140

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00029e+07us (= 10002.9ms, 10.0029s)
Wall-clock time (full program): 1.00697e+07us (= 10069.7ms, 10.0697s)
Satisfaction error: 3
Number of search iterations: 1531
Number of local moves: 725 (including on plateau: 234)
Number of local minimum: 87 (including on plateau: 24)
Number of resets: 0
Number of restarts: 0

Problem in row 17: 469 429 19 502 464 339 457 397 135 374 399 535 328 507 161 478 439 466 606 533 414 373 413 497 382 623 490 495 484 => the sum is 12208 rather than 12209
Problem in row 28: 171 347 363 768 26 785 761 749 279 34 38 802 727 208 238 694 775 792 716 812 815 123 158 75 30 3 719 16 186 => the sum is 12210 rather than 12209
Problem in diagonal 1: 282 98 776 752 824 819 840 337 806 817 798 563 629 344 488 512 328 342 395 59 286 21 1 18 12 7 5 347 704 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 821 769 831  29 497 559 798 111  59  66 566  76 267 686 691 714 626 783  48 109 543 832 608 130 776  38  93  37  46
 157  98 635  81 653 811 809  61 185  50 774 411 733 611 125 516 817 755  62 593 105 819 169 721 110 243  73 833 199
  70 808  79  54 615 145 618  85  75 117 628 210 153 805 836 123 666 121 278 106 196 609 710 829 135 706 841 804 787
 586 146  47 823 186 813 810 133 584  60 778 167 175 807 156 665 794 745 319 147 115 777 616 122  43 640 705 168  82
 515 716  58  68 683 756 585 194 164 126 556  49 595 200 177 647 749 754  96 107  90 781 825 119 729 741 839 204  86
 651 207 517 193 687 656 429 680 143 242 239 279 771 222 238 643 718 696 346 154 219 511 384 311 165 688 252 795 173
 677 646 528 226 681 174 739 214 762 176 760 208 838 188 181 826 230 209 162 221 834 830 137 291 232 698 151 261 129
 692 273 419 344 707 182 788 538 797 259 234  88 786 281 206 740 542 245 101 288 141 441 835 161 250 780 735 138 218
 727 623 304 246 166 190 229 172 732 263 300 313 840 158 248 799 743 684 268 197 818 560 704 271 212 675 192 211 364
 671 310 709 341 257 703 299 381 213 816 236 340 368 328 369 668 334 233 349 277 373 599 737 249 202 634 195 763 255
 324 301 589 227 286 713 532 338 765 312 468 479 374 724 307 237 337 317 815 262 320 572 644 355 228 627 240 149 367
 482 394 306 663 426 802 297 265 427 784 298 558 363 289 345 140 356 837 144 465 231 630 397 150 416 701 302 335 406
 295 342 612 354 347 292 155 386 625 382 600 339 605 333 423 472 579 379 270 359 353 546 679 430 492 583 303 309 365
 554 351 290 305 448 383 371 574 400 266 308 487 473 436 336 451 555 378 478 418 495 531 409 314 352 408 631 435 372
 380 370 549 449 425 486 198 391 509 399 540 282 467 453 322 520 464 358 403 417 488 316 390 424 507 493 376 438 395
 361 450 437 434 463 410 413 452 439 432 387 285 315 296 404 484 392 514 456 396 284 401 421 537 433 443 513 564 393
 512 454 562 571 522 442 247 244 508 521 481 505 460 470 385 459   8 458 524 398 552 323 224  21 547 180 536 519 576
 440 506 503  26 469 596 502  45 327 260 269 127 350 670 613 594 544 447 604 466 444 256 597 557 414  71 446 570 496
 501 461  67 357 504 476 217 577 534 445 360 332 389 607 591  95 580 412 582 551 455 293 118 573 539 321  72 567 633
  52 578 189 676 108 529 568 719 331 431 527 491 420 588 702  63 148 610 530  28  24 330 283 725 498 201 642 561 657
 100 480 490 587 415  91 362  78 405 629 525 569 428 565 526 545 225 191 500 598 548 241 621 603 590  94 170 645 388
 187 601 253 782 131 377 178 457 113 711  44 592 620 664 606  64 617 550  56 637 654 407 152 535 722 274 112 614 499
  25  35 483 655 116 128 275 632 541 659 638 602  55 553 652 518 523 475 758 641 494  10  39 650 510  13 750  32 747
  99 731 235 662  84 325 700 689 685 649  65 682 636   1 697 264  41 183 678 672 712 258  51  33 753 280 669  53 622
 699  27 814 648   9 485 160 581 205 730 694 736  80  20 768 124  74  23 785 720 796  30  36 690  18 471 723 348 715
 203  14 742 422 761 132 738 792  69 489   2 791 184  31  12  77  17 660 779 619 728  40 272 757 759 533  42 751 793
 329 667 136 734 575  87  92 827 658 462 746 639 102 717 726 254 474  15 366 790 695 163 251 693   5 215  16 114 661
 773 103 822 477 216 294  11 828 142 674   7 820 139 104   4 220  22 120 708 767 343  97 276 824 803 375 801 673 766
 326 748   3 775 772 171  89 764 812 800 179 752 223 402 563 287  34  57 744 806 159   6 624 134 770  83 789 318  19

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00029e+07us (= 10002.9ms, 10.0029s)
Wall-clock time (full program): 1.00587e+07us (= 10058.7ms, 10.0587s)
Satisfaction error: 4
Number of search iterations: 1481
Number of local moves: 939 (including on plateau: 363)
Number of local minimum: 61 (including on plateau: 41)
Number of resets: 0
Number of restarts: 0

Problem in column 6: 559 811 145 813 756 656 174 182 190 703 713 802 292 383 486 410 442 596 476 529 91 377 128 325 485 132 87 294 171 => the sum is 12208 rather than 12209
Problem in column 8: 111 61 85 133 194 680 214 538 172 381 338 265 386 574 391 452 244 45 577 719 78 457 632 689 581 792 827 828 764 => the sum is 12208 rather than 12209
Problem in column 10: 66 50 117 60 126 242 176 259 263 816 312 784 382 266 399 432 521 260 445 431 629 711 659 649 730 489 462 674 800 => the sum is 12210 rather than 12209
Problem in column 25: 776 110 135 43 729 165 232 250 212 202 228 416 492 352 507 433 547 414 539 498 590 722 510 753 18 759 5 803 770 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 759  25 747 745 299  39 216 357 730 723  13 172 801 272 807 736  20 802 121 320 389 127 720 814 665 185 318 222  65
  99 677 192 754 148 724 748 685 308 340  16   4 780 287 812 783   2 761  12 752 776 210 669 787 757  36  44   6  40
  23  66   9  56  80 798 718 753 778 652  21  14 813  77 770 676 674 719 114 682 191 132 743 438 722 773 344 117 256
  90  45  61  34 712 794 721 734 766 756 167  30 702 274 763 731   8 659  57 750 480  29 810 768 744  22 271 200  31
 667  49 628 150 255 684 201 612 772 620 221 307 795 464 273 764 105 777 673 644 224  35 695  48  47 376 295 594 234
 732  62 687 658 557 322 616 740  73 729 108 125 727 193 638 683   3 642 653 700  81  63 714  27  94 398  85 651 448
 689 668  46 626 149 614  26 593 556 640 559  55 605 296 403 779 558 516   5 607 239 637  11  53 717 231 347 678 306
  28 601 613 739 484 701 243  19 610 477  54 122 598 266 581 691 646 693 548 544 595  17 617  76 636 539 152  70 249
 458 229 526 633 590 533 622 579 116 572 246 578 641 230 265 567 619 657 648 589  18  24 517 175 654 365 205 183 170
 532 507 609 758 600 608 611 597 615 485 547 538 450  43 161 472   7 580 492   1 599 541 126 536 508 155 111 194 226
 429 521 540 501 602 650 218 405 333 522 214 549 664 335 241 416 632 530 186 584 606 446 551 334 496 217  32 166 289
 382 367 576 461 592 568 176 566 406 513 290 583 202 144 267 400 562 417 444  82 555 582 528 491 512 486 276 639 142
 546 495 330  10 343 571 350 506 570 553 414 399 462 460 337 415 537  15 586 529 585 627 431 440 468 138 258 493 341
 459 282 395 499 481 497 196 509 564 511 487 525 467 396  37 535 348 387 490 531 404 423 411 447 451 284 281 476 436
 305 452 455 407 433  59 523 466 552 390 443 465 441 463 304 457 373 504 302 408 393 519 518 384 489 413 475 394 422
 445 315 355 346 478 456 428 386 402 474 356 392 233 437 804 502 434 515 303 372 425 427 375 454 432 534 380 339 410
 261 324 385 227 280 421 345 294 370 430 494 401 369 621 635 359 336 560 479 141 755 212 488 563 453 688 426 213 679
 366 469 353 397 391 325 715 381 388 286 300 686 439 623 604 283 351 292 358 360 666 442 332 342 312 751 379 240 378
 383 420 520 248 419 363 643 109 409 377 573 716 316 799 629 291 262 374 327 368 708 275 313 184 323 435 565 498 362
 238 301 471 338 815 352 253 259 354 827 561 364 187 596 278 309 269 263 285 831 247 328 197 587 251 503 545 809 591
 182 298  69 277 293 260 297 279 821 361 792 189 198 790 569 252 788 349 270 206 796 371 113 711 703 245 725 500 505
 235 710 211 168 232 140 473 841 178 228 690 741 215 550 310 195 329 156 672 321 818 834 209 424 177 288 680 524 660
 781 220 824 208 326 331 825 158 135 104 771 760 311 588 181 134 527 412 207 188 554 681 264 225 254 482 769 319 670
 749 250 165 103 237 837 696 244 118 147 634 631 257 706 112 143 160  98 782 603  96 823 219 832 204 203 793 625 742
  72 661 169 314 828 163 236 692 268  88 698 833 110 789 630 174 709 133 199 119 102 835  60 514 180 707 543 647 737
 762 819  68 836 542  52  93 173 153 242 800 767 131 575 470 146 765 145 820 162  83 171 106 663 139 786 483 808 449
 738 733 829 785 154  87 317  97  92  74 223 179 136 656 129  79 811 100 704  89 618 830  42 130 713 418 803 805 838
 662 826 705 774 699 101  58  91 649  50 791 510  95 115  75 151 577 120 775  51 128 822 806 107  41 735 784  71 839
 137 817 671 157 190 159 645  84 123  38 726 574  64 164 124  86 797  33 697 675  78 746 624 655  67 816 840 728 694

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00637e+07us (= 10063.7ms, 10.0637s)
Satisfaction error: 2
Number of search iterations: 1546
Number of local moves: 653 (including on plateau: 200)
Number of local minimum: 127 (including on plateau: 37)
Number of resets: 0
Number of restarts: 0

Problem in row 25: 72 661 169 314 828 163 236 692 268 88 698 833 110 789 630 174 709 133 199 119 102 835 60 514 180 707 543 647 737 => the sum is 12210 rather than 12209
Problem in row 28: 662 826 705 774 699 101 58 91 649 50 791 510 95 115 75 151 577 120 775 51 128 822 806 107 41 735 784 71 839 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 525 428  84 776 593  78 741 768 694 556  85 127  22 723 335  38 296 197 791 813 770  26  47 500 116 721 833  73 453
  56  91  50 789 841 132 710 642 805 478 269 154 105 732 752  40  34 649 822 600 175  41 164 613  66 578 837 451 533
  39 166 767 784 231 607 558 827 764  64 131 812  60 830 100 118  51 749 820 722 103 212  30 471  43 705 415 216 814
 148 660  95 518 157 210 777 733 727 174 130  67  70 839 515 110  15 402 656 773 214 252 670 687 709 836 109 139 817
 774 171 203 747 835 185 831 808 688  74 161 838 163 195 168 170 183 124 829 797  52 147 123 682 524 156 650 188 743
 304 628 122 834 129 826 758 641 618 111 233 220 303 229 340 143 348 766 169 703 152 202 178 788 700 744 146 207 667
 142 543 144 602 251 699 539 739 159 117 186 141  54 734 815  61 297 765 153 260 287 272 832 616 336 609 828 283 745
 330 704 248 230 104 782 554 819 681 359 237 242 112 624 787 137 315 790 225 211 209 320 241 771 825 563 257 349 184
 282 469 265 239 217 708 544 707 824 286 125  71 234 755 258 205 189 344 421 840 654 361 285 798 717 567 293 271 279
 280 761 102 792 278 299 425 481 666 224 325 192 250 783 277 313 244 218 138 409 398 355 365 629 780 691 391 484 659
 219 665 305 383 341 366 568 570 266 436 514 311 557 598 332 522 253 316 663 382 145 317 322 370 738 604 275 268 603
 384 778 312 228 150 562 711 572 288 399 427 406 326 276 621 390 199 545 379 310 294 196 381 706 364 680 378 235 712
 264 736 472 306 319 527 565 672 380 413 329 333 526 668 387 523 416 431 318 392 249 291 259 400 343 548 422 473 247
 376 542 256 373 498 457 193 492 273 345 434 466 520 354 356 385 439 547 468 243 538 821 309 599 337 404 395 458 331
 445 302 417 419 450 289 517 474 374 194 449 362 512 412 521 270 467 338 437 519 530 367 577 375 569 499 397 358 369
 426 410 433 452 407 531 447 300 573 357 464 494 505 372 334 588 328 347 393 408 401 438 581 389   7 477 454 479 414
 576 295 448 560 441 443 440 353 489 585 442 314 475 261 134 405  75 571 485 240 482 430 403 324 617 501 513 561 346
 465 179 459 394 535 620 301  58 507 444 432 446 350 497 308 462 540 461 363 508 463 470 377 223 589 151 587 591 429
 596 480 509 502 208 516 371  62 456 491 493 537 496 488 506 634 584 580 552 255 292 483 510 476  80 281 605 120  46
 352 135 611 590 586 420 158 267 460  33 553 486 396 191 351 647 627 673 504 128 140 686 630 155 532 435 555 490 418
 487 254 644  92 626 424 246 198 133 574 551 625 575 284 495 631 635 601 511 623  42 360 213  76 546  49 610 762 342
 564  32 674 595 683 165 614 290 263 678 190 612 583 182 676 528 695  31 536 651 751  11 718  53 549 227  21 633   4
 652 606 818 172  94 455  98 226 640 720 646  45 579 215 327 619 689  25 339  57 772 615   3 423  86 173 655 799 661
 671 386 592 114 769  17  72  89  63 669 653 582 748 274  96 550 643  18 608 597 541 719 677 323 206  36 754 566 176
 639 180 636  12  19 638  88  93 200 637 662 794 786 149 697 731 807 645 119   2 763 730 675 167 529  28  82 594 107
 742 136 204  10 750  37  79 222  14 632 759  97 746  83  69 716 559 657 238 679 725 753 728  55 307 503 713 809 187
 740 368 800   9 701 126 113  24 115 664 779 823 696 181 803 692 715 106  65  27 693 714 729 221 411 121   1 724  48
 726 806 802  29 795 702  90  59   8 760 757 801 685 245  68 796 756 236  99  44 684 816 534 232 321 162  13   6 177
   5 298 737 658 201 388 101  23  81 735 793 811 775  35 781 785 810  77 108  16 690 804 648  87 262 160  20 622 698

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.00618e+07us (= 10061.8ms, 10.0618s)
Satisfaction error: 2
Number of search iterations: 1623
Number of local moves: 634 (including on plateau: 210)
Number of local minimum: 143 (including on plateau: 26)
Number of resets: 0
Number of restarts: 0

Problem in row 8: 330 704 248 230 104 782 554 819 681 359 237 242 112 624 787 137 315 790 225 211 209 320 241 771 825 563 257 349 184 => the sum is 12210 rather than 12209
Problem in row 9: 282 469 265 239 217 708 544 707 824 286 125 71 234 755 258 205 189 344 421 840 654 361 285 798 717 567 293 271 279 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 499  67  76 826 458  58 435 731 416 120  49 808  54 222 682  27 671 822 705 669 689 533 602 126 820  30  79 100 835
 128 426 659 122 788  24 198 675  80  43  84 554 830 841 743  78  70 834 776  57 162 837 779 156 620 448 732 335 130
  38 806 839 819 438  40 547 717 138 268  36 708  53 151 797 102 816 150 152 220 501 807 197 225 686 642 592  28 696
 134 768  68 838 516 639 503 577 459 169 157  50 258  69 107 178 706 767 594 121 714 823 824 129 748 812 174 161 146
  89 817 256 165 840 133 467 688 366  77 257  93 192  61 190  33 626 654 781 833 678 782 674 117 695 713 166  83 683
  97 139 244  96 637 411 593 759 147  60 280  88 229  81 347 211 638 810 770 829 783 687 773 698 600 255  47  64 836
 263 113 305 795 564 789 552 765 629 207  90 314 380 338 234  94 763 292 275 248 762 672 340 163 571 542 119 205 825
 213 241 758 155 726 236 492 827 619 326 195 369 141 212 325  82 389 289 171 333 187 802 813 831 529 745 175 372 656
 124 361 309 262 681 331 760 811 545 203 160  92 303 703 349 609 790 135 719 182 821 396 238 168 710 507 260 371 310
 351 235 693 170 633 343 774 373 727 828 312 194 217 322 300 308 463 277 284 400 784 536 254 159 684 777 386 224 201
 352 245 285 405 771 250 610 606 736 274 665 379 154 210 283 313 346 588 337 368 395 527 419 341 348 712 375 436 478
 223 264 273 259 734 278 670 537 680 179 709 530 384 215 474 441 453 339 204 355 354 570 450 265 625 793 231 378 342
 293 442 185 261 434 733 668 589 786 398 832 497 447 209 317 381 363 319 431 350 246 430 318 388 427 410 316 407 332
 227 522 432 666 495 397 401 413 382 387 176 247 402 785 391 359 452 298 461 558 385 662 465 393 494 302 374 392 291
 512 425 307 418 406 631 356 365 508 456 334 367 408 568 394 344 468 466 299 437 376 582 336 403 415 513 362 449 304
 471 422 489 460 446 390 473 358 493 479 404 417 506 502 360 370 288 505 267 586 383 377 149 539 464 428 399 329 455
 622 491 532 604 424 605 181 321 518 486 328 429 521  32 484 488 112 482 515 590 685 249 556 490 421 295 153  19 576
 599 324 524 496  51 137 127 315  35 584 445 270 596 483 511 645 282 287 544 444 469 296 439 477 578 543 738 500 470
 534 561 575 457  10 475 218  13  66 485 562 520 661 657 565 290 230 472  72 636 132 281 679 628 180 573 641 476 560
 581 663 650 528 196 504 294 228 115 498 572 621 517 553 559 646 108 579 658  12 311 200 525 510 101 237 142 535 566
  71 414 541 563 172 550 136 103 540 523 412 514 613 598 538 567 555 548 707 481  22 219 652 614  63 226  44 608 615
 618 440   9 694  46 557 330 239 111 623 509 634 715 549 546 531  56 699  42 692 697 353  99 724 188 109 702 591 106
 583 660 649 569 297 651   5 191 199 721 423 597 519 480 700 754  48  14 640 420 617   3  16 611  23 202 750 780  87
 749 673 603 616 193  15 221 184 587 667 585 624 595 243 635 601 580   6 186 574 208   7 648   4 177 409 632 716 271
 718 677 104 655   1 766 345  37 272 746 664 805 723 454  95 753 189 755  25 704 110  55 145 653   8 251 744 607 148
 747 233 751  52 173 158  73 253 433 737 647 730 804 764  75 630  62  11 643 728 131 114 711  98 266   2 756 815 612
 798 729  65  31 306 627 364 125 357 757 725  41 735 443 794 778 676 551  86  45 144  39  59 739 462 301 526 690 216
 775  17 276  21 487 740 644 269 814 116 801 691 167 742 323 809 769  18 164 214 320 118  20 799  74 327 791 720 183
 800  34 752 206 286 741 772 140 451 792 796  26  85 722  91 787 240 242 701 123 143 252  29 761 232 105 803 818 279

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00025e+07us (= 10002.5ms, 10.0025s)
Wall-clock time (full program): 1.00637e+07us (= 10063.7ms, 10.0637s)
Satisfaction error: 2
Number of search iterations: 1866
Number of local moves: 919 (including on plateau: 391)
Number of local minimum: 130 (including on plateau: 52)
Number of resets: 0
Number of restarts: 0

Problem in row 9: 124 361 309 262 681 331 760 811 545 203 160 92 303 703 349 609 790 135 719 182 821 396 238 168 710 507 260 371 310 => the sum is 12210 rather than 12209
Problem in row 11: 352 245 285 405 771 250 610 606 736 274 665 379 154 210 283 313 346 588 337 368 395 527 419 341 348 712 375 436 478 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 722  94 803  74 268 114 707 170 193 785 394 163 751 809 759 773  10 313  19  20 817  47 765  48  24 743 826 735 263
 704 793 821 130 777 179 364  34 538 805 801  73 210 724 836 662  68 384  41   8 706 178 719 151  62 262 327 199 653
 723 780 581 711 125  83 216 198  31 688  61 171  86 778 788 729  39  14 597 747 445 676 687  76 101 257 356 767 698
 596 731 647 173 670  95 337 323 172 786 678  60 740 779 661  15 738 251 201 195 335 303  93  51 619 307 727 190 736
 666 651  23 732  17  58 176 519  64 683 763 105 573 625 657 758 702 225 652 668 200  96 665  98  11  90 517 570 645
   5 697 637 712 656  59 493 164 208 681 585  45 643 825 756 671 624 219  65   3 672   7 569 458 108 177 813  56 601
 708 658 752 642 248 267   2 155 133 290 634 284 718 599 680 608 748 283 679 590 434   1  18 134 119  99 693 271 762
 701 587 692 558 104 206 207 120 312 456 639 102 613 563 543 644 549 144 636 574 469 340 252 159 514 147 660 185 533
 551 548   4 612 346 194 158 641 474 638 631 294 562 564 623 610 498 531 579 528   6 454 135 175 372 217 593  38 633
 565 699 630 503 524 298 161 362 127  22  49 286 473 578 567 571 682 614 438  89 604 325 141 413 489 223 486 764 526
  72 602 516 420 554 342 107 508 138 272 121 282 497 451 476 621 459 700 441 162 457 664 407 212 483 561 572 622 490
 553 437 442 509 609 344 167 511 326 741 617 464 416 534 616 512 491   9 471 484 289 197 116 502 626 274 391  43 518
 627 392 542 566 479 352 424 410 408 421 439 402 314 365 455 375 462 419 388 539 472 463 131 237 500 220 535 169 703
 461 510 481 432 355 367 287 453 418 460 525 492 443 452 330 350 466 436 379 401 425 495 397 423 433 277 310 603 348
 368 406 395 275 396 450 447 427 183 221 389 520 428 422 358 770 306 300 400 409 834 541 309 345 426 560 494 440 390
 393 559 354 444 359 403 380 366 265 305 600 555 297 363 477 385 370 331 487 607 649 446 530 361 515 371 485 264 288
 575 357 245 787 386 488 449 347 521 404 504 333 382 552 378 475 398 146 417 376 547 373 414 618 482 232 244 544 235
 334 270 435 467 292 577 505 557 343 250 839 242 695 315 269 540 224 415 537 714 353 360 387 728 431 311 261 302 256
 188 213 273 430 377 745 730 470 592 584 546 339 301 749 329 412 203 202 304 405 829 260 236 632 266 336 148 338 772
 291 192 281 429 316 480 822 776 583 831 278 771 128 341 243 187 319 231 126 234 792 279 230 598 209 588 295 674 685
 253 276 238 383 677 576 742 349 789 299 247 606 259 227 165 324 136 726 229 240 705 761 710 529 285 411 320 501 246
 117 399 280 228 318 506 690 739 795 204 233 478 799  71  91 258 254 733  84 589 182 725 468 628 655 545 696 321 123
  97 218 818  55 717 328 513 296 580 322 369 715  66 239  79 160 143 819 351 591 122 750 768 686 720 734 205 522 226
 103 100 189 152 180 721 640 156 667 255 832 781 797  67 241 139 293 812 684 448  87 775 611 174 709 755  33 586 222
 110  42 605 754 830 824 594 810 800 137  82 828 802  26 149 308 550 332 249 142 129 527 154 753 737 654  37  78 166
 157 118 112 798 784 791 635 317 595  30  44 694  54  32  85  12 835 757 820 689  81 615 381 675 499 823 140 620  16
 106  28 168 150  88 827 650 716 673 196 145 646  35 113 523 181 774 840 669 215 465 115 582 806 833 536 841 211  77
 659 816  92  13 109 766  50 532 568 374  53 815  52  25  29 132  57 837 507 796  63 629 838 794 790 691 124 814 184
 804  36 153  70 648 769 556 783 713  69 111 663  75  21  46  27 811 186 760 746  40 807 496 744 191 808  80 782 214

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00026e+07us (= 10002.6ms, 10.0026s)
Wall-clock time (full program): 1.00633e+07us (= 10063.3ms, 10.0633s)
Satisfaction error: 2
Number of search iterations: 1616
Number of local moves: 831 (including on plateau: 313)
Number of local minimum: 119 (including on plateau: 36)
Number of resets: 0
Number of restarts: 0

Problem in column 19: 19 41 597 201 652 65 679 636 579 438 441 471 388 379 400 487 417 537 304 126 229 84 351 684 249 820 669 507 760 => the sum is 12210 rather than 12209
Problem in column 24: 48 151 76 51 98 458 134 159 175 413 212 502 237 423 345 361 618 728 632 598 529 628 686 174 753 675 806 794 744 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 526 627 611 822 786 514 645 103 158 631 115  55  82 634 532 187 218  61 673 149  87 183 776 782 615  71 713  37 816
 589 839 219 831 658 661 742 185 100 197 129 801  85 498  98 171 172  83 133 739  60 773 772 760 762  81 601 346 124
 190 752 488 717 699 828 159 104 140 107  44  54 127 827 389  97 830 237 791 391 114 756 819 706 764  42 807 153  77
 775 495 738 783 734 139  41 117 323 138  65  68 595 793  62  46 150 181 737  70 157 604 800 691 642  31 561 835 838
 591 789 180 780 424 151 182 113 478 686 164  93  72 761 609 235 141  47 641 680 628 797 668 684 815 244 175 246 135
 619 612 832 710 745 563 321 711  89 188 308 168 340 392 224 136 291 231 795  99 148 749 646 501 462 720 258 209 142
 199 736 216 735 821 212 836 809 233 200 146 648  79 753 796 195 155 253 784 302 374 184 829 411 226 257 309 300 211
 305 676 765 292 787 222 301 578 156 145 266 329 238 525 810 105 771 283 243 808 247 503 730 607 166 240 770 162 179
 486 592 840 326 781 322 263 833 414 217 341 703 178 287 598 254 281 425 709 264 261 206 241 663 319 160 201 841 203
 225 545 189 313 621 542 324 834 293 802 271 260 434 359 593 373 282 767 422 697 487 311 277 588 432 275 205 273 215
 369 419 227 678 657 276 310 721 342 335 826 715 334 429 406 274 351 196 671 573 327 163 409 537 210 500 230 345 379
 337 551 472 204 459 480 378 718 161 636 343 535 252 339 704 410 242 600 505 638 405 358 303 669 362 165 370 307 306
 278 499 445 213 446 456  76 778 450 757 435 664 824 454 295 328 232 451 420 438 383 417 443 518 333 394 360 152 270
 336 625 320 338 268 470 400 344 192 489 527 582 262 388 412 502 452 546 294 547 436 387 510 475 479 289 455 325 559
 330 416 458 361 482 401 602 402 393 543 442 363 317 536 377 376 460 437 366 463 191 347 352 315 565 457 428 665 364
 630 385 522 372 236 332 382 396 590 461 587 353 397 299 541 381 635 272 331 386 444 304 466 384 407 433 481 448 354
 365  39 539 131 265 507 245 572 552 408 558 431 453 643 564 605 368 174 314 613 483 239 447 169 515 415 575 553 467
 586 220 427 654 286 484 473 375 465 509 538 528 504 403 474  34 685 390 399  51 223 633 367 297 512 523 492 653  24
 118 256 531 439 250 513   3  17  15 533 530 570 316 549 469 290 670 712 476 608 544 520 288 228 357 585 675 449 698
 626  56 119 524 296 491 719 312 584 566 650 208 534  22 116 716 506  30 128  52 616 516 471 350 540 679 577 550 655
 639 356  84 267 298 594 597 249 557  74  19 167 652 555  69 707 705 395  35 798  18 567 519  86 556 693 554 562 837
  36 348 423 234 214 125 517 521 490 221 468 574 644 694 560 660 779 620 624  53 649 130 202  88 656 430 729  12 508
 637 248 632 144 207  59 280  50 722 186 398  64 580 123  75 606 623 690 666 696 683 746 571 279  27 569 198 727 723
 177 255 497 603  67   6  14 426 493 700 581 176 529 674 318 769 121 759 477  33 677 818  78 413 106 750 154 805 733
 132  94 147 622   1 110 667 251 763 702 596 485 687   2 285 744 614 731  96 651 618  13   7 102 134 799 766 682 708
 629 120 173   5 194 647 754 284 640 695 813 659 741  90 170 583  91 441 229 794 740 725  21  80 193  20 143 747 788
 599 259   9  28  48 617 743 440 814  43 804 662 774 112  40 823 672 688  95  29 689 126  49  73 728 792   4 701 748
 768 355 610  16 371 755 511 418 790 464 494 726 758  10 803 777  32 692  63   8 714 109  11 349 269 811 380  23 122
 111  45 496  66 108 732 724 548 812 576 751 568 421  58 820 825 681 817  92 579 806  25 137 404  57 785  38 101  26

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00016e+07us (= 10001.6ms, 10.0016s)
Wall-clock time (full program): 1.00625e+07us (= 10062.5ms, 10.0625s)
Satisfaction error: 4
Number of search iterations: 1411
Number of local moves: 1043 (including on plateau: 452)
Number of local minimum: 51 (including on plateau: 42)
Number of resets: 0
Number of restarts: 0

Problem in column 1: 526 589 190 775 591 619 199 305 486 225 369 337 278 336 330 630 365 586 118 626 639 36 637 177 132 629 599 768 111 => the sum is 12208 rather than 12209
Problem in column 4: 822 831 717 783 780 710 735 292 326 313 678 204 213 338 361 372 131 654 439 524 267 234 144 603 622 5 28 16 66 => the sum is 12208 rather than 12209
Problem in column 17: 218 172 830 150 141 291 155 771 281 282 351 242 232 452 460 635 368 685 670 506 705 779 623 121 614 91 672 32 681 => the sum is 12210 rather than 12209
Problem in column 26: 71 81 42 31 244 720 257 240 160 275 500 165 394 289 457 433 415 523 585 679 693 430 569 750 799 20 792 811 785 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 465  82 776  16 680  35 772 798  10 268 763 209 122 795 786 774   4 796 793 146 298 817 235  19   8  21 811 137 773
 248  12 812 775 813  32  15 306 766 107 790 202 106 797 227 762  27 491 141 159 815 738 706   5   9 211 747 591 799
 780 779  33 767 233  94  63 759 310 369 768 215 405 803 308 787 414 746 138 217 726 245 783   3  17  13  73 689 672
 112 732 727  72 769  38  54 756 741  44 721 139 128 725 195  28  22 346 231   7 723 794 800  59 717 363 687 718 761
 390 733 677 708  66 597 113 250 644  98 367  20  23 707 272 655 736 307 197  50 731 716 630  11 120 238 688 743 722
 148 428 715 765 623 340 222 640 729  93 480  95  14 662 606 673 626 212 192  57 629 696 602 153 719  31 263 111 685
 266 697 668 700 683 645 286 660 745  76 173  96 699  67 160 698 261  39  88  97 593 666   1 651 605  36 632 552 669
 180 637  18 621  60 493 158 204 329 531 631 302 344 674 184 616 598 152 515 161 671 338 614 569 572 142 641 634 620
 295 577 578 647 585 476 205 656 635 562 168 551 594 543 105  40 127  77 101 609   2 615 617 550 540 281 297 566 610
  83  91 607 628 560 568 145 573 654 144  81 519 536 523  51 494 584 203 514 258 576 291 522 506 526 254 498 582 638
  74 548 611 529 565 564  90  34  70 547 194 499 563 463 532 596 530 116 331 439 492 608 554 571 603 313 108 484 581
 485 473 118 511 458 580 320 559 556 455 518 223 622 561 538 453 398 512 460 433 327 452 470   6 583 179 462  62 435
 537 542 557 471 129 467  26 520 478 527 341 479  48 409 449 528 368 501 333 508 535 502 604 319 487  47 517 477 503
 323 497 545 429 546 456 490  41 447 481 466 432 451 418 450 437 448 419 356 294 355 384 510 472 422 362 404 434 440
 380 445 482 406 423 388 351 496 474 392 426 314 417 549 475 312 381 539 400 410 444 413 459 505 345 403 365 489 326
 399 359 386 348 442 431 574 443 350 415 389 396 411 395 424 357 370 820 408 441 430 600 276 454 322 525 376 401 267
 438 334 427 288 412 379 555 397 358 364 650 402 516 416 374 342 343 705 394 385 324 316 486 265 391 742 468 378 360
 500 425 330 252 293 251 544 757 373 255 553 407 387 436 366 352 682 665 675 325 321 193 377 393 372 513 541 317 354
 777 240 335 349 246 287 588 826 339 300 383 318 269 284 818 421 827 311 822 382 304 469 283 328 259 589 270 232 353
 642 282 271 237 176 375 659 247 332 835 728 309 371 280 739 242 534 652 686 646 315 249 289 337 262 712 275 224 303
 692 274 301 185 181 299 663 285 778 823 533 279 171 186 785 292 210 624 789 361 837 290 236 164 226 567 770 169 239
 657 219 187 200 166 134 679 488 336 218 636 625 257 132 693 229 109 599 710 758 253 808 175 752 760 670 225 278 256
 753 189 296 149 221 241 558 590 524 633 264 784 170 206 461 154 214 627 821 347 208 244 832 661 791 601 260 220 190
 587 213 234 117 840 678 695 243 177 188 579 691 653 198 709 228 277 595 749 834 191 126 124 828 199 704 230 165 157
 724 831 133 273 457 201 748  92 182 643 131 681 740 167 658 155 734 504 464 836 196 216 156 483  99 713 102 838  52
 664 172  68 824 140 802 764 207 110 592 125 801 841  75 639 151 123 495 703 839 121 183  55 819 174 833  65 771  53
 446 103 509 162 612 735 804 100  71 792 147 690 830  42 119 619 676  89  84 684 130  46 618 814 754 751 570 163  49
  85 507 694 755  86 807 648 178 613 720  61 702 711 667  56  64 805  43  45 701  87 136  80 730 806 586 150 649  37
  79 788 114  25 744 816 420 104  78 737 143 829 810  29  30 750 781  24  69 825 575  58 115 782 521 809 714 135 305

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.34531e+06us (= 8345.31ms, 8.34531s)
Wall-clock time (full program): 8.40661e+06us (= 8406.61ms, 8.40661s)
Satisfaction error: 0
Number of search iterations: 1339
Number of local moves: 675 (including on plateau: 188)
Number of local minimum: 80 (including on plateau: 19)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 753 831 148 680 798 415 325  58 816  71 830 804 813 569 713 546  51  64  88 702  39  35 814  50  60 175  59 514 388
 134 453 153 128 582 589 706 220 795 509 838 455 745 274 660 772 835  32 335 101  37 629 618 656 119  70  73 645  46
 157 815 358 141 788 510  98 503 192 150 839 598 818 625 544 160 198 161 624 146  33 550 820 254 690  53 528 761  95
 732 647  76 466 700 552 792  56 404 110 824 775 822 166 591 683 193  94 108  63 114 525 812 162 121 529  77 794 221
  61 684 203 137 829 230 644  45 825 278 245 840 819 688 699 712 113 200 626 223 139 807 721  89 836  96  69 155 196
 241 635 834 709 823 616 131 145 576 140 387 841 756 796 236 827 284 235  83  54 186 693 722 472 173  49 212 177 176
 450 163 199 214 781 548 833 130 239 209 758 701 103 691 707 749 557 156 675 301 344 760 828 144 249 259 178 168 115
  87 181 263 787 737 603 399 462 281  65 171 710 224 657 632 704 651 174 715  90 261 826 682 184 194 152 233 300 784
 393 286 218 104 724 240 267 129 837 188 256 703 310 646 667 247 222 307 594 801 741 782 565 187 202 806 269 275 243
 265 287 313 407 452 158 228 384 277 448 734 604 293 673 653 219 383 266 769 776 599 258 520 323 485 334 410 380 311
 538 438 347 299 484 402 508 314 270 348 687 401 405 810 595 195 750 227 490 276 242 729 545 282 252 318 363 291 403
 329 381 330 346 611 204 533 374 319 302 280 808 304 560 467 201 409 803 563 424 832 305 479 416 207 364 379 290 389
 370 297 382 500 473 385 421 360 273 567 456 785 641 418 279 268 540 493 800 303 294 234 474 419 316 288 427 369 377
 400 593 429 398 390 492 471 362 559 406 422 354 439 296 391 461 308 337 309 332 327 475 821 463 495 447 349 255 428
 486 396 413 531 368 464 371 506 331 477 372 341 443 295 498 499 395 435 432 488 397 197 376 437 518 244 522 523 454
 350 444 465 289 208 619 353 547 445 478 470 324 357 436 581 446 539 328 573 494 426 571 394 285 491  57 578 411 250
 317 504 420 622 355  91 320 580 425 333 340 248 577 609 434 583  19 515 469 441 417 459 237 549 375 442 482 541 505
 392 564 457 483 356 132 433 213 592 502 542  42 458 513 543 487 408 423 617 451 315 597 190 122 366 431 460 497 623
 476 561 501 125 264  55 555 532 537 480 365 306 322 449 339 662 321 658 100 607 640   1 206 566 430 654 530 440 527
 554  92 535 600 112 638  97 681 652 351 558 183 526 361 167 225 298 575 352  31 519 536 226 521 512 612 568 517 610
 562 602 496 633 272  99 516 511 149 605 342 217 260 262 551 621 620 659 211 655 216  74 109 590  80 664 524 414 695
 345  18 587 596  82 127 661  27  22  21 336 367 650 386 189 649 668 636 169 534 613 579 133 643 585 642 689 570 685
 468  36 601 588 143 615  10 637 572 708 147 116 126  25  17  34 257 672 210 692 553 586 378 639 718 751 489 694 727
 717 556 634  84  72 170 338 746 771 606 123  38  86 124 120 696 238 754 343 627 481  15 205  26 763 752 728 677 719
  52 738 584 730 373 283  62 630  47 789 631  79 574  93 253  67 768   3 292 714 739   5  28 628  66 755 790 669 767
 733 172 698   9 107 793 711 720 648 762  68 135  11 271  16 231 676 764 142 614 697 326  23 773 686  81 674 666   2
 791  44  40 811 154 726   7 766 117 817  29 179 185 182 312 151 663 747 799 232 608  78  13 780 736 671 742  85 744
 805  48 716 778  12 783 679 797 102 731  41 180   4 229 191   8  43 705 215 678 665 412 246 770 759 748  30 111 723
 251 743 809  14 159 670 740 774 136 757 118  75 138 105 164 106 802 786 507 359 735 165  24 779 725 765 777  20   6

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00023e+07us (= 10002.3ms, 10.0023s)
Wall-clock time (full program): 1.00629e+07us (= 10062.9ms, 10.0629s)
Satisfaction error: 2
Number of search iterations: 1908
Number of local moves: 801 (including on plateau: 281)
Number of local minimum: 120 (including on plateau: 38)
Number of resets: 0
Number of restarts: 0

Problem in column 10: 71 509 150 110 278 140 209 65 188 448 348 302 567 406 477 478 333 502 480 351 605 21 708 606 789 762 817 731 757 => the sum is 12208 rather than 12209
Problem in column 19: 88 335 624 108 626 83 675 715 594 769 490 563 800 309 432 573 469 617 100 352 211 169 210 343 292 142 799 215 507 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 150   9 674 703 730 188 208  19 514 832 777 682  90 737  46 476 802 503 732 130 602  40 216 153 151 717 762 246 320
  13  45 763 686 788 167 244 147  14 767 720 758 580 753 291 672 774  32 746  10 270  88 685 118  67 687 725  82 517
 154 735 229 708 279 804 114  25 760 269 704 759 102 743  29 656 700 715 663   6 186 146 490 498  63 747  31 137 757
 234 633 803 667 723 733 298  60 143 681 710  22  73 591 313 702 318 722 678 726  56 119 586   2   4  51 749 115 697
  53 739 765 692  27 625 256 224 411 284 665  30  44 706 738 430 311 653 466 339 416  74 696 111 530 420 574 140 790
 630 718 652 571 688  17 163 260 237 376 705 782  84 721 196 616 174 736 631  62 379   5 579 442 192 698  76 139 680
 129 248 773 452 562 614 419  80 180 600 761 728 595 557 569 308  83 397 635 670 100 138  21 274 172 695 644 181 624
  48 637 632 555 610 584 475 444  55 124 134 675  66 669 254 467   8 662 458 691 576  70 438 453 533 474 775 156 486
 519 257 623 636 605 660 148 354 173 398 615 357 638 578 534 589 317 531 451  52   1 480 544  59 239 422 582 301 546
 551 233 593 583 523 608 101 275 564  85 617 278 666 404 693 414  11 347 592 165   3 594 679 326 599 365 558 184 598
 668  97 413 606 694 639 268  77  96 149 215 657 566 454 552 612 280 661  24 506 456 554 671  99 626 449 559  20 541
 259 512 536 457 424 613 472 273 293 402 540  93 515 507 409 189 407 388 568 508 312 596 621 372 193 348 471 405 526
 513 470 353 250 446 375 439 403 290  79  39 443 447 423 573 473 535 521 522 640 532 510 487 461 391 483 437 292 382
 463 144 542 538 459 428 465 289 401 543 609 492 469 389 429 527   7 445 377 481 436 387 525 441  64 450 560 345 504
 378 520 435 415 496 427 433 337 349 400 489 315 332 334 455 482 460 408 808 342 529 462 304 331 360 385 431 358 434
 396 335 392 319 282 549 418 316 440 328 493 333 509 406 321 805 501 426 497 341 380 412 502 287 494 410 390 553 374
 327 265 309 491 323 567 464 306 485 322 305 537 355 373 336 604 518 300 484 352 769 478 791 251 381 393 356 524 243
 228 252 822 648 359 362 123 505 545 231 325 651 370 550 329 572 185 825 198 488 324 477 170 770 302 570 236 511 281
 245 641 425 363 351 276 369 548 797 707 383 263 366 368 253 338 724 212 161 500 343 227 386 367 699 658 395 556 288
 818 711 207 255 307 286 716 585 499 820 191 218 299 202 240 159 619 266 261 120 364 271 171 819 676 629 223 563 714
 226 744 206 152 267 205 659 654 709 690 399 190 809 258 160 157 664 346 371 182 799 689 294 597 495 297 199 581 210
 830 204  37  98 155 195 740 587 756 642 448 183 262 561  72 310 807 771 121 178 650 834 296 813 242 201 283 712 221
 230 330 394  54 247 141 622 779 222 611 264 350 794 277 219 136 649 590 575 683 211 620 826 673 655 131 105 646 175
 116 241  41 213  57 787 772 577 745 539  71 220 627 235 839 158 528 295 194 214 547 731 166 752 786 179 814 727  38
 793 840 344 107 800  94 647 783 841 751 361 142 177  15 817  42 168 110 225 755 677 742  61 603 340 122  95 645 112
 795 232  26 811  68 836 200 827 479  12 303 314 754 272 784 125 565  47 133 781 634 780 162 588 684  18  65 833  81
 821 432  58  43  36 128 607 828 209  50 164 837 815  23 806 796 417 176  91 801 789 187 132 285 792 203 798 750 135
 812 768 127 103  87 197 741 824 618 468  89  69 719  28 117 249 643  16 126 701 776 734 601 748 766 169  78 729 106
 810 217  35  33 816 104 628 823 384  49 113 831  86  75 835 145  34 108 421 785  92 764 109 516 713 838 238 778 829

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.96023e+06us (= 8960.23ms, 8.96023s)
Wall-clock time (full program): 9.02095e+06us (= 9020.95ms, 9.02095s)
Satisfaction error: 0
Number of search iterations: 1413
Number of local moves: 798 (including on plateau: 244)
Number of local minimum: 86 (including on plateau: 19)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 730 546 241 493 441 719 601 109  55 621 809  47 745  36 673  28 835  41  86 319 333  53 793 654 107 789 839  68 398
 110 826  65 592 486 769 120 184 462 465 821 153 483 177 152 113 814  40 124 622 561 811 246 569  85 799  50 810 700
 125 753 836 308 423 812 194  29 131 788 825 430 801  30 689 137  26  99  27 309 195 712 743 517 320 823 837 161 129
  98 572  46 832 549 652 816 711 122 780 174 731 543 141 101 548 259 772 295  88 597 102 535 681 108 610  87 603  56
 103 248  63 552 828 803 186 232  82 553 151 653 720 219 477 698 348  37 264 190 705  39 834 707 805 715 648 235 114
 787 726 214 254 624 435 164 491  96 722 666  75 807 182 150 560 300 250 127 752 616 106 558 750 199 512 167 727 192
 115 183 144 289 564 533 830 692 160 840 299 695 193 380 198 791 243 251 255 798 185 200 371 456 797 685 236 696 130
 422 249 166 207 208 699 178 615 315 593 180 683 284 280 253 690 388 306 268 267 682 822 841 785 324 693 237 217 357
 227 838 157 117 354 623 143 285 334 565 220 612 298 204 428 412 500 294 368 210 775 365 668 744 336 829 258 713 332
 304 346 732 189 393 588 212 221 338 381 181 625 286 191 287 759 370 457 339 680 557 602 663 674 311 511 262 374 376
 261 375 411 290 317 679 347 373 327 395 833 813 337 239 394 244 312 147 618 453 344 356 467 748 489 638 326 275 401
 330 414 148 342 340 576 402 544 179 774 387 827 188 283 419 481 331 307 532 505 377 459 476 735 322 649 225 361 296
 545 142 378 742 384 385 224 522 321 794 372 379 448 247 316 367 163 806 429 318 484 364 656 341 323 629 449 218 463
 442 297 165 831 406 574 399 328 410 386 352 397 526 329 413 496 407 288 408 452 293 443 538 461 366 466 458 520 359
 444 389 655 263 424 416 482 226 716 568 421 426 534 418 325 417 473 301 369 363 303 382 471 436 390 314 478 351 454
 472 360 524 433 162 273 415 651 305 519 506 437 503 260 488 498 302 446 554 501 278 149 409 470 499 272 431 521 571
 391 479 425 667  23 396 609 507 400 358 353 536 123 468 469 591 343 455 245 464 529 405 509 420 451 362 447 228 556
 562 627 450 497  49 222  71 233 475 256 480 575 403 528 460 539 349 291 527 515 584 485 586 196 525 206 508 487 523
 582 494 514  12  48 274 645 427 540 257 658 631 518 599 510 350 547 530 335 432  77 579 118 234 542 119 640 438 559
 513 639 541 630  45 265 637 495 691 271 617  59 440 490  25 537 269 555 531  70 737  31 173 242 598 209 641 677 581
 650 439 434 620 646 445 747 252  11 121  44  84 676 566  81  52 684 590 626 589 171 633 135  24 613 281 516 746 733
 628  38 502  19 614 211 662 197 672 231 600 580  66 714 736 176 504 644 607 619  35 277 238 230 661 313 577 635 223
 578 492 778 734 647 154 240 595 709 205 583 279 643 657 310 216 345 567 404 570  95 636  14 132 594 156 819   2  54
 585   8 703  64 751 168 634 573 632  43 104 116  67 687 762  90 688 670 725 777 145 764 100 282 671  32   9 694 665
 697  74 771 660   1  93 756 763 669 170 134 355 728 605 758 175 675 755 749  61  16 678  80 155   5 138 563 187 738
 710 608 596  89 783 136  60  94 800 159 202 139  69 820  76 659 723 741 784 551 754 604  10 266 773 201   4  33 765
 702 172  34 642 770 169 587 717 786 126 611 158 215 818 721  79 213 768 792  57 729  21 111 112 724   7  18 664 686
  83 802 815  51 133  78  72 760 767 128  20 708  15 817 757 766 706  22  17 474 782 392 808  97 229 105 718 292 795
  13  73 701 790 796  62 776 383 704 140 606   6 550 824 781 740  92 779 804 203 270 739  58  91  42 146 761 276   3

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00031e+07us (= 10003.1ms, 10.0031s)
Wall-clock time (full program): 1.00637e+07us (= 10063.7ms, 10.0637s)
Satisfaction error: 2
Number of search iterations: 1525
Number of local moves: 799 (including on plateau: 202)
Number of local minimum: 105 (including on plateau: 26)
Number of resets: 0
Number of restarts: 0

Problem in row 14: 442 297 165 831 406 574 399 328 410 386 352 397 526 329 413 496 407 288 408 452 293 443 538 461 366 466 458 520 359 => the sum is 12210 rather than 12209
Problem in row 23: 578 492 778 734 647 154 240 595 709 205 583 279 643 657 310 216 345 567 404 570 95 636 14 132 594 156 819 2 54 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 833  38 737  26  97 329  65 241 773 195  75 802 234 823 786 748 736  22  25   5 171 836 209 170 803  82 752 782 814
 763 285 777  28 207 755 198 779 831 726  35 714 218 829  66 785 352  80  36 774 767 775 163 259 219   3 180 499 106
 750 745 119  20  16 754 165 683 741 301   6 766 705 716 270 749  57  18  24 708 731 735 300 733 290 792   9 161 145
 743 738 793  23 248 762 150 746 720 666  67 366 765 727 117 605 129 378  56 757 102 758  98 768   7   1 717 134  68
 667 565 695 110 342   4 217 662 739 651 127 729 319 724 365 277 328 672 345 631  11 723 205 657   8 676 633  50  77
 719 158 659 166  13  31 186 694 712  92 182 702 637 588  58 675 734 709 664 623  44 609 109 363 295 661 669 276 181
 591 619 656 688 601 693  30 643 689  34 149 671  17 681 338 670 284 618 162 638  27  49  12 573 428 583 679 227 159
 715 615 660 629 557 634  21  59 636  54 228  47 641 645 105 392 522 599 625 642 569 104 153 602 327 649 622  87  70
 531 550  33 658 551 600  45 570 614 515 250 703 654 616 137  53 299 575 684 528 465 130 131 648 264 576 628  79 122
 538 505 567 626 594 613 190 587 187 289 311 584 612 577  46 501 108 640 487  19 500 382 304 574   2 556 564 183 563
 535 552 534 572 543 519 262 527 560 502 174 604 202 561  15 540  51 580 193 485 581  74 278 547 140 481 589 430 578
 530 441 520 508 455 504 173 566 462 496 283  69 509 548 246 506  88 486 582 498 111 549 339 524 101 464 511 598 541
 391 454 493 544 490 507 385 492 412 539 287 440 252 427 494 456 309 452 483 460 406 545  42 458 297 513 409 435 337
 467 448 399 469 478 436 354 473 424 438 379 459 484 451 429  48 348 510 470 516 463 307 282 479 426 475 447 432 418
 343 446 477 384 369 442 383 476 367 431 353 389 523 275 491 445 425 368 529 336 466 388 349 325 480 489 439 568 453
 415 433 403 815 360 450 472 457 398 344 488 362 444 372 419 377 468 390 405 395 386 375 586 357 434 265 340 402 397
 374 423 443 373 306 303 471 394 408 387 497 417 725 333 404 653 400 376 407 422 334 314 554 678 341 310 410 381 371
 355 413 358 351 318 239 697 346 364 401 526 834 518 254 331 512 680 279 393 597 411 420 542 414 321 226 350 437 322
 257 317 316 324 787 292 558 271 235 221 630 281 251 361 790 449 546 215 711 266 243 347 838 396 776 323 231 686 291
 269 169 359 244 261 826 650 206 294 801 704 247 273 267 595 461 728 332 696 320 220 302 621 326 804 305 201 503 225
 288 841 255 212 756 315 603 245 627 230 655 213 789 199 730 211 525 313 256 185 769 335 514 178 820 214 263 312 356
 216 210 238 668 196 168 665 821 293 197 559 157 175 253 592 707 690 203 308 223 710 242 839 194 639 298 296 770 682
 280 138 176 237 807 164 795 272  72 822 813 236 791 146 673 249 810 188 222 120 258 555 474 760 553 151 135 677 635
 189  64 232 179 800 808 772  76  90 143 646 233 155 260 761 126 537 139 380 156 778 571 817 811 663  99 274 632 818
 204 118 148 240 286 123 764  81 121 533 698 191  85 208 590 611 482 828 229 781 579 830 722 144 819 805 172 200 617
  37 167 141 759 142 114 691  94  60 796 806 192 330  52 798  96 816 783 809  73 685 517 674  14 421 824  41 585 692
 136  95  83 732 794 706 788 593 113  86 799  89 699 184 532 112 133 751 832  29 115 132 700  39 701  62 753 812 610
  63 837 784 797 744  40 624  71 107 606 740 116 147 100 495 152 521  61 416 370 620 177 747  93 562 608 124 647 840
  10 825 154 827  91  78 835  84 160 713 742 596  55  32 536  43 103 644 780 652 687 128 607 125 268 718 771 224 721

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0001e+07us (= 10001ms, 10.001s)
Wall-clock time (full program): 1.00618e+07us (= 10061.8ms, 10.0618s)
Satisfaction error: 2
Number of search iterations: 1658
Number of local moves: 686 (including on plateau: 241)
Number of local minimum: 113 (including on plateau: 27)
Number of resets: 0
Number of restarts: 0

Problem in row 12: 530 441 520 508 455 504 173 566 462 496 283 69 509 548 246 506 88 486 582 498 111 549 339 524 101 464 511 598 541 => the sum is 12208 rather than 12209
Problem in row 27: 136 95 83 732 794 706 788 593 113 86 799 89 699 184 532 112 133 751 832 29 115 132 700 39 701 62 753 812 610 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  72 841 787  56  45 834 795  55  89  24 692 785  33 581  36 789  67  38 832 639  31 664 697 830 123  41 823 825  85
 657 516 838  39  50 630 819 358 663  87 813 724  54 820  70 796 109 710 831  80  74  91 691  69 617  51  66 833  53
 836 579 601  46  92 553 605 674 682 148 779 773  81 837 113 638 105 574 746 596 121  64 718 122 704  22  77 247  76
 564 714  90 138 762 827 508 561 670  73 669 826 100 835  79  75 177 534 365 679 191 129 701  88 665 790 147 158  94
 635 646 107 159 776 595 720 683 751 500 675 566 173 575 151 747 172 728 171 742 463 163 160 193 386 205 128 157  82
 666 840 640 419 124 828 453 636 778 190 711 170 179 822  71  97 613 507 165 801 150 204 169 818 609 142  63 217 127
 563 660 111 167 245 749 794 520 757 152 611 181 222 750 277 214 686 549 756 668 215 180 499 201 610 210 229 185 248
 719 517 731 554 219 824 550 810 621 168 230 194 211 249 228 115 622 221 308 774 130 839 313 285 780 241 236 250 270
 755 705 631 546 240 783 233 580 696 262 254 273 188 203 284 182 226 306 283 688 806 296 772 200 737 290 316 216 258
 797 808 562 656 336 571 264 764 237 767 265 357 282 223 309 286 276 231 260 814 318 294 302 460 721 232 255 252 310
 538 624 693 798 238 387 266 793 300 397 752 359 253 360 312 377 261 777 727 297 220 301 299 326 281 304 346 280 343
 706 370 707 792 435 533 319 529 503 338 307 317 399 268 342 339 483 623 303 356 335 440 327 322 477 373 274 364 329
 627 347 385 754 362 479 332 542 315 389 420 383 289 392 367 626 807 323 388 445 363 369 424 298 321 391 320 418 333
 407 402 355 429 354 422 378 446 821 405 349 425 414 409 371 328 417 748 408 441 382 406 411 368 330 427 366 450 340
 395 381 413 416 384 403 458 548 432 412 361 469 398 401 379 341 438 498 459 372 394 461 375 480 454 423 396 393 474
 410 431 485 434 492 376 443 162 464 478 374 428 444 448 433 439 488 404 442 288 476 536 415 547 110 400 449 487 426
 497 437 456 465 466 305 569 345 496 531 436   1 543 430 451 470 473 471 512 494 486  21 467  20 491 455 472 481 468
 246 526 380 325 509 334 104 146 532 515 506 155 490 475 457 578 344 143 535 518 539 591 195 555 514 513 484 505 495
 133  40 501 206 504 275 114 324 287 597  11 541 511 489 560 616 482  93 521 493 568 584 544 502 577 537 522 558 519
 189 103 447 267 565   5 552 186 510  37 582 573 619 634 583 540 331 176 545  15 654 599 524 587  35 572 604 645 530
 291  43 251 452 557  86 607 234 161 585 598 567 612 603 523 528 556 139 559 421  13 586 590  61 125 570 642 588 661
  59 108  98  58 551 174 593 390 525 649 589 606 647  49 629 351 136 592 702  28 713  10  47 677 690 614 648 600 676
 166 352  32 278 760  30 164 132 112 594 652 681 643   6 673 608 695 462  42 213 641 628 337 687   8 703 667 625 618
 178  99 235 263 712 350 662 183   3 680 140 685 644 102 709 658 153  84 659  29 736 651 602 259  25 708 633 717 650
 243 202 698 576  23 144 655 149  62 733  57   9 768 156 743 689 715 117 311 242 615 771 730 672 126 678 671  34 620
 212 224 527 786 740 218  52 184  14 744 120 101 734 187 700 732 637 739  26  18 256  16  95 800 348 729 723 784 763
 353 196   7 716 758 209  48 726 225 279 118 116 699 741 802   2 684 293 141 198 738 722  12 761 269 753  83 769 791
 199 227 244 782 735 131  17 292 208 781  19 145 770 137 745  44 239 314 134 207 765 805 725 829 272 775 803 106 759
  96 271 197 632 175 154 135 257 295 694 119 799 809  27 812   4 817 815  78 653 816 788  68 192 804  60 766  65 811

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00624e+07us (= 10062.4ms, 10.0624s)
Satisfaction error: 2
Number of search iterations: 1565
Number of local moves: 765 (including on plateau: 302)
Number of local minimum: 98 (including on plateau: 39)
Number of resets: 0
Number of restarts: 0

Problem in row 12: 706 370 707 792 435 533 319 529 503 338 307 317 399 268 342 339 483 623 303 356 335 440 327 322 477 373 274 364 329 => the sum is 12210 rather than 12209
Problem in row 15: 395 381 413 416 384 403 458 548 432 412 361 469 398 401 379 341 438 498 459 372 394 461 375 480 454 423 396 393 474 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 574 837 304 733  10  15 832 211  69 637  80 631 342  84 464 704 479  86 659 705 613 725   8 825  56  61 674 749  42
 586 150 106 807  34  91  75 234 625 548  64 117  50  92 806 753 680 656 693 834 679 802  82 148  90 766 712 841  88
 820 546 808 827 126   3 561 157 116 500 140 829 453 385 654 701 647 121 789 601 521 775 152 792  33   6  12  93  41
 624 570 146 556 127 519 149 716 138 153  58  83 653 612 147 588 730 102 569 688 755 838 611 175  68 826 698  97 213
 831 585 105 756  60  57 109 767 122 155 583 232 489 742 757 600 793 142 657 752 726 791  63 120 135 210 626  55 189
 684 823 124 193 217 282 200 170 125 770 220 777 761 176 594 516 528 581 595 321 800 275 233 840 194 276 269 437 228
 839 618  73 256 159 204 747 215 218 229 250 261 672 760 270 714 836 252 811 835 539 136 786  78 118 254 814  67 198
 156 579 160 237 300 113 165 163 191 349 246 185 821 771 780 737 830 287 713 824 663 634 195 158 206 461 798 319 168
 306 727 258 226 222 362 100 248 764 241 249 271 578 779 763 715 720 190 799 550 828 199 239 257 290 212 643 292 181
 313 278 172 350 284 356 230 317 224 785 309 299 667 710 590 708 690 262 794 682 277 403 345 473 273 247 655 214 302
 197 610 316 406 370 379 291 417 431 295 582 216 773 413 738 518 689 286 264 231 750 541 334 315 381 658 288 202 318
 833 721 235 255 139 280 310 267 265 420 330 645 758 783 259 661 451 221 423 361 331 323 358 266 380 477 393 660 404
 376 633 430 320 328 401 242 391 341 355 322 368 507 298 303 475 369 397 424 311 327 662 352 702 520 711 347 638 359
 384 301 337 372 443 540 454 436 432 427 511 307 580 419 332 494 346 399 364 382 694 533 314 336 374 577 360 388 373
 571 438 416 253 338 439 445 447 240 402 490 433 537 378 620 333 414 469 386 377 484 407 353 383 418 441 363 545 389
 390 487 410 517 396 415 408 440 486 367 497 463 296 426 434 335 526 470 492 238 289 506 474 354 456 324 448 460 405
  77 449 285 509 499 411  96 498 514 458 567 466 425 562  13 482  14 422 522 481 496 485 462 555 513 444 493 501 510
 572  24 544 421 524 351 543 459 554 435 171 642 145  59 495  76 180 119 551 607 467 478 615 530 609 394 576 532 536
 557 162 505 446 723 696 428 508 549 395  45 525  47 483 564 329 392 603   4 566 531 455 409 542 465 110 207 366 597
 387 192 635 457 629 596 573 472 584 128 558 512 174 164 523  74  87 468 141  20 491 628 565 648 666 529 591 182 535
 538  44  62 622 547 640 608 552 678 719 476 305 340 605 312 205 225 412 209 639 365  89 515  32 598 616 606  27 623
 599 108 621 471 699 703 203  37 717  26 649 560  30 568 563 186  98 488 151  43  39 429 664 744 636 646 129 772 630
 614 272 675 452 754 592  51 739 587 729 691 575 279 236 293 167 161 632 326  25  11  52 131 685 751 670  99 371 589
  79 504 706 748 745 769 502 641 736  70 593 559  46 602  22  54 400 695  17 223  36 669 673 375 776 281  40  95 553
  23 219 735 707 677 652 805 728 343 115 692  18 297 308 188 450 268 503 134 244 173 123 774  49 801 687  38 668 790
  35 325 809  19 619 697 676 782 627 781 665 604 348 294 283 107  94 740 154 137  53 114 700 112 768   9 227 671 759
 130 201 617 183 650 651 803 797 718 179 644  71 263  48 166  66 111 741 133 245  81 101 731 709 816  65 784 683 822
  85  72 819 103 812 818 815   2 787 746 765 442 344 178 260 104 243 722 184 143 169  31 732 810   1 724 132 480 686
  29 734 796   7 778 177 788 398  28 795 762 813 534 274  16 357 208 743 251 144  21   5 339 196 817 527 187 804 681

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.44207e+06us (= 7442.07ms, 7.44207s)
Wall-clock time (full program): 7.50357e+06us (= 7503.57ms, 7.50357s)
Satisfaction error: 0
Number of search iterations: 939
Number of local moves: 647 (including on plateau: 207)
Number of local minimum: 53 (including on plateau: 21)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 199 623 171 807 713 620 649  80 798 127  77 710 653 730  30 827 819 697 106 131 588 591 614  69  29  79  68 215 389
 173 733  88 817  53 621 829  34 193 612 603 762 699  57 133 749 130 646  76  32 781 800 687 167  95 788  58 752  41
  83 638 605 820 344 210 805 154 812 112  86 757 707 160 110 715 772 778  43  62 177 258 765 214 126 465 371 283 777
 116 660 631 841 779 217 735 176 157 124 105 252 316  65 350 822 756 686 155  75 663 240 831 153 691 419  91 278 825
 518 674 599 746 569  59 655 196  93 452 166 790 773 219  27 741 797 731 768 200 574 274 158  20 567 410 144 186 103
 570 272  96 645  97 137 689 180 207 318  50 607 835 120  94 708 683 828 808 198 627 191 758 488 611 307  78 351 656
  22 837 737 764 165 716 356  63 123 774 234 304 550 759 148 329 146 244  67 135 480 132 775 406 706 747 228 461 801
 624 281 254 694 792 145 610 836 557 108 364 271 345  48 213 684 232 780 343 287 630 794 334 238 187 224 107 394 833
 302 400 673 651 222 223 647 321 796 408 331 280 667 169 249 608 312 727 270 140 823 119 787 479 310 680 184 220 211
 584 522 802 541 319 577 810 263 839 586 418 206 376 192 204 421 225 384 139 493 455 242 202 301 643 386 317 241 521
 230 178 665 472 381 339 725 309 326 292 748 784 289 324 378 226 248 532 546 330 650 297 218 250 838 260 840 164 370
 498 298 717 538 527 284 633 405 380 305 395 261 233 388 372 430 464 457 332 279 742 399 431 255 753 342 286 491 314
 333 482 247 572 531 662 470 391 401 269 428 268 467 245 369 277 459 509 536 322 336 387 512 507 328 785 427 340 349
 712 453 693 382 275 598 434 308 383 296 243 435 357 519 578 385 451 412 474 368 510 484 136 251 320 485 377 415 475
 227 348 379 505 285 300 422 366 374 583 413 365 303 533 363 375 404 558 429 581 496 446 500 432 460 514 481 294 473
 337 416 403 392 402 547 447 517 315 456 259 237 471 407 561 477 497 393 466 504 580 409 476 367 194 426 417 490 346
 197 516 361 161 420 449 295 390 353 593 445 622 489 443 448 424 616 229 327 262 109 670 508 444 425 537 668 354 454
 266 545 576 373 523  61 239 520 469 564 325 440 423 502 568 499 323 121 534 675  66 494 515 657 291 483  17 637 503
 313 486 397 362 492 692 267 535 585 183 436 360 629 441 549 276 439 246 501 352 151 437  31 606 411 559 487 433 553
 179 468 195 205  39 290  90 579 506  55 601 495  73 799 589 540 639 640 595 458 221 634 462  44 571 539 556 592 555
 734 162 168 235 526 306 264 513  64 587 602 566 529 438 542 442 478 450 590 335 560 604 134 562 208 544 654  16 396
 152 115 594 256 618   6 359 511 552  19 565 644 685 525 701 554 563 100 582 793 163   2 111 635 209  71 804 695 625
 824 149 174  33  36 299  11 626 528 617 679 632  81 543 293 182 771 143 770 745  85 761  12 705 114 596 551 573 676
 681 118 609  25 575   4 185 704 636 613 648 628  42 147 530  40  24 101  14 740 104 786 682 671 311 658 664 548 721
 414 203  54  23   9 809 212 728 724 739 615  28 181 641 766  60  89 172 678 719 355 702  70 763 398 696 642 714   5
 597  82 190 188 806 814 102 811 170 282 288 338 128 826 703  35 666 117 273 659 732  49 358 760 711   8 813 700   3
 832 257   7  98 755 723 175 122 743 722 669  56 672 619 815  99  51 113 767 795 138 776 201 818  52  46 347 600 141
 754 769 661  45 720 718  84 821  87 677 690  37  47 698 782 125 142 150 231 709 341 216 688 156 816 129 803  21  92
 738 524 463  18 236 783  10 750  38 736 726  74 189 652 744 159  13 265 789 830  72  15 253 791 834  26 729 751   1

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.69778e+06us (= 6697.78ms, 6.69778s)
Wall-clock time (full program): 6.75997e+06us (= 6759.97ms, 6.75997s)
Satisfaction error: 0
Number of search iterations: 798
Number of local moves: 642 (including on plateau: 181)
Number of local minimum: 27 (including on plateau: 29)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 837  98 816 113 460  46 763 794 581 408 654 781 252  84 136 144 673 595  55 527 483  43 146 814  96 265 367 353 825
 145 841 291 599 640  71 773 815 808  65 789 661 165  85  92  88 234 828  93 618 725 701 142 691  76 721 123 201 128
 259 156 821 108 672  86 830 758 576 772 726 717  90 292 118  60 396 114  78 831 638 177 620 769 286 100 254 810  95
  75 314 307 312 645 138 532 535 685 780 799 834 250  87 106 208 708 512  74 827 689  61 225 451  99 801 117 839 199
 820 430 635 688 198  45 158 606 748 122 680 802 660 119  73  31 817 765 129 764 664 202 127  69 774 101 439 221 322
  40 185 242 154 663 836 792 651 796 751 762 783 126 140  83 111 741 575 304 678 729 103 213 454 245 223  80 585 164
 260 187 590 151 693 214 743 771 536 256 785 574 334 777 149 215 555 797 347 173 425 350 503  94 207 152 243 829 299
 240 328 557 184 233 180 206 840 811 712 224 371 782 776 323 222 268 736 188 745 716 671 238 244 226 273  77 681 157
 832 150 373 220 823 167 338 509 459 795 285 526 190  44 372 197 835 833 378 342 529 747 352 174 159 573 294 349 364
 318 303 280 274 382 195 270 754 424 805 255 679 548 326 316 461 556 264 287 629 554 308 267 313 329 351 809 675 277
 838 325 130 343 420 381 320 644 633 719 744 760 302 288 232 333 257 366 309 400 411 569 271 442 356 493 258 403 262
 276 826 742 261 390 429 487 520 602 453 435 368 502 522 410 448 194 492 193 235 593 306 340 311 216 471 301 458 428
 354 388 421 413 355 416 446 462 565 731 176 514 389 519 422 360 730 362 345 266 468 694 290 319 436 418 383 289 278
 327 467 236 456 415 296 498 419 405 369 269 374 500 732 324 692 610 376 485 375 542 433 404 377 283 317 444 357 427
 298 402 591 577 297 315 336 251 406 246 486 475 561 662 482 237 398 432 525 409 447 380 230 253 616 530 533 469 365
 310 339 218 544 346 393 488 414 496 501 628 438 547 116 437 559 537 589  37 457 465 543 178 332 426 480 344 481 566
 463 394  56 728 558 650 417 209 477 330 397 305   9 359 517 495 479  64 470 627 508 452 497 384 431 440 464 478 551
 358 473 143 647  81 596 450 387 445 379 370 204 196 466 568 639 169 115 617 472 510 386 611 550 443 491 597 455 391
 449 321 521  33 609 607 295 248 239 531 505 211 441 545 587 513 179  97 524 560 229 401 423 653 200 489 632 584 583
 484 476 210 724   4 434 504 182 241  57 553 171 385 515 549 552 148 518 546 133 499 392 528 516 666 571 658 363 630
 139 490 637 348   8 600 586 279 181 335 112 284 538 474 147 696 120 275 563 657  18 539 598 695 523 506 540 631 690
 399 615 132  63 686 699 588 412  58   1 562  28 183 293 608 793 219 121 784 203 135   7 603 642 668 756 601 709 641
 494 578  47 614  91 624  68 175 161 192 337  66 648  36 786 677 407 613 541 612  38 698 109 572 579 570 594 656 626
 619 697 395 676 723 652 191 166 217  35 105 361 341 703 700 738 110  11 534  49 511 155 735  17 702 646 757  59 604
 737 625  14 804   2 722 227 137 107 622  67 231 643 649 580 636 706  12 800  22 172 655 759 669 768   6 713  82  42
 205 189 507  70 767 806  19  48  50 682 153 102 623 621 659 779 788 683 739 131 124 567 715 605  16  13 746  15 787
 791 766 750 707  51 822  54   3 212 282  72  89 704 592 790 634 160   5 711 170 300 331 687  23 818 753  30 141 761
  39  34 807 733 734 710 705  52 104  29  32 228 582 667 824 670 162 281 798 163  62 775 714 749 752  25  41  10 727
 803 812 740 665 263  79 125 168 186 249 247 272 718 720 819  21  53 778 755 134  24 564 684  27 813 674 770  26  20

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.00591e+07us (= 10059.1ms, 10.0591s)
Satisfaction error: 2
Number of search iterations: 1420
Number of local moves: 695 (including on plateau: 208)
Number of local minimum: 80 (including on plateau: 33)
Number of resets: 0
Number of restarts: 0

Problem in column 21: 483 725 638 689 664 729 425 716 529 554 411 593 468 542 447 465 508 510 229 499 18 135 38 511 172 124 300 62 24 => the sum is 12208 rather than 12209
Problem in column 22: 43 701 177 61 202 103 350 671 747 308 569 306 694 433 380 543 452 386 401 392 539 7 698 155 655 567 331 775 564 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  82 116 755 134 718  22 249 791 106 782 714  52 840  27 776 722 143 771 769   2 176 797 687 477 675 247  31 230 318
 750  15 821 288 741  18  54 682 325 754 744 349 638 408 753 263  21 721 777 200  74 685 749 158 281 217 706   4  13
 702 369  41  11 812 328 724  57  48 766 691 803 731  73 760 167  60 729 594 145 191 806 756 740  33 225 121 717   9
 692 650 814 266 736  19 177  14 109 669 727 783 785  26 676 701  23 792 331 207 739 164 651 532  61  25  55 747  38
 647 223 664  39 689  90 577 252 269 639 703   7 214 194 618 107 653 437 767 307 655 623 787 491 567 197 677  12 104
 688 160 665  49 673 293 696 746  97 608 282 636 640   8 172 622 619 674 652 102 147 684 641   3 631 259 670  87   5
 555 658 715  51 260 149 117 770 524 628  20 584 461 358 707 155 483 272 735 582 710 708 350 561  28 125 482 184 277
 536 505 239  24 832 129 348 397 327 481 556 633 712  29 593 236 538 581 518 119 630 425 704 179 496 211 550 600  80
 698 607 705 509 557 138 590 716 148 493 300 412 552 606 599 101 589 563 614  63  10 617 376 206 533 139 501  16 251
 500 415 531  91 428 279 469 605 127 507 662 498 108 598 525  17 558 237 566 283 551 587 595 596 548 317 643 120 248
 511 629 728 492  98 241 604 663 523 620 310  47 621 611 624  92 562 432 290 464 571 448 407 100 462 238 476 132 213
 497 457 583 576 411 128 626 467 535 610 591 245  45   6 456 506 544 362 330 162 560 447 546 529 565 319 520 585   1
 382 515 361 534 539 192 374 537 410 475 588 709 173 634 387 345 357  66 381 385 549 351 478 459 542 188 489 419 390
 554 466  50 486 315 512 564 431 642 333 366 568 424 472 527 360 541 314 384 442 124 337 400 436 344 488 540 367 422
 334 672 401 521 465 406 287 514 394 339 490 468 354 326 353 375 386 516 264 444 393 463 426 335 396 661 449 332 445
 572 446 420 559 321 485 347 372 522 273 479 352 398 356 399 839 470 242 409 402 311 547 262 298 276 413 370 421 648
 270 404 435 510 365 508 336 359 471 613 423 253 654 417 504 502 451 364 383 543 434 320 373 405 380 297 453 229 553
 257 368 450 480  99 781 340 513 296 316 418 748 304 275 306 440 305 804 487 519 473 250 530 265 256 460 363 427 679
 346 312 244 291 569 574 157 822 570 202 800 403 371 355 308 430 313 678 616 454 258 292  81 389 186 452 274 762 700
 136 438 231 284 379 699 836 289 343 811 212 737 441 198 414 730 338 517 443 161 294 280 597 303 295 625 341 171 667
 322 683 278 133 395 592 458 286 150 255 503 165 725 646 189 734 209 309 224 615 789 261 240 656 185 794 168 579 666
 142 123 170 759 204 378 285 802 484 203 243 210 233 329 758 732 439  95 105 765 190 824 153 391 342 659 823 575 793
 180 221  84 825 235 773 761 299 644 183 768 195 723 738 219 429 130 267 126 764 254 226  34 175 774 573 232 657 720
 388 818 392 745 271 635  85 199 719  44 181 215 222 801 140 686 131 416 178 713 228 182 159 609 751 827 218 757 499
 169 144  78 586 580 790 163 111 833 187  76 795 118 680 193 494 841 151 115 763 835 137  40 645 166 796 733 152 838
 103 113  46 681  58 810 208  96 711 234 220 526  37 829  42 528 752 474 174 726 778 324 227 819 784 377 205 632 695
 807 828 323 813 201 805 820 268 602  32  64  94  71 693 114  77 817  70  72 649 110  56  69 772  79 799 834 815 455
  88 779 831 697 146 798 816  86 612  59  35  62 578 826  67 603 156 302  68 601 742 122  83 135 830 495  89 809 694
 301  75 154 775 112 637 141  65 668  93  43 660  36 690  30 216 780  53 837 627 433 246 808 545 743 786 196 671 788

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00043e+07us (= 10004.3ms, 10.0043s)
Wall-clock time (full program): 1.00653e+07us (= 10065.3ms, 10.0653s)
Satisfaction error: 2
Number of search iterations: 1591
Number of local moves: 633 (including on plateau: 128)
Number of local minimum: 95 (including on plateau: 15)
Number of resets: 0
Number of restarts: 0

Problem in row 8: 536 505 239 24 832 129 348 397 327 481 556 633 712 29 593 236 538 581 518 119 630 425 704 179 496 211 550 600 80 => the sum is 12208 rather than 12209
Problem in row 20: 136 438 231 284 379 699 836 289 343 811 212 737 441 198 414 730 338 517 443 161 294 280 597 303 295 625 341 171 667 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  35 677 827 744  54  24 768 763 129  19 401 134 510  59 286  49 825 794 225 620 110 787  38 368 769 755  45 837 557
  63 765 714 670 797 130 675 724 721  27 289 232 719 108  99 832 822  42 223 775   4 799  77  75  34 408 731 398 256
 278 257  81 717 740 266 660 139 625 803 316 197 276 166 690 710 745 810  73 213  16 808  15 231 697 747  66 771  96
  37 177 767  60 360 135 720 730 739 727  41 164 128 362 244 762 820  21 474 786   1 791 672  76 801 151 638 813  12
  72  78 741 766   3 331 752 650 746 716 149 233  14 238 131 676 609 634 138 693 224 756  86 370  82 695 722 703 201
 281 622 806 705 127 221 610 667 642 706  39 211  25 199  48 661 707 646  57 628 643  44 523  11 713 614 589 285 179
 226   8 758 785 696 234   6 685 645 709 387 214 671 105 247 627 124 748 342 735 167 674 115  50 718 666  43 680 144
  98 209  56 549   9 140 621 662 580  68 596 647 550 150 358 498 655 356 222 536 180 509 688 415 750 694 649 605 159
 240 183 558 575  58 380 555 519  13 616  28 157 570  64  84 541 447 619 687 599 568 607 422 456 446 617 678 528 394
 815 212 496 623 293 158 578 635 591  46  93 136 556 118 106 506 594 505 388 561 584 480 321 431 569 522 385 416 491
 263 421 548 588 443 384 527 488 564 529   7 463 313  69 502 701 665 424 397 573 466 521 193 458 468 516 427  20 271
  23   5 436 517 508 334 459 439 689 420 173 499 489 125 272 563 653 469 483 525 539 626 352 178 565 450 414 507 497
 379 546 532 406 137 262 432 581 323 641 186 188 552 354 492 560 481 418 534 391 465 577 192  95 511 411 554 631 378
 493 315 494 582 306 403 504 551 410 441 514 287 425 470 515  10 482 545 437 524 445 530 392 412 407  36 477 383 419
 373 467 513 390 487 417 433 260 520 501 303 434 600 453 365 449 438 440 292 451 291 531 337 366 341 363 542 448 404
 452 475 348 486 375 457 409 399 311 280 267 559 601 553 359 633 301 314 593 322 500 400 630 386 312 329 413 250 495
 471 330 393 275 367 503 430 282 395 396 817 270 793 841 374 426 405 310 252 461 344 290 428 235 460 442 472 371 376
 537 423 455 350 606 691 198 349 382 336 598 327 353 579 479 307 319 253 300 343 345 326 567 826 320 325 347 613 355
 704 258 351 302 804 473 283 435 288 274 807 462 239 454 402 340  92 333 592 297 339 364 273 760 612 298 299 736 338
 381 651 377 242 683 538 205 328 182 585 838 636 229 742 686 264 268 317 372 776 304 185 485 535 204 464 249 187 296
 595 669 219 195 629 602 220 174 789 309 764 788 141 839 604 176 156 284 254 346 681 117 544 245 241 357 279 255 737
 618 774 261 218 749 518 308 770 251 269 699 332 805 726 798 236 133 227 203 243 246 816 294 230 147 175 277 324 562
 644 761 152 215 389 586 715 148 181  61 639 533 648 369 792 155 335  83 733 207 318 109 265 821 189 757 773  55 576
 640 526 190 833 444 484   2 208 184 305 658 784 824 656 654 196 566 169 778 153 711 103 490 698  31 163 161  51 547
 692 738  90  67 597 615 210 200 206 202 476 684 120 664 781 170  30  87 811 154 708 172 754 777 783 145 217 259 800
 753 512 114 119  18 829 700 102 216  40 361 819  70 702 725 116 107 112 790  62 743 101 657 632 608 835 759  33 574
 772 780 142  65 831 782  32 126 194 543 751 611  91 624 295 728 191 802 228 160 712  26 840 603 237  88  94 132 729
 734 248 111  80 682 834 168 143 121 828 429 571  79 590 659 171 165 652 668  53 823  47 836 796 123  97 100 814 587
 540 122 679  85  17 478  29  52 572 812 583 637 818 830 162 146  74 795 663  22 732 113 723 673  71  89 809 104 779

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.28809e+06us (= 7288.09ms, 7.28809s)
Wall-clock time (full program): 7.34901e+06us (= 7349.01ms, 7.34901s)
Satisfaction error: 0
Number of search iterations: 967
Number of local moves: 602 (including on plateau: 182)
Number of local minimum: 56 (including on plateau: 23)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 829 662  79 760 740 360 434 563 816 176 275  55 401 814 835 795  57 128 206  45  64 512 739  38 139  23 419 619 626
 641 249 411 822 233 147 137 672 776 759 611 837 350 771 105 620 107  53 210 830  33  61 675  81 751  84 617 476  90
 553 813 182 668 828 790 573 599 605 836 655 840  73 154 161 141 109  71 600  44  80  89 764  43  48 120 841 827 102
 645 478 793  63 832 556 775 767 712 234 175 187 559 433 143  62 123 170 193 211  39 144 774  66 196 820 758 635 666
 778 191 189  96 505 587 699 588 374 839 464 121 188 765  75  94  77  60 743 252 112  78 757 831 838 439 379 826 264
 205 132 202 168 294 823 705 569 726 118 773 243 122 805  99 787 269 111 784 290 231 345 753 195 148 236 781 688 607
 629 702 245 104 819 800 825 639 415 494 791 159 244 201 217 809  74  88 748 169  85 309 801 237 300 220 310 469 306
 684 167 133 172 393 799 630 711 315 270 564 316 179 661 166  82 289  40 727 293 261 807 673 319 268 601 808 703 178
 240 389 689 155 508 218 321 824 761 555 482 239 190 157 332 390 145 474 235 353 700 348 796 291 215 341 221 834 806
 616 280 738 429 311 362 782 741 643 369 259 367 366 281 267 307 317 333 186 330 232 392 524 387 180 257 372 812 769
 542 250 638 363 340 230 192 547 625 320 792 344 135 327 383 395 284 410 458 442 163 346 704 226 394 718 501 342 798
 272 194 833 142 279 391 665 517 426 534 728 440 266 408 335 227 313 359 407 318 475 302 560 815 326 435 278 568 396
 562 271 331 298 650 323 325 530 308 636 288 364 817 287 248 200 744 357 285 400 523 473 328 304 413 276 388 685 595
 444 531 483 334 385 485 427 487 417 354 504 286 251 489 262 492 575 423 378 509 565 361 338 358 472 609 453 277 260
 282 421 499 585 299 409 448 669 493 446 403 447 377 351 422 398 381 339 467 452 462 465 414 459 541  41 337 461 441
 380 437 352 516 371 305 518 303 503 373 527 451 375 386 533 519 490 397 431 484 242 124 416 406 497 412 536 471 454
 420 535  95 539 384 349 580 292 254 460 572 370 100 402 510 551 405 506 622 603 615 295 119 538 449 455 604 574  11
 274 659 450 656 623 557 365 368 125 343 618 425 561   3 571 445 578 594  20 528 491 546  29 648 602 634 185 224  87
 591 552 468 511 418 631 438  54 428 116  27 614 479 456 432 651 597 480 117 543 488 525 297 576 621 204  49 324 522
 430 676 463 495  52 608 581 238 247 554 498 612 174 548 567 640 322 470 136 265 550 570 222 376  56 633 486 150 590
 108 693 466 637  15 526 115 156 198 515 457 520 706 691 507 682 679 627 532 582 312 589 146 399  37 586 106 126 496
 545 113 502 481 660 101 404 356 241 283  46 521 529 653 514 537 723 686 131 755 692   9 216 646 733 558 382  21 171
  68 129 355 424 695 130  30 149 628 697  76 742 670   4 713   8 513 752 229 729 654 644  19 747 698 707 577 197 225
  69 671 246 667 677   7 329 214 593 436  34 756 779 687 579   2 540 549 613 658 596 732  18  32 714 158 663  93  97
 184 566 263 598  31 110 443 151 273 544 678 256 763  67 165 674 649 768 127 664 770 780 258 690 152 721 624  28 212
  59 642 584 696  10 208  83 173  24 657 500 722 734 710 750 783 606 708 213   5 592 647 228 301 746 347  17 209 255
  72  70   1  13  86 749 203  91 223  58 177 701 719  16 794 737 709 777 772  14 785 762 296 683 797 745 314 164 681
 610  12 716 811  51  65 140 138  25 207  36 160 336 632 788  47 804 725 818 789 680 219 183 715 786 731  22 153 810
 477 724 803   6 720 583  42 103  35  26 199 114 766  50 736 134 730 754 821 652 717 735 162 802  92  98 181 253 694

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.10771e+06us (= 7107.71ms, 7.10771s)
Wall-clock time (full program): 7.16902e+06us (= 7169.02ms, 7.16902s)
Satisfaction error: 0
Number of search iterations: 1015
Number of local moves: 618 (including on plateau: 150)
Number of local minimum: 42 (including on plateau: 19)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
   1 784 178  54 563 720 206  94 699 731  42  37 173 599 235 742 749 728 255 521 798  23  48 197 788 577 789 469 410
 369  34 777 353 744  90 318  95 677 430   8 120 327  79   9 768 691 683 583 711 778 200 212 765 759 734 755   2 138
 567 630 307 752 795 796  67  96 750 654 293 157 179 161  59 569 773 674 222 727 109  47  27 708 757 712   4 587  30
 115   5 278 256 616 793 202 243 682 542 349 141 292 281  18 761 740 812   7 701 766 177 121 653 638  13 802 570 635
  83  14 706 694 513 700  64 266 737 439 128 171 133  32 633 624 736 800 291 199 704  20 163 679  15 695 596 642 732
 534 717 748 522 595  11 568 153 684 143  24 692  25  49 118 693 721 678  46 668 702 232 156   6 771 613 666 594  80
  43 764  52 786  26 718 546 277 365  75 632 648 372 247  61 603 611 585  35 251 697 103 363 662 614 604 620 273 576
 572 471  17 574 670 627 539 164 661 223 673 652 215 219 535 719 452  53  16 625 606 381  74 509 547 617 636   3 159
 602 468 655 543 573 623 612  38 580 607 582 590  55 116 117 716  22 297 167 571  12 341 339 544 515 557 639 593 135
 320 518 531 528 579 631 110 265 645 548 644 605 201 152 511 672 435 663 208  10 619 270  85 552 125 556 578 333 315
 598 554 446 422 490 484 501 214 352 560 589 134 383 442 504 575 779 351 129  63 664 145 151 443 529 561 505 111 530
 514 519 495 726 113 417 175 359 555 308 558 313 508 549 500 503 361 466 427 303 241 102 237 450 510 478 479 527 516
 536 485 488 489 608 326 451 108 209 553 615 434 283 360 347 550 402 565 502 312 447 334 170 533 491 246 532 458 375
 540 433 354 622 407 428 342 487 538 473 387 362 220 467 474 245 413 398 456 463 242 512 401 394 419 517 448 499 268
 358 524 462 460 506 492 314 464 350 321 465 441 497 280 537 832 455 382 388 325 250 403 551 331 453 343 379 302 344
 389 395 498 621 507 282 438 409 461 459 328 386 384 380 345 286 477 399 310 472 288 601 457 431 368 408 493 545 392
 831 405 226 496 423 340 454 295 357 316 486 332 437 426 346 414 276 404 729 301 637 470 628 377 385 319 416 429 254
 659 393 754 412 376 336 374 783 366 449 483 526 311 213 186 418 420 396 298 411 296 397 626 309 356 263 169 797 432
 264 211 271 588 415 355 224 760 304 756 475 238 686 658 819 216 185 233 600 525 424 640 618 330 258 269 323 305 259
 192 275 244 421 188 236 364 809 324 829 285 253 705 801 337 391 774 425 183 828 234 667 609 329 400 348 279 205 274
 147 826 373 299 257 370 294 665 476 647 174 680 703 787 181 252 187 289 657 799 105 482 781 335 239 371 176 367 290
 813 221  89  19 139 300 193 713 180 723 338 229 794 715 154 267 690 227 735 148 722 445 591 444 322 136 390 739 733
 696 194 810  71 126  93 827 610 494 228 317 230 698 767 770  44 218 203 707  41 189 710 480 184 629 217 284 738 634
 144 287 114 107 149 833 790 559 262 669 272 225 775 747 762 101  87 155 753 592 196 743 725 841 785  65  33 207 231
 440 834  98 261 803 814 378 817 130 127 260 807 746 481 671  45  81 140 714 306 248 823 681 182 165 191  82 104 780
 650 249 168 818 240 131 825 597  76 106 584 520 523 656 649  21 122  92 541 210 808 792 769  88  77 838 100 119 840
 730 123 824 137 162 150 562 581  57 132 751 806 811 821 804  40 124 198 836 689  28 688 816  99 158  58 146  56 822
  66 837 660  36 566  29 641 564 166  70 758 805  97  78 782  73 160 741 763  31 204 685 687 772  86 791  51 820 190
 436  39 586 142  60  84 830 724  72  91 709 675 676 646 745  69  68 172 651 406 195 776 643  62  50 112 839 815 835

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00016e+07us (= 10001.6ms, 10.0016s)
Wall-clock time (full program): 1.00622e+07us (= 10062.2ms, 10.0622s)
Satisfaction error: 3
Number of search iterations: 2190
Number of local moves: 834 (including on plateau: 204)
Number of local minimum: 172 (including on plateau: 23)
Number of resets: 1
Number of restarts: 0

Problem in row 1: 1 784 178 54 563 720 206 94 699 731 42 37 173 599 235 742 749 728 255 521 798 23 48 197 788 577 789 469 410 => the sum is 12210 rather than 12209
Problem in row 29: 436 39 586 142 60 84 830 724 72 91 709 675 676 646 745 69 68 172 651 406 195 776 643 62 50 112 839 815 835 => the sum is 12208 rather than 12209
Problem in diagonal 0: 1 34 307 256 513 11 546 164 580 548 589 313 283 467 537 286 276 396 600 828 105 445 480 841 165 838 146 820 835 => the sum is 12210 rather than 12209
