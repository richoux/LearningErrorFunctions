@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 661 729 157 112  59 317  92 653 726  37 489 556 612  41  86 119 706 501  27  96 717 504 204 676 354 567  57
 727 607  36 174 687 128 202 629 139 148 623 697 101  50 247 532 104 624 710 598 548  81 530 133  30 723  47
 680  80  33  29 668  63 120 606 490  21 121 552  69 136 724  61 714  87 685 620 705 708 438 181 720 462  82
 665 113 725  77  91  58  94 669 621 164 563 634  40 209 111  85 340 166 525 592 719 716 603  42 535 581 117
 537  83 615 715 679 695 165 718 185 142 696 589  84  97 156  90 239 207 508 497 510  93 383 138 435 454 145
 721 224 593 217 179 579  54 640 486 183 521 656 225 152 173 116 662 125 189 194 365 713 549  95 428 693 123
 644 134 460 146 115 155 694 590 386 124 691 566  35 256 153  64 478 248 171 699 704 132 630 198 561 652 169
 264 288 512 211 280 184 108 671 538 163 722 575 306 251 262 218 135 167 103 712 632 301 558 160 645 658 231
 158 180 482 291 357 315 275 326 609 329 520 657 114 178 176 543 272 250 626 287 707 284 601 226 468 421 203
 276 143 551 141 278 698 149 230 122 406 684 417 223 216 257 452 252 711 688 191 392 314 296 232 559 682 295
 300 446 499 242 298 210 261 269 440 137 683 473 245 144 322 692 312 253 215 350 650 271 381 258 654 565 285
 294 235 229 304 356 677 450 655 728 267 282 352 431 320 234 277 283 441 709 259 372 335 268 260 281 316 240
 313 384 286 344 351 270 702 433 308 701 382 332 206 297 348 368 341 363 327 347 290 412 302 367 336 366 379
 328 364 418 474 390 360 346 338 375 374 402 349 399 369 420 429 265 353 343 323 212 414 311 398 355 404 342
 479 471 449 358 445 403 410  74 331 396 391 345 236 519 477 361 419 393 395 389 334 339 442 388   2 279 330
 309 413 293 467 498 481 443 455 487  79  49 411 400 517  14 321 416 480 359 292 319 572 476 453  24 376 451
 409 387 274 397 310 401 448 289  73 371 430 373 456 432 466 437 154 447 444 550 273 370 337 378 140 385 424
 333 526 208 380 407 527 408 325 161 500 233 187 522 577 434  46 472  15 470 506 299 502 523 422 192 196 484
 439 524 186 608 515 427 491 458   8 509 127 220 485 488 507 503 514  23 118 569 227 529   7 483 303  71 516
 463 465 100 475 605 531 457 126 241 415 305  43 637 459 539 513 557 461  18  89 362  62 177 613 394 129 619
  66 546 205 568 492 536 405  25   3 649  48 318 533 562 586 263 602 564 582  98  10 643 109 600 249   9 584
 219 511  88 518 423  28 495  55 131 576 107 246 611 571 616 534 646 528 599 545  12   1 493 547  20 150 585
  99 597 266 635  45 162 587  34 505 541  72  38 425 469 554 594  39 570 596  56  67 580 614 618 222 228 642
  13 681 578 667  53 377 651 195 496 595 110 175 555 627 622 588  76 464 255 494 102  44 182   6 560 147 542
 237 703 254 436 636  78  75  52 583 673 197  51 647 574 544 678  70 540  16  65  22 659  19 648 638  60 700
 190  17 686 625 633 591 610 172 130 689 214  32 641 674 639 307 159 243  26 199 105 170 201 675 324 213 690
  31   4 672 244   5 604 663 168 553 666 193  11 617 670 188 664 628 631 151 238 200 106 221 660 426  68 573

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 4.21899e+06us (= 4218.99ms, 4.21899s)
Wall-clock time (full program): 4.27632e+06us (= 4276.32ms, 4.27632s)
Satisfaction error: 0
Number of search iterations: 883
Number of local moves: 591 (including on plateau: 180)
Number of local minimum: 35 (including on plateau: 20)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  57 293 630  19 652 651 707  71 219 171 598 543 466 712 709 657 648 596 303  42   2 658 166  11  66 109  99
   6  13 667 586 611 180 696  75 308  82  22 675 684 687 693  38 602 713 691 650  23 324  49  32  51  50 647
 173 403  10 577 459  62 717  87 654 344  93 302 689 540 580 420 201 640 623 643 116 224 135 168 111 362 522
  33 238 637 664 670  15 678 659  17 328  88 599 619 698 668 470  64 465  37 641   1 177  79 358  81 229 642
 161 155 546 676  63  86 636 298 572   7  80 706 628 567 529 103 618 548 582 509   4  76 239 102  98 600 666
 120 333  72 569 541 199 719 632  24 160 499 564 558 258 585 553 716 502 503 612  59 235  53 149 107  47 486
 136 246 412 589 551  40 492 148 588   8 495 626 545 497 464  77 597 591 338 409 489  45 167 170 115 476 544
 157 112 377 595 100 593 398 288 594  91 475 584 487 518 571  36 629 354 554   9 533 126 117 249 139 663 506
 521 186 613  31 268 437 472 513 416  21 391 523 433 404 435 106 446 516 477 408   5 150 485 192 263 601 542
 462 299 460 566 350  14 323 124 369 498 281 480 570 660 468 315 559   3 483 316 127 287 427 223 364 479 348
  69  56 452 456 482 478  25 500 407 244 365 440 530 418 419 441 203 536 458 376 448 445 431 184 494  44 454
 505 312 425 490 528 359 245  65 439 402 185 504 233 204 349 474 429 473 491 405 590 401 428 198 178 430 113
 463 215 519  12 414 413 313 319 410 422 375 330 447 393 421 457 347 279 297 400 392 396 467 295 385 423 251
 493 327 379 381 368 449 517 283 264 471 236 417 455 346 366 373 383 395 286 294 451 394 292 231 261 213 531
 378 374 342 329 240 363 276 320 444 351 390 290 434 380 501 415 399 336 341 386 352 389 370 535 254 309 357
 318 514 190 326 273 256 275 289 625 207 406 729 411 372 253 728 388 355 267 356 332 639 232 436 307 129 242
 222 653 340 269 140 343 272 337 311 708 481 169 260 247 345 335 257 243 525 469 274 624 291 620 306 683 131
 277 532 371 397 250 218 193 432 195 537 339 300 228 266 183 520 119 259 367 284 262 134 507 583 723 669 710
 604 562  97 241 701 212 220 321 225 714 189 165 156 552 110 361 384  83 271  92 605 555 301 539 662 608 325
 682 556 208 205 314 720 265 305 221 621 334 296  89  94 285 317 442 194 174 674 450 614 234 550 609 176 226
 453 579 137 202 304 711 424 310  55 527 282 200 118 151 130 622 649 610 191 163 197 627 702 578 526 152 255
 617 694 322 248 181 360 382 488 547 690 278  39 188  18 164 524 252 141  70 104 726 538 699 557 725 144 159
 607 568 230 331 685 656 182 592 270 443 680 211 145 187  54 158 142  78 121 105 692 511 631 671 515 237 153
 681 638 581 695 143 603 114 561 715 508 606  30 132  20 227 206 146 196  41 128 721 123 496 209 703 510 122
 634 549 727 179 280 217 216 700 101 512 426  26 175  35 214 615 108  43  48 686 672 560 587 724 534 125 162
 673 387  95  84 133 576  46 461 147 616 688  34  85  68  74 438  60  27 661 210 635 575 565 645 574 665 633
 353  61  16 138 154 644  52 677 718 172 573  73  90 563  58  96  67 679 655 484 697  28 705 646 704 722  29

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00026e+07us (= 10002.6ms, 10.0026s)
Wall-clock time (full program): 1.00578e+07us (= 10057.8ms, 10.0578s)
Satisfaction error: 3
Number of search iterations: 2195
Number of local moves: 783 (including on plateau: 260)
Number of local minimum: 164 (including on plateau: 29)
Number of resets: 1
Number of restarts: 0

Problem in row 14: 493 327 379 381 368 449 517 283 264 471 236 417 455 346 366 373 383 395 286 294 451 394 292 231 261 213 531 => the sum is 9856 rather than 9855
Problem in row 27: 353 61 16 138 154 644 52 677 718 172 573 73 90 563 58 96 67 679 655 484 697 28 705 646 704 722 29 => the sum is 9854 rather than 9855
Problem in diagonal 1: 99 50 111 358 239 235 489 9 477 3 203 474 421 346 434 729 481 537 225 305 424 360 685 695 727 387 353 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  60  28  51  23 663 578 198  52 659 681  92 697  90 658 532 710 704 636 233 672  33 531 148 181 709  47 189
  29 192 661 695  32 691 560 118 687 690  37 698 147 692 689 677 682 190 115 684  98 109  64  57  97 443  21
 507  85  84 662 625 240 655 138 635 243 204 680 213 649 678 637 668 242  79 665 173 108  81  89   2 146 667
 634   7 651  19 581 488 653  12 642 168  22 633   5 660 628 641 652  58  13 640 116  61 277 393 592   6 603
 253  74 367 617  66 572 591 178 629  95 195 626  99 622 600 601 612 153 543 232 598 112  48 151 597  56 568
 126 105 607 586 577 225 330 163 580 156   8 610 575 579 585 573 569 152 446 271 570  10 258   1 566  65 562
 584  24 567 549 556 535  41   4 553 229 107 565  78 508 530 517 544 100 554 546  87 231 482 149 552 127 536
 316 117 527 548 526 248 542  25 521 130 216 551 524 541 523 555 510 218 158  43 518 516 538 161  70 208 505
 298 274 471 493 502  15 529 534  11 203 268 539 466 481 513 497 498   9  18 433 475 448 485 221 522 175 477
 144 314 472 512 490  14 499 478 476   3 174 474 459 455 458 457 429 160 437 180 495 449 500 172 494 209 451
 220 252 424 402 447 432 438 469 464 391 159 281 407 396 468 430 154 416 420 136 479 440 434 222 413 217 444
 210 309 491 456 486  30 453 403 373 259 318 450 366 409 441 408 385 414 436 170 411 365 398 273 356 397 388
 401 426 404 425 386 395 427 377 355 363 321  34 201 415 343 419 371 394 387 421 335 389 390 319 375 399 383
 380 384 341 410 360 328 353 359 379 339 418 350 400 372 358 345 422 370 352 313 376 382 331 369 338 334 392
 615 362 349 323 342 326 348 311 357 368 340 354 327 361 381 324 312 325 351 346 344 722 329 280 333 378 347
 286 540 297 292 284 337 310 364 454 461 431 460 290 306 300 287 307 294 295 511 299 322 701 442 336 470 179
 669 519 288 303 305 537 249 267 272 320 423 317 465 374 257 296 720 275 262 332 266 247 616 417 308 301 250
 506 707 251 285 226 599 241 270 269 412 594 263 406 291 244 276 289 708 227 559 239 282 228 467 237 501 278
 445 694 215 235 214 428 254 260 265 558 503 261 304 230 202 238 302 630 582 463 199 650 236 462 245 487 293
 480 561 223 193 279 315 246 587 186 675 618 188 654 187 224 264 177 693 593 564 184 194 185 514 211 496 164
 492 207 166 157 206 509 712 589 191 647 683 212 120 176 219 197 196 614 679 205 644 182 255 574 234 533 256
 435 631 139 141 165 713 167 595 124 632 525 200 699 169 132 125 129 571 171 121 620 664 142 557 484 685 119
 576 639 134  94 721 452 104 613 102 545 619 137 145 113 183 114  76 520 673 483 162 528 583 711 155 605  68
 143 706 103 717  53 666 728 621 123 106 648  62 547  71 135  73  46  35 638 122 550 623 715 719  91 686 128
 283 588 725 645  75  69  77 643 473 489 627  86 604  93 111  82  26 504 674  88 133 606  55 657 702 590 150
  45 405 131  42 671  63 101 729  59 596 703  83 608  20  67  72  39 611 439 140 727 646 676 688 110 670 714
 718 705 716  31  17  50  49 696  16  96 602  44 656  27  54  40  36 563  80 515 724  38 700 609 726 624 723

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.35792e+06us (= 6357.92ms, 6.35792s)
Wall-clock time (full program): 6.41381e+06us (= 6413.81ms, 6.41381s)
Satisfaction error: 0
Number of search iterations: 1385
Number of local moves: 816 (including on plateau: 346)
Number of local minimum: 56 (including on plateau: 38)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 708 193 709 220 699 656  72 151 124  38 706  69  98  60 506 697 622  63 584 100  74 635  80 529 139 722 601
 502 726  79 178 517  39  73 136 472 128 569  82  32  47 144 646 424  78 662 724 540 623 446 429 137 714 707
 723 160  67 130 431  43 606 696 142  55 682  92  29  51 613 677 499  22 163 703  93 576  76 528 619 679 700
 688 610  54  24 566  66 211 145 268 560 259  83  99  89 585 720 692  90 118 729 658 687 168 362 721 148 455
 548 625  56 418 407 103  61  88 639 676 607 217  70 127 725 693 527 126 117 206  19 643 564 716 221  64 592
 505 629 718 332 428 727 226 205 262 531 180 276  26 263  96 169 645  85 194 271 246 578 640 614 199 174 636
 561 574  12 158 591 227 133  86 116 140 536 230 235 236 641 186 664 152 701  84 671 596 702 710 164 238 511
 555 445 222 192 615 253 249 684 170 214 153 333 131 248 694 621 660 267 215 617 356 335 228 691 301 241 165
 674 611 197 597 604 266 717 339 728 255 184 243 175 146 195 173 273 231 695 224 216 483 485 388 189 283 285
 440 593 257 547 588 354 237 715 105 705 270 297 369  62 218 324 208 711 272 288 242 497 346 325 412 209 264
 341 239 358 630 657 352 386 323 371 293 570 415 305 393 166 372 308 312 295 392  58 345 719 501 311 252 191
 314 389 411 319 667 337 213 234 400 294 395 281 322 712 382 306 367 315 188 292 258 462 313 666 347 321 350
 414 260 265 689 690 219 336 384 229 287 378 280 309 212 642 300 317 254 284 278 526 344 381 435 408 343 391
 282 380 405 203 419 397 326 416 210 245 436 331 390 509 508 448 427 286 379 444 303 328 250 320 454 299 460
 475 361 375 304 330 202 329 374 364 383 468 365 575 366   5 458 360 373 353 500 417 261 402 452 291 318 394
 298 387 523 176  27 421 463 398 122 225 430 290 422 355 494 316 543 338 327 513 399 244 456 474 512 525 177
 187 109 565 567 132 342 620 376 401 432  10 503 480 496 441 507  28 491 563 149 477 334  23 172 413 450 587
 112 181 541 554 111 470 351 370 279 451 537 542 598 498  52 277 449 396 544 307 348 368  44   6 522 486 461
 410 135 289 107 363 590 516 514   7 438  18 535 476 481 437 134 156 571 515 426 447 110 539 478 556 492 115
 147 150 504 171  40 589 487  14 520  65 577 232 439 594 433 510 141 404 420 627 573 403 120  48 434 634 579
 125 545 359 159 106 649  15 583 406 681 549 457 479 551 489 167 562 385  87 600   8 114  77  59 521 651 471
  49 102 580 442 113   9 198 558 495 466 490 552 469 581 624 129 155 637 493 473 546 377 200  13 488 595  21
 207 609 582 425   4 538 534 519 530  33  42 453 686 443  11 612 409 650 357 101 655 204 423  45 302  17 464
  68 190 524 340  50 669 644  71 665 465  25 685 653 557 275  37  91 659 467 459 602  34 559 296 533 201  36
 274 179   2 698 256 661 599 668 586 631 572 675 652 518 157  94  31 704 532 183   3  57 678 185  81  75 104
 247 240 568 672 349 553 605 138 618 680  16 654 673 632  53 121 143 647  20  46 482  35 713 251 550 108  41
   1 233 633 603  95 123 648 670 626 484 196 683 663 628 269 161 154 608 310 119 638 182 223 162  30 616  97

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00024e+07us (= 10002.4ms, 10.0024s)
Wall-clock time (full program): 1.00587e+07us (= 10058.7ms, 10.0587s)
Satisfaction error: 2
Number of search iterations: 2053
Number of local moves: 784 (including on plateau: 227)
Number of local minimum: 142 (including on plateau: 29)
Number of resets: 1
Number of restarts: 0

Problem in row 2: 502 726 79 178 517 39 73 136 472 128 569 82 32 47 144 646 424 78 662 724 540 623 446 429 137 714 707 => the sum is 9854 rather than 9855
Problem in row 9: 674 611 197 597 604 266 717 339 728 255 184 243 175 146 195 173 273 231 695 224 216 483 485 388 189 283 285 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  85   5 584 642  53 707 629 726 675 450 482  43 112 109  34 183 713 106 602  72 139 722 485 619 120 203 555
  44 115 620 679 723  24 664 597  97  37 604 246  87  70  76  35 663  40 396 697 196 704 127 718 151 725 720
 188  64 599 688  42 714 610 649 114 117 669  75 710 129  56 480 538  66 595  21 233 589 192 665 337 553 162
  80 157 729 477 258  89 701 682 229 654 336 580 719  57  69 150 611 643 212 179  23 141 379 318 130 559 693
  86  41 526 670 168 685 533 717  82 149 606  30 107 158 105 144 727 673 540 169 159 657 708 621 108 508 178
 303 170 677 471  52 628 587 548 119 575 633 352 666  29 208 182 232 140 622 143 131 574 231 615 224 570 173
 401 608 651 510 376 239 343 458 696 353 497 136 210 163  39 174 603 616 706 248 421 252 254 525  84  99 194
 724 175 155 489 113 386 556 617 301 648 711  50 262 256 200 257 680 205 631 699 193 138  79 543 309 235 242
 217 715  95 530 164 222 505 523 518 475 277 253 177 315 453 435 241 213 709 100 658 339 314 520 190 384 313
 202 118 413 607 185 462 562 517 668 671 165 180 304 271 378 338 478 201 172 298 167 375 681 582 292 282 286
 237 348 398 557 330 322 432 474 223 728 600 187 409 216 236 295 206 716 452 225 436 219 300 388 420 191 310
 306 639 199 423 394 406 411 380 494 230 283 186 278 412 290 544 692 269 238 264 531 296 279 451 244 261 455
 445 393 374 324 357 270 307 367 390 457 347 332 469 434 220 428 460 448 341 410 472 349 302 305 291 234 329
 459 385 360 486 362 397 342 323 299 484 146 354 260 226 381 416 334 308 447 287 346 402 392 372 407 419 461
 358 364 521 331 429 265 284 311 327 171 498 382 281 317 366 333 267 370 356 289 325 577 431 153 579 468 502
  93 373 399 454 268 542 259 340 449 377 176 395 473 400 456  58 369 514 116 591 463 255  83 293 684 550 425
 529 466 276 214 285 368 273 371 319 189 551 490 363 326 415 247 320 387 328 493 160 404 476 391 316 351 547
 335 524 272 312 630 365 501  74 422   8 441 438 437 467 417 383  61 359 263 586 499 426  46 181 344 560 504
 576 516 585 275 418 345 198 137 495 166 133 568 545 483 465 424  48 361 243  47 487 245 433 211 558 488 405
 440 491 403 297 446 578 249 414 481 250  88 227 536 592 564 500  20 534  73 430 266 519  49 350 464  81 513
 522 515 126  91 528 443  38  71 509  62 427 569 470 588 656 408 389 195 503 355  27 539 124  77 442 614 567
 612 439 209   7 632  13 218  18 251 636 110 626   2 444 662 674  92 532 111 552 511 221 321 148 541 638 635
 596 507  94 154  31 102 197 280 204 641 479 644 132 700 655 637 142  16 122 613 640 561 572  45 593 492   6
 527 546 156 135 565  63 125  78 128  28 240 535 537 703 676 721 145 590  51 121 594  14 605 650 691  33 598
 694  17 184  19 683 563 134  60 647  59 288 601 667 705 506 659  12 583  65 634 554 207 625  15 609  54  11
 581 652  22   3 702 161 101  68 152 549  32 698  25 712 645  90 689 147 687 686 571 104 695  98 624 294  67
 215 512 228  10 661 496  96  55 566 690  36 678 618 573 627 660 123 623 274 646 653  26 672   1 103   9   4

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.00578e+07us (= 10057.8ms, 10.0578s)
Satisfaction error: 4
Number of search iterations: 2217
Number of local moves: 809 (including on plateau: 314)
Number of local minimum: 172 (including on plateau: 36)
Number of resets: 1
Number of restarts: 0

Problem in row 7: 401 608 651 510 376 239 343 458 696 353 497 136 210 163 39 174 603 616 706 248 421 252 254 525 84 99 194 => the sum is 9856 rather than 9855
Problem in row 8: 724 175 155 489 113 386 556 617 301 648 711 50 262 256 200 257 680 205 631 699 193 138 79 543 309 235 242 => the sum is 9854 rather than 9855
Problem in column 10: 450 37 117 654 149 575 353 648 475 671 728 230 457 484 171 377 189 8 166 250 62 636 641 28 59 549 690 => the sum is 9854 rather than 9855
Problem in column 13: 112 87 710 719 107 666 210 262 177 304 409 278 469 260 281 473 363 437 545 536 470 2 132 537 667 25 618 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 354 518 669 595  91 716 100 635 445 653  96  73  55 706 494 499  65 436  51 701 122 532 136 151 157 123 682
 110 728  81 601  54 367 711 346  64 670 109 697  75 644 726 431  53 686 714  62 674  63 107 220 196 144 522
 555  31  89 647 725 457  72 589 707 583  67 663  32 567 672 724 143 671  71  66 626  92 108 103 655  60  80
 657  45 158 683 678 129 269 617 720 152 313 324 134 685 632 563 116 545 173 291 665 171  29 702 112  90 202
 142 248 119 509 709  68 293 218 556 504 606 565 115 609 634 150  77 646 156  99 413  95 721 133 695 723  52
 242 126 717 550 207 715 622 727 113 477 169 179 182 623 183 574 298 687 224 217 598 680 102 260 145 181  57
 625 282 139 475 602 591 719 258 186 404 154 161 272 319 722 146 178 536  78 718 349 270 415 705 243 275  33
 211 292 250 588 607 422 297 534 710 645 159 650 120 696 175 212  82 558 198 691 708 225 187 199 180 128 131
 236 148 320 652 618 539 523 425 231 372 284 339 305 471 245 259 168 608 684 699 381 194 409 185 164 132 264
 529  37 249 576 351 235 600 676 266 549 694 294 237 239 281 713 690 352 106 360 362 307 162 170 124 394 302
 368 166 289 577 376 454 531 277 306 322 703 495 271 240 256 698 234 603 141 400 263 488 251 303 227 118 498
 278 317 280 355 213 261 252 729 388 315 232 406 451 204 403 486 210 438 244 411 397 321 342 228 673 712 309
 163 353 357 350 433 253 586 590 331 408 506 332 216 385 323 279 192 547 341 387 215 356 380 481 373 383 335
 337 343 255 405 358 479 459 428 379 222 395 299 241 485 430 348 371 316 328 257 482 426 340 447 390 233 402
 226 391 474 311 434 441 496 419 330 429 287 334 401 446 466 172 375 478 476  59 443 361 369 439 329  34 435
 421 450 288   5 283 201 417 452 424 396 363 310 359 206 427 420 462 273 528 489 312 464 412 378 268 448 399
 483 389 510 176 393 407 188 386 502 469 117  25 345 125 630 365 370  10 229 511 468 325 458 543 336 628 467
 497 525 546 246 432 105 223 147 512 326 327 364 423 314 453  85 515 262 437 418  93 295 692 544 587 480   7
 460 521 619 155 265  87 382  70  74 189 416 579 514 470 516  36 578 167  12 472  19 507 519 611 524 638 455
 560 374 463  97 505 127 190  50 548 140 461 503 501 442  14 165 537 203 571 542   8 398 513 414 538 410 581
 561 490 568 230  42 247   3 193  21 197 627 557 629 137 592 111 575  61 677 530   2 508 484 160 572 527 554
  58 654 612  11 384  39 121 301 585 290 449  23 659 520 200 392 456 214 535 584   6  40 533 594 318 641 636
 491 582 569  94  24 700  84 344  44  79 688 570 675  83   4 564 621 101 643 221 660 500  13 540 347 465 149
 440 596 551 308 552 664 444  35  27 209  30 138 605  88  69 573 597 267 566  20  48 633 639  76 580 541 559
  26 553  28 276 177 274 517  86 492  43 624 174 668  15 153 191 651  38 377 616 661 662 667 604   9 658 615
 487 649  56 285 296 184 562 219 205 286 679 593 704 135  41 333 610 130 614  18 238 304 254 648 620  49 656
 338  47 599  98  46 693 195 104 689 526 300 208 666   1 114 366 631  22 681  16 642 637 613  17 493 640 473

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0001e+07us (= 10001ms, 10.001s)
Wall-clock time (full program): 1.00571e+07us (= 10057.1ms, 10.0571s)
Satisfaction error: 2
Number of search iterations: 2274
Number of local moves: 1045 (including on plateau: 398)
Number of local minimum: 189 (including on plateau: 39)
Number of resets: 1
Number of restarts: 0

Problem in column 7: 100 711 72 269 293 622 719 297 523 600 531 252 586 459 496 417 188 223 382 190 3 121 84 444 517 562 195 => the sum is 9856 rather than 9855
Problem in column 22: 532 63 92 171 95 680 270 225 194 307 488 321 356 426 361 464 325 295 507 398 508 40 500 633 662 304 637 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 371 252 176 703 654 692 588 222 206   7 691 354 650 250  20 483 163 590   2 695 683 637  47  56 628  13  22
 685 586 642  29 595 177 603 149  39  58 569 130 674  18 700 190  51 676 319 528 698 522  83  40 671 369  54
 639 549   6 690 181 649  79 644  80  62 652 256 606  15 602 235 113   9  34 609 697 594 665 620  14   1 554
 659 307 559  10 657 567 546 219 133   4 617  88 646 532 612  17 175 524  95 611 169  64 627  35 680 142 560
 565 151 498 614 332 520 582  74  42 338 632 485 702 185 515 196  24 616  93 634 558 128   8 566 647  91  59
 589 309 541 651 574 265 159 539  25  16 526 487 607   3 191  52 471 640 208 529 655  11  90 551 495 214 457
 512 129 618 453 545 544  12 518 277 166 531 132 580 131 494 417  69 476  38 681  48 276 421 552 550 263 422
 643 439 648 447 563 583 542 339 527 430 459 162 374  77  81  75 244 474 288  50 399 239 507 481 464 217 103
 511 198 513 135 458 564 621  45   5 147 599 408 572 216 360 365 241 503 115 335 496 341 290 573 521 262 461
 348 452 488 437 504 516 450  43 148 446 386 218 394 465 295 427 188 510 251 313 482 434 579  36 536 264 245
 499 315 376 433 381 367 517 153 509 228 454 311 449 480 466 424 416 261 107 384 372 118 182 497 443 257 456
 490 493 362 460 432 553 429 325 395 254 281 314 440 479  49 296 370 537 282 331 473 117 441 438 322 184 308
 352 361 587 289 478 248 593 489 492 302 329 204 287 154 397 405 391 442 174 415 576 145 237 347 398 373 390
 299 229 468 423 310 366 523 475 402 318 343 323 548 414 240 392 467 253 298 268 274 462 469 368 364 346 213
 300 203 316 283 294 401 269 324 718 675 232 406 404 279 358 238 230 377 533 342 327 275 292 396 393 581 409
 389 387 477 356 388 193 306 436 426 260 431 445 270 272 255 619 278 350 660 326 385 349 351 187 172 484 403
 286 682 472 200 727 202 413 223 224 226 705 505 164 345 273 160 284 259 491 375 199 562 380 382 400 506 210
 304  82 192 231 168 378 301 303 321 530 448 297 328 534 561 711 519 293 411 340 124 291 578 320 271 435 584
 194 699 266 215  92 419 267 631 535 596 180 317 140 186 543 592 514 285 684 383 161 156 605 280 207 355 353
 158 715 120 220 205 243 212 568 407 638 334 556 221 633 242 645 502 336 470 173 139 246 486 136 305 501 444
 455  57 227  72 171 183 709 247 610 623  53 729 225 641 110 658 540 125 673 108 337 525 312 667 119 538 141
 105 677 201 357 189 713  96 575 418 630 121 134 127 379 547 601 570 157 428  67 410 704 694 111 143 557 144
 167  19  65  94 708 195 109 669 604 696  44 714 122 625 720 101 688  55 500 155  78 451 725  97 104 664 686
  26 693 211 425  27 165  73 600 585 670  76 608 137 591 330 150 508 138 663  85 234 571  61 666 728 656 178
 249  87 724 233  99  89 152 701 635 687  31 716  28 653 100 179 420 719 689 412 112 344 236 146 116 636 662
  37 661  32 678  21  33 106 258 629 170  60 359 114 721 726 672 712 209 723  84  63 668 363 710  98 333 615
  23 123  70 717 102  30 598  86 463 679  71 197  46 577  68 555 707  41 626 622 706 624 126 597  66 613 722

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00563e+07us (= 10056.3ms, 10.0563s)
Satisfaction error: 2
Number of search iterations: 1920
Number of local moves: 771 (including on plateau: 291)
Number of local minimum: 149 (including on plateau: 32)
Number of resets: 1
Number of restarts: 0

Problem in column 10: 7 58 62 4 338 16 166 430 147 446 228 254 302 318 675 260 226 530 596 638 623 630 696 670 687 170 679 => the sum is 9856 rather than 9855
Problem in column 22: 637 522 594 64 128 11 276 239 341 434 118 117 145 462 275 349 562 291 156 246 525 704 451 571 344 668 624 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 279  81 715  52 669 680 637 150   5  50 593 632 595 651  51 204 621 176  94 699  72 116 114 661 648 462 148
 548 345 710 578 634 530 700  48 388 312 581 705 695  31 174   3  43   8 318 690  67  91 118 696 295 464  83
 685 175 652 589 666 653 704   1 654 110 618 642 493 523  59  89   6 178  13 628 156 528  80 573 183 195   2
 599  70 664  29 596 706 660  18 659 544 640 691 432 609 501  76 521   9  60 667  32 317  21  24 332  79 299
 484  36 635 320 374 708 430  10 507  34 627 644 582 657 606  78 616  86 181 551  58  75 123 517 245 128 543
 536  93 576  82 550 111 694 556 559  27 583 506 519 631 509 152 144 140 211 587 248  45 516 610 471 109  90
 577 200 477 253 179 399   4  85 491 552 674 524 643 586  41 311 567 103 121 591 370 525  44 327 316 358 537
  23 244 630 413  53 489 570 555 515  46 308 585 289 486 513  99 465 319 167 411  77 356 414 469 611 131 617
 476 343 547  92  35 684 502 600  96  33 566 604 230 574 529  54 423 362 496 479 108 451 281 488   7 194 601
 531 125 398 450 641 188 461 470 495 240 575 532  97 624 534  84 494 238  66 285 322 329 473 505 172 173 353
 379 300 499 572 415 455 367 365 498 153 298 520 347 375 511 233 134 580 273 626 260 444 242 418  47  11 533
 438 297 349 380 431 483 394 546 428 342 190 147 526 351 503 314 271 146 159 439 331 480 497 321 395 268 429
 421 305 405 387 384 475 266 286 381 422 563 454 485 323 390 325 149 368 207 472  55 363 301 474 409 304 481
 553 401 315 220 397 386 261 453 392 309 482 296 698 263 412 592 306 254 357 218 393 256 229 445 236 449 282
 677 419 294 478 402 389 338 467 272 407 143 259 371 168 346 466 361 269 287 227 518 424 337 339 372 448 377
 210 385 158 235 257 247 154 145 334 373 180 396 565 686 187 721 366 350 623 340 490 184 290 243 697 406 633
 313 447 283 288 727 355 443 457 274 344 420 291 280 369 169 463 426 433 452 212 514 278 335 378 330 328 246
 324 435 404 276 250 391 408 196 336 403 354 265 182 267 165 639 249 598 607 164 590 646 185 302 662 364 193
 117 441 292 277 614 487 303 341 673 251 241 307 557 223 199 460 206 262 658 270 692 198 709 237 214 437 189
 197 542 215 615 293 138 221 725 252 718 376 155 275 203 217 663 239 416 541 160 527 310 133 202 427 670 425
 213 535 234 689  25  95 352 410 219 468  87 100 126 104 613 687 436 625 224 136 359 540 545 232 671 522 608
 142 561 124 129 231 400  30 649 208 510 177  74 225 163 255 656 209 554 602 539 569 603 638 171 588 584 264
 137 558 122 170 326  88 115 112 162 682 284 127  17 132 672 678 216 719 679 141 571 722 707 226 605 258 629
 201 612 107 729 508 119  63 382 205 720  98 166  37  73 151 383 222 681 701 113 693 560 675 228 186 597 645
  39 562  19 650 105  62  12 668 504 647  57 139  64 717 442 549 711 622 688  61 579 161 512 655  28 500 102
  42 724  15 456  71  68 665 702 157 594 120  56 333  26 568 417 728 683 636  14 712 130 716  65 348 703 106
 714 619  16 446  22  69 101 458 191 564  20  38 192  40 538 459 726 676 434 135 492 723 620  49 360 713 440

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 4.44918e+06us (= 4449.18ms, 4.44918s)
Wall-clock time (full program): 4.50499e+06us (= 4504.99ms, 4.50499s)
Satisfaction error: 0
Number of search iterations: 595
Number of local moves: 484 (including on plateau: 89)
Number of local minimum: 10 (including on plateau: 12)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 727 173  64 482 500 318  30 132 190 480  42 541 626 635 652 154 134 657  82  77 585 672  60 665 475 673  29
 525  92  69 619 520 493  84  35 682 671  74 155 598 722 629  79 204 140 469 146 187 426  26 630 553 710 317
 643 567 120 649 650 168   4 150 697 721  51 692 687 360 725 112 708  68  73 152 180 194  99 609 102 172 502
 527 723  85 728 637 726  52  86 600 694 135 175 581 628 664 153 370  95  87 126 131 678  50  17 438 198 471
 519 431 144 653 410 684 195  56 177 584 121  97 667 647 456 148 701 159  98  89 625 197 717 130 384 703  63
 718  93 310 713 641 719 202 110 256 181 183 712 613 620 720 271 203  62 234 201 169 547  71 115 479 200 512
 499 119 210 715 227 522 685 228 654 255 233 290 125 214 269 275 591 179 167 566 477 248 189 283 558 441 636
 419 282 702 284 632 518 288 349  61 215 299 683 182 633 523 478 206 356 229 218 249 485 264 213 458 292 337
 231 676 161 582 223 611 286 226 729 309 245 430 257 320 574 127 328 170 716 236 416 216 156  76 679 219 656
 615 353 276 421 464 330 258 117 139 412 209 680 247 561 230 347 402 691 232 186 207 348 272 259 688 377 534
 244 301 260 357 243 379 100 369 280 295 724 623 404 505 583 158 439 411 240 267 329 486 371 217 211 359 700
 261 252 395 335 355 362 300 532 199 331 289 642 285 314 251 312 457 463 114 345 361 608 278 454 604 296 460
 595 176 560 382 185 413 414 363 380 368 424 350 418 376 386 246 281 307 373 338 451 436 279 315 304 394 341
 254 205 470 396 422 308 298 319 224 344 372 442 323 297 270 326 392 391 586 429 420 294 510 434 367 496 266
 306 274 324 409 340 133 157 406 509 287 321 388 423 313 342 403 481 450 302 550 265 453 417 387 508 364 343
 516 383 401 445 597 149 452 390 462 389 333 365 397 375 446  37 378 428 612 305 327 291 432 346 136 448  15
 461  72 540 311 237   7 576 325 358 336 573  28 473 399 484 627 166 474 507 366 443 425 551 332 107 517 160
 188 459 250 400 444 164 427 385 440 239 408 253  59 322 513 533 529  36 546 506 492 634 407 433 111 455 222
 225 494 435  88 535 352 490 437 447 545 536  65 569 163 129 571  94 544 601   8 165 339 570 498 147 515 293
 178  70 489 242  33 208 606 334 514 221 539 521 555 162 303 277 580 562 504 415 511 123 666 497 151 466 128
  78 556 592  34  83 596 467 552 398 103 528 538  49 193 262 572 577 640  41 690  91 503 668 487 241 124 192
  19 476 554  54 238  11 542 699 557 564 393 184  46 273 138 563 638 495  58 483 196 106 607 670 137 589 565
  53 568 618  21   5 594 531 549 116 530 593  13 113 468 143 579  57 674 689 704 537 405 263 465 354 108 105
 118 646 488 235   3 171 621 709 651  38 524  31 449 268  96 675 109 663 696 662  24  67 548  40 706  27 590
 374 599   2  80 578  44 660 659  48 616 711 212 174  18  43 588  12 602 351 645 686   1 693 658  39 661 101
  90 624 681 145  66 316 491 631  55 104 614 603 526  47  14 669 141 122 705 501 617  25 610  20 698  45 695
 472 191 655  75 587 559 639 707  32  23 381 142   9  22  10 575 677  16 543 644 714 648  81 605 220   6 622

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.7787e+06us (= 6778.7ms, 6.7787s)
Wall-clock time (full program): 6.83952e+06us (= 6839.52ms, 6.83952s)
Satisfaction error: 0
Number of search iterations: 1168
Number of local moves: 550 (including on plateau: 219)
Number of local minimum: 108 (including on plateau: 35)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 593 667  60 660 691 672 682   8 133 684 143  95 586 628 166 694 135 266 229 105 205 200 415  24 701  31 382
 679   6  56 632 640 683  86 184 158  91 215  71 212 675  45 707 659 195 674 634   1  16 583 577 663 711   2
 676 714 345 624 598 102  29  19  73 655 198 605 173 670 227  23 247 488 246  59 110  94 706 451 437 698 588
 668 557 197  76 658 669 661   5 606 293 170  26 144 643  15 646 150 154 104 629  25 613 525   7 514 599 501
 610 592  53 686 106 642  47 573 126 647 566 340 282 502  22 549 535  41  12 608  62 578  54 562  51 409 600
 645 616 188 585 621  32  42 194  37 688 165  20  99 612  64 556 541 192 543 580 519 127 650 584 129 289 537
 607 426  63 680 506 101  97 581 275 315  50 540 117 572  30 601 124  82 515 571 178 654 479 534 420 187 550
 522 465 207 524 594 567  66  57 615 496  92 568  88 666 267 516 405   3 478  14 486 431 539 499  21 141 528
 485 436 218 533 482 474 490 453 532 517 278 518  93 509 185 492  27  98 579  18 544 462 461  46 223 242 460
 505 357 258 390 530 446 555 430 305 191  40 529 546 440 317 591  36 199 443  17 370 471 504 468   4 455 458
 452 433  35 526 536 510 397   9  11 483 292 521 470 476 234 457 495 100 472 439 459 257 449 385 503  67 387
 500 481 271 383  10 329 334 441 417 350 424  70 338 353 475 380 467 398 245 413 421 395 362 412 428 422 337
  13 491 280 224 564 384 375 406 356 333 330 450 359 414 399 372 429 423 427 466 313 221 279 347 410 404 386
 388 265 322 394 477 298 364 303 365 392 444 296 297 425 321 352 418 456 389 523 378 402 284 302 432 351 217
 310 489 493 408 262 342 400 379 377 335 411 358 346 442 363 354 326 531 360 277 320 361 325 323 287 368 308
 349 391 512 252 324 268 407 373 331 494 419 332 369 299 559 403 343 396 366 295 435 374 288 248 304 473 251
 231 381 553 235 336 238 311 434 538 508 355 203 319 208 283 341 603 630 249 276 401 214 376 285 448 551 348
 256 307 625 254 259 123 344 290 237 617 622 367 718 327 561 213 306 416 233 312 177 168 328 301 729 635 130
 222 318 590 243 255 339 201 140 636 371 703 272 692 261 726 274 270 527 648 159 563 250 239 228 309 189 230
 108 149 623 226 179 152 172 704 719 164 709 210 649 190 232 216 697 705 225 720 206 204 155 316 582 497 146
  44 136 286 163 263 220 728 693 620 689 487 181 558 111 507 273 142 722 715 291 716 183 138 112 169 631  77
 182 253 469 174 269 721  78 651 662 209 656 196 597  65 565 260 727 240 167 294 151 454 118 281 552 193 671
 147 109 637  96 114 176 595 639 113  55 464 653 180  28 724 171 463 678 115 513 664 570 116 717 702 241 175
 186  52 627 128 219 498 652  79 687  58 244 708 511 145 618 202 560 300 162 713 156 139 589 723 548 264  87
  80 609 545  84 120 121 710 576 157 132 547 447 480  48 700  61 575 611 574 211 695 619 160 690 148  33 122
 236  81 685  34  89 614 445 638 644  39 393 677  90 103 569  83  38 484 554  85 696 673 107 314  72 699 712
 161  74 657 641 153 134 587 596 125  49 438 602 542  43 681  68 137 520 131 633 604 725 626 119  69  75 665

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00555e+07us (= 10055.5ms, 10.0555s)
Satisfaction error: 2
Number of search iterations: 1888
Number of local moves: 895 (including on plateau: 237)
Number of local minimum: 169 (including on plateau: 30)
Number of resets: 1
Number of restarts: 0

Problem in row 12: 500 481 271 383 10 329 334 441 417 350 424 70 338 353 475 380 467 398 245 413 421 395 362 412 428 422 337 => the sum is 9856 rather than 9855
Problem in row 26: 236 81 685 34 89 614 445 638 644 39 393 677 90 103 569 83 38 484 554 85 696 673 107 314 72 699 712 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 451 605 727  44 688 475 593 671  55  92 639  15  36 265 498 553 711  27  79 540  24 686  80  66 459 722  54
 598  25 661  69 647 579 633 549 113  96 630 141  89  21  17 584 701  64 107 554  73 673 662 135  35 719 680
 663 646 558 729 543 571 664 676  82 714 104  23  40  59 157 613 644  74 100  39  87 627  77  88 622  98 557
 521 724 566 575 587 628 609 636 271  68 536 111 163 110 411 529 675 120 133  45  32 614  50 560  91  38 452
 679 147 635 118 669 648 565 631  76 175 435  90 219  53 535 705 576 184 138 607  63 619 702 132 116 178 160
 725 117 589 470  85 726 682 713 152 176 703 126 115 121 541 645 611 167 316 652  67 473 169 166 204 193 151
 604 643 187 721 237 150 472 446 153 136 683 154 191 182 580 564 205 183 236 629 720 723 149  84 159 158 506
 581 215 456 685 174 621 499 582 196 248 189 128 156 162 708 709 585 208 161 476 227 503 190 203 168 229 596
 570 173 706 406  86 542 715 255 728 231 253 217 207 218 626 201 268 200 692 287 180 504 221 250 274 242 603
 522 258 206 291 223 261 466 300 531 666 338 230 240 311 710 494 436 442 216 556 288 547 256 279 334 211 243
 431 238 225 341 328 563 439 260 323 340 209 548 326 247 245 264 388 305 469 297 443 545 357 634 283 275 532
 447 457 520 251 244 308 463 505 319 317 302 318 450 312 278 594 280 329 292 322 315 539 314 301 289 490 299
 698 359 348 294 282 304 362 327 384 358 285 290 378 333 375 332 389 313 404 310 266 396 309 367 370 670 352
 363 390 355 281 366 335 349 269 374 344 376 351 432 422 416 360 387 401 347 337 346 342 412 353 425 379 343
 391 455 407 400 410 368 381 454 330 409 321 464 405 365 331 361 427 102 372 394 385 263 395 418 402 380  65
 345 350 398 369 392 383 276 356 526 386 467 257 320 397 421 371 105 440 430 382 479 267 377 364 438 465  94
  56 486 408 122 483 399 232 458 434 429 137 306 354 419 143 461 413 441 562 420 480 262 424 336 551 437 202
 246 325 373 474 448 293 210 109 273 414 433 487 423 417 403 324 533 272 296 170 213 252 501 534 484 471 477
   6 468 220 514 512 449 139 538 478 485 496 517 462 500 199 179   1 493 523  48 513 119 530   7 497 453 509
  46 492  43 224 527 235 185 164 525 546 491 510 516 502  18 155 518 577 444  33 561 172 481 528 511 544 307
  72 606 426 460 592  93 286 192  97 550  78 508 588 515 186 148 495 482 573 234 303 241 612 537 393 574  14
 228 601  57 507 568  75 106 112 623 569  70 637 519 597 195 214 144 617 445 125 567 270 552 616  60 555 226
  58  20 578 194   9 134 131 165 625 608 600 695 595 624 212  95  83 650 415 197 572  81  10 658 610 559 677
 146 583 129   3 599 140 101 145 620 653  49 642 660 638 259 181  42 694 586 171 615  61 678 428 654 124 254
  28 298   2 524 108 103  30 123 590 602 249 716 672 649 284  26  37 674 632 690 704  52 655 667  11  22 707
  41  47  62 198  19 295 233 188 277 239 668 681 640 717 489 142 130 712 665 689 641  16   5 656 697  12 696
 339 127  13 591  29 177  34  31 700   4 114 693 659 699 618  51  71 684 222 651 691   8 687 488 718 657  99

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.70375e+06us (= 8703.75ms, 8.70375s)
Wall-clock time (full program): 8.75839e+06us (= 8758.39ms, 8.75839s)
Satisfaction error: 0
Number of search iterations: 1778
Number of local moves: 705 (including on plateau: 264)
Number of local minimum: 129 (including on plateau: 26)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 315 644 588 534 397  44 353 392 640 127 621 118  19  54  23 131 391 150  12 696 684  81 642 544 632 660 363
  67 492 239 523 685 101  64  57 103  45 470  74 102 700 712  80 525 125 147 586 702 366 674 107 698 722 689
  20 708 729 717 673  52 566  35  94 179 161 144  16 487 726  50 711  93 718 267 727 531 120 104 672 143 412
  70 582 561 719 665 166 635 156 109 126 193 206  96  76 168 152 615 192 489 108 649 372 652 709 580 133 676
 138 657 669 721 400  66 723 247 413 116 180  26  97  47 680 245 186 256 701 175 667 461 352 123 655 160 693
 124 292 560 173 584 704 728  62  72 215 321 195 189  38 636 266 480 240 468  90 500 710 682 154 581 122 670
 714 697 251 619 373 288 398 211 302 164 203 381  98 159 608 153 688  84 112 210 643 565 136 181 694 401 522
 117 379 367 285 645 174 212 414 249  89 654  91 548 199 228 190 602 259 639 720 408 545 293 129 611 306 502
 305 337 622 656 616 299 617 209 568 111 216 110  63 149 202 248 661 443 666 177 334 418 335 187 438 383 485
 298 225 364 437 571 194 281 310 169 491 394 234 295 638 235 167 447 324 627 339 450 613 289 452 297 279 435
 205 490 425 361 663 304 243 572 146 458 432 342 343 183 318 287 265 451 258 378 559 184 585 176 518 227 482
 336 338 356 207 402 326 422 300 456 253 375 130 313 323 365 319 715 263 472 276 687 440 322 303 385 283 488
 396 433 479 359 535 577 155 424 308 255 226 556 219 328 252 389 420 529 311 223 296 429 314 230 327 331 554
 368 474 277 505 257 411 272 271 393 325 465 347   8 317 261 320 403 384 633 330 357 583 341 430 280 493 350
 348  51 355 409 387 439 312 395 351 370 382 463 264 229 499 426 453 436 434 417 233 244 421 467 260 441 369
 346  60 345 390 399 275 541 332 462 333 250 360 533 416 329 273 388 473 307 241 504 459 405 444 415 374 201
 290 495 538 483 198 377  24 466 618 460 286 423 512 431 386 404 262 587 406 142 200 344 486 284 170 469 114
 539 515  25 340  95 605 449  28 494 269 410 497 427 703 553 506  37 309 380 530  73   1 457 532 214 513 354
 653 407  86 119 222 442 631 514 278 558  61 448 546 607 509 349  82 501 182 569 208 135 519 562 196 454  17
 481 551  71  88 316 579  58 158 524 590 508 606 610 376 543 564  79 570 185  49 246  34 536 484 220 555 274
 593 549 221  30  59 647   3 475 445 557 428 552 371 591 204 596 141 478 358 471 242 171 419 603 145 464  42
 498 151 362 301  99 291 134 614 516 520 510 526 681   4 578 594 128 668 218 573  41 599  15 626  36 507  65
 592  11 589 163 270 563 601 527 503 597 678 476 683 511 105 574 477 691 113 455  46 139 232  32 121  77  29
 662  39 542   9 213 567  14 625 231 658 671 550 675 648 191 641 178 496  21 537 115  55 576  33 106 630 172
 517  56 148 547  22 598 521 690 637 679  48 695 707 237 528 706 197  87 162 132  13 446   7 664 157 623  31
 595 217  68  85  69 629 294 646 634 659 620 628 716 699  10 650 100  53 236 624  83 238   2 686 282  78 254
 268   5  18  75  40 137 604 725 140 651  92 677 724 705   6 575 224 713 600 540 188 692  43 609 165  27 612

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0001e+07us (= 10001ms, 10.001s)
Wall-clock time (full program): 1.00572e+07us (= 10057.2ms, 10.0572s)
Satisfaction error: 2
Number of search iterations: 2451
Number of local moves: 1059 (including on plateau: 431)
Number of local minimum: 170 (including on plateau: 49)
Number of resets: 1
Number of restarts: 0

Problem in row 5: 138 657 669 721 400 66 723 247 413 116 180 26 97 47 680 245 186 256 701 175 667 461 352 123 655 160 693 => the sum is 9854 rather than 9855
Problem in row 6: 124 292 560 173 584 704 728 62 72 215 321 195 189 38 636 266 480 240 468 90 500 710 682 154 581 122 670 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
   2  27  26 361 706   4 669 714 368 259  72 615 598 590 704 711 659 700 566 109  33  94 350 153  70 684  11
 631 685  98 132 614   9 645 322 647 171  32 188 325 698 687 682 584 617 597 227 256  23 133 268  12  16 556
 545 664  56 164 360 206 582 220   3  62  82 651 314 646 657 694 567 643 199 608 190  93  21  22 247 663 696
   6  55 303  50 626 560 557 154  25  47 633 668 413 616 636 548 261 640 603 327 222  43 441  15 156 612 638
 610 496 625  78  65 260 695 317 530 123 477 665 209 641 574 581 505 601 148  46 166 151  17  64  45 595 571
 552 655 630   5 493  73 593 520 526 105 249 435 407 547 621 476 558 271 609  41 175  10 508 113  52 594  37
 660 572  38 525 553 561   8 130 678  59  91 223 569 460 488 591 494 667 541 143 258 131 150 167  95 463 540
 531 523 274 146 446 454 550 278 499 246 122 607 196 587 403 528 495 551 462  20   7 289  57 543  71 486 484
 549 466 474  88 516 480 577  58  96 204 511 501 124 650 444 394 537 472  14 241 456 298 586 120 163 425 411
 457 589 503 374 242 564  90 170 497 180 490 510 100 492 542 471 580   1  60 235 475 230 396 429 198 404 576
 427 465 498 426 450 464  35 158 453 168 218 458 502 459 419 504  48 592 149 245 521 279 606 172 296 461 382
 401 533 417  63 395 563 440 470 483 378 253 275 281 389 254 277 353 436 405 509  13 334 448 381 232 517 355
 422 302 364 285 420 442 189 215 176 290 449 518 559 282 431 487 451 410 330 409 546 292 211 380 236 307 452
 248 377 297 373 332 375 406 331 348 418 234 398 388 402 371 391 299 424 336 414 354 358 343 455 447 352 384
 338 430 272 386 216 312 383 320 379 416 340 385 671 287 400 372 370 359 321 661 280 390 231 362 369 392 213
 244 387 365 357 481 397 262 329 205 306 347 515 683 294 208 339 313 309 356 536 524 438 489 318 351 186 316
 319 328 293 286 363 326 221 529 415 478 662 323 539 433 428 273 620 202 376 135 333 412 349 310 473 121 308
 267 367 324 335 257 200 301 599 162 346 233  66 713 210 311 184 237 707 263 479 697 554 618 337 585 342 161
 195 193 284 628 238 152 288 507 680 702 439 243 144 305 177 304 283 102 689 469 575 583 229 315 717 276 138
 239 228 165 699 187 252 217 686 159 654 269 674 155  81 225 255 300 194 652 656 251 491 622 605 632 224  83
 393 182 634 500 219 169 399 421 627 565 408 295 679 226 181  54 366 270 183 688 104 708 125 467 653  74 265
 690 107 147 720 573 716 201 639 250 724 721 291 443 127  92 174 344 111 423  84 157 527 140 648 512 191 103
  77 178 649 611 727 600 266 718 434 624 160  69 115  80 192 214 203  51 445 117 715 432 729 670 578 116  85
 145 207 673 532 126 240 264 437 197 666 482  49 485  36 212  44 128  39 544 705 555 703 692 681 691 137 185
  87  86 712 613  53 658 519  24 173 562 722  18  89 134 139  67  76  29 101 644 676 619 579 629 709 602 535
  97 719  99 604 129 710 468 514 119 568 637 136 114  42  28  61 118 345 341 538 623 672 110 725 677  19 642
 723  34 635 513  68 108  30  75 726 534 522  79  40 141  31 179 106 112 142 570 693 701 675 506 588 596 728

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00014e+07us (= 10001.4ms, 10.0014s)
Wall-clock time (full program): 1.0057e+07us (= 10057ms, 10.057s)
Satisfaction error: 2
Number of search iterations: 2154
Number of local moves: 1007 (including on plateau: 428)
Number of local minimum: 145 (including on plateau: 39)
Number of resets: 1
Number of restarts: 0

Problem in column 4: 361 132 164 50 78 5 525 146 88 374 426 63 285 373 386 357 286 335 628 699 500 720 611 532 613 604 513 => the sum is 9854 rather than 9855
Problem in column 20: 109 227 608 327 46 41 143 20 241 235 245 509 409 414 661 536 135 479 469 656 688 84 117 705 644 538 570 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 343  56 443  20 612 484  31 358 563  71 648 599 437 550  95 703 491  44 138 291 278 621 576 590 119 653  41
 114 724 713 120 693  50 103 661 124  38 672 729 642  69 708 489 144 622 507  68 134  39 118 171  42 687 674
 716  47 711  97 728 695  83 485 565 101  63 722 701 498 490 208 726 349 300 112  90 196  51  84 535 292 210
  80  64 636 705 616 135 139 698 117  72 709 694 412 150 679 646 574 496 596 105  49 106  60 541  32 543 201
 691 696 592 109 406  30 571 602 540 130 625 619 221 671 145 660 440 148 185 223  59  48 667 190  82 264 241
 670  29 627 116 578 664 131 673 175 166 641 635 557  74 173 591 525 205 115  58 429 719 267 204  98 506 229
 194 218 160 200 477 239 718 551 177  92 136 469 676 699 227 655 255 186 721 517 480 203 727 250 271 228 128
 164 220 141 187 720 233 258 725 666 102 211 246 624 237 247 643 516 723 662 575 497 207 282 184 127 199 259
 515 243 348 230 531 198 197 688 715 465 151 371 501 234 108 692 251 252 556 224 639 481 191 155 245 417 257
 178 710 214 104 505 235 161 549 226 354 179 346 409 467 675 457 269 520 180 370 537 311 206 418 261 482 532
 240 689 146 188 483 262 368 442 450 334 137 169 167 174 329 215 276 554 299 463 548 325 704 272 601 717 303
 212 213 266 216 682 323 236 156 293 360 629 231 283 492 232 529 277 487 344 375 488 366 315 534 338 361 617
 379 308 260 702 424 270 396 430 321 335 390 352 628 248 253 378 359 388 285 364 249 298 296 297 473 455 317
 452 281 416 385 279 391 384 342 312 377 304 459 337 486 284 405 362 336 475 306 401 414 333 265 369 287 413
 374 456 382 494 332 356 439 363 518 326 345 305 327 295 307 340 471 376 389  86 420 426 316 280 331 513 288
 341 324 395 301 193 353 392 183 509 394 351 275 422 523 436  52 410 367 476 428  81 435 444 478 462 318 512
 466 347 408 411 339 431 558 404 328 399 397 402 294 309 423 508 274 314   1 290 225 519 398 289 438 302 381
 373 393 521 387 286 447 470 372   2 441 511 147 383 400 464 479 182 165 386 608 142 407 510 461 453 143 322
 256 432 527 460  73 446 445  33   8 320 595 451 129 603 434 313  91  87 415 421 448 499 458 454 449 581 427
 559 110 539 545 176 610 530 163  75 638 542 567   5 609 555  46 189  10   9  11 350 634 562 585 589  79 568
 570 598 566 584 107 468  23 273 503 552 561  66 122 560  21  27 111 140 522 195   6 524 380 663 630 583 500
 547 684 528 586  25 493 651  62 419 600 605 533   3  34  94 162  13 268 263 597 254  24 569 544 614  18 665
 645 403  53 632 222 607 504 121 495 433 157  37 168  54 644 133 526 238  85 615 502 652  35 546 697 538 113
 125 357 100 618  28 564 579  88 514 681  76  57  70  61 474 181 690 680 637 573 669  22 365  15 668 310 654
 572 658   4 132 202  78 594  65 425 677  40 126 153 192 626 172 659 611 620 649 577 158 242 657 330  43 593
  67   7  36 640  45 170 244 149 209 683  26 159 580 553 633  19 678 707 472 631 656 685 706 712  14 319  55
  12 588 123 686  93 623 650 219 606 714 154  89 604 613  99 152  96 582 217 700 647 536  77  16 587  17 355

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00024e+07us (= 10002.4ms, 10.0024s)
Wall-clock time (full program): 1.00581e+07us (= 10058.1ms, 10.0581s)
Satisfaction error: 2
Number of search iterations: 1952
Number of local moves: 860 (including on plateau: 309)
Number of local minimum: 141 (including on plateau: 39)
Number of resets: 0
Number of restarts: 0

Problem in row 7: 194 218 160 200 477 239 718 551 177 92 136 469 676 699 227 655 255 186 721 517 480 203 727 250 271 228 128 => the sum is 9854 rather than 9855
Problem in row 24: 125 357 100 618 28 564 579 88 514 681 76 57 70 61 474 181 690 680 637 573 669 22 365 15 668 310 654 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  12 148  17 262 680 676  50 723  98 706 585 177 667 161 310 601 628 191 527 648  90  24 646 594 226 245 163
 217 241 669  29 162 700 606 630  62 665 668  72 722 301 288 647 720 174 393 708 237 170 296  63  57 286  71
 122 110 704 108 234 696  30 655  16 634 637 230 671 164 266 635 602 130  95 609 539 511  54 614  81 109 599
 135 625  89 595 664  78  34 212  91 682 551 331 652 218 220 699 486 277  28 636 613 155  13 632 368 153 618
  15  74 597  80  39 610 603 430 573 490 640 125 612 300 156 591 631  23  47 649 566  20 294 574 343 190 583
 488  37 590 113 560 580 593 165 571 565  32 173 642 100 168 629 550  55 466 586 605 223  82 622   3 121 536
 157 554 563 522 428 598   2 315 508 588 529 139 581 532  44 644 506 279 287 144   8  45 451 440   1 473 517
  36 229 555 263 663 420 582   9 523 478 520 541 503  73 251 569 549  53 496 158 512 145 448 564  96 120 499
 193 449 557 201 456 327 474 641  88 510  59 476 524 215  61 469 416 414  83 131 460 500  33 576 589 425 528
 114 445 482 171 439 542 521 312 538 531   6 454 533 117 118 409 353 254 505 154 548 105 207 453 562 495 487
 395 494  67   5 372 513 579 189 268 621 426 483 329 272 328 514 467 358 405   4 485 360 242 396 507 376 400
 321 470 477 307 468 278 406 147 534 344 412 432 342 530 137 356 367 374 422  40 543 364 176 471 411 446 281
 441 421 461 381 283 498 326 341 481 402 553 339 357 224 252 275 447 350 354 231 404  56 415 437 403 419 304
 433 385 472 615 297 246 361 359 455 379 604 417 285 232  31 334 370 292 479 227 515 333 392 429 308 260 345
 264 463 243 465 255 332 436 256 366 267 390 253 718 349 457 325 305 394 424 322 261 434 373 383 407 348 365
 284 318 239 525 323 408 219 639 502 222 235 547 303 727 484 397 443 351 238 375 195 317 380 126 418 371 269
 535 302 435 280 386 423 340 673 181 270 444 225 175 306 675 575 330 319 249 431 337 202 464 346 250 355 347
 710 363 185 492 127 320 213 526 387 221 205 316 210 645 683 209 146 624 236 519 200 399 295 143 570 705 206
 537 258 208 378 228 178 410 203 309 150 291 183 314 398 654  93 274 656 600 578 198 545 556 160 653 544 299
 204 247 216 462 401 389 233 382 187 180 293 552 188 561 725 182 651 703 196 289  68 689 413 259 179 724 282
 611 686  94 276 273 186 458 313  84  87 103 712 123 559 617 111 271 298 711 568 633 338 324 475 240 572 132
 577 438 169 662 214 166 311 129 151 257 726 149  18 607 501  79 159 674 698 384 167 659 679  85 493 509 194
 608 138 140 685 369  66 714 626 691 119 107 672  46 684 427  86  97 715 701 388  35 678  75 116 504 124 244
 546 709 106 623 133 101 142 211 128 362 112 592  69 620 352  52  41 265 452 459 688 658 660 697 248 136 693
 518 336 692  38 619 141 104 558 657  22  92 197 102 540 491 172  25 702  76  19 290 729 567  64 728 695 681
 661 716 694 690  65  48 442  27 719  77  51 677  70  43 643 192   7 480  49 587 616 707 650  21 713  58 152
 721 199 134 627 717 335 666 184 687  26 584 391  99 377 516  10  14 450 638  11  42 489 670 115 497 596  60

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00036e+07us (= 10003.6ms, 10.0036s)
Wall-clock time (full program): 1.00589e+07us (= 10058.9ms, 10.0589s)
Satisfaction error: 2
Number of search iterations: 2006
Number of local moves: 677 (including on plateau: 233)
Number of local minimum: 158 (including on plateau: 31)
Number of resets: 1
Number of restarts: 0

Problem in row 2: 217 241 669 29 162 700 606 630 62 665 668 72 722 301 288 647 720 174 393 708 237 170 296 63 57 286 71 => the sum is 9854 rather than 9855
Problem in row 12: 321 470 477 307 468 278 406 147 534 344 412 432 342 530 137 356 367 374 422 40 543 364 176 471 411 446 281 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 668 705 103 136 674  43  36 412 634 665 481 623  55 548 118  74 639 176 451 620 529 600  51 182 513  22  97
 433 491 710  52 470  20 120 681  69 715 133  49  18 657 119 670 728 158 535 662 721 625 117 632 126  34 110
 462 101 468  42 684 651 498 478 727 696 147  79  46 471  88 143 724 175 415 448 146 616 140 493 725  76 116
 347  84 153 161 428  83 168 646 726 399 351  68 151 700  93 690  67 512 514 621 659 702 100 714 417  91 210
 601  85  82 260 720  21 226 722 113 694 686 150 225 652  61 661  73 718 611 104  66 613 277 585 522 229  98
 563 165 215 102 545 653 219 178 177 648 194 701  53 544 220 729 719 357 504  71 589 424 156 154 640 171 164
 550 106 162 107 461 221 685 655 208 238 586 112 216 618 315 671 192 366 549 138 716 408 159 704 382 141 189
 631 247 272 252 568 253 263 689 142 197 201  70 167 711 537 230  87 300 628 673 656 622 256 244 591 134 234
 271 270 255 692 531 227 279 174 211 287 669 187 237 633 191 242 486 526 713 149 183 385 166 676 610 364 241
 261 181 199 285 578 389 344 319 278 546 667 228 186 223 180 454 193 355 274 666 624 204 706 213 638 343 321
 455 250 363 697 325 386 330 322 302 303 594  72 262 179 294 723 254 534 430 703 240 327 298 310 304 329 269
 346 339 218 528 248 393 380 214 249 345 337 499 312 532 276 328 326 539 354 609 383 362 372 290 577 266 233
 444 311 207 301 292 257 650 374 324 377 341 403 296 387 336 283 712 318 224 334 369 379 436 320 373 313 494
 473 291 316 331 501 410 335 460 317 350 307 371 323 246 243 289 306 394 392 305 282 571 637 333 259 349 465
 342 356 280 375 469 431 390 543 409 251 338 443 453 268 184 293 416 131 503 396 370 258 340 423 284 432 477
 157 479 411 352   1 475 466 500 482 541 421 555 358 442 434 111 414  59  65  11 523 463 359 519 418 400 439
 420 360 378 487  99 570 405 419 288 376 125 368 437 407 496 406 123 309 401 388 495 397 459 206 144 402 490
  77 435 381  48 127 540 559 122 438 395 367 398 510 422 485 464 348 124  96 511 384 492 458 558 129 445 542
 115 353 516 365 520  26 404 297 474 295 467 538 576   2 564 505 446  78 508  23 588 497 450 130  35 565 518
 314 517 569 449 170 425 480  37 427 617 413 452 583  86 619 231 557  75 114   3  60 456 525 447 190 551 488
 476 560 521 506 275 630   4  12 515 507  89 308 606 185 484 483 663 391 267 188  62  44 627  32 286 561 573
 148 605 604 567 245  13 599 547 595  45 222 536 533  41 682  29 472 607  54 598  58  33 629  47 281 509 556
 128 584 554 602 457 553 574 198 566  25  19 596 709 172 441 527  63 597 135 105 173  90  27 572 195 590 603
 209 614 645 691  16 217  10 580 615   5  95 641 660 203 552 155  50 202 502 361  81  15 635 636 196 677 592
   8 664  28 608  39 707 644  40  56 139 232 708 678 273 581 235 679 593 264 299 163 121 108 265 426 654 643
 239  14 587 212 332 562 145 205 489 169 675   7 626 236 680 137   9 612 200 440 575  94 672  38 530 683 687
 717 688 658 647  80 699 642  31  24  30 698 693 579  17 582  92 109 649 152 429 160  57 695 132  64 524   6

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00018e+07us (= 10001.8ms, 10.0018s)
Wall-clock time (full program): 1.00579e+07us (= 10057.9ms, 10.0579s)
Satisfaction error: 4
Number of search iterations: 2104
Number of local moves: 820 (including on plateau: 301)
Number of local minimum: 195 (including on plateau: 42)
Number of resets: 1
Number of restarts: 0

Problem in row 14: 473 291 316 331 501 410 335 460 317 350 307 371 323 246 243 289 306 394 392 305 282 571 637 333 259 349 465 => the sum is 9856 rather than 9855
Problem in row 27: 717 688 658 647 80 699 642 31 24 30 698 693 579 17 582 92 109 649 152 429 160 57 695 132 64 524 6 => the sum is 9854 rather than 9855
Problem in diagonal 0: 668 491 468 161 720 653 685 689 211 546 594 499 296 246 184 111 123 124 508 3 62 33 27 636 426 683 6 => the sum is 9853 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 145 678 109 199 231 671 176 674 179 136 618 563 607  46 149 646 665 630 623 622 605  11  30 165 577  98   2
  94  32 304 156 682 146 706 275 135 624 677 512 635  82  65 590  55 673 115 406 198 672 370 572   6 696 377
  10 689  36 108 626 106 367 633 192 283 644 636 251 157 669 593 170 284 564 659 662   4  24 486 359  14 629
  50 639  15   3 631 675 206 104 651  81 712 655 223  64 627 628 599   5 494 556 524 617  34 295  26 159 582
 110 600 121 642  25 538   9 413 553 573 549 555  38  61 193 423 417 554 581 498 643 548  57  17 615 129 393
  80 497 514 105 540  84 287 175  40  70 490 670 336 163 158 647 571 541 634 344 502  41 597 614 550  86 519
  12  89 216 449 493 552 404  73 508 545 557 679  78 209 120 401 385 684 609   8  21 454 451 650 595  37 576
 100 468 477  92 511 534  85  29  60 113 542 478 500 463 525 299 528 589 592 180 443 448 335 501  18 432 513
  49 469 570 402 435 569 237  52 123 527 437 506  19 102 117 660 431 586  42 182 407 427 536 422 562 516 470
 155 612 585 551 515 532  28 257 509  20 533 483  39 596 171 285  23  27 459 137 376 559 520 505 403 495 480
 310   1 481 539 399 507 188 337 471 439 140 371 253 447 360 467 358 518 485 355 375 419  13 383 391 372 476
 332 357 338 350 503  16 324 389 450 356 380 362 466 396 351 265 374 461 289 504 446 298 390 365 421 309 363
 297 319 340 429 426 479 252 361 119 452 465 329 424 203  53 381 526 445 433 499 364 416 288 464 394 349 348
 488 420 458 260 438 321 440 496 281 415 430 301 327 544 457 207 414 409 320 213 323 384 368 342 259 195 345
 397 487 293 318 400 250 408 316 313 387 326 333 347 460 412 240 411 428 314 267 334 434 322 405 307 697 249
 453 369 233 474 261 410 510 574 484 294 278 354 311 312 378 418 242 215 353 535 291 150 269 691 184 473 339
 561 286 230 388 164 274 455 666 185 160 208 366 591 214 303 219 641 262 714 373 292 282 317 300 713 425 266
 482 225 235 315 726 138 529 580 276 725 392 398 229 221 341 331 441 687 238 245 141 346 272 228 246 632 236
 565 162 308 133 290 205 475 610 729 264 243 352 489 588 645 306 280  79 648 547 273 218 698 189 178 220 161
 517 277 694 271  58 234 664 676 197 202 382 239 601 558 640 637 241  35 210 661 167 256 217  87 579 386 169
 568 718 531 118 154 148 727 638 653 692 258 201 566 603 575 254 103 143 127 248 680 211 194  56 263 200 226
 701 379 247 702 522 693 521 444 279 196 227 173 690 620 255  31 244 183  91 144 166 606 147 685 151 668  90
 686 168 174 699 305 186 602 472 177 604  71 101 594 232 683  72 721 270 224 567  43 587 717 330 268 190 112
 681 523 302 719 187 212 139  54 442 598 125  44 456 537 560  62  99 131 134 584 720  48 703 710 296 663 126
 652 153 625 708  88 107 436 181 728 492  67  76 583 616 191  22 132 658  97 328  75  95 700  47 723 654 621
 649  96 695 611 152 546  68 172 578 116  45   7  74 657 462 688 715  33 343  63 707 716 667 222  66  51 656
 711 142 724 114  93 722 613 204 543 491  59 111 128 704 395  83  69 325 122 130  77 608 619 124 705 709 530

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0002e+07us (= 10002ms, 10.002s)
Wall-clock time (full program): 1.00574e+07us (= 10057.4ms, 10.0574s)
Satisfaction error: 2
Number of search iterations: 1936
Number of local moves: 700 (including on plateau: 236)
Number of local minimum: 123 (including on plateau: 33)
Number of resets: 0
Number of restarts: 0

Problem in column 7: 176 706 367 206 9 287 404 85 237 28 188 324 252 440 408 510 455 529 475 664 727 521 602 139 436 68 613 => the sum is 9856 rather than 9855
Problem in column 27: 2 377 629 582 393 519 576 513 470 480 476 363 348 345 249 339 266 236 161 169 226 90 112 126 621 656 530 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 650 653 161 147 582 631 545 726  34  62 710 116 480 501  29 657  65 439 561  35  59  96 522 665 521 136  72
 719 683 205 194 622 159 647  79  33 709 469 109 478 209  48 572 705  93 311 544  39  31 658 115 633 724  67
  71 496 708  57 506 529 590  76 232  58 664  95 571 715 114 528 673  17 326  36  97 634 547 646 721  43 105
  47 271 231 577 601 697 720  98 131 165 378 365 285 193 137 714 129 133 696 120 195 101 670 240 616 700 645
 725 158 149 142 273 702 564 511 649 121 638 117 140 483 253 722 716 246 656 197 368 119 630 184 229  86  77
  74 596 187 352 581 629 712 198 332 509 687  99 691 174 211 286 186 152 611  92  87 662 272 460 157 620 238
 711 356  68 150 667 164 215 220 183 237 713 247 507 699 168 675  88 298 666 127 717 134 493 113 707 267 265
 250 307 212 391 663 573 423 412 179 122 729 484 301 685 106 280 139 222 505 728 160  50 579 347 578  66 364
 200 172 531 689 555 283 550 304 727 287 703 296 216 180 155 406 279 312 488 358 290 244 156 602 208 236 428
 466 233 171 169 600 330 266 203  81 723 276 274 615 614 592 387 357 652 598 173 248 214 401 534 225 300 153
 191 453 414 339 457 508 206 374 557 289 254 249 353 259 337 341 607 328 595 395 281 400 334 331 372 386 245
 235 642 348 306 382 201 314 288 258 228 355 718 388 370 189 230 275 369 535 475 315 648 409 442 219 421 295
 261 207 350 632 560 408 513 333 371 297 385 264 546 342 223 243 472 360 504 202 375 256 338 262 380 255 516
 410 309 343 257 316 263 270 459 299 224 302 392 454 363 482 291 417 485 397 344 349 377 346 481 541 390 294
 323 446 310 108 227 359 376 490 381 495 284 335 398 489 188 394 268 324 551 336 384 487 416 422 462 440 162
 351  20 491 438 176 320 499 399 373 411  51 217 361 396 549 239 526 591 107 486 282 589 317 393 464 366 443
 308 431 321 325 452 468 437  64 413  15 588 277 569 556 322 450 449 576 213 329 527 318  78  16 379 540 434
 170 103 471 693 415 444 340 128 503  52 432 354  41 448 362 530 430   2 196 609 525 436 477 597 473 479 145
 467 585 429 465   9  90 192 456 199 383 102 419  82 435 599 269 426 451 210 494 536 402   7 617 558 455 518
 293 593 425 125  55 515 497  30 674 418  84 420 110 445 523 123 407 623 175 104 575 502 542 218 519 427 433
 405 260 512 510 185 562  40 625 563 221 132 520  61 461 532 447 580 154 148 470   1 404 552 112 424 498 476
 539 606 167 570 313   4  83 492 594 604 345 639  22  73 553  53 548 640 100 605 681  26 143 624 144  10 677
 612  70 603 389  18  94 182 514  25 586 190 403 242  14 678 305 241 537  54 517 559 608 610 584  21 661 538
 626 613 668 234 441 181   5 463 554 706 252 618 695  56 543  24  42 566 319  28 568 644  69 126   8 130 676
 627   3 474 204  45 587 118 583 672 669  49 458 654 151 637 567 141  13  75 701 327 621 166  23 138 533 619
  80 500 251 704  63  19  27 635 660 628  37 684 303 177 682 111 565 574 226 671 659 163  85 641  12   6 692
  44  89 655 688  91 135 524 694 178 636  46 686 292 367 643  11 124 698  32 679 651 690  38  60 146 680 278

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.00577e+07us (= 10057.7ms, 10.0577s)
Satisfaction error: 2
Number of search iterations: 1893
Number of local moves: 721 (including on plateau: 283)
Number of local minimum: 165 (including on plateau: 28)
Number of resets: 0
Number of restarts: 0

Problem in column 8: 726 79 76 98 511 198 220 412 304 203 374 288 333 459 490 399 64 128 456 30 625 492 514 463 583 635 694 => the sum is 9854 rather than 9855
Problem in column 22: 96 31 634 101 119 662 134 50 244 214 400 648 256 377 487 589 318 436 402 502 404 26 608 644 621 163 690 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 679 115  19 424 538 502 725  38 673 450 285 406  64  70  77 555 652 415 143 602 719  36 650 153 132 106 627
 120 709  50 536  44 675 490 164  33 667  49 126 121  72 537 562 375 549 585 665 668  81 181  54 703 392 647
 624  48 729 633  37 588 716 717 105 398  55  31 144  61 580 687 482 495 672 437  87  83 152 137 418  69 670
 683 622 183 136 108 676 226 569  32 690 711 512 597  86 161 628 468 122 666  94 643 695  88  59 182  25 193
 714 546  63 659 715 565 177 698  56 635 112 539 125  80 713 217 399 133 712 141 631 473 359  65 117  27 184
 634 509 249 604 462 662 190 150 305 726 116 605 297 260 694 657 559 189 637 154 180 341  93 140  46 176 220
 606 330  62 705 199 560 664 156 574 266 114 702 307 212 228 685 722 681 174 280 449 194 134 315 209 192 135
 612 707 286 619  73 460 127 173 246 255 230 586 252 145 294 663 577 160 487 600 284 364 240 499 169 130 618
 165 353 179 688 241 484 447 197 723 370 268 691 646 166 678 322 621 196 595 188 168 288 191 101 283 290 316
 303 651 178 607 195 444 232 319 185 626 282 564 558 250 632 269 521 669 151 215 200 225 361 289 321 394 214
 566 572 245 242 382 497 366 207 208 296 346 213 313 335 582 300 728 331 276 686 299 270 271 459 372 317 175
 677 170 556 413 349 389 167 221 334 360 352 661 416 298 402 433 262 430 367 344 318 323 236 287 376 477 237
 251 333 302 223 308 419 229 320 146 202 396 655 457 243 541 515 264 410 412 407 355 326 338 530 478 414 381
 254 342 404 508 408 356 439 378 384 422  97 310 363 275 451 347 383 324 445 365 421 448 345 332 386 340 328
 258 354 203 393 248 428 281 400 470 380 423 304 272 534 429 409 431 329 343 435 259 388 231 377 411 362 503
 373 267 379 387 295 186 339 374 488 543 306 273  90 256 224 336 501 454 420 369 531 467 506 325 471 148 547
 274 500 395  78 481 110 357 405 312 504  39 371 461 434 123 525 238 528 476 496 492 472  24 162 551 486 561
 440 124 466 390 358  89 397 311 438  85 483 514 233 614 403 479  99  92 578  21 446 147 727 432 520 494 475
 222 385 684  22 441 129 511 391  29 583 507 533 573 529 505   9 163 442 102 427 426  91 656 456 119 455 465
 401 485 570  58 608 301 535  47 644 216 464   7 491 453   1 159 157  40 642 350 139 489 480 519 510 653 436
  75 235 589  79 463 253  67 693 474 452 629   6 567 563   2  43  68  16 526 550  60 516 443 671 590 609 616
   5  30 591 458 568 327 513 548 527 219 584 187  52 645   8  96  98 493 201 498 648  23 278 587 575 579 517
  26 351 674 118 640 205 598 623 523  71 700 277 710 601 155 107 138 279   3  17  41 524  82 639 552 581 620
 103 425 654 263 554 131  45 594 576  14 615 417 636 625 239 113 218 553  95 158  20 593 641 293 518 658 104
 211 172 469 171 368  28 204 545 540 337 557 257 128 660 532 247  74 244   4 611 542 617 704 697 198 696  42
  35 314  66 292 142 291 603 599 234  76 522  57 261 680 649 265 348 689 109 692 718 682 720 706  10  84  11
 544 206 610 149 630 100 210  18 596  12 613  51 721 708  15 227 309 592  34  53 111 699 724 571 638 701  13

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00577e+07us (= 10057.7ms, 10.0577s)
Satisfaction error: 2
Number of search iterations: 1961
Number of local moves: 673 (including on plateau: 280)
Number of local minimum: 155 (including on plateau: 31)
Number of resets: 1
Number of restarts: 0

Problem in row 8: 612 707 286 619 73 460 127 173 246 255 230 586 252 145 294 663 577 160 487 600 284 364 240 499 169 130 618 => the sum is 9856 rather than 9855
Problem in row 11: 566 572 245 242 382 497 366 207 208 296 346 213 313 335 582 300 728 331 276 686 299 270 271 459 372 317 175 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  46  30 672 620 706 600 586 264  69 165   1 628 144 702 663 687  23 662 162  11 331  68  48 675 633 179 480
  22 345 176 637 641 381  91  59 208 224 122 584  93 606 105 668  32 686 529 574 658 255   5 642 689 156 667
 657  51  41  17 696 265  18 127  96 693 495 644 275 191 313 615 170 635 623 554 603   4 502 690  14 230 636
 655  44  39   3 521 123 570  84  92 617 142 524 579 556 360 410 621 193 598 580 443  19  29 661 591 219 582
 354  28 648 535 247 195 352  47 172 680   2 629 216 268 153 704 183 576 596 624 460  87 284 597 631  10 577
  42 538 307  89 518 571 254 140 246 539 528 509 209 558 227 503  73 645 483 567 510  80 322  12 552 252 581
 286  56 650  49 475 547  16   6  81 622 446 116 107 640 537 595 553 647 519 505 320 280  15 541 433 112 701
 599 573 479 561 515 210 110 374 166 563  43 543 124 607 511 383 472 235   8  34 442 137 513 536 453 202 462
 619  79 604 608 497 121 498 161 145 520  85 384 601 415  86 478 389 474 304 257 550 290 106 546 423 151 463
 523 471 248 544 506 147 430 186  76 454 456 375  36 400 256 329 455 377 545 533 485 407  53 527 411 108 517
 422 583 348 494 452 131 385 239 128 566 496 429 448 418  40 512 473 317 369 451 500 398 228 425 382 214   7
 364 484 267 347 310 388 363 337 244 401 526 468 416 332 359  21 309 441 402 308 285 499 372 557 366 328 361
 118 426 386 412 296 404 438 339 306 491 132 405 319 445 449 305 427 293 437 440 434  26 351 439 380 562 395
 432 530 226 373 232 470 488 238 417 466 342 469 409 357 378 316 414 447 436 315 406 295 324 169 291 334 281
 379 493 181 333 277 266 242 301 487 287 187 458 259 707 367 396 428 698 371 273 392 325 300 408 450 330 260
 679 413 341 241 136 350 397 403 708 299 464 323 362  97 263 353 243 370 625 236 358 355 486 327 343 421 262
 609 174 311 335 555 643 185 504 482 387 424 376 211 294 610 175 189 206 215 349 691 435 340 302 272 368 213
 225 197 321 297 298 660 288 489 678 634 356 276 611  99 627 204 234 710 167  95 178 326 548 199 240 560 338
 283 258 670 155 261 516 184 229 614  58 613 318 714 154 723 559 103 173 695 250 192 274 590 282 159 671 157
 269 171 314 676 278 616 605 705 390 391 168 182 344  74 697 312 346 221 685  35 201 549 292 198 205 653 279
 126 514 222 101 223 565 138 683 365 149 253 146 525 251 459 568 729 218  31 220 713 665 572 109 654 508 148
 467 125 180 245 336 194 703 564 444 113 531 129 630 160 490 212 163 135 102 715 200 717 551 249 303 481 716
 233 602 231 188  70 457 399 725 618 203 578 100 492 120 585 237 164 190 143 575 114 669 719  98 649 592 104
 196 652 522 694 271  88 659 534 721  13 476  78 152 639  25 141 700  77 477  75 130 699 532 419 139 588 158
 724 632 688 569 289 507 540 673 722 177 542  38 651  61  57  63 681 117  62  66  72 674 626  71  50 420  83
 133 709 728  94 115 431 270 726 587  24 727 664 711  20 461  82 692  45  64 501 150 656 465  65  90 612  33
 393 677  55 638 134   9 646 718 593 119 720  60 217 684  54  27 589  67 207 712  37 666 682 111  52 594 394

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00004e+07us (= 10000.4ms, 10.0004s)
Wall-clock time (full program): 1.00558e+07us (= 10055.8ms, 10.0558s)
Satisfaction error: 2
Number of search iterations: 2080
Number of local moves: 777 (including on plateau: 360)
Number of local minimum: 159 (including on plateau: 40)
Number of resets: 1
Number of restarts: 0

Problem in row 9: 619 79 604 608 497 121 498 161 145 520 85 384 601 415 86 478 389 474 304 257 550 290 106 546 423 151 463 => the sum is 9854 rather than 9855
Problem in row 20: 269 171 314 676 278 616 605 705 390 391 168 182 344 74 697 312 346 221 685 35 201 549 292 198 205 653 279 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 728 457  72 103 626  38  34 482 674 637 108 543  16  13 588 677  60 553  15 115 652 525 599  57 704 698  81
 718  51 673 119 644  52 691 723 708 701  80 184  97  65 628 106 126 681  87  88 656 706 116  40 725  42 348
 353 123 197 663 702 530  61 709 397  93 164 667 104  18 635 202 118 308  10  31 705 500 584  63 700 650 568
 586  32 727 555 523 689 139 282 558 137  62 129 130 159 722 529 195 169 192  45 707 354 478 485 167 550 554
  29 150 183  99 729 162 101 511 657 658 462 205 721 113 612 598 223 165 460 470 720 235 403 112  49 538 490
 696 125  83 140 683 716 201 669 252 442 155 684  66  84 687 694 153 569 100 168 122 712 156 247 298 630 323
 221 239 117 163 688 526 710 385 711 580 176 146 161 206 636 136 131 651 306  58 412 226 678 336 233 608 415
 719 114  86 138 546 364  69 717 471 547 339 210 151 141 302 693 467 703 337 715 261 310 395 213 244 269 334
 290 220 532 316 367 236 243 291 614 587 351 249 207 279 231 256 341 158 713 203 726 536 724 190 191 313 491
 204 181 320 147 410 253 259 685 366 509 333 262 268 300 134 340 672 653 404 225 214 631 557 288 258 296 686
 270 241 317 238 494 281 257 465 521 664 331 314 381 315 347 338 551 335 160 321 287 344 570 330 285 699 199
 328 246 324 466 368 289 264 318 327 633 271 472 319 560 212 522 428 363 175 390 219 352 378 488 305 489 349
 255 358 617 414 400 360 329 419 309 513 425 251 193 365 342 408 552 386 297 312 350 275 216 362 389 387 371
 361 382 376 356 294 322 435 301 451 172 384 388 427 273 480 379 469 325 434 218 499 423 377 448 292 355 234
 295 402 461  55 399 600 406 431 437  44 267 456 492 277 346 343 278 357 394 506 326 413 227 429 443 398 373
 420 411 436 396 182 265 393 166 359 475 531  96 444 229 421 345 375 293 311 455 445 508 250 263 453 528 405
 430 380 449 450 237 542 284 145 484  92   4 638 276 464 135 514 370 407 527 458 109 519 280 438 541 504 178
 157 515 307 629 272 418 611 143  25 391 498 463 537 473 372 409 127  12 577 447 432 495  14 607 603 230  91
 544 481 512 374 154 545 507  17 209 180 439 144 468 572 535 304 459 479 665 483 440  36   1 170 503 446 188
 128 539 177 426 179 625 510 232 496 242 497 594 228 601 534 620 516 133 454 148 505  28 424 422 566  26   5
   3 609 240 641 189 524   2 124  89  56 174  67 564 576 299 416 401 590 518 517 121 476 274 548 565 606 666
 111 592 582 487  90  82 661 196 186 245 660 593 634 562 171  98 563 132 477 671  21  43 627 639 549 142  41
 474 676  48 624 303  20 597  24 194 200 540 533 502 605  73  70 215 571 675 668 556  68   7 452 567  19 574
 520 575 559   9  53  11 561 149  33 392 596 591 578 695  77  71 583 248 618 579 211 595 642 369  50 107 383
 486 417 714 662  95 152 632 208 102  47 647 581 616 648  64  75 680 573  37 286  59 120 585 610  22  78 659
 501 690  76 692  30 613 615 622 217 433 679 173 654 643  85 110 105   6 646 623  54 332 254 645  74  23 260
  27 649 670 493 198 640 283 441   8 185 682 222 621 619 187 602 697  35 266 655  46  94  39 604  79 224 589

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.00563e+07us (= 10056.3ms, 10.0563s)
Satisfaction error: 2
Number of search iterations: 2027
Number of local moves: 814 (including on plateau: 258)
Number of local minimum: 157 (including on plateau: 31)
Number of resets: 1
Number of restarts: 0

Problem in column 1: 728 718 353 586 29 696 221 719 290 204 270 328 255 361 295 420 430 157 544 128 3 111 474 520 486 501 27 => the sum is 9854 rather than 9855
Problem in column 22: 525 706 500 354 235 712 226 310 536 631 344 352 275 423 413 508 519 495 36 28 476 43 68 595 120 332 94 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  12 101 652   8 239 665 174 728 584  55 703 680 111 671 677  88 639 182 524  31 252 134 637 129 573 599   7
 389 305 720 635 178  45 320 688  17  77 695 716 676 681 621 109 719 228 565 328  29 175 691  52 163  13  20
  40 183   2 201 250 644 608 696 711  69 596 697 669   5 585 232 521 261 623 205 616 202 335  34   1 266 603
 601  37 606 126 561 631 151 686  58  90 684 576  94   4 636 148 700  64 216 575  33 177 619 454 125 610 593
 506  46  83 282  57 550 537 467 156 196 702 578 441  22 664 507 648  11 602  68 598 525 641  67 181  74 646
  25 217 195 577 137 574 115 568 530 132 517 569 498 625 546  39 597 197 656 513 229 254 512 473 496  38  26
 661 130 508 222  43 605 384 666 534  27 542 503 629 552 563 427 479  35 514 116  28 511   9  21 214 472 460
 632  24 322 212 505 582 579 556 515 189 469 480 100 448 494   6 442  82 548  10 433 171 532  98 241 633 551
 526  18 270 274  30 366 446 341 522 160 410 539 453 437 499 391 554 251 179 361 420 484 562 167 135 586 474
 461 199 279 105 510 381 415 533 520 206 504 492  96 379 428 465 451 225 538 440 519  54 529 242 138 439 307
  23 230 344 620  32 424 425 336 541 198 370 431 399 382 476 168 386 387 347 572 583 353 463 133 491 426 315
 470 268 257 429  44 374 495 352 478 271 435 375 449 348 213 394 430 373 477 396 500 459 417 150 146 408 447
 423 324 267 411 397 421 276 502 355 418 380 304 255 485 329 395 377  14 527 108 445 456 392 403 422 333 436
 468 405 360  16 432  15 372 402 409 457 388 466 490 450 475 531 458 452 443 438 340   3 363 462  19 334 407
 275 489 337 385 290 301 487 313 269 481 227 208 332 486 483 404 365 434 359 371 285 549 317 330 378 300 400
 321 416 543 683 291 362 331 283 357 345 316 297 367 369 356 393 236 471 272 643 152 298 368 419 303 349 314
 262 553 244 312 398 401 318 264 260 455 311 339 293 358 256 343 308 325 289 302 265 342 694 523 413 721 306
 351 536 509 647 246 220 687 235 207 376 295 288 145 277 209 221 327 560 278 310 354 707 350 338 715 224 243
 247 364 642 628 299 144 281 286 722 390 192 153 326 287 263 169 185 544  50 259 640 594 149 558 346 725 412
 294 595 248 587 672 120 615 253 176 706 187 186 113 172 204 614 190 624 657 383 284 249 143 516 689 159 219
 309 612 194 591 663 240 675  72 191 580  47  91 140 173 161 649 110 501 188 650 678 590 147 630 559 170 245
 292 653 273 571 518 690 193 237 164 718 106 104 211  87  51 692 226 668 118 233 203 712 139 655 564 123 654
 180 618 497 218 662 142 127 124  92 588 280  73 547  95 258 638 103 645 600 729 157 223 406 604 528 609 112
  89 464 128 727 540  76 555  65 122 717 200 215 705 709  71 607 119 622  81 414 154 444  48 723 535  99 626
 701 673  59  70 634 714 141  86  97 567  53  63 613 693 158  78 121 482  66 570 698  42 165 704 667 323 617
 627 710 724  80 682  93 107  56 589 674  84 136 210 611  62 566  79 660  36 699 726 659 166 319 155 114 231
 670 685 592 238 545  75  41  60 679 713 162 296 493  49 117 581  85 557 102 131 234 488  61 651 658 708 184

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.00577e+07us (= 10057.7ms, 10.0577s)
Satisfaction error: 2
Number of search iterations: 1992
Number of local moves: 838 (including on plateau: 298)
Number of local minimum: 147 (including on plateau: 37)
Number of resets: 1
Number of restarts: 0

Problem in row 8: 632 24 322 212 505 582 579 556 515 189 469 480 100 448 494 6 442 82 548 10 433 171 532 98 241 633 551 => the sum is 9854 rather than 9855
Problem in row 21: 309 612 194 591 663 240 675 72 191 580 47 91 140 173 161 649 110 501 188 650 678 590 147 630 559 170 245 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 719  82  29 670 335 727 717 135 707 402 396  22  57 653 680 424  77 110 534  67 128  93 109 647 127 483 725
 166 225 705 708 441 638  94  31 582  66 716 176 100  83 539 614 153 624 691  55  80  91 573 313 722  36 633
 541  27 544  69 513 567 715 134 270 702 713  65 202 151 630 503  32  61 611 592 121 101  38 629 726 530  68
 237 112  72 718 490 548 681 181 704  96 296 470 560 699 116 114 170 103 371 677  51 123 706 698 197 492 173
 703 675 187 115 711 150 682 108 457  85 589 557 459  76 148 179 230 554 226 596 158 125 724 186 273 697 205
 636 138 146 232 196 579 118 472 223 212 648 392 111 665 607 172 156 469 378  46 443 200 145 674 637 686 474
 635 207 143 549 297 598 628 263 506 165 586 182 327  89 213 723  48 247 241 477 159 206 154 168 632 683 729
 521 243 126 193 169 244 527  54 222 130 136 597 344 284 692 621  98 660 721 695 410 333 139 720 164 240 572
 227 295 203 167 664 261 188 250 283 264 639 533 688 239 649 728 142 505 710 265 185 382 218 290 198 312 370
 235 171 329 346 669 291 137 266 175 714 585 613 414 221 252 694 144 709 482 209 269 445 345 308 409 246 177
 242 189 306 267 685 298 255 301 245 259 651 620 292 231 304 208 712 700 300 416 224 528 406 421 131 365 299
 447 324 303 362 257 229 277 326 661 323 215 317 578 258 272 473 389 576 373 385 307 588 358 275 380 228 374
 251 268 194 394 553 337 318 403 696 293 391 274 325 383 463 393 384 693 285 190 461 422 361 271 254 316 282
 355 478 341 314 360 369 278 305 412 359 280 376 493 332 401 423 336 348 381 436 289 279 386 427 311 286 500
 395 387 435 404 281 249 438 417 398 372 476 331 418 467 508  71 390 399 350 368 287 201 352 220 364 339 538
 379 509 234 514 415 456 434 351 319 450 449  26  39 431 354 444 411  87 262 442 518 260 425 440 388 356 462
 448 349 320 413  81 163  74 455 315 517 117  64 322 464 439 511 489 233 432 536 545 485 302 501 571 433 276
 507 420 453 495   9 479 214 537 430 642 375   5  12 400 446 556 468   1 174 471 504 217 526 496 405 566  47
 563 458 451 407  79 484 481 519 160 564 321 216 524 437 419  78 531 192  44 452 397 309 353 466 465 363 122
 133 475 601 113 498 499 542  92 550 540  88 520  43 558 510  41 428 211  56   4 491 408 575 555 529 149 646
 426 535 643 522 587  37  33 612   6  63  97 340 523 494 454 551 615 581 256 574  16 591 569  58 516 104  52
 120 497 532  35 617 562 605 543  50 618 236 238 184 486  23 429 701 487 480   7 684 690 606 155  11 107 152
 140 652 668 584   2 460 157 546  10 662 199 619 657 671 204 310 248  28 105 330 658 570  18 565  40 162 590
  15 502 641  14  95  24 608 552  90 568  84 488 634 334 210 161 650 357 183 667 673 377 609  70 594  30 625
 124 655   3  17 294  34 515 626 610  99 288 644 603  62 195 132 577 547 602 191 580 679 659  86  73 367 593
 631 366 663 561 219  13  20 687 627 343 178 645 342  21 102  49 600 328 599 654 595 512 180  75  60 656 129
  59 616 583 672 338 559 119 689 147 347 106 525 604 666  25 253 676  45   8  53 622 640  19 141 678 623  42

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00021e+07us (= 10002.1ms, 10.0021s)
Wall-clock time (full program): 1.00604e+07us (= 10060.4ms, 10.0604s)
Satisfaction error: 1
Number of search iterations: 2807
Number of local moves: 1174 (including on plateau: 666)
Number of local minimum: 229 (including on plateau: 72)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 1: 725 36 726 698 724 200 159 695 710 709 712 473 463 332 418 26 117 642 160 92 33 562 2 14 3 366 59 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 405 684 122 665 110  14  60 175  82 630 602  18 629  37 661 647 696 581  43 668 656 102 150  99 363 683 273
 534  28 616 614   5  21  56  45 692 657 103  85 706  13 658 650 655 533 107 699 538  25 600 434 197  54 530
 691 673 242 200 223 234 558 172 640 624 120 310 598  62 565 678 638  91 104 599  35  30 185  16 463 460 644
 611 556 136  42 239  70 205 164 198 592 133  27 497 109 635 468 663 476 199 621 518 682  57  81 649 688 539
 606 689 328 481 474  67 617  96 576 493 166  83 420 113 700 608  58 261 142 680 674 193  63 155 580  38 494
 575 380  87 222  11 183 478 106  36 442 192 514 512 195 662 605 646 619 129 569 553 180 486 168 105 593 607
 587 508  93 554 226 231 432  52 112 278 552 467 393 535 653 361 618 625 179  72  79 170  24 473 499 597 485
 531 452 636 632  61 327 407 292  17 411  50 471 549 458 232 627 573 444 201   4 536 399  47  33 275 504 686
 577 574  12 171 483 154 415  89 330 582 412 568 521 424 677 622 540 566  98   7 413 561 406  23  48 457 125
 609 335 253 408 140 448 490 394  66  15 221 454 472 510 543 519 563   9 284 532 604 306 409 491 123 416 241
 459 496 384 484 372 389 157 438 151 373  73 355 541 542 447 115 455 387 176 362 357 300 428 426 423 369 396
  10 571 446 480 366 254 331 121 453 374 520 441 456 385 351 342 313 414 268 422 360   1 425 503 429 398 421
 522 139 383 401 379 210 440 437  29 298 397 367 301 461 419 336 466 345 264 449 435 368 495 356 344 462 352
 338 265 487 391 479 524 433 392 309 404 388 289 318 370 280 332 410 302 288 308 465 364 386 402 320 258 353
 316 290 365 244 238 417 403 323 501 418 218 482 439 377 671 260 371 303 509 517 160 245 263 567 272 304 382
 186 381 174 505 560 475 354 350 588 470 132 252 333 400 227 654 299 347 506 349 230 293 256 243 681 315 295
 283 664 325 282 287 583 334 547 146 722 515 703 311 326 141 228 161 726 469 358 219 181 281 229 165 390 279
 375 236 721 240 235 516 203 324 695 648 348 251 270 247 137 307 339 641 489 214 259 305 291 217 589 207 551
 271 196 285 212 594 204 443 329 717 206 450 267 250 585 340 321 477 294 464 685 144 690 224 317 225 319 346
 276 190 249 628 727 513 314 715 445  94 211 116 296 337  76 548 246 191 527 709 213 714 215 209 660 359  77
 274 237 266 297 719 557 507 687 562 262 639 149 322 128 114  80 178 177 601 526 233 488 712 620 277 126 117
  65 135 672 500 537 725 559 550 451 134 158 143 312 643 173  59  53 376 651 127 152 728 716 697 184 100 255
 257  32 436   3 603 669  84 586 492 169 701 675  26 529 167 108  34 147 676  49 208 707 626 637 645 194 395
 248 145 431 713 341 286 578 525 343  31 710 584 131 595  51 202  69 729 623  71 163 220 634 546 545 188 153
 118 427 511 138 720 570 659 613  78 378 642 579  88 101 162   6 269 130 652  20 724 187 708 615  55 610  95
  39 528 631 189   8 670 182 667 555  86 612 572 124 694   2  97  46 119 502  90 430 705  74 596 216 698 723
  92  44 564 159 718 544 156 666 591  64 590 633  40 679 111  75  19  22 704 148 498 711 693 702 523  68  41

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00033e+07us (= 10003.3ms, 10.0033s)
Wall-clock time (full program): 1.00563e+07us (= 10056.3ms, 10.0563s)
Satisfaction error: 2
Number of search iterations: 2785
Number of local moves: 1126 (including on plateau: 485)
Number of local minimum: 209 (including on plateau: 61)
Number of resets: 1
Number of restarts: 0

Problem in column 21: 656 538 35 518 674 553 79 536 413 604 357 360 435 465 160 230 219 259 144 213 233 152 208 163 724 430 498 => the sum is 9856 rather than 9855
Problem in column 23: 150 600 185 57 63 486 24 47 406 409 428 425 495 386 263 256 281 291 224 215 712 716 626 634 708 74 693 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 644 617 203 258 628 135 636 605 704 690 102  66 106 634  80  71  74 139 449 722 410 186  59 427 726  45 439
 520 721  34 596 531 616 191 116 614 132  62 151 405 675 262 118 153 710 131 600 127 718  51 709  94 725  93
 415 630 719 112 654 448 585  82 708 509 160 109 463 277 133 646  79 199 114 578 218 624  56 713 365  89 170
 539 715 717 354 382  43 261  38 169 128 562  90  64 252 165 140 716 696 225 633 177 408 691 308 479 723 180
 540 288 129 686 626  91 706 287 601 161 462 219 632 348 179 579 185 144  75 538 385 101 714 657 266 148 108
 528 493 176 724 622 699 702 119 549 609 120 105 499 238  25 665 115 164  92 393 189 720  86 576 394 158  95
 470 592 440 278 703 454 705 618 195 537 234 246 104 149 223  35 172 215 211 608 689 367 323 573 491 123 100
 687 445 163 162 197 231 168 712 233 255 250  76 571 544 137 649 319 358 213 729 188 244 692 598 701 152 181
 599 679 286 221 183 468 641 196 728 567 272 232 492 206 110 727  97 145 216 534 173 311  83 661 281 352 395
 535 271 321 368 326 245 380 187 329 482 253 220 711 659 318 656 239 247 296 575 207 249 370 525 320 282 284
 526 330 230 269 407 338 357 251 417 694 375 305 496 663 147 276 346 396 344 510 285 192 257 361 685  96 302
 666 425 565 364 268 265 359 227 339 588 345 366 667 166 353 472 309 226 341 374 297 310 222 397 392 260 292
 214 340 267 411 313 336 210 312 414 315 209 460 384 399 383 515 204 456 314 561 390 316 372 568 328 446 418
 300 412 420 497 466 334 421 369 208 403 476 263 464 436 275 301 331 279 450 134 332 406 486 362 423 283 324
  23 438 190  30 400 381 430 240 555 558 343 371 404 530 401 441 424 461 387 303 273 402 182 516 504 398 270
 333  65 347 435 480 467 443 363 519 111 488 378 295 437 335 474 413 379 299 291 527 494 419 254 138 529 142
 322 388 556 198 489 389 325 490 495 465 563 429 307 572 342 431  27 409 377 256  40 589 274  55 113 442 512
 194 452 459 507 416 167 193   8 536 360 451 541 306 546 554 298 502  44 506 150 564 444 458 200 130 351 518
 236 201 574 317 453 294 570 521  81  49 475 484 174   3 584 143 560 514  47 171 566 447 428 290 586 505 582
 224 457   1  13 607 107 532   6 146 513  32 595 639 548 376 280 610 433 522 228 643 485 542 212 651  67 386
 122  53 612 483  19 511  41 670 469  85 593 327 242  88 583 289 503 500 559  78  61 547 648  99 434 557 682
 432 155 508 597  10 660  60 580 178 422 543 471 293  98 550  52 621 594 501 159 551  46 237  87 248 577 625
 157  48 455 517   4 524 117 552  54 103 478 681  42 136 693 477 615 337 669  57 652 473  11   7 697 668 631
 156  24 645  77 523 591  37 620 569  84  39 707 154 259 642 391 426   9 590 355 619 126 553 304  28 653 674
  73 350 141  33  20 688 635 373  18 205 611 662 217  63 695 498 487 650 647 175 623  16 533 125  72 581 664
  50   2 683 672  58  17  26 629  12 243 677 603 655 700 673 202 671 545 678  22  31 613 481 235  68   5 604
 349 264  14 676  70 356 124 684  15 587 680 698  69 229 637  29 658 606 602 121 638  21 627  36 241 640 184

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00573e+07us (= 10057.3ms, 10.0573s)
Satisfaction error: 2
Number of search iterations: 2365
Number of local moves: 1099 (including on plateau: 442)
Number of local minimum: 171 (including on plateau: 38)
Number of resets: 1
Number of restarts: 0

Problem in column 1: 644 520 415 539 540 528 470 687 599 535 526 666 214 300 23 333 322 194 236 224 122 432 157 156 73 50 349 => the sum is 9854 rather than 9855
Problem in column 17: 74 153 79 716 185 115 172 319 97 239 346 309 204 331 424 413 27 502 560 610 503 621 615 426 487 671 658 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 338 544 288 635 385 525 116 102 727  88  75 256 598 649  55 145  91  93 621 126 725  64 441 723  33 704 708
 520 658 197 163 673 152 108 578 527  39  46 562 711 714 101  70 654 376 512 171 683  41 605 410  32 470  82
 608  98 693  99 644 284 599 115 475 413 657 148 629 491  79 142 103 266 707  53 515 191  90 712 722 123 199
 606 694 151 717 640 107 684  76 168 153 421 678 607 236 319 109 656  67  92 120 706 618 209  48 238 651  84
 612 680  87 112 702 106 186 719 718  95  73 187 601 242  50 111 682 157  78 508 628 281 695 137 669 642  97
 507 202 235 164 524 701 185 194 573 323 247 146 709 705 228 179 144 615 113 495 691 676 577 184 237 182 119
 720  61 661 241 514  62 668  96 178 154 665  83 677 547 262 118 283 568 243 159 489 276 728 321 258 176 647
 703 627 274 188 600 189 138 400 698 134 483 128 335 257 412 226 286 231 249 667 650 234 229 610 406 214 287
 550 555 218 692 570 135 196 342 633 697 282 205 314 263 141 221 245 174 729 350 713 227 110 225 217 292 559
 506 516 200 215 511 180 265 260 663 201 689 348 251 213 427 212 710 449  63 208 298 299 671 175 315 294 716
 418 224 147 207 481 261 277 726 222 435 609 240 353 313 267 318 487 230 561 268 543 340 386 169 343 724 306
 403 700 352 307  80 414 303 280 296 312 430 699 330 250 420 397 346 334 167 259 351 269 384 302 371 721 378
 368 329 534 324 239 401 688 369 173 383 328 372 480 232 715 417 253 356 498 162 289 443 270 325 387 220 300
 347 255 415 402 433 450 460 359 273 408 532 446 290 291  34 392 426 394 476 391 304 492 193 440 310 370 272
 301 349 233 332 382 405 317 462 309 366 474 424  16 327 361 411 358 501 337 399 445 535 223 293 522 465 308
 344 365 373 336 216 456 428 364  42 471 496  71 362 500 345 360 104 331 478 461 363 436 432 519 422 439 341
 140 425 431 252 311 416 505 482 513 357 244 305 380 333 448 467 379  72 398 130 381 297  54 580 564 523 468
 355 320 517 367 132 653 316 339 407  25  52 488 454 581 592 375 477  44 619  85 322 455 210 528 133 614 395
 105 473  58 531 161 377 582 393  65 594 354 423 326 585 404 542 459  77 374 509 172 536 530 149 409 388 279
 165 190 131 499 122 389 390  40 526 183 551 464 195 558 538 458 546 510 486   3  60 466 156 565 591 484 589
 166  29 579 434  31 469  51 451 463 539 569 595 429 254  19 442 457 444 552 472   9  86 529 438 206 518 624
 275 204 419 664 437  26 626 503 139 548  57 541  47  30 557 586   5 622 572 604  15   4 603 533 545 447 246
  74  38 583   8 452 553 556 219 211 554 479 643 278 114 560 574 616 549 537 625  56  23  22 670 502  89 271
 129 602 566  45 181 143  20 160  66 490 660 584  35 494 652 638 497 696  37 631  68 634 620  10 588  12 597
 155  17 453 596 295 681 567 593 150 655  14 177 396 504 617 686   7 685  49 659 127 687 117 637 203  69  59
 192 576 575 679 121 675   1 662 540 648 198   6  28  36 641 587  21 493 264 674 158 613 690 125   2  11 639
 248 124 485 646  18 645 623 571 100 590 170 636  24 136 611 672 563 521  43 666  94 632  81  27 630  13 285

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00009e+07us (= 10000.9ms, 10.0009s)
Wall-clock time (full program): 1.00558e+07us (= 10055.8ms, 10.0558s)
Satisfaction error: 2
Number of search iterations: 2089
Number of local moves: 859 (including on plateau: 254)
Number of local minimum: 148 (including on plateau: 26)
Number of resets: 1
Number of restarts: 0

Problem in row 23: 74 38 583 8 452 553 556 219 211 554 479 643 278 114 560 574 616 549 537 625 56 23 22 670 502 89 271 => the sum is 9856 rather than 9855
Problem in row 27: 248 124 485 646 18 645 623 571 100 590 170 636 24 136 611 672 563 521 43 666 94 632 81 27 630 13 285 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 404  82 580 701 566 604  86 164 694 101  32  78 725  30 552 713  27 111 105 716  93 297 677 535 682 131 369
 118 459 112 124 437 634 668 498 185  67 728  36 670 156 586 628 197 396  35 712  92  88  34 655  97 729 714
 210 627 583 695 657 401 579  83 537  29 103  76 562  58 632 503 144  48  26 638 147 707  38 710  66 506 490
  84 160 119 724 640 664 500 114 519 515  51 151 626 135 673 679 145  99  57 631 592 505 113 495 123 129 612
  42 236 644  64 381 569 512 141 597 186 192  63 706 146 620 557 190  53 122 687 572 478  47 624  70 647 709
 227 194 108  21 690 727 372 104 136 138  71 142 251 696 637 575 247 526 362 243 680 726 177 220 286 669 630
 672 168  94 223 169 585 550 132 293 198 237 149 265 271 530 581 225 603 263 565 688 573 221 663 150 128 659
 514 110 102 261 189 287 717 534 107 231 455 211 422 272 488 321 184 652 175 563 622 614 314 593 130 316 471
 684 172 246 219 584 311 188 155 409 206 325 180 693 162 549 665 171 358 723 214 292 619 446 238 255 281 510
 658 213 338 224 324 183 173 276 635 419 217 273 335 295 522 366 166 681 313 240 561 574 307 232 384 329 617
 539 318 308 442 636 259 294 340 215 248 432 282 587 229 178 328 667 567 392 218 651 559 202 317 133 121 393
 660 285 134 399 489 289 481 374 254 257 253 703 341 204 269 407 458 212 315 389 391 527 375 322 174 284 609
 353 209 252 397 323 444 415 430 382 373 203  81 386 310 699 249 304 451 429 434 363 435 349 274 390 400 520
 306 408 416 377 383 331 413 337 365 301 368 439 403 411 222 354 334 449 309 348 480 395 441 234 356 336 339
 279 332 305 491  44 496 398 352 457 460 300 482 364 406 359 464 199 418 463 370 525  61 288 405 436 443 258
 345 423 450 346 412 424 355 476 357 360 511 371 163 438 376  16 467 531 347 379 333  11 330 477 420 462 275
 320 264 410 245 230 426 548 139 445 466 342 327 533 484 394 427 513 425 465 431  18 228 380 433 417 470  75
 494 226 350 461 517 564 201 544 291 319 492 428 538 402 193 440 367 116 468   8 387 157 469 159 554 524 187
   3 568 616 521 299 543  68 582  85 385 661 551  13 242 448 502 516 191  95  39 388 127 577 588 474 606 167
 235 472 545 547 447  90  77  14 479 485 270 600 499 493 158 290 453 529 487 508 250 170 326 208 475 509 239
 207 595 576 196 120 504   4 483 501 541 266 518 179 601 216 140 613 267 546 528 154  87 602 277 654 456  24
 109 611 454 570 361  20 553 571 649  89 594 590 244 618  56 143 642 256 578 298 181 421 486  69 497  43 152
 343 598 542 589  91  80 685 536 608 621 697 698  59  55  23 165 523 283 623  46 200 268  41 176 558 610 137
 555 689 683   1 312 153   2 607  49 721 662 605  74 629 241  12 280  17 675 540 532 278 700  45 671   5 117
 260 720 344 596 378  31 704 625 100 702  25 452 148 708  98 195 560 674 115  10 302  22 633 641  52 653 106
 678  73 507   7  15  54 233 645  33 722 676 650  50 718  40 126 615 639 711  72 296 666 591 205 646  62 125
 556 643  37 414 161 182  79 599 473 715 692 719  19 686  96   9 648 303 656  28  65 262 691  60 705   6 351

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00018e+07us (= 10001.8ms, 10.0018s)
Wall-clock time (full program): 1.00572e+07us (= 10057.2ms, 10.0572s)
Satisfaction error: 2
Number of search iterations: 2252
Number of local moves: 892 (including on plateau: 321)
Number of local minimum: 173 (including on plateau: 33)
Number of resets: 1
Number of restarts: 0

Problem in row 18: 494 226 350 461 517 564 201 544 291 319 492 428 538 402 193 440 367 116 468 8 387 157 469 159 554 524 187 => the sum is 9856 rather than 9855
Problem in row 25: 260 720 344 596 378 31 704 625 100 702 25 452 148 708 98 195 560 674 115 10 302 22 633 641 52 653 106 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 305 708 695  29  76  45 102  44 209 728  13 108 149 717 669  56 481 484 682 503  66 684 680 725 124  51 722
 679 720 605  24 492  63  86 687  42 140 129  26 715  54 331  25 585 111 556 670 109 697 710 119 666 719  95
 392 704 297 112 182 706  65  87 707 434  83  37  84 179  96 700 426 726 641 694 115 552 584 648 432 100  72
 467 531 690 138 665  31  89 121 293 711  73 113 714  67 146 210 721  46 536 421 147 677 699 371 663 440  75
 686 541 712  70 716 306 206  88 196 165 143 151 184 563 693 672 592 167 662 516 160 701 106 159  36 528 136
 590 673 571 713 544 727 557  91 237 263 249 192 158 225  47  90 507  62 702 558 120 629 495 230 294 201 130
 691 279 619 127 139 464 667 683 117 156 181 284 259 200 367 162 296 718 215 703 696 177 476 271 105 489 314
 433 657 251 380 257 522 122 661 280 212 145 659  38 189 435 114 660 326 644 676 235 174 539 175 272 487 312
 551 465 573 103 133 643 227 172 656 163 566 180 228 240 502 281 233 256 638 521 213 226 688 277 248 625 247
 238 282 532 333 308 332 135 724 261 229 304 150 255 671 356 254 178 675 273 689 264 530 622 275 245 538 202
 266 318 374 268 345 595 313 218 231 315 723 299 310 323 498 171 349 190 243 692 360 335 353 505 298 646 317
 194 410 554 346 319 186 242 338 368 286 337 597 401 370 375 358 253 292 252 428 347 267 504 396 372 334 729
 458 311 379 303 307 364 352 324 438 348 239 376 373 341 628 424 340 412 483 274 343 321 420 384 265 339 309
 288 320 393 342 354 413 328 441 445 417 397 382 336 301 262 363 453 302 344 468 241 386 224 455 517 195 488
 404 436 329 402 419 330 283 359 385 429 377 394 369 365 362 395 316 236 269 291 350 351 462 431 447 234 430
 485 411 529 425 513 418 300 454 415 381 486 219 423 378 116 409 466 290 187 398 325 327 207 137 456 480 220
 496 471 490 543 479 141 514 361 387 406 427 499 542 400 107 449  49  94 414  60 407 405  50 491 500 148 525
 501 506 470 383 461   5 408 444 442  27 446 576 477  98 244 390 452  10 208 199 422 535 448 668 416 169 450
  12 366 153 574 560 472 587 451 550 459 457 188 523 460 183 572  68 527  20  78 510  34 403 512 497 176 463
 508   3  79 473 482 295 608   9 478 437 211 443 647  93 614 569  77 493  74  41 355 588 232 537 599 391 519
   4  30 155 606  57 439  32 534  35 653 627 565 547 520 260 567 475 589 205 250 545 128 217 568 399 214 634
 222  80  53 579 582 474 322 533 221 518 596 494 603 642 613  82 191 570  11 168 652  14 152 609  81 278 515
 154  48   1 562  18 164 620 649 555 611 593 548 650 549 526 626  71 678  61  97 637   8  16 540  40 216 617
 123 285  52   6 511 546 578 602 631 598 630 553 144 193   2 600 101 633 132 142 581 157 126  55 594 616 664
 276  69   7 674  58 561 705 223  17  85 604 639 575 524 173 618 258 654 645  22 357 185  15 125 591 612 583
  43  28 131 655 246 104 698 270 636  33 621 624  59 586 635 564 577 204 469  99 658 601  39  21 580 610  64
 389 203 161 685 632 509 709 287 623 651 198 559  92 607 615 134 681 110 289 197 640 166 388 170 118  19  23

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00012e+07us (= 10001.2ms, 10.0012s)
Wall-clock time (full program): 1.00569e+07us (= 10056.9ms, 10.0569s)
Satisfaction error: 2
Number of search iterations: 1922
Number of local moves: 821 (including on plateau: 275)
Number of local minimum: 140 (including on plateau: 43)
Number of resets: 1
Number of restarts: 0

Problem in column 17: 481 585 426 721 592 507 296 660 233 178 349 253 340 453 316 466 49 452 68 77 475 191 71 101 258 577 681 => the sum is 9856 rather than 9855
Problem in column 24: 725 119 648 371 159 230 271 175 277 275 505 396 384 455 431 137 491 668 512 537 568 609 540 55 125 21 170 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
   2 651 699  15 579 667 702  97 201 652  39 103 669 119 105 676 678 313 219 198 641 272 700 125   8 646  79
 692 704 638  17 668  64 120  21 152 703 188 683 696  70  44 670 607 687 203 167 709 660 627  12   6  13  34
 303   9 649  94 398 600 644   1 194 611 132 129 620  93 596 655 628 195  90 199 694 613 698 128  61 260 561
  10 674 616   3 300 659 572 102 112 214 243 576 609  45 158 685 618 263  86  85 586 640 591 476 605 246  81
 619 675 563 648  40 215 169  41 595 577 156 656 590  36 232 584 636 256  68 118 575 645 686 131  35 185 124
 268 629 580 566 193 602 528 504 110 541   4 633 554 218 100 556 304 235  49 104 593  18 634 470 581 148 133
 123 544 574 606 211 550 486   7 515 582  98  69 483 237 176 560 570 172 220 122 443 532 630 535 520 150 140
 135 526 568 543 288 626 325 527 506 490  14  55 518 487  75 501 571  28   5 238 507 471 540 154 531 205 421
 562 513 514 516 225  54 450  20  23 328 427 467 442 406 473 494 523  11 451  22 485 495 592 445 437  31 449
 335 436 503 521  19  56 481 202  57 530 539 308 434 439 499 440 496  65 479 497 416 407 500 448 478 159 111
  43 389 394 462 458  82 306 334 466 505 425 429 480 362 206 457  24 136 413 538 411 441 403 460 383 379 469
 277 475 356 360  99 431 130 390 444 352 404 184 446 424 517  52 426 258 461 402 525 419 320 455 452 349 447
  80 432 375 420  96 388 409 350 327 384 454 464  77 417 401 391 408 315 344 435 488 412 400 372 377 456 382
 368 340 399 477 396 386 381 345 414 336 312 281 332 468 374 351 364 410 337 348 395 309 438 266 433 305 290
 367 318 301 376 338 310 359 329 274 307 370 319 365 423 342 343 353 392 422 358 378 297 229 708 293 262 722
 508 291 314 316 603 265 387 430 363 673 323 267 373 354 257 311 324 695 283 302 369 361 333 190 286 380 298
 317 273 254 339 533 275 347 578 355 326 529 346 231 357 371 282 599 617 330 594 270 251 321 276 226 292 366
 710 284 294 719 493 223 512 537 269 519 186 230 287 285 612 271 142 725 240 296 210 233 234 248 341 547 208
 552 299 227 179 677 712 405 236 727 295 175 492 247 173 250 252 249 511 502 716 228 178 242 278 157 680 216
 565 183 221 204 245 191 279 650 261 174 610 715 244 588 682 200 137 723 721 597 187 138 168 212 149 615 196
 459 147 255 162 484 161 653 259 166 209 589 631 217 542 706 182 253 385 728 672 264 213  88 139 207 666 418
 625 107 153 160 564 713 163 665 642  89 622 127 463 143 662 222  78 551 684 472 180  59 181 170 241 534 585
 280 114  66 151 393 491  91 601 688  83 549 164 189 587 714 113 415 522 155 623  58 197 141 558 718 557 637
 697  47 116  73 108 146 177 690 608  95 598 192 165 614 705 428 115 482 567 553 134 101  48 555 635 545 661
 224  38 109 657 453 117 679 624 289 126 717 536  27 654 489  63 121 498 729 509  30  62  32 664 322 465 621
  33 681  25 639 331 474  84 711 573  67 569 693  46 643  72  42  71 171 559 546  50 724  26 691 726  60 548
 701  76  92 632 663 397  16 604 524  87 583 106  51 671  37  74 145 239 510 144  29 707  53 689 647 720 658

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00023e+07us (= 10002.3ms, 10.0023s)
Wall-clock time (full program): 1.00577e+07us (= 10057.7ms, 10.0577s)
Satisfaction error: 2
Number of search iterations: 2022
Number of local moves: 892 (including on plateau: 394)
Number of local minimum: 169 (including on plateau: 49)
Number of resets: 1
Number of restarts: 0

Problem in row 13: 80 432 375 420 96 388 409 350 327 384 454 464 77 417 401 391 408 315 344 435 488 412 400 372 377 456 382 => the sum is 9854 rather than 9855
Problem in row 16: 508 291 314 316 603 265 387 430 363 673 323 267 373 354 257 311 324 695 283 302 369 361 333 190 286 380 298 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 723 137 721  57  72 155 237 183  84 506 693 533 654 114 674 538 126 166 557 128 610  95 131 714 619  49 579
 718 727  97  59  75  93 716 171  28 709 184 544 554 609 665 191 121 487 219  23 675 140  51 169 673 446 711
 729 138 390 336  82 624 728 399  80  29 572 627 550 264 143 439 210 468 698 104 616 193 235  35 425 523 218
  66 213 670 662 149  94  91  44  67 370 688 722 668  78 116 494  42 597 666 161 605  39 192 724 514 647 476
  63 501 176 206 707 124 556  48  45 156 500 635 702  87 555 690  54 257 626 207 608 599   9  88 568 563 525
 144 111  96 187 208 687 106 148 272 530 195 300  86  81 535 583  85 656 560 112 680 725 708 216 713 621 510
 212 706 190 174 275 130 444 132 254 645 648 649 541 357 151 298 403 677 644 178 214 259 209 532 630 118 185
 154 224 278 289 168 316  99 576 720 540 327 296 129 359 642 369 307 396 240 696 226 293 142 220 481 669 699
 222 251 117  52 267  65 242 247 536 547 700 661 197 173 266 691 281 715 590 201 276 260 100 379 498 717 604
 312 196 471 238 574 172 105 205 261 495 301 414 291 353 202 726 462 712 417 284 231 243 412 386 482 685 225
 134 199 360 170 303 363 326 249 248 526 485 606 180 422 246 719 682 308 432 419 424 232 215 306 463 539 299
 263 329 265 333 285 233 394 228 262 448 280 459 402 415 522 638 292 305 245 295 372 270 255 297 491 686 591
 325 324 160 367 330 332 274 529 337 480 452 346 497 549 310 321 457 409 256 475 461 229 319 188 344 376 408
 331 340 163 384 351 253 283 451 204 356 322 378 421 347 458 358 354 531 489 465 400 427 211 345 362 383 488
 385 288 258 380 311 328 537 438 445 373 398 271 528 382 352  14 454 483 410 387 279 286 455 517 317 230 349
 364 198 269 659 411 392 490 371 388  76 287 381 434 343 592 464 342 397 302 413 401 348 473 520 221 125 194
 561 429 374  92 273 418  12 505 469 139 277 466 443 189 309 375 366 477 423 508 571 395 420 435 314 162 453
 320 548  70 502 393 115 593 426 389  56 578 518 553 152 513  13 377 341 406 391 486 580 355 595 133 441  11
 440 334 404 493 496 637 564 252 315  31  71  19 479 602 623 150 507  34 182 615 565 437 545 241 268 405 146
 407 515 543 472 617 570 573  89 567 179 141  46 519 524 436  53 492 113 559   2  77 474 470 664  98 177 478
 512 577 629 611 594 509 428 614 164 250  20 234 368 165 651 102 467 304 159 672  32 135 671 433 318 127 109
 449 655 625 603 551 503  47 588 584 223 153 120  26 598 107 236 640  79 119 569 217   7 566 516 282 350 442
 633 450 618 558  43 658 499 521 511 589 101 244  55 613  69 157 339 534 108 431 227 650  37 546  17 200 447
 628 587 667   6 676 643  74 612 582  73 622  27 103 365 639  24 596 123 158 575 586 653 632  60 110   1  33
  58 504  30 581 620 430  62 456 646 294 607  90 145 641  18 585 679 181 136 631   8 634 684  21 175 338 601
 660  61 652 683 689 527 678 692 703 636  50 122 290 657  36 167 705  22 186 361   5 542 663   4  16  38  10
  41 313 562 701 335 484 697 681 694 600 203 147  40 416  25 460  15  83  68 552   3 710 695 704 323 239  64

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00569e+07us (= 10056.9ms, 10.0569s)
Satisfaction error: 2
Number of search iterations: 2538
Number of local moves: 996 (including on plateau: 462)
Number of local minimum: 164 (including on plateau: 47)
Number of resets: 1
Number of restarts: 0

Problem in column 1: 723 718 729 66 63 144 212 154 222 312 134 263 325 331 385 364 561 320 440 407 512 449 633 628 58 660 41 => the sum is 9854 rather than 9855
Problem in column 10: 506 709 29 370 156 530 645 540 547 495 526 448 480 356 373 76 139 56 31 179 250 223 589 73 294 636 600 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 328 677 116  37 236 657 321 182 226   8 632  88 668 695 655 698   6 119 678 664 195 593  62 139 452  12 711
 675   4 273 667   3 312 225 163  49 635 584 285 612 671 661 654 216 237 605 681  80 650 630  22 205  23  33
 621 708   2  78 536  74 155  77  64 231 561 578   9 619 684 693  26  16 290 674  31 577 663  97 600 625 566
 466 633  55 256 208 631  14 316 161  51 645 110 626 544 611 669 215 131 588 559 183 210 574 242 153 545 459
 483 392 565 685 403 590  81 490 214  69 606 548 636 583 696 468   5 259  76 607  44 576 251  25 125 212 166
 596 456 141 453  56 363  36 173 562 637 634 407 597 517 430 622  93 130 495 426  45 123 474 122 223 484 560
 554 682 185 524  52 503 317  73 137 581 570  84 514 614 601 109  32 102 615 488 250 500 569  29 270 385 515
 390 572 618 505 568 638 177 187 444 516 571 537 541 501 526 579 542 133  94  13  41 442  43  67 149 395  66
 487 454 354 608 434 609  40  61 291 476 532 296 436 555 304 448 627 128  65 535 435 443 184 120 138 325 470
 438 481 144 553 134 432  30 111 479 420 406 519 646 405 347 410 534 339 489 539   1 464 198 103 126 610 497
 549 383  21 473 366 404  71 496 348 458 351 504 478 414 412 372 174 425 471 374 457 460 206 176  50 419 543
 513 322 567 331 335 462 411 467 346 380 314 303 306 463 384  17 408 423 465 401 475 353 194 189 203 499 324
 367 445 378 394 375 340 297  38 421 373 360 485  95 355 492 599 257 381 320 400 509 428 418 377 396 228 327
 345 389 551 449 300 308 368 334 357 508 431 235 376 393 315  34 446 288 362 494 387 341 417 330 391 245 461
 218 709 318 309 369 299 437 280 307 482 450 276 326 429 278 439 240 292 371 416 252 323 440 409 284 523 379
 710 604 275 244 617 196 506 274 253 313 293 558 336 135 221 424 352 342 186 265 282 521 486 598 518 113 233
 227 283 192 402 527 157 305 302 580 267 477 533 165 154 493 261 651 491 272 319 520 343 310 603 502 158 361
 217 301 287 337  98 294 589 388 538 349 234 255 191 179 332 575 364 359 688 268 510 164 399 659 507 511 262
 202 356 271 350 433 592 624 512 213 700 209 201  35 281 264 200 344 455 277 248 653 370 413 729 620  99 204
 229 333 680 692 594 143 602 563 171 266 241 623 269 115 167 117 207 666 358  58 427 247 582 547 546 193 219
 239 222 690 329 686  57 713 528 148 132 260 683 286 298 211 398 311 707 441 243 238 100 246 556 702 152 279
 151 172 289 169 118 721 629 687 665  86 180 642  90 230 188  82 525 469 160 199 658 725 422 718 529 170 181
  68  42 649 338 716 129 676 679 689 254 142 136  15 147 140 150 656 564 220 197 557 162 670 644 386 722 107
  27  75 472 127 168 108 573 706 585 701  11 728 156 146  83  47 643 628 587  18 641 397  72 451 480 727 498
  91 101 720 258 723  28 652 699 647 145  89 224 595 249 124 613 662 522 175  70 715 159 295 540 648  63  48
  24  39 660 232 694 712 415 365 697 705  19   7 178 104  46  85 703 530  60 586 552 105  87 724 121 691 714
 640  20 382  54 106  96 591 704 263 112  53  10 673  59 190  92 616 719 447 114 717  79 550 639 531 726 672

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00025e+07us (= 10002.5ms, 10.0025s)
Wall-clock time (full program): 1.00583e+07us (= 10058.3ms, 10.0583s)
Satisfaction error: 2
Number of search iterations: 2030
Number of local moves: 952 (including on plateau: 292)
Number of local minimum: 179 (including on plateau: 40)
Number of resets: 1
Number of restarts: 0

Problem in column 4: 37 667 78 256 685 453 524 505 608 553 473 331 394 449 309 244 402 337 350 692 329 169 338 127 258 232 54 => the sum is 9854 rather than 9855
Problem in column 20: 664 681 674 559 607 426 488 13 535 539 374 401 400 494 416 265 319 268 248 58 243 199 197 18 70 586 114 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 590 652   8  64 627 651 408   9 428  56 709   1 567 706  17 109 686 693 103 564  99 145 198 689  72 657 347
 116 677  34 570 113 656 384 138 588  71 612   3 118 170 615 247 620 658  81 533 221 556 166 640 619  12 637
  15 670 613 645 173 528  94   5 195  11 554 607 543 659  14 224 552 624 265 184 102 571 149 667   7 582 602
  28 587 128  32 357 642 555 187 592  86 269 586 676 606 125 211 639 548  43  48 200 614 176 579 573 165 603
 139 563  33 526  13 205 562 107 621 120 535 192  30 669 529 111 323 630 578 527  40 513  68 628 498 523 572
 114  82  29 574 546 617 561 121 522  67  87 476 542 589 585 419 649 553  47 235  36 538 505 581 140  31 609
 112 575 568 584 519 580  26 336 117 148  80 596 307 525 461  16 127 496 583 504  21 599 101 634 459 180 601
 218 524  85 467 550 540 486 497 464 252 106 569 167 539 610  24  60 491 469 417 264 521   6 560 456  10 503
 426 641 541 605 492 371 450 147 444 276 485 499 263  41 511  23  96 421  76 438 298 183  61 549 478 547 493
   4 432 439 510 490 383 360 207 443  42 154 508 514 339 411 447 465  57 517 474 274 481 534   2 480 454 434
 226 305 558 515 362 468 333 359 363 302 414 422 506 378 512 440  58 431 448 367 159 219 455 406 329 495  25
 225 446 437 466 374 458 507 190 350 164 390 471 130 482 404  20 502 520 387 462 351  88 410 356 396 442 427
 304 391 416 352 348 369 370 321 489 313 134 326 249 381 429 452 382 394 256 399 397 373 346 430 364 400 470
 436 349 460 420 380 341 441 423 303 354 342 355 516 322 358 412 285 311 379 283 292 405 366 294 310 332 386
 708 343 328 279 591 418 250 315 301 281 258 451 308 319 288 295 361 297 424 377 289 694 320 345 389 330 296
 494 290 240 317 257 484 273 457 262 487 594 306 286 287 212 299 239 275 409 697 453 261 557 208 717 216 278
 463 271 327 238 185 324 666 473 293 445 648 282 331 241 253 284 372 700 375 672 435 413 179 309 232 230 214
 316 266 259 344 536 270 228 477 229 718 335 401 600 715 277 340 678 124 314 220 566 234 242 325 280 318 243
 291 168 203 312 255 197 193 472 644 338 650 213 698 268 223 663 479 153 156 206 518 683 625 245 202 604 196
 398 210 191 175 675 188 222 392 177 608 365 233 449 722 217 509 131 215 654 690 530 186 597 151 671 158 141
 711 178 144 163 272 126 577 483 181 714 725 334 576  89 189 692 204 237 300 385 425 201 716 260 248 633  93
 661  22 703 137 146 687  75 544 161 679 664 244 182 160 172 636 488 393 143 194 674 710 631  66 267 254 162
 623 104 337 129 726 169 246 475 132 705  55  73 728  63 727 653 231  62 684  44 629 376 115 174 712 647 236
 702 155 680 227 110  19  92 704 122 598 501 668 368  65 723 559 531 171 691 108 532  83 537 119 142 551  97
 622 152 713 719  90  74 157 720 150 665  98  18 105  27 136 545 135  79 403 701 696  70 635  84 729 643 688
 662 707 682  78  52  51 618 685 638 660  46 626  37 402 133 593 353 199 655  49 673 100 595  54  50 388  69
 251  95 699 407 616  39 721 611 646 695  45 395  59  91 724 632 209 123 415  77 681  38 565 500  35  53 433

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0002e+07us (= 10002ms, 10.002s)
Wall-clock time (full program): 1.0057e+07us (= 10057ms, 10.057s)
Satisfaction error: 2
Number of search iterations: 1905
Number of local moves: 900 (including on plateau: 263)
Number of local minimum: 138 (including on plateau: 39)
Number of resets: 1
Number of restarts: 0

Problem in row 21: 711 178 144 163 272 126 577 483 181 714 725 334 576 89 189 692 204 237 300 385 425 201 716 260 248 633 93 => the sum is 9856 rather than 9855
Problem in row 25: 622 152 713 719 90 74 157 720 150 665 98 18 105 27 136 545 135 79 403 701 696 70 635 84 729 643 688 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 353 727 647 686  59 146 612  96 188 706  93 135 579 708 278 152  83 471 653 112 521 358 128 542  44  69 709
 155 420 460 611 652 408  92 120 139 657 644 700 654 678 134 130  45 196 682  73 190  67 683 662 127 439  37
 665 723 702 595  72 191  98 377  97 605  61  70 729 717 269 168  89 491 272 591 670 109  63 562 434 380  55
 123 133 617 440 275 122 105  84 140 512  91 696 623 616 604 132  86 666 174 271 486 676 720 699  99 603  62
 642 136 599 633  94 227 100 102 559 493 255 664 232 553 381 192 672  88 648 593 601 110 394 551 180  82  74
 129 697 156 606 210 393 159 126 205 435  68 651 680 370 308  77 182 627 585 224 489 630 234 565 143 689 217
 719 194 692 626 206 175 722 137 172 253 203 214 257 567 243 671 228 282 158 162 713 716 223 679  65 347 231
 721 566 701 485 215 125 226 724 199 354 171 229 309 555 185 598 201 675 181 472 317 177 238 511 299 252 170
 409 220 183 549 113 144 104 225 726 669 117 186 359 634 197 703 415 306 725 718 645 237 321 452 121 258 119
 249 148 285 602 297 259 246 519 314 265 261 417 629 379 497 684 343 464 418 142 469 212 302 425 385 433 211
 230 388 335 503 160 400 254 298 544 281 355 167 256 270 233 711 349 436 363 236 382 446 395 475 372 632 384
 173 222 276 510 428 369 470 318 360 165 487 450 286 264 365 456 344 184 536 691 341 345 320 507 324 443 221
 294 141 260 447 312 327 367 301 690 728 357 441 389 371 451 202 346 311 437 378 340 267 364 348 368 328 290
 350 351 391 342  38 421 330 523 399 362 427 387 283 516 366 292 268 242 310 476 517 207 396 322 537 392 410
 550 293 543 179 458 520 422 336  90 325 323 481  12 375 419 374 424 483 540 169 239 432 398 288 326 426 430
 578 319 412 280 397 498 506 402 508 338 406 263 279 488  19 501 273 480 315 524 329  51  21 250 552 403 463
 473 449 332 116 528 546 405  22 438 305 466 423 574 316  23 251  31 442 500 569 289 563 509  34 558 431 262
 300   1 413  32 538 478 334 561 513 649 468 411 479 307 504 383 401  18 161 534 453 291  29 219 631 416 331
 459 527 376 245 620 444 607 448 178 390 467 407 462 284 545 337 241 484 157  57 514 568 530 176  15  13 304
 386 596 477 101 535  49 465 373 474  24 454 560 614  26 166 628 295 586 333   8 114 554 639 218 650   4 526
 235 429 572 274 482 533  39 525 496 118 625 539 495 209 590 619 674   2 414 145  35 564 502  50  10  95 584
 461 646  41 147 597   5 532 457 277  71 581 455 163 164 213 361 515 659 518  46 492  14 636 490 548  53 712
 106 688 107 208  11 613 600 673 404 587 573 576 150 108 138 195 655 154 131 640  60 656   7 124 505 594 592
 694  40  79 313 668 715 522 693 547  43  48   9  27  75 641 240 643 153  56 494 244 580 582 296 583 339 531
   3 198   6 149 588 608 677 704  87 193 609 287 216  54 714 189 635  66  85 589  76 352 571 266 663 575 695
 356  47 115  25 615 610 661 681 570 247 621  17 103 187 705 557 707 204  58 303  81  36 622  33 618 499 577
  42 556  78 151 687 529 200  30 541  80 624  20  16  64 667  52 710 685 445 638 248 637  28 111 698 660 658

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00027e+07us (= 10002.7ms, 10.0027s)
Wall-clock time (full program): 1.00588e+07us (= 10058.8ms, 10.0588s)
Satisfaction error: 2
Number of search iterations: 1982
Number of local moves: 821 (including on plateau: 357)
Number of local minimum: 161 (including on plateau: 44)
Number of resets: 0
Number of restarts: 0

Problem in row 8: 721 566 701 485 215 125 226 724 199 354 171 229 309 555 185 598 201 675 181 472 317 177 238 511 299 252 170 => the sum is 9856 rather than 9855
Problem in row 22: 461 646 41 147 597 5 532 457 277 71 581 455 163 164 213 361 515 659 518 46 492 14 636 490 548 53 712 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 621 373 147  91 712  65 563 470 622 683 690  56  55 368  19 703  49 100 367 400  15 107 689  88 568 656 578
 714 645  62  72  34  67 679 443 697 695 516  52  29 642 644 571 133 455 652  79  30 193 149  33 710 722 137
 687 124 387 150 675 111  69 612 579 701 160 123 195 716 432 713 136 157 696 102 618 682  66 141 724  26  73
 134 227 144 423 614  13 717 547 723 677 127 643 211 103 395 179  93  37 702 508 729 180 125  23 226 629 726
 145 198 552 657 721 593 666 522 720 635 267  41 164 231 183 116 279 131 637 665 152  98 719 234 121 101 307
 465  87  84  32 673 693 525 668 355 599 251  71 110 185 204 338 172 587 659 551 155 632 499 229 670 265  96
 170 718 481 209 344 219 648 557 476 521 308 119 200 674 565 358 138 199 371 517  48  64 469 322 283 662 215
 711 245 699 346 142  90 273 704 201 480 311 366  97 151 700 207 239 122 592 715 286 315 727 181 365 269 321
 639 404 236 523 108 196 290 608 725 705 255 106 332 194 680 220 607 154 616 692 148 210 232 146 287 182 360
 281 233 397 574  58 177 609 664 513 440 323 228 708 163 184 139 230 728 536 510 280 370 341 636 187 303  43
 191 243 676 329 306 316 242 598 369 345 681 457 162 709 237 272 339 324 364 433 617 496 399  68 173 208 301
 420 408 343 300 512 223 394 449 483 503 257 143 379 277 266 238 186 320 447 411 586 359 539 176 330 556 350
 278 392 249 206 372 259 325 336 403 342 262 377 335 253 407 493 638 261 309 378 402 691 282 487 327 454 337
 304 189 362 431 382 240 314 450 268 276 361 352 250 582 533 178 313 468 427 326 357 527 462 448 482 412 161
 319 439 351 264 380 388 401  36 396 445 410 348 363 438 263 492 489 415 270 417 451 153 254 428 424 405 416
 453 477 413 504 461 292 485 271 458 216 260 406 247 390 347  95 414 374 212 202 434 297 293 393 497 474 490
 310 463 299 464 567 422 334 331 333 113  92 354 624 444  22 384  86 391 288 174 528 595 418 389 421 502 507
 383 446  54 529 491 441 515  11 456 158 484 471 437 349 376 312 425  51  17 252 479 509 197 488 526 532 466
  80 620 213   3 603 600 129  47   4 409 628 505 459 473  39 591 291 534 317 221 535 546  83 576 275 530 544
 520 375 217 112 498 478  99 353 385  70 435 305 545 430 537 518 569 340 171 298 381 192 203 581 419 318 506
 495  35 205 555 541 550   1 235 105 168 398 604 570 467 140 572 615 663  81 224  27 472 442 558 120 452 560
 386 606 573 580 542  42  12  60  89  44 562 647 633  78 225 596 584  46 165 613 285  75 610 543 649 594  16
 135 426 549 589  10 707 524 218  94  25 602 585 190 564 436 486 623 627  57 356 500   8 132 460 241 128 583
  74 166 501   5  53 686 511 222 248  40   6 597 685  85 588 688 514 554 175   9 601 631 605 246 611 104 650
 169  50 429 698  28 706 302 256 109 289 577 575 548  59 684 274 519 651 328 694 531 167 244 667  63  82 156
 475 625 678 590   7 626 214 126  24 258   2 671 669 294 188  45 634 672 115  31 114 640 559 660 118 159 661
 296 641 553 619  21 655  14  61  20  18 630 653 658 538 561  77 540 494 284  76 566 646 117 654  38 130 295

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00036e+07us (= 10003.6ms, 10.0036s)
Wall-clock time (full program): 1.00593e+07us (= 10059.3ms, 10.0593s)
Satisfaction error: 4
Number of search iterations: 2044
Number of local moves: 913 (including on plateau: 296)
Number of local minimum: 156 (including on plateau: 37)
Number of resets: 1
Number of restarts: 0

Problem in column 3: 147 62 387 144 552 84 481 699 236 397 676 343 249 362 351 413 299 54 213 217 205 573 549 501 429 678 553 => the sum is 9854 rather than 9855
Problem in column 14: 368 642 716 103 231 185 674 151 194 163 709 277 253 582 438 390 444 349 473 430 467 78 564 85 59 294 538 => the sum is 9857 rather than 9855
Problem in column 20: 400 79 102 508 665 551 517 715 692 510 433 411 378 326 417 202 174 252 221 298 224 613 356 9 694 31 76 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  21 681 663 116  13 653  67 654 656 130  59 665 485 672 678  39  87 213  19 618 684 686  90 577  38 579  12
 702  82 298 250  88 288 152 635  41 438 581 688 692   9 348 171 167 136  44 607 627 661 235 110 643 568 594
 240 297   2 149 104 169 194 614 646 626 326 446 638 566 682 122 112 259 617 601  80 631   7 649  32 651 395
  94 648 346 709 185 556 117 478 630 179 384 675 674 540 487 123  62 148  24  76  63 669 124  20 598 605 641
 659 356  83  36 472 610 301 703 564  78  17 690 554 705   4   8 156   5 622 506 204 611 186 496 587 595  47
 498  11 184 131 151  31 284 482 505 616 548 668 480 552 589 561 102  75 567 597  57   6  49 602 596 691 222
 640   1 115 182 388 558  35 514 499  22 141 521 539 542 528 460 147 105 632 578  48 434  16 504 513 493 700
 490 118 404 455  28 531 238 524 527 537 470 477 467 608 419 547 300  72 533 119 160 411  84 164 543  69 560
 522 488 212   3 451 399  70 599  60 106 501 526 450 536 491 551  74  65 128 652 203 634  25 495 580 590 444
 471 407 456 139  52 380  43 500 468 157 418 511 405 426 396 433 394 137 383 523 280 600  42 586 415 518 315
 553 108 100 334 121 389 279 423 508 515  30 289 458 465 466  73 324 291 382 541 538 603 261 432 464 374 534
 375 109 442 276 461 427 512  66 525 413 462 292 463 274 392 366 302 437  97 475 165 459 177 377 593 473 445
  14 338 349 452 449 486 353 330 187 484 321 441 544 492 322 420 397 360 230 373 347 425 277 429 323 371 341
 406 354 378 266 306 448 363 333 258 361 332 391 436 357 309 379 453 325 410 350 381 398 414 269 400 331 447
 440 365 393 320 248 439 305 296 345 253 362 479 369 408 727 520 417 368 307 245 275 351 532 454 229 282 126
 316 385 386 251 372 355 409 201 227 443 340 694 364 335 328 242 424 311 390 218 401 343 503 359 273 609 376
 329 209 637 287 270 285 327 412 155 699 726 255 231 339 286 295 314 685 202 180 497 243 625 207 257 267 636
 262 308 687 217 457 189 549  86 342 215 583 161 260 162 344 592 574 708 352 196 628 281 546 271 310 256 319
 367 670 313 163 263 337 431 244 370 676 516 210 214 216 225 166 224 633 278 660 489 317 507 233 252 208 673
 358 304 645 719 402 221 303 312 246 620 494 192 200 134 318 198 698 555 545 283 254 120 658 211 272 299 294
 232 535 293 715 422 219 724  64 666 247 474 132 237 101  81 241 711 430 191 193 723 150 712 612 113 168 469
 142 613 604 716 697 606 575 195 239 563  93 175 205  23 223 133 701 664 129 176 421  56 585 721 190 146 264
 154 519 159 571 714 197 710 268 144 249 671  10  58 615 145 677 655 650 629 290 582  15 728 188  61  85 111
 706 125 483 729 642 199 718 234 114 228 158  68 127  18 140 707 621 704 588 226 570  29 572 680 236  27 206
  54 435 336 679 720 576 644 562 103 403 153  46 183  45  91 619 624 265 476 174 502 584 647  77 725  53  79
  96 722 717 481 696 135 623  92 173 181 557  98  71  26 693 639 428 695 530 178 107  89 662  99 517 510  40
 713 667 170 509 683 172 529  34 657 416 138  55  51 689 143 573 387 559 550 220 569  50 591  33  95  37 565

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00024e+07us (= 10002.4ms, 10.0024s)
Wall-clock time (full program): 1.00579e+07us (= 10057.9ms, 10.0579s)
Satisfaction error: 2
Number of search iterations: 1969
Number of local moves: 650 (including on plateau: 234)
Number of local minimum: 125 (including on plateau: 25)
Number of resets: 0
Number of restarts: 0

Problem in column 1: 21 702 240 94 659 498 640 490 522 471 553 375 14 406 440 316 329 262 367 358 232 142 154 706 54 96 713 => the sum is 9854 rather than 9855
Problem in column 22: 686 661 631 669 611 6 434 411 634 600 603 459 425 398 351 343 243 281 317 120 150 56 15 29 584 89 50 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 718 492  56  74  53  13 582 386  71  21 687  20 165 712 636 725  88 629 471 149 637  47 659 206 711 150 697
 134 709 166 249 128 112 642 682 728 352  14  29 154 102 526 311  27 685 459 650 667  67 304 527 578 729 124
 342 574 563 141 139  23 579 466 706 136 695 109 163  34 143  49  39 716 627 144 715 111 603 549 720 114 655
 281 359 701 705 220 335 654 164  68  69  55 113 583 159 550 724 142 371 559 661 555 118 693 710  87 120  99
 135 523 123 615 727 122 528 105 116 326 623 167 437 108 668  40  52 147 441  96 426 101 726 576 698 525 704
 160  28 266 261 151 719 703 104 188  94  62  70 591  38 601 107  92 542 631 641 501 714 595 568 161 546 721
 137 643 174 253 219  78 440 117 226 213  12 293 707 179 599 411 204 694 646 657 700 258 540 696 183 473 103
 156 235 225 192 449 240 598 202 717 223 309  50 713 187 327 506 186 457 312 390 608 363 581 490 145 669 325
 153 580 168 181 286 229 681 679 182 282 196  46 690 442 609 618 275 640 210 190 512 227 567 239 180 519 274
 269 447 314 203 256 262 645 273  83 176 653 283 613  75 300 464 248 635 201 215 491 511 474 575 353 678 158
 246 616 177 318 191 556 458 336 435 217 228 321 444 270 708 271 234 592 264 302 477 285 544 212 320 532 301
 319 456 236 393 237 254 462 379 211 505 543 279 265 482 361 351 460 224 392 507 483 445 487 189 255 364 316
 317 436 278 382 346 289 292 384 355 284 354 329 291 288 723 539 287 404 343 208 296 399 397 341 241 722 330
 423 410 339  81 251 432 313 401 360 376 365 451 322 499 405 630 502  10 375 323 347 434 377 425 385 252 367
 356 409 349 381 348 448 222 231 207 307 463 443 357 362 421 529 303 413 515 276 272 398 232 537 324 345 407
 496 389 461 396 344 494 243 414 467 263 368 395 214 277 267 383 548 332 430 194 152 370 350 417 280 446 465
 422  41 388 504 450 438 299 372 387 428 306 420 373 424 331 610 374 230 380 333 205 408 244 369 433 439 247
 419 415 624 486 391 340 238 394 452  36 497 573 294 259  33 133 535 489 508 484 169 366 378 310 328 157 547
 552  15 469 590 538 498  65 475 155 500 479 607  59 468 534 431 570 337  42 533 216 565  26  79 476  73 503
 403  66 454 521 493 297 250   6 597 677 429 617 193 480 315 185 470  30 178 412 162 572 198 257 587 402 604
 639  98 472 577 517 416  89 478 485 633  37 418  86 308   9 674 524 536 172 513 427 634 209   3 662 195  44
 622 175 400 481 551   5 200 495 518 648 593 606 218 545  19 614 553 305 125 557 221 358  51  85 628 260  22
 656 233 584 453  25 602  93 121 564 589 611 683 131 509  63 295 561  32 530  17 130 621 171 127 516 338 600
 173 455 647  31 670 664  43 663 566 688  76 514  82 702 541 138 620  84 199 586  57 110 126 197 558  60 605
 585  18   1 666 612 691 106 406 649 488 520 684 522 672   2  48 652 146 594 100  58 632 115 245  35  54 554
 665 334 531  45 571 625 140 562 298 680 510 660 569 588 148  61 638  80 119 626 129 651 184 268   4  97  72
  77 699 689 676 692 673 290 560  64 644 170 675 619 686  16   8 671  95 132  91 242  90  24 658   7 596  11

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.24997e+06us (= 8249.97ms, 8.24997s)
Wall-clock time (full program): 8.3052e+06us (= 8305.2ms, 8.3052s)
Satisfaction error: 0
Number of search iterations: 1737
Number of local moves: 771 (including on plateau: 295)
Number of local minimum: 124 (including on plateau: 38)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 725  97 606 682 101 580 582 487 137  71 694 514 586 600 149 559  72 223 115  55  99 591 567  75  86 712  90
 543 488 132 668  44 636 620 301 107 675 643 693  64  93 584 690  65  66 136  58 481  74 692  56 145 447 654
 188 153 708  98  69 656 728 198 204 583 618 674 548 598  60  61 174 510  94  92 164 165 526  70 660 539 717
  81 125 679 457 113 653 208 505 406 602 509 119 458 696 699  83 716  84 117 291 151  77 710 428 108 118 662
 719  79 688 121 513 281 285 652 139 144 562 635 244 663 131 650 197 212 527 700 300 199 187 180 163 128 556
 689 170 147 171  91 721 184 633 120 161 664 707 630 722 647 148 299 112  96 676 200 138 608 111 160 146 704
 116 201 233 150 193 727 729 623 254 713 361 141 596 295 182 364 176 316 142 551 711 124 644 238 191 175 709
 349 154 571 183 159 560 231 697 705 195 683 189 203 134 290  85 266 239 587 250 287 245 629 718 308 296 642
 265 267 256 222 360 512 332 640 723 264 434 242 698 219 438 178 214 211 186 604 237 179 624 225 535 260 530
 155 158 333 236 190 307 248 518 328 720 581 309 726 259 258 670 206 665 224 284 274 207 536 381 324 297 461
 255 369 215 249 389 383 241 651 421 243 407 246 353 216 542 143 626 385 247 639 172 269 645 370 391 277 511
 205 293 217 289 394 310 396 555 286 341 482 392 288 322 261 429 340 228 492 540 252 418 280 724 325 345 451
 306 263 393 496 399 395 315 313 445 371 232 378 403 468 230 220 272 478 379 359 305 348 400 484 405 350 448
  23 354 253 330 294 357 444 292 321 282 302 430 561 372 450 625 356 404 319 424 251 368 442 490 318 411 382
 326 414 365 355 410 314 419 373 390 459 351 483 455  14 312 454 388 344 157 363 367 413 317 436 520 380 276
 278 298 426 320 387 105 480 432 352 469 471 474 456 402 409 323 374 346 397 417 408 339 376 449  53 500 114
 537  43 431 440 508 517 485  47 377 384 202 437 358 338  31 283 545 423 331 196 609 465  32 467 534 473 362
 521 622 529  49 303 275 462 401 279 493 335 477 270 522 342 435 366  10 453 127 528 476 126 489 463 329 173
 433 502 347 420  89 425 577  51  34 336 234 472 152 610 613 549 494  36  28  24 441 531 460 486 702 538 271
 589 516 439 563 497 334 443  11 227 110 235 475  41 491 416 327 412 466 168  50 337 619 209 685 479 554 162
   4 605 565 553 614  95  39 167 532 574  48 566 130 578 240 504 386 573 541 375   8 519 304 464   9 649 213
 169 659 594 585 501  67  63  30 557  29 100 166 558 570 612 603 575 495 641 177 592   1 221  62 572 588  68
 677 550 106 524 706  87 525 229 599 122  33  12 104  80 470 617 615 657 701 133 632 552  35 506 422  52 109
  45 515  17 446 628 102 601 268 597 499 123  13 257  27 661 616 569 507 715 523  78 638  22  46 672 655  15
 593 678 503 646 673  54  73 210 218 185 181  18 576 452 634   5 140 648 681 621 680 666  16  26  25 611  42
 637 579  82 595 544 129  88 415 564 568  59   3 103  38   2 194 669 546 667 695 607 547  21 691 658  19 135
 427 703  20   7 686 273  57 156 533 262 311 590  37  76 192  40 343 671 714 631 684 687 226 498 627   6 398

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 5.28107e+06us (= 5281.07ms, 5.28107s)
Wall-clock time (full program): 5.33605e+06us (= 5336.05ms, 5.33605s)
Satisfaction error: 0
Number of search iterations: 780
Number of local moves: 585 (including on plateau: 161)
Number of local minimum: 30 (including on plateau: 14)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 684  71 657 283  50 723 604 529 167  48 728 582  55  43 436  46  53 410 509 702  70 674 541 319 592  25 254
 127 697 154 544 111 727 548 696 131 384  21 577  95  69 457  16  27  26 649 547  58 606 585 687 540 719  57
 662  20 726 205 148 708 693 638 309 130 218 596  76  62 589 244  84 138 575 159 301 654 530 679 431 136 144
 119  75 539 601  35 725 715  80 349 668 721 474  34  15 675  18 189 160 650 157 122 558 524 623 669 114 246
 128 104 652 161 729 475 673 187 455 110 105 443 120 132 287 185 134 461 677 201  78 625 695 527 614 678 220
 156 714 182 545 716 408 667 471 121  29 141 595 150 149 647 174 113 583 528 445  67 526 554 314 494 145 221
 108 115 682 164 143 469 665 228 199 257  61 624 207  77 670 215 194 644 590 441 722 486 495 284 578 325 212
 197 266 186 557 542 724 343 663 267  86 227 563 184 263 499 158 137 209 634 648 155 646 508 222 661 177 133
 243 200 399 238 166 710 505 522 293 281 233 712 248 172 358 214 272 250 525 328 369 549 645 253 556 291 323
 311 217 256 251 655 462 300 265 146 694 259 224 181 210 620 273 561 717 315 493 211 447 705 336 329 140 277
 386 297 334 236 279 454 240 282 261 432 610 357 255 389 337 476 179 362 183 633 632 568 456 276 312 264 365
 368 332 335 271 296 642 298 372 295 152 270 398 434 352 235 381 247 355 635 326 423 472 242 330 720 249 425
 396 286 348 350 331 391 302 400 382 338 361 234 320 711 429 345 418 280 351 387 430 442 317 464 292 226 324
 374 195 388 231 310 354 346 380 394 219 375 407 230 339 262 414 487 426 437 321 305 366 510 318 412 701 353
 397 405 216 401 550 303 483 385 453 393 347  60 376 519 288 406 360 367 371 173 496 341 289 416 392 290 378
 402 327 316 415 484  19 260 480  56 322 307 444 490 438 403 109 404 342  93 451 422 390 491 435 424 534 597
 470 278 555 473 560 232 485 463  47 479 237 413 417 356 467 409 294  32  79 377 446 229 225 538 420 373 501
 488 594 466 427 364 304 532 285 559  28 433 363 449 513 543 223 468 107 359 117 591 175  14 344 383 193 533
 573 498 163 612 503  41   6 450 116 428 537 162 477 521 502 395 459 439 306 239 511 169 275 553  51 458 411
 440 643 615 619 153 190 497 191 535 465 478  13 520 421  94 569 579 489  68 268 460  89  66 206  40 611 536
 586 637 516  88 587 102  37 176 504 492 580  87 607 514 126 576 552 142 139 627   5 213 124 565  52 622 599
 452 630 629  82 448 340  64 506 691 562 571 208 581 481  63 616 515 523  99  72 618 165 241  17  31  11 639
 551 500 101  97 333  73  59 567 512 518  30 203 603 613 308 690 631 252  54 299 572 188   4 608 192 626 671
 482 546  42   1 621   8  24 564 574 600 605  92 704 566 258 617 570 245 168  83 517  45 370  90 171 651 641
  85 609 135 598  44 123 313  33 700 379 706 151 689 593  81 683 584 531 196  49 507 125 269 118 274 588 692
 660 419  65 707  38 112  96   3 686 680  22 170 713 709  74 685 656 699 658 636 664  98   2 204 202 106  91
  10 180 198 698 659  36 100  39 653 681 672 703 640 628 147 718 688 666   7 676 103   9 178 129  23 602  12

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0002e+07us (= 10002ms, 10.002s)
Wall-clock time (full program): 1.00642e+07us (= 10064.2ms, 10.0642s)
Satisfaction error: 2
Number of search iterations: 2058
Number of local moves: 966 (including on plateau: 359)
Number of local minimum: 150 (including on plateau: 37)
Number of resets: 1
Number of restarts: 0

Problem in row 5: 128 104 652 161 729 475 673 187 455 110 105 443 120 132 287 185 134 461 677 201 78 625 695 527 614 678 220 => the sum is 9856 rather than 9855
Problem in row 14: 374 195 388 231 310 354 346 380 394 219 375 407 230 339 262 414 487 426 437 321 305 366 510 318 412 701 353 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  37  51 696 598 550  32  23 647 611 158 254 637 576 721 572 134 297   4   8 563 709 693 444 524  30 104 182
  25 474 479 551 391  90   2 544 446  20 646  17 489 712 522 100  84  91 476 594 717 681 614 225 144 588 133
 111  44 728 610 701  24  57 608 623  87 723  65 521 619 726  67 704  66 110 616 480 552 702  79 150  22  60
 128 699 546 719 431  55 151 549 471  98 603 542 707 694 495  39 427 161 118 638 477 168 390 146  61 183 159
  96 283 505 671 200 152 177 556 720 113 645 193 584 697 724  40  69 508  95 626 440  76 660  11 172 156 686
 180  64 553 675 271 729 214 329 606  78 710  59 555 592 493 192 651 147  62 488 429 206 534 208 165 425 240
 450 164 463 485 716  53 708 639 617 170 202 123 650 195 722 209 112 171 121 629 499 143 680 197 249 199 289
 125 126 657 620 497 201 216 706 641 243 337 321 714 141 718 218 204 178 101 421 633 490 507 148 220 340 132
 229 231 658 227 692 255 318 263 727 207 265 226 324 127 242 135 578 290 695 625 504 296 643 442  88 298 270
 232 163 259 223 662 336 273 649 715 698 274 233 605 366 510 313 102 332 230 333 569 307 461 348 309 186 167
 475 327 387 239 589 264 184 286 272 385 601 176 557 455 191 345 664 370 256 322 627 293 316 224 456 341 253
 700 228 375 344 268 315 325 407 280 211 339 705 352 319 212 277 416 408 354 409 376 377 342  68 434 640 374
 373 371 360 331 357 294 406 439 423 312 317 314 372 378 725 361 219 238 266 393 410 362 417 334 419 395 269
 424 388 299 392 351 267 292 430 356 310 426 401 210 347 438 713 604 248 157 399 359 382 367 311 301 363 320
 403 355 397 323 368 288 396 252 282 412 328 330 402 389 222 350 432 398 453 295 470 411 404 326 343 462 364
 262 260 234 300 445 437 449 369 414 452 420 291 221 383 472  21 394 353 467 287 244 465 435 436 559 302 483
 526 575 185 491 441 481 473 365 215 486 109 487 413 454 468 451 120 525 443 174 281 428  86 160 523  77 418
 528 571 106 502 181 536 448 500  19 349 381 593  47 346 205 562  81  41 567 305 190 457 433 573 512 422 400
 548 466 545 189 250 494 384 108 129 518 514 496  85 275 469 558 533 539   7 459  15 498  45 501 278 537 415
 276 460 217  89   9 574 284 257  92 541 241 554  49 520  26 447 513 379 531 561 258 506 335 596 492 564 484
 543 140 139  35  38 482 587  18 304 566 586 529 261 517  71 580  75 519 600  42 308 579 279 628 503 358 568
 613 535 131 194  29 338 530  99 149 635 590 509  83 155   3 511 547 672 595   6 236  97 173 648 674 565 538
 570 585 166  36 187 458 677 130 169 245 116 615  74 137 188 630 175 676 631  58 154 622 117 618 540 612 669
 673 516  54 527  70 689 532 515  46 642  43 213  34  14  94 666 685 582 577 198 203  63 303  50 602 665 599
 591 405   1  80 659 652 632  48 179 560  31 609 251  56  73 597 380 667 636 162 138  16  13 688 386 682 663
 634 683 478 119 196 656 653  27 235 690 142  10 583 153 246 661 105 581 655 145   5  33  72 679 624 122 668
 103 691 237 285 306 703 464 115 114 670  12 607 136  93  28 678 684 711 644 107 124 654  82 687 621 247  52

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00031e+07us (= 10003.1ms, 10.0031s)
Wall-clock time (full program): 1.00491e+07us (= 10049.1ms, 10.0491s)
Satisfaction error: 2
Number of search iterations: 2232
Number of local moves: 881 (including on plateau: 265)
Number of local minimum: 165 (including on plateau: 31)
Number of resets: 1
Number of restarts: 0

Problem in column 10: 158 20 87 98 113 78 170 243 207 698 385 211 312 310 412 452 486 349 518 541 566 635 245 642 560 690 670 => the sum is 9856 rather than 9855
Problem in column 23: 444 614 702 390 660 534 680 507 643 461 316 342 417 367 404 435 86 433 45 335 279 173 117 303 13 72 82 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 718  72 662  97 660 108 403 549  95  75  98 667  20  22 701 138  81 178 366 601 540 569 703  84 402 544 702
  57 393 726  90 649 348 168 676  54 707 638 615  42  52  80  86 132 630 666 541 570 577 117 481 444 267  49
  46  68 360 704 720 710 134 647 126  28 213 644  33 276 106 261 113  85 599 543 691 658 614  62 256 495 663
  25 693 713 643 580 303  66 600  38 120 162 623 167 119 133 682 100 679 714 259 198 428 656  78 443 143 490
 153 107 645 125 347 424 160 654 571  26 235 639 130 131 179 140  37 189 723 633 594 531 661 285 678 716 142
  51 247 722 491 589 719 158 251 288 157  83 706  71 573 173 164 144 582 518 408 620 721 156 206 536 314 207
 201  76 287 241 728 454 717 680 165 202 240 602  65 209 291 199  58 538 709 532 637 575 150 279 724 135 161
 323 212 640 190 530 379 171 516 286 253 242 517 220 501 232  99 148 681 515 592 697 136 312  91 653 376 343
 197 172 248 183 547 635 191 398 340 246 405 336 137 258 321 346 277 625 351 263 727 564 607 211 725 309 236
  92 292 223 272 521 584 192 469 244 715 371 280 174 729 230 225 237 712 389 686 297 497 221 222 412 264 305
 382 354 301 238 320 586 399 341 239 270 473 359 208 299 295 243 414 619 604 182 289 670 203 290 507 278 492
 370 395 411 355 695 250 296 477 271 369 328 245 302 315 514 455 458 114 266 596 451 252 210 344 460 350 306
 356 380 231 332 308 352 609 505 410 316 364 229 390 545 310 218 421 300 227 626 293 361 339 387 374 446 226
 284 437 386 423 388 216 611 391 338 194 442 385 409 335 383 163 307 234 578 447 262 233 282 406 466 274 581
 420 384 337 330 345 334 450 268 417 357  47 333 566 331 249 304 621 415 413 456 255 434 464 275 397 329 324
 349 554 562 510 260 465 471 441 128 407 342 281 503 187 478  70 485 322 283 433  50 327 392 542 104 480 429
 365 448 196 375  69 166 326 358 427 457 463 111 499 461 568 400 506 430 124 353 529  88 512 493 176 459 496
 603 103  60 483   6 470 627 431 608 533 605 508 526 462 449 509 452  12  40 115 527  48 472 377 188 273 368
 488 416 498 476 311  53 363 435  59 426 436 475 500 486 525 394 560 453 318 298 474  89 559 673  74  13   3
 651 317 180 519 177 200 565  96 487 422 484 219 440 598 576 419 418 254 181  27 110 294 520 574 257 425 445
 396 622 551 494 205 175  39 169 610 381 528 319 628 139 587 595 553 378 184  32  64 535 489  55  77 504 546
 467 479 502 552  29 228 591 105 659 563 624 145 585 109 636 537  14 438 269 313 127  23  36 699 159 534 432
 513 657  31 612 439 193 617  87 555 685 692 195 683 522 634 616 618  73 265  93 151 101  45 664 102  10   2
 641 652 123  16 146 147 650   7 677 468 588 116 511 154 572 558 646 373  17  82 112 539 579  30 155 665 631
 590 672  21 482 204  19   1  44 632 523 700  94 669 698   9 711 688 141 325   5 224 122 524 668 401   4 684
 550  56 118  61  15 629 694 217 583 362  18 149 690 655 613 648 671 185  41 367 214 404   8 674 556 642  35
 567 597 121 561  67 708 186  43 548 593  34  63 687 689  11 675 696 215 170 372 152  79  24 705 129 606 557

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.0279e+06us (= 6027.9ms, 6.0279s)
Wall-clock time (full program): 6.08447e+06us (= 6084.47ms, 6.08447s)
Satisfaction error: 0
Number of search iterations: 964
Number of local moves: 651 (including on plateau: 207)
Number of local minimum: 49 (including on plateau: 24)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 137  69 655 618 461 553 125 375 417  43 138  54 155  48 220 566  36 122 696 619 723 174 725 649 715  61 701
 143 729 517 596 164 540 113 654 590 506  94 283 127  64 132 660 159 651 135 597 107  84  37 663 712 717  81
 728 465 718 314 176 514  62 558 727 689 564  75 124  68  56 529 206 469 695 437  79  38  78 673 505 140 168
 699  60 147 240 623 704 622 724 711  82 139 182  98 332  67 678 169 662 561 518  99 149  86 545 616 104 238
  83 196 325 690 336 637  53 706 635 222 547 109 202 102 316 568 503 522 162 624  76  49 360 609 714 300 209
 620 123 179 694 722 666  91 626 353 551 379 415 231 248  58 223 110 548 200 581 118 726 178 245 569 236 165
 481 121 636 392 201 565 693 665 217 181 235 579 105 207 270 401 210 603 241 447 702 136 153 250 676 346 142
 497 320 351 296 335 563 154 342 646 175 237 598 371 213 160 631 152 468 225 709 171 211 384 594 592 187 273
 199 641 365 555 234 595 148 628 652 161 605 185 243 350 354 172 145 668 648 302 359 194 126 345 439 284 258
 713 259 268 370 151 403 426 576 226 680 691 587 115 274 219 214 256 347 239 508 374 212 292 344 516 307 288
 257 688 271 380 308 358 324 573 382 173 681 166 120 315 221 610 672 352 443 272 306 337 267 466 366 294 253
 326 255 244 612 247 533 313 703 229 341 355 289 285 372 435 330 279 418 261 409 312 328 434 580 388 391 186
 230 486 397 362 191 377 249 541 356 295 367 340 431 407 343 444 301 460 423 263 260 617 378 218 363 399 357
 441 412 349 327 291 369 381 131 299 331 280 483 383 293 428 457 509 339  32 309 430 442 445 489 389 405 411
 282 368 476 311 128 387 404 101 322 385 297 586 393 455 421 420 321 376 406 458 398 477 303 167 287 493 433
 416 394 277 480 574 413 386 193 278 227 488  19 264 473 390 472 144 502  65 496 364 474 436 396 373 453 408
 470 432  29  30 424 265 498 215 422 402 333 114 494 600 414 513 464 348 515  93 484 482 400 425 116 454 419
 526  71  42 463 492 269 507  90 487 504 319 467 601 305   9 456 429 524 528  17 479 450  34 534 478 451 323
 521 510 491 449 499 266 571 111  21 448 100 232 438 539 674 108 602 276   1 640 318 440 485  41  22 495 557
  74 184 556 254  97 252 591  89 585 117 531 543 427 593 500 150 567  80 544   5 584 446 410 290 197 546 643
  57 692 599 462 525  47  16 242 475 535 106  51 657 588 550  13 572 275 501 228  11 552 560 204 157 519 661
  77 647 262 281 582 286 536 452 304 530  39 216 471 459 532 134  96  20 630 158 538 180 537 554 141 604 589
 549 671 583  70  50  15 575 183  59 203 361 614 607 246 716 156 317 298 650 338 578 520  35   2 119 658 682
 163 195  33  24 611  18 653 133 112   3 608 638 629 562 523  66 721  26 634  10 697 656 670 130  44 683 613
 205  14   4 527 639  28 675 146 190 687 542 708 621 679 490 642 719 198  63 559 615  92 625  88   8   6  85
 632 189 570  27 606 177 644  52  87 684 627 645 577 667 659 170 512 208  23 233  40 720 707 251 129  12   7
 329 664 511  31 188  55  45  46  73 700 192 677 686 395 698  72 685  95 334  25 633 669 710 103 224 310 705

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00016e+07us (= 10001.6ms, 10.0016s)
Wall-clock time (full program): 1.00578e+07us (= 10057.8ms, 10.0578s)
Satisfaction error: 2
Number of search iterations: 2659
Number of local moves: 942 (including on plateau: 370)
Number of local minimum: 189 (including on plateau: 41)
Number of resets: 1
Number of restarts: 0

Problem in column 14: 48 64 68 332 102 248 207 213 350 274 315 372 407 293 455 473 600 305 539 593 588 459 246 562 679 667 395 => the sum is 9854 rather than 9855
Problem in column 17: 36 159 206 169 503 110 210 152 145 256 672 279 301 509 321 144 464 429 602 567 572 96 317 721 719 512 685 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 335 386  36   6 689 126 525 655 719 406 690  43 579  77 693 703 626 650  51  58  32 219 686 228  70 559   8
   2 710 131 639 675   5 698 643  22 608 679 268 674  81 635 722 170 117 638  39  44 318 316 204 118 645  54
 136 201 176 646  27 413 702 692 648 308 671 121 681 122 619 727  20 545  24 138  23 217 594  57  11 680 656
 622  41 595  16  80  21 685 263 652 641 673  66  40 123 714 628 539 547 115 312 533 552 587 408  37 159 206
 517 523 576   3  35  52 214 630 489 642 599 620 565 218 707 712  48 615 668 116 293 110  30 125 127  71 550
   1  78 664 493 605 282 360 667 526 676 519 450 467  29 633 323 166 558 549 174  45  64 514 331  75 451 155
 106 120 500 589 575  13  17 557 688 582 569 283 465 562 574 527  56 553 591 111   7 197 618 119  93 593 190
 267 501 556 571  18  15 444  10 649 211 453 613 598 130 538 513  38 609 687 317 380  76 535 200  74 572 280
 196 505  25 434 483 109 332 570  42 114 583 596 567 168 532 441 528 479 102 154 251 566 561 482 425 449 161
 157  50 461 506 405 306 438 433 422 462 534 399 392 391 375 460 411 509 524 194 101 454 469  14 470 349 169
 134 515 452 443   4 175 511 409 490 210 292 502 215 426 427 498 393 395 477 435 464 216 463 372 350  96 491
 220 507 423 472 403 373 428 325 475  73 455 415 484 419 537 369 286 468 439 355 270 146  12 487 510 357 147
 522  94 420 394 548 261 412 254 370 416 495 442 476 358 288 361 367  90 233 396 417 324 334 382 383 397 421
 371 244 488 356 309 384 246 410 446 682 257 432 496 385 339 342 378 252 178 296 278 440 447 322 374 314 389
 414 299 304 431 305 436 150 445 429 678 354 234 348 310 320 327 437 269 341 352 541 338 424 377 368 284 340
 402 302 359 398 307 319 430 362 212 407 253 400 256 381 329 577 390 351 297 520 504 226 289 277 718 366 223
 486 672 376 262 597 466 258 264 189 457 276 336 364 239 301 187 186 345 225 328 542 695 208 281 379 236 700
 238 637 229 202 227 624 588 163 235 255 188 240 149 634 259 151 321 659 333 580 478 474 209 343 313 632 494
 521 274 311 231 237 401 294 167 337 222 193  84 271 291 245 503 326 344 697 603 365 725 404 456 617 185 551
 249 459 363 347 272 640 287 728 330 248 346 144  69 670 192 181 636 148 273 243 546 205 141 717 303 610 508
 607 315 250 242 720 669 724 143 265 140 290 203 191 516  95 142 353 177 105 623 266 657 183 713 627 221 418
 555 165 300 295 616 708  99 162  60 458  83 651 285 473 113 124 584 156 164 530 602 658 172 625 529 128 560
 471 581 184 198 153 481 152 133 213 531  63 726 298 568 137  87 604  98 195 554 564 647 709 716 518 103 171
 260  85 182 592 480 677 199 540  65 275  91 691 665 279 104 107 129 230 721 614 706 232 135 180 660 715 241
 699 631 684 544 207 654  46  89 606  62 108  88  61 711  34  28 573  26 492 653 696 388 160 590 499 139 387
 701 448 247 536 173 644 585  49 179  19  55 729 132 600  82  68 661  53 158 497 683 100 543 145 621 485 662
 666 512 563   9 705 601  31  92  97  72  86  79  67 694  33  47 629 612 578 663 224 611 112 704 586  59 723

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.45613e+06us (= 7456.13ms, 7.45613s)
Wall-clock time (full program): 7.51226e+06us (= 7512.26ms, 7.51226s)
Satisfaction error: 0
Number of search iterations: 1330
Number of local moves: 665 (including on plateau: 289)
Number of local minimum: 101 (including on plateau: 34)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  23 632 172  41 115 124 683 111 139 692 396 376 240 713 170 710 592 123 602 204 658 619  12 128 729 657 194
   8 559 117  24  11  18 628  62 270 687 690 644 570 631 245 696 695  94 612 589  40 260   7 137 649 231 681
 534 598  26  83   2 120 633 103 199 540 595 643 136 682 284 646 650 223 485 626 665 653  31  27  28   3 640
 601 661 678 294 118  84 587 113 147 341 584  77 211 629 151 593 510  37 153  45 694 652 132   9 466 675 613
   6  57 669 148 344 571 553  48  60 635 685 564 248 567  89 549 495   5 624  56 578  22 165 641 467 435 574
 655 664  79 119 178   1 605 615  33 575  85  13 249 513 563 536 637  25 581  20 607 311 141 491 554 573 432
 577 671 230 219 150 152  16 108 126 523 617 494 251 600 125 556 597 456 604  42  15 546 255 547 511 246 621
 543  50 295  72 104 355 550  17 360 572 300 444 353 614 473 488 475 525 332 163 522 445 193 548 504 539  19
 508 560 562 233 247 585 501 336  29 520 565  32  49 340  10 367 345 542  43  80 496 426 273 462 618 599 527
 483 512 541  91 176 320 192  75 272 535 422 518  69 476 327 530 519   4 457  82 364 505 214 500 670 499 502
 433 348 464 256 217 277 452 528 369 515  21 455  61 478  76 434  14 507 474 454 482 465 250 431 461 497 436
 438 359 459 235 234 382 372 429 486 292 262 391 479 402 484 271 210 394 449 428 420 365 306 399 343  74 492
 441 329 368 220 395 412 267 388 421 237 404 403 392 440 411 362 531 366 380 405 446 361 228 174 106 439 529
 503 389 453 325 373 451 299 254 498 358 378 314 419 304 310 349 437 346 315 375 398 393 385 280 305 354 290
 371 143 357 557 356 276 212 351 417 312 316 309 397 408 413 209 400 506 707 347 328 430 406 281 390 414 242
 322 339 265 330 415 410 337 381 407 188 384 672 350 301 275 386 334 460 266 268 324 647 447 293 283 401 370
 207 342 603 477 487 171 298 458 481 216 719 264 611 261 609 227 308 259 424 323 318 238 374 282 182 442 274
 333 162 319 471 425 448 166 321 648 645 243 313 610 326 509 379 409 218 278 416 149 195 352 269 297 715 239
 566 164 514 463 489 252 167 258 383 288 253 198 668 146 222 102 285 596 639 666 201 229 674 185 338 622 287
  47 159 659 636 588 241 232 516 561 175 200 244 582 196 627 387 468 236 155 677 286 221 480 225 208 161 688
 302 427 180 568 620 727 377 722 205 101 263 191 711 144 590 181 213 423 189 197 708 157 660 630  92  90 187
 183 202 127 676 680 586 190 335 651 289 576 279 579 110 686 291  30 594  68 552 257 684 532 226  78 215 179
 173 526  66 698 545 721 186 616 331 131 130 693 450 307 580 296 160 634 303 521 537  70 723 138  58 140 122
 697  95 158 714 704 728  39 716 555 145 100 203 493  97 699  44 224 689 469 490  88 169 538 642 105 133 121
 142 134 720 583 701 129 558 726 443 112  63 544  73  36 317  46  52 725  81 591  93 623 712 679 724 184  64
  59 718  71 667 472 706 656 551 691 177 517 107 569  96 524  53 156 206  67 705 116 135 702 606  51 363 114
 700  55 703 654 709 608  99 717 673  54  87 470  35  38  86 168 109 662  98 533  65  34 663 625 638 154 418

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00571e+07us (= 10057.1ms, 10.0571s)
Satisfaction error: 2
Number of search iterations: 1973
Number of local moves: 929 (including on plateau: 418)
Number of local minimum: 149 (including on plateau: 64)
Number of resets: 0
Number of restarts: 0

Problem in column 4: 41 24 83 294 148 119 219 72 233 91 256 235 220 325 557 330 477 471 463 636 568 676 698 714 583 667 654 => the sum is 9854 rather than 9855
Problem in column 16: 710 696 646 593 549 536 556 488 367 530 434 271 362 349 209 386 227 379 102 387 181 291 296 44 46 53 168 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 587 672   7 219 261 158 685  27  42 692  16 720 698 717 221 297 278  19   1 609 680 581 199 212 647 607   4
  46 618  20  36  99  17 675  56 533 604 134 548 549 678 669  26 145 633 123 637 130 705  68  86 715 615 690
 112  47 683 232 605   5 623   9 109 701 214 569 627 648 245 139 230 304 303 608 174 551  18 317 540 563 679
  12 286 499 722 711 415 703 106 180  11 111 181 629 687 539 220 271  22 176 686 135 577 154  13 616 641 552
 670 663 542 243 652 560 622 593 127  37 253 578 573 645 138   8  97   3 124  28 107 588   6 210 532 598 657
 412 635 574  62 599 636 351 208  85 493 118 561 501 451  24 592 170 559  89 541 103  25  87 179 644 640 516
 525 439 478 150 505 141 487 529  79 125  31 553 654 594 427  52  51 518 296 591  57 671 334  21 492 619 436
 550 430 473 457 580  30 527  93 568 382 524 617 497 566 484 425  94 424  95  14 639 511  44 121 250  23 437
 576 571 452 431  74 450 479  91 143 329 348 625 293 417  15  40 114 488 354 494 506 611 169 166 476 519 624
 462 485 405  33  80 572 195 531  34 513 429 606 514 438 502 458 165  48 117 477 364 422 386 146 562 565 346
 433 491 579  49  78 428 521 215 366 152 182 432 416 414  81 474 284 602 490 509 470 400 480 104 421 486 298
 406 435 379 276 323 471 444 203 523 274 350 368 337 275 287 302 325 313 390 419 420 342 265 454 361 537 376
 520 294 546 378 517 496  54 226 455 279 319 395 369 423 233  35  64 413 407 236 381 503 448 312 557 526 469
 321 426 460 472 383 353 328 544 288 292 389 306 404 507 449 453 335 237 399 410 320 349 345 248 311 257 269
 357 164 340 391 442 244 396 305 384 393 408 228 397 392 295 267 558 362 291 447 336 246 465 434 464 367 482
 318 583 282 280 495 193 281 352 309 277 254 467 388 211 653 339 418 375 504 316 209 235 656 710  69 373 308
 225 370 322 231 128 299 247 314 330 556 570 371 213 289 699 461 538 443 681 290 263 310 409 697 207 224 168
 238 326 374 684 327 380 171 387 227 512 510 260  43 264 665 234 545 155 704 192 204 363 621 500 344 270 355
 163 201 343 631 702 377 153 463 597 333 411 249 144 240 251 596 610 205 660 229 148 241 300 620 402 255 331
 256 365 347 564 307 198  82 359 630 242 266 315 285 194 338 481 468 515 642 190 682 185 268 707 358 372 239
 160 110 273 612 223 156 582 272 332 536 584 108  96 356 725 659 693 662 489 177 173  90 603 575 136  75 398
 129  61 119 695 186 586 191 614 440 508 674 162 218 113 178 445 613 172 708 189 667 105 567 456 196 217 646
 157 151 187 200 721 714 459 658 661 590 689  65 115 183 522 283 628 258 585  58 706 159 188 528  45 161 184
 149 206  60 324 202 673  83 626 650 140 676 137 126  41 441 677 729 655 216 666 600 131 718 483 122 102 222
 694  29 360 543 116 167 394 712 601 724 668 262 142   2 301 634 403 133 632  50 700  66 638 709  38  84  53
 726 727  55 385  73 547  59 643 664  72 197 101 595  10 132 535 554 688 120 716 147 713 728 401  98  92  77
 651  70 696 555 466 589  63 719 498  88 530  71  32 100 341 723 475 649 259  76 534 175 691 446 252  67  39

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.0057e+07us (= 10057ms, 10.057s)
Satisfaction error: 2
Number of search iterations: 2099
Number of local moves: 903 (including on plateau: 340)
Number of local minimum: 168 (including on plateau: 34)
Number of resets: 1
Number of restarts: 0

Problem in row 1: 587 672 7 219 261 158 685 27 42 692 16 720 698 717 221 297 278 19 1 609 680 581 199 212 647 607 4 => the sum is 9856 rather than 9855
Problem in row 5: 670 663 542 243 652 560 622 593 127 37 253 578 573 645 138 8 97 3 124 28 107 588 6 210 532 598 657 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 725 482  71 164 100 467 136  57  48  14 685 680 709 622 700  60 641 167 536 712  50  88 723  41  94 393 690
 647 693 129 124 710 630 171  68 435 118  55 489 672 681 666 649 505 117 101 570  16  53 130 708 102 540  76
 415 627 660 726 190 699  72 144 165  51 478 677 624 111 663 430 472  78 116 542 113  86 707  95 692 138  84
 135  97 168 629 718 562 538 689 597  44 133 703 713 625 522 639 642 105  66 261 717 104 131  46 120  25 126
 697 623  62 688 172 687  98 143 318 270 195 633 711 157 579 264 638 729 159 600  23 206  54 299 106 502 242
 223 640 123 621 193 353 108  79 525 205  38 446 493 610 398 644 282 676 615 695 277 357 155 306 139 635  19
  64 419 109 183 239 557 721 269 257  83  85 683 724 714 679  82 650 547 251 698 669 217 213  28 175 425 114
 169 728 198 320 337 645 716 591 202 208 166 137 211 150 189 422 577 719 704 602 250 220 720 176  12 301 185
 309 348 662 142 258 686 228 281 307 212 255 119 267 656 531 471 567 191 514 503 424 112 402 355 162 684 209
 608 606 335 232 361 442 214 344 314 327 235 276 300 373 178 462 263 722 665 459 319 279 501  67 145 603 225
 370 256 199 290 305 573 349 345 233 413 613 283 252 481 245 414 285 578 705 331 265 254 399 280 266 569 302
 364 291 313 369 701 539 324 326 338 312 268 187 293 379 297 226 526 247 682 411 234 404 658  59 694 216 197
 288 408 409 343 151 341 461 473 204 323 366 447 294 451 392 391 416 397 378 354 702 184 431 358 304 368 221
 384 437 405 278 340 321 284 350 382 339 386 420 308 325 403 417 351 188 434 488 356 410 377 406 374 271 421
 362 219 484 262 352 316 273 445 509 322 286 560 427 387 248 244 388 360 310 487 272 346 441 396 311 385 463
 215 140 466 433 390 147 400 444 115 395 499 412 296 274 179  70 329 541 328 496 552 334 520 558 389 438 495
 367   6 429 333 458 287 527 401  87 476 383 507 423 380 449 246 230 528 275 259 457 561 315 376 428 121 546
 342 452 375 448 303 203 289 243 486 474 529 519 521 436 492 317 407 336 103  13 454 550 156 330 614  24 439
 565  61 347 432 464  47  26 516   9 523 497 480 372 555 483 229  45 544  22 453 163 418 609 440 515 530 510
   2 443 599 631 587 181 506  20 537 513 182   7  65  49 556 465 332 498 161  27 604 574 455 643 559  93 566
 585 470 477 553 128 365 491 494 170 524 533  96  80  92 426 548   3 186 237  30 479 564 236 646 601 249 592
 636 298 394  33 598  31 664 580 500 696 588 180  63 508 177  39   5  75 253  74 532 450 511 657 572 160 581
 654 218 576 134 485 125 671 518 618 535 534 107 456  56 132 224 210 295 371  89 460 554 141 543 571 110 468
  52 194 593 469 637 200 670 584 594 582 628  21  81 174   4 616  43 122 490 292 605 595  69  18 661 241 620
 652 146 517 381  32  91 596  90 551 632 653 586  73 359  37 619 227 154 504 240 475 651  99 655   1 612 222
  10   8  40  11 611 153 149 634 648 589 549 158 196  58  29 590 583 148 512 152 260 617 668 678 673 563 568
  15 545 715 626  35 207 173 727 706 675  36  42 231 192 201  77 238 607 363  17 127 667  34 691 575 659 674

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0002e+07us (= 10002ms, 10.002s)
Wall-clock time (full program): 1.00583e+07us (= 10058.3ms, 10.0583s)
Satisfaction error: 1
Number of search iterations: 1989
Number of local moves: 737 (including on plateau: 242)
Number of local minimum: 171 (including on plateau: 35)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 0: 725 693 660 629 172 353 721 591 307 327 613 187 294 325 248 70 230 336 22 27 479 450 141 18 1 563 674 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 390  68 621 687 354  50 699 723 640  48 123  44 531 619 548  64 690  46  43  71  85 651  28  87 555 661 729
  69 383 594 695 590 129 566 705 713 184  16  60 176 497 643 238 464  10  40 682  81 558 107   6 450 506 693
 393 665 717 521 540 197 534 678 610  47 199  95 712 101 117 102 586  89  36 629  41 638  70 157  99 573 709
 173  65 165 446 515 114 673 634 556 201 700 253 160  62 504 154 136 237  42 708  67 603  96 722 680 582 607
 139 163 142 164 686  93 547 633 414 508  72 203 652  80 246 480 179  79 134 103 715 656 455 707 281 685 639
 130 659 720 689 208 158 282 591 567 131 144  97 230 381 622 211 371  94 143 219 210 272 683 137 623 569 714
 551 212 327 166 192 283 343 611 575 116 214 206 239 159 650 668 604 108 351 305 727 336 171  84 711 396 550
 236 122 226 642 580  98 676 516 187 189 472  74 248 182 675 624 612 258  90 702 113 627 151 111 655 436 353
 115 138 194 395 286 360 466 523 341 252 418 202 280 692 721 716 161 153 303 262 147 426 232 297 660 570 545
 188 309 431 419 293 264 312 728 250 367 301 124 285 626 628 467 666 267 196 263 266 181 261 132 674 533 424
 259 221 696 605 358 256 617 308 172 269 352 333 311 270 150 362 251 313 347 433 287 334 392 452 401 549 557
 505 400 382 583 207 322 342 444 460 417 294 459 247 380 278 440 254 407 413 387 222 391 170 372 331 398 350
 434 375 244 379 346 296 329 449 402 169 315 338 447 321 290 667 456 425 454 224 409 339 345 260 323 416 403
 284 348 330 318 435 355 340 249 213 228 662 364 397 319 295 366 326 479 439 411 317 209 458 376 462 476 399
 374 292 275 307 335 344 443 415 325  91 370 408 513 200 356 432 389 404 337 535 328 320 614 469 385 288 306
 509 430 539 478  11 265 477 520 349 429 299 310 448 227 442 377  12 453 482 271 473 128 406 546 501 441  32
 394 304 146 412 368 524 302  14 386 512 457 552 243 503 563 274 519 369 427 491 492 423 241 405  88  58 388
 298 445 461 289   4 363 198 178 438 185 498 468 510 495 530 240 568 384  27 332 488 562 518 559 359 223 235
  75 543 500 141 625 489 487  17 428 538 257 574 499 475 215 463 465 437 560 525 564 578  49  13  53  56 229
 554 584 646 483 522 494   7 174  55 565 451 579 324 420  59 193 125 507 589  39 609 514 595 422  37 127 180
 648 528 599 273   1 572 105 175 140 637 470 577 493 485 106  92 186 486 481 608 220 490 496 484 121 234 148
 502 532 511 357 571 596  66 152 126 517 474 361 597  52 167 276 602 618 581 155 471 168 615 527 112  76  73
 654 593  31 100 190 600 245 120 541 677 536 688   9  77 242 641  21 561 576 529 649  24 726 378 225 204  18
 653 205 119  29 316 701  45  25 526 537 669 632 635 587 104 183 217 644 703 233 601 191 585   5 542  51 118
   2 553  86 156 613 671 277 149 231 620 704 616   3 588 145 216 373 657 706 670 606  19  26 710 110 314  34
 679  54  20  38 631 663 177  63 195 724 109 544   8 421 268 218 592 672 630  33 645 135 681 718 162 410 365
 647 664 133  83  78 598 300  61  15 697 279 694 658 636 291 691  30 698 725  35  22  82 684 719 255  23  57

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00013e+07us (= 10001.3ms, 10.0013s)
Wall-clock time (full program): 1.00568e+07us (= 10056.8ms, 10.0568s)
Satisfaction error: 3
Number of search iterations: 1899
Number of local moves: 826 (including on plateau: 259)
Number of local minimum: 141 (including on plateau: 34)
Number of resets: 1
Number of restarts: 0

Problem in row 20: 554 584 646 483 522 494 7 174 55 565 451 579 324 420 59 193 125 507 589 39 609 514 595 422 37 127 180 => the sum is 9854 rather than 9855
Problem in row 24: 653 205 119 29 316 701 45 25 526 537 669 632 635 587 104 183 217 644 703 233 601 191 585 5 542 51 118 => the sum is 9856 rather than 9855
Problem in diagonal 1: 729 506 99 722 455 272 727 702 303 267 251 440 290 319 513 310 457 185 428 174 105 596 190 29 86 54 647 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 397 642 146 668  40 291 211 660 293 204  77  22 665 703  63 624 696 620 478 554 677 136  18  36 582  15 337
 659  16 631  59  61 607 141 694 698 149 127 644 206 695  11 648 666 128 185 670 676 367 354  27 562   4 170
 119 675  24 619  86 227 192 638 285 330 306 674 650 647  46 640 629  14 350 637 656 113 693  29  52 522   2
  13 566 657 514 320 248 184 216 174  38  42 597  10 689   3 639 507 654 193 586 634 426 651  53 560 630  51
 549 611 612 110 331 221  78 649 294  17 139 622  44 704 618 494 568  54  97 700 348  31 645  93 464 587 175
 595 613 570  21  58  37 101 552 151  71 173 548 105 564 487 605 516 164 179 519 621 596 707  69 443 614 176
 459 425 533 135 233  25   6 416 434 125  95 321 497 509 615 589 335 591 433 500  12 439 498 189 571 653 217
 492 520 405 513 262 132 273   8  30 574 153 699 501 546 496 511 441 521 572  62  35 480 460 144 581 435   9
 379 453 569 594 152 163  33 543   1 553 537 466 523  19 628 524 404 565  45 381  74 126 517 243 527 540 296
 583  26 447 578 238  79 244 593  55 530 316 436 327 393 469 403 402  76  87 477 635 449 490 250 493 592 187
 344 318 471 446 360  81 310 588  83 390 385 485 457 392 506 270 134 339 440 475 377 205 473 220 305 580 421
 245 444 423   5 300 271 255 375 333 417 412 299 215 510 326 450 324 341 468 398 295 576 525 277 467 400 504
 429 617  23 484 309 323 399 452 304 598 371 456 575 542 486 374 378 214 314 162 269 282 219 345   7 550 373
 213 422 302 334 427 325 445 249 482 424 363 252 465 190 361 319 380 312 472 462 197 585 303 383 531 317 340
 652 428 342 231 414 386 529 362 280 365 154 419 364 338 349 359 368 455 297 257 301 267 328 539 411 240 420
 508 491 351 307 430 488 518 356 355 247 159 712 259 281 180 442 376 394 563 463 274 104 223 409 343 290 332
 308 370 275 278 633 662 461 353 664 256 544 157 311 415 313 264 632 188 284 366 186 272 253 470 236 286 418
 208 138 372 225 437 705 636 108 357 685 584 579 241 387 358  89 265 603 590 222 258 168  65 505 352 382 336
 329 218 239 210 503 680 684 369 389 609 347 288 287  73 688 407 235 315 729 242 232 396  82 495 182 115 512
 276 181 322 166 431 528 406 722 600 474 725 111 709 266 228 283 246 203 616 391 156 102 120 601 254  75 663
 263 169 207 451 567 672 499 201 687 714 279 202 200 148 292 177 237 230 534 142 710 261 143 646 107 401 716
 123 131 690 547 526 384 643 100 641 147 559 260 124 199 112 145 561 226 116  99 410 599 234 708 720 160 691
  43 161 229 183 129 541 558 413 551 268 171 212 608 395 686 198 172 458 515 137 658 556 346 671 724  48 224
 702 196  67 728 723 448 627  39 577 481 673 122 165  56  92 150 106 679 711 191  96 289  66 532  88 625 626
 721 209 726 604 681 298 555  80 251 155 718  60 167  32 692 117 194 661 502  68  94 715 130 538 118  91 678
 133 717  64 667 535 557 388  47 454 489 727 109 697  41 140  50  49 195  57  70 438 602 606 682  85 683 573
 114  98 158 178 669 476 479  72 432 545 719 103 483 121 610  84  34 655  28 623 536 713 706 701  90  20 408

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00013e+07us (= 10001.3ms, 10.0013s)
Wall-clock time (full program): 1.00566e+07us (= 10056.6ms, 10.0566s)
Satisfaction error: 2
Number of search iterations: 2067
Number of local moves: 856 (including on plateau: 301)
Number of local minimum: 155 (including on plateau: 33)
Number of resets: 1
Number of restarts: 0

Problem in column 1: 397 659 119 13 549 595 459 492 379 583 344 245 429 213 652 508 308 208 329 276 263 123 43 702 721 133 114 => the sum is 9856 rather than 9855
Problem in column 20: 554 670 637 586 700 519 500 62 381 477 475 398 162 462 257 463 366 222 242 391 142 99 137 191 68 70 623 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  50 680 377  55  33 237 648 665 703 281 651 710  84 139 147 129 131 309 188 637 692 138 649 586  70 625 241
  60 125  83   9 617  39 659 201 623 130 686 708 228  56 671  47 141 581 603 670 628 707 706  93 690  57  37
 106   5 157   6 668 357 677 189 510  46 697 700 562 200 312  36 226 518 550 587 592 667 621   2 604 256   4
 542 653 464  76 629 489 650 158 632 107 658 669 441 208  86  51  29 128 505 661 594 687 118 273 211 117  19
 455 602  53 181 362  34 570 199 205  95 461 471  58 507  66 154 103 446 588 534 580 493 559 589 577 358 555
 266 599  71 136 532 145 480 491 482 109 598 541  90  63 645 243 213 597 481 515 656 146 479 503  67 160 547
 404 642 572  12 463  80   3 527 610  52 606 571  54 536 613  79 251 530 523 492  16  15 564 607 419  89 525
 576 615 132 235 627 440 529  24  98 375 385 506  92 575 634 127 110 490 522  17 614 268 514  40 595 294 421
 442 454  91 155 583 538 664 472  13  94 546 379 221 608 605 478  68 393 363 382 159 453 499  64 233 439 459
 504 473  23 293 447 368 543 364 168 325 539 432 126 513 308 371 262 660  49 635 356 153 467 600 484 354  38
 396   7 316 433 568 392 565 495 142  96 457 324 434 519 414 445 331 351 303 443 508 143 402 295 470 108 498
 596 383 458 420 465 450 474 405  35 346  44 327 409 400 353 417 257 526  82 365 591 389 438 301 407  69 448
 315 361 487 192 430 328 355 398 378  26 428 485 435 227 413 486 284 545 347 330 483  31 343 462 424 418 444
 374 292 297 416 255 282 345 406 387 425 452 494 244 332 397 360 338 381 551 259 431 391 348 318 195 410 475
 403 412 612 306 310 496 380 290 390 370 212 352 373 372 245 535 386 500 341 275 408 366 296 319 313 253 340
 234 311 399 584 556 285 422 388 394 449 342 280 219 250 239 249 509 349 521 429 115 339 540 384 204 520 344
 423 265 277 557 573 326 198 721 415 616 302 289 619 193 167 323 367 232 652 196 304 376 238 276 184 512 254
 274 314 288 516 278 229 350 203 488 466 329 300 681 264 197 305 574 726 679 307 102 202 252 210 337 548 436
 335 269 709 585 258 173 215 177 638 728 180 161 469 291 216 683 511 121 411 223 220 502 286 631 183 561 119
 663 191 611 333 279 172 194 230 299 685 320 298 552 272 246 395 401 218 271 704 270 639 185 336 217 699 175
 261 283 322 622 263 476   8 727 624 691 222 359 426 214 236 225 531 151 718 242 427 287 123 248 693 209 267
 240 169 566 674 231 711  59 684 317 714 182 171 567 224 135 695 729  22 150 149 174 682 176 140 713 549  32
 170 717 260 497 178 655 133 105 646 460  77  74 657 702 113 593 701 156 137  11  48 152 712 644  73 468 716
 654 165 321 715  99 705  18 675 166 666 164 187 501 694 640 537 558  20  61 116 190 451  45 696 104  87 620
 720 114 630 544 112 569 163 100 369 533 134  27 626 120 528 673 477  85 144  88  62 554  75 579 517 722 590
 186 689 633 641  14 207  97 124   1 334  21  10 609 678 676 618 643 719  43  28 524  42 179 578 148 725 688
 206  65 647 662  25 672 456 437 122 636 162  30  78 698 553 601 724 101  72 560 111 582  41  81 723 247 563

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00009e+07us (= 10000.9ms, 10.0009s)
Wall-clock time (full program): 1.00567e+07us (= 10056.7ms, 10.0567s)
Satisfaction error: 2
Number of search iterations: 2799
Number of local moves: 809 (including on plateau: 322)
Number of local minimum: 231 (including on plateau: 29)
Number of resets: 1
Number of restarts: 0

Problem in column 3: 377 83 157 464 53 71 572 132 91 23 316 458 487 297 612 399 277 288 709 611 322 566 260 321 630 633 647 => the sum is 9856 rather than 9855
Problem in column 26: 625 57 256 117 358 160 89 294 439 354 108 69 418 410 253 520 512 548 561 699 209 549 468 87 722 725 247 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 683  34 568 262  20 204 195   4 712 417  30 631 633 653   2 153 664  13 719 580 116 702 365 227 593  65 610
 259   8 652 320 708  12 281  50 648 516 151 149 607 644   3 200 723  16  51 621 163 639 202 673 647 299 613
  14 578 102 379 606 154 322 107 688 235 340 728 654 588 650 138 658   9 701 626  38 640 261 106 432  74  27
 573 316  33  56 682 685 213 124 178 339 670 139 515 649 656  17 119 278 663 619  83 696  92 180 643  32 605
 512 541 584  84 283 596 530 181 577  76 592   6 651 483 565 123 659 141 569 628 131 238  48  96 677 186  98
 574 611 634 255 226  57 547  91 641  81 556 237 600 531 539 169 532  88 446 249 157  15 571 168 587 117 576
 724  11 657 155  63 567  67 285 608  61 561 553 290 603 174  19 486 566 493 559 537 406  89  71 449 239 562
 334  60 582 321  75 523 542 421 115  35 557 470 618 442 520 655 488 177 591  28 189  99 517 314 464 294 424
 475 473 518 105 337 522 228 234 402 502 258 468 527 544 492 231 480 558   1 589 297 572  24 415  64  70 469
 435 471 467 422 395 351 526 188 504 430 420 554 452 143 481  23 455 166 120 201  47 310 439 465 489 497 404
 586 447 412 398 505 428 332 250 349 423  21 575 545 476 538 172 400 533 372 448 360  36 418 108 104 121 498
 436 433 137 642 173 462 275 251 396 192 410 348 524 344 429 347 376  37 411 329 570 246 482 312 386 454 453
 399 427 472 352 392 474 407 264 385 130 431 100 487 303 637 413 393 265 315 405 389 170 390 242 397 378 438
 263 601 371 114 167 387 268 484 380 403 364  39 361 616 287 426 286 369 703 546 414 301 304 279 381 382 359
 373 528 308 494 444 330 220 368 358 229 356 274 437 345 171 331 298 343 384 549 284 401 355 377 615 383 300
 289 248 309 508 609 272 194 700 182 193 208 479 203  49 288 509 367 725 326 341 704 534 257 318 327 353 363
 325 394 191 630 434  62 710 466 256 510 240 197 292 184 419 690 113 305 260 666 324 409 342 460 152 511 313
 215   5 451 668 624 335 513 720 273 718 205 680 244 291 207 319 216 350 293 271 323 461 311 338 253 302 269
 211 622 199 717 602 280 665 604 175 266 441 160 317 162 252 277 212 391 612 307 223 336 550 233 159 726 156
 128 127 225 551 695 697 678 675 241 490 540  31 190 150  95 543 236 254 210 133 564 209 579 457 306 672 179
 222  18 125 503 636 126 614 598 196 715 161 583  53 136 270 638 267 456 132 245 477 425 495 635 230 693 206
 198 165  54 590 219 440  43 709  77 667 645 705 118 146 374 459 221 711  44  80 676 354 595 714 295 514  42
 122 632 224  68  26 276 506 548 507 563 519  22 214  10 176 661 243 681 282 485 443 388 627 646  25 729 232
 687 716 147 450 617 499  72 623  40 375 217 110 111 463 164 445  52 669 218 129 698 247 521 722 629 144  90
  73 689 671  66 183 346  87 496 109 408 185 535  82  93 707 529 135 500 158  58 679 552 478 560 366 416 694
 686 555  41 699  55 692 362 328 333 296 674 581  29 620 134 662 691 594  97  94 370 112   7 142 140 713 148
  59 145 721  46  79  78 458  86 525 585 103 501 101 187 625 706  85 660 684  69 599 357 536 597  45 491 727

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.47395e+06us (= 9473.95ms, 9.47395s)
Wall-clock time (full program): 9.52941e+06us (= 9529.41ms, 9.52941s)
Satisfaction error: 0
Number of search iterations: 2712
Number of local moves: 1000 (including on plateau: 442)
Number of local minimum: 226 (including on plateau: 50)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 606 638 131  39 162  36 642 306  90 706  15  52 667  89 630 624  69 718 500   8 712 704 673 563  48 418   9
 635  67  75 127 649 486 689 644 687 435  45  46 647  32 548 535 142  68 116 164 514 430  66 710 551 722  25
 128  53 700  49 724 465  95 721 167 523 218  34 659  22 567 654 145  64 108 528 643 632 693 234 717  83 229
  27 392  78 651 655  92 725 623  82 573 118 517 156 171 607 688 173  93 104 703 536 696 645 516 133  51  50
 371 119 713 177 377 615 339 595 658 550 224 158 727 190 168 518 176 124 155 405 240 728 429 701  85 225  88
 656 151  87 212 580 232 222 609 220 599 242  65 101 134 708 685 719 414 433 699 113 476 294 692 254 148 110
 265 194 353 121 678 598 639 614 374 475 352 215 680 192 172 616 252 141 102 219 179 665 244 570 250 425 270
 243 337 159 279 491 702 230 529 362 543 203 129 291 259 729 560 248 266 442 691 311 221 338 541 198 300 253
 421 237 223 205 481 333 195 496 697 662 582 398 275 247 228 726 207 150 684 521 217 271 187 556 126 289 241
 285 256 262 204 698 679 619 483 330 716 235 432 315 152 213 191 395 709 720 263 160 143 149 542 208 236 260
 170 184 283 436 553 666 674 524 407 460 552 302 146 399 359 227 509 310 473 296 318 335 196 391 174 345 166
 349 303 439 344 502 396 358 457 163 561 695 350 183 231 357 313 454 206 634 251 261 331 373 280 332 316 416
 322 139 404 455 382 451 409 522 277 424 125 305 351 281 482 444 272 479 705 431 140 301 366 309 386 381 312
 419 427 239 238 292 304 369 216 329 328 327 324 360 462 428 380 470 403 420 389 341 295 383 485 426 361 440
 370 288 317 464 273 276 297 408 274 319 478 468 365 434 471 372 340 394 449 499 463 336   2 390 356 367 385
 199 423 267 452 268  40 406 325 326 209 438  16 466 539 342 508 348 445 579 290 320 402 472 456 489 343 487
 593 474 448 364 293 347 417 233 393 375 413 554 515 284 458 415   5 469 411 132 401 175 446  14 612 492 122
 480 510 441 443 201 461 412 188 437 286 378  23 495 384 354 323 497  17 249 147 511 592  70 538 507 308 603
 494 504 591 410 107 558 397 257  59  56  94 590 498 422 545 138 484 467   4  79 534 503 355 144 525 587 453
  84 368 557 505  62  31 617 376 532 169 493 477 578 544 546  10 264 387 346   6 488 197 530 200 670 269 549
 450 605 613 490 178 298  58  19 459  76 299 600 576 586  86  44 588 314  91 526 181 400 447  60 569 723 519
 594 686 540 527  77  72  43  29 681  41 287 707 165 533 103 246 506  38 109 610 547 137 597 182 555 571 672
 531 537 574 664  33 214  57  74 388 111 562 566  80 660  42 100 604 627 255 601 307 602   1 136 334 575 620
 512 621 581 596  63 130 278 154 641 180 520 513 211 652  26 115 650 668 245  71 106  55 568 321 636 114 628
  20 661  37 711 186 559 112  54 226 123 629 637  47 657  18 105 589 583 565 501 669  81 676 153   7 572 677
  13  28  61 671 282 120 193 210 585 258 683 714 202 715  35 157 564 675 379 690   3  30 631  98 611 622 625
 618 653 682  21 608 694 363 189  11  97 648 663  99 584 633 161 185 626 577 135 640 117  24  73  96  12 646

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 4.62906e+06us (= 4629.06ms, 4.62906s)
Wall-clock time (full program): 4.68484e+06us (= 4684.84ms, 4.68484s)
Satisfaction error: 0
Number of search iterations: 746
Number of local moves: 570 (including on plateau: 167)
Number of local minimum: 33 (including on plateau: 17)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 725 291 526 148 688  87 388 540 692 549 130  69  67 125 111 223  59 704 697 590 101 471 312 466  83 667 346
 221 348 446 211 683 168 703 129 679 564   1 460  60 147 609  42 721 238 705 577 557 172 491 119  66 645  93
 601 249 727 324 603 113 684 190 255 481   9  45 488 208 189 206 127 709 676 610 695 106  63 104 706 499 188
   7 702 339 422 723 569 699 654 182  22   8   2 507 663  12 568 269 693 494 123 573  23  88 630 124 604 155
  38 511 648 541 722 217 502 259 134 567 228 166 606 273 562 140 724  14 135 598 194 185 379 383 401 618 110
 310 718 698 620 558 315 139 412 203 404 192 132 361 201 271  58 175 599  28 448 247 729 673   4 715  20 625
 551 197 631  78 390 483 218 363 233 687 131  92 641 445 205 121 614 680  32 615 332 229 552 354 176 647 158
 263 100 527  75 343 257 537 553 234 691  31  65 690 280 719 260 232 193 539 726 278 250  99 651 415 622 225
 585 252  98 326 717 142 560 243 152 575 219  24 689 544 177 435 561 165 694 264 174 303 465 357 400 593 141
 707 191  91 414 307 265 515 336 391 500 248 375 105 634 600 367 728 437 220 467 216 288 114 475 313 289 262
 344 369 410 157  40 275 358 394 138 224 439 277 681 550 285 254 639 304 682 299 397 463 533 244 143 386 570
 396 213 290 349 464 351 451 279 376 366 421 546 384 347 276 360 204 461 454 418 199 431 398 338 444 286 353
 330 261 428 370 458 170 482 340 430 385 292 209 545 653 359 382 364 337 342 440 235 284 311 212 387 420 429
 146 162 239 322 283 492 405 374 700 245 403 399 393 424 516 300 341 510 334 267 406 287 328 335 321 316 607
 240 443 426 536 524 484 242 710 423 253 455 503   3 487 181 442 145 222 377 256 356 438 416 195 478 470 150
 371 433 525  50 317 293 325 297 449 555 333  15 268 452 434 355 373 479 159 306 638 380  21 637 531 432 427
 468  57 626 512  94 302 183 305 655 345 497 411 508 365 318 419 103 407 389 112 469 167 495 543 597 392 116
  47 281 184 657 236 576 237 187  37 331 496 582 227  76  41 409 350 368 649 572 530 362 480 532 436 381 591
 486 457 462 447 178 519  52  85 490 173 408 556 504 509 505  89 506 595 517 215  80 616 207 296 241  79 583
 425 474 716  74 171 571 107  95 674 498 456 602  81 196 161 441 352 476 136 274 323 621 514  16 493 295 613
 395 677 179 617 596 128 329 210 642  10 685 529   6  56   5 612 372 180  35 378  68 587 477 675 522 472 413
  46 521  82 518 156 258 627 660 534  18 594 670 574 169 186 686 319  90 320 120 459  13 714 579 308  26 608
 309 535 109 632 270 547 230 629 301 513 659 611 624  64 664 153 118  97 149 154 402 592  96  19 589 137 652
 565 711 115  54  27 713  77 554 117  86 584 633  17 644 559 542 450  70 151 658 501 605  33 672 198  30 489
 720  43  25 581 133 272 635  61  55 200 662 668 282 226 586 640 666  62 417  84 628 696 266 619 214 163 251
 548  71 164 108 102 665  48 473  36 160 566 636 298 538 646 701 294 563 485  53 671  29 669 327  34 314 656
  11 588 144 712  72 623 122 523 643 453 708 578 246 580 678 650  49 202  39 231 126 528 661  73 520  51  44

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00004e+07us (= 10000.4ms, 10.0004s)
Wall-clock time (full program): 1.00566e+07us (= 10056.6ms, 10.0566s)
Satisfaction error: 2
Number of search iterations: 3225
Number of local moves: 1204 (including on plateau: 361)
Number of local minimum: 268 (including on plateau: 53)
Number of resets: 2
Number of restarts: 0

Problem in column 14: 125 147 208 663 273 201 445 280 544 634 550 347 653 424 487 452 365 76 509 196 56 169 64 644 226 538 580 => the sum is 9856 rather than 9855
Problem in column 26: 667 645 499 604 618 20 647 622 593 289 386 286 420 316 470 432 392 381 79 295 472 26 137 30 163 314 51 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 112  59 658  31 159 649  86 542 561 422 439 634 598  46  87  76 160 120  39 564  84 715 710 727 158 698 721
 204  89 643  97 674 577 113 132 611  63 489 686 411  27 450 720  29  40  37  65 707 635 604 457 602 639  54
  22  36 725  50 116 728 599 633 536 701 442 620 679 102 124 108 711  60  57 213 654 114 624 384 691  34  92
 241 195 607 343 128 518  69 524 363 123 688 668 539 166 585 681  43 233 396 463 545 203 519 718  77  58 162
 553 167 202 482 729  96 722 606 180 574 609 591 549 151 183 104 144 164 179 724 576 121 416 672  35 273  53
 454  52 632  56 236 702 134 423 700 429 490 646 492 156 172  91  26 212 208 714 663 723 667 270 178 168 161
 661 271 717 303 169 726 249 150 683 415 473 713 563  70 288 153 252 347 152 228 573 251 694 196 194 111 253
 453 282 619 277 110 149 148 618 652 248 485 216 529 186 706 224 292 140 491 664 647 254 653 244 118 221 229
 510 191 231 365  71 219 222 227 284 676 665 651 546 640 472 262 175 346 143 182 580 250 656 705 190 187 209
 712 211 342 337 300 247 138 235 320 716 675 155 502 129 584 184 418 427 304 520 280 568 497 395 205 240 214
 477 275 616 334 290 192 220 255 424 693 478 455 355 232 555 294 349 269 328 311 367 370 504 316 390 330 176
 629 259 310 238 295 373 306 392 207 354 494 421 436 364 279 335 628 407 368 382 281 372 626 386 329 199 185
 376 223 344 481 527 358 301 361 419 193 352 435 268 406 298 369 410 356 445 451 317 375 458 420 327 283 302
 428 234 680 409 505 237 371 340 197 314 360 495 425 559 381 299 404 362 260 391 400 276 272 264 257 357 378
 484 333 313 348 405 308 318 351 297 417 321 535 296 466 462 265 413 246 242 245 488 380 291 467 315 401 448
 350 387 274 471 432 394 353 339 388 206 256 398 393 438 541 383 511 200 319 105 374 379 341 210 464 590 359
  85 581 526 496 402 498 452   8 326  33 147 322 307 389 106 532 615 506 399 517 521 501   7 177 512 443 447
 119 565  12 171 503 434 468 338 377  25 101 465 243 444  19 507 366 678 596 514 460 608 188  95 547 556 456
  78 426 414 441 474 610 433 548 142 533 130 133 289 499 408 569 309 226 312 437  99 267 100 459 557 513 449
 263 540  80 562 543 567 475 125  81  64 174 115 146 431 544 593 617 670 483 278 107 522 173 480 397 440 385
  83 637 126 572 523  88  13 582 500 430  28  51 218 412 515 579 538 554 493 287  11 558 157  98 641 531 630
 163 486  93 552 508  23 525 530   4 509 215  90 198 487 305 622 476 600 469 516  66  47  24 597 657 403 690
 325 669  38 528   5 154 583 551 136 266 137  21 470 537   1 345 587 603 612  75  15 446 323 534 666 642 586
 286 636 285   6 566  67 627 293 625 258  32  44 127 648 181 605 601 703 588  55  18 560 170   9 677 479 709
 578 645  62 621 589 575 685  16 165 461 139 261  17 623 230 689 662 684 673 109 324  49  79 145  10  68 696
 571 719 117 671   2 141 695 614 595 659 704  20  42 592 682 135  74   3 692 201 650  72  41  94  30 331 708
 638 687 189 613 594 225 550 122  82  73 332  14 217 655 697 131  45 699 570 644  48 239  61 336 631 660 103

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 5.88545e+06us (= 5885.45ms, 5.88545s)
Wall-clock time (full program): 5.94231e+06us (= 5942.31ms, 5.94231s)
Satisfaction error: 0
Number of search iterations: 948
Number of local moves: 513 (including on plateau: 124)
Number of local minimum: 55 (including on plateau: 22)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 723 110 664  78 705 659  77 726 704  79  71  90 135 417  52 724 663 699 317 641 155  76  43 715 440  25  67
 137 408 638 168 157 538 128 109 703 717 177 153 485 101 519  66 720 602  32  39 614 163 563 576  45 728 569
  23 226 721  55  83 697 514 103 527 113  53 126 475 676 223 266  82 462 217 559 466 214 693 571 643 526 541
 668 683 159 254 140  30 578 106 694  18  57 188 182 577 545 108 662 711 670 138 179 488 645 675 193 166 341
 185 107 612 709 722 142 115  65 615 201 319 132 196 161 261 714  86 647 443 648 596 176 505 686 534 111 167
  41 265 129 276 696 646 183  48 582 122  60 173  84 410 218 725 241 622 500 644 286 658 591 707 206 100 642
 136 259 149 684 299 141 729 262 486  95 105 464 588 636 264 229 688 202 197 269 388 270  54 671 568 366 656
  80 194 225 172  98 154 219 690 501 275 198 216 700 655 719 506 587 685 174 131 444 253 701 441 575  28 234
 268 673 294 489 373  87 353 352 285 230 208 160 590 650 187  92 325 324 574 144 718 289 243 680 667 282 318
 148 257 290 232 260 233 235 213 548 727 158 302 146 651 120 112 716 635 682 191 628 236 164 594 543 463 371
 151 170 210  51 660 165 305 247 495 181 251 435 512 245 340 329 369 581 606 338 348 320 687 532 710 308 309
 639 336 351 450 211 426 517 411 356 277 419 453 361 250 255 291 278 248 350 386 295 380 368 393 375 377 402
 400 332 406 327 307 395 315 346 221 267 301 457 551 558 323 271 304 222 465 326 212 492 531 522 333 316 355
 303 334 204 468 427 376 293 279 422 357 678 284 359 292 274 344 437 139 397 249 407 474 438 360 470 287 503
 296 458 490 451 207 328 358 162 560 331 321 363 394 480 418 513 640 431 365 372 280  16 252 220 354 349 446
 479 192 496 487 566 442 447 345 272 420 398  73 378 273 502 530 337 298 124 428 364 455 367 339 313 469  61
 311 481 439 434 209 523 403 392 300 310 436 507 528  31 624 494 425 482  46 520 117 362 472 156  62 401 390
 412 493 423 556 405 430 379 347 121 134 237 510 242 127  99 570 343 467 186 478 452 518 409 189 429 415 484
 616 421 539 653 516 118 454 561 389 504 433 529 104 231  27 473 424 244  94 228 396 414 143 199 145 613 387
 567 546 553 374 617 580 448 471 256 712 456 476  20 114 573 370 549   1  89   8 125 607 330   7 509 459  38
 657 445 586 562 511 449  33 524 238 205 552 432  34 147 499 589 382 178 297 585   5 677 416 322  59 413  58
 537 619 550  72 123 542 536 335  42 605 631 691 603 564 169  40  47  81 477  22 521 133 399  21 180 623 692
 557 497 595 649 306 491  69 674  17 525 601 579 119 258 637 239  49  96 652 116 383 547  13  88 102 535 461
 391 498  19 381 600  26 666 246  36 654 713 599 533 281 632 508 190 385 565 593 150 171  97   2 263 627  29
 702 240  10   9 592 604 625 515  75 584 689 224 554  63  44 618 200 227 184 572 460 314 152  11 288 679 620
  24   3  91 203  50   4 195 665 342 540 626 610 598 695 633  70  37  56 669 621 583 555 544  85 634  14 708
 404 608  12 611  15 629 681 661  68 672 706 630 384 312 698  64  74 130 483 609 283 597  35  93 215 175   6

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00021e+07us (= 10002.1ms, 10.0021s)
Wall-clock time (full program): 1.0047e+07us (= 10047ms, 10.047s)
Satisfaction error: 2
Number of search iterations: 2181
Number of local moves: 748 (including on plateau: 221)
Number of local minimum: 148 (including on plateau: 23)
Number of resets: 1
Number of restarts: 0

Problem in column 11: 71 177 53 57 319 60 105 198 208 158 251 419 301 678 321 398 436 237 433 456 552 631 601 713 689 626 706 => the sum is 9854 rather than 9855
Problem in column 12: 90 153 126 188 132 173 464 216 160 302 435 453 457 284 363 73 507 510 529 476 432 691 579 599 224 610 630 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 596  62  77 676  61  24 401  66 529  79 630 625 670 575 481  29  31 713 113 579 126  46  51 618 588 691 718
 526 689 719 703 142  50 101 513 548  28 134 682 131 654 554 104  25 681 714 582  52  58  71 570  90  30 704
 628  95 375  44  55 184  82  83  54 497 547 612 721 558 565  99  39 653 125 281  41 717 712 696 207 720 465
 617  18 197 486  86 144  87 469  73 117 447 726 727 687 619 154 145 400 124 611 206 586 700 368 511  34 516
 561  64  27 122 646 210 130 609 295 136 680 156 716 514 199 171 205 709 152 725 233 503 724 584 128  17 639
 631 165 166 148 157 422 119 710 632 627 656 659 137 600 635 123 220 153 170 404 188 272 245 551 690 216 159
 592 330 182 120 190 246 715 214  75 702 692 221 158 688 650 394 174 484  74 591 160 398 177 608 299  47 674
 490 176 212 111 428 234 195 729 168 657 640 557 711 262 675 106 382 289 149 615 242 259 223 301 228 132 684
 479 266 186 283 257 135 606 237 723 643 662 198 277 698 258 192 275 127 644 381 167 185 248 633 708 178 209
 445 342 243 269 204 344 279 693 597  97 200 440 307 634 463 679 147 642 270 348 292 331 217 530 313 255 274
 522 285 250 297 323 329 208 605 232 349 607 230 187 626 667 229 291 334 390 437 508 300 378 280 636  88 267
 392 287 407 364 384 340 194 502 614 391 203 328 241 310 305 347 352 374 238 372 268 655 449 278 326 249 685
 356 377 319 286 602 282 728 321 336 376 306 418 345 264 448 273 335 316 397 540 196 353 302 333 290 385 371
 256 431 359 362 322 298 363 402 341 489 457 373 332 339 338 324 387 263 403 369 284 294 483 455 433 303 395
 450 412 386 406 578 183  80 118 470 370 296 383 317 405 311 346 408 410 432 265 456 420 361 444 304 409 435
 181 247 487 389 271 343 288 337 430 560 366 417 421 260 102  78 545 423 427  59 498 451 467 443 478 399 488
 236 493 482 414 261 471 416  70 468 593 504 351 436 320 354 360 222 426 411 110 501 388 459  85 379 589  56
 225 485 476 505 314 458 494 415 536  76 429 107 491 380  42 480 425 105 472 175 396 541 439 466  10 475 438
 254 509 434 393 518 473 595 590  19 114  81 520 538   2  48 453 525 477   7 219 510 523 499 358 594 535  67
 252 442 452 515 574 496 213  53 140  92  84 599 355  11 474 454 544 546 563 327 580 539 441   4 555 534  16
  91 598 577 424 367 549 244  65 533 215 164 141 519 143 462 512 464 517 553 179 100 542 413 419 500 552  12
 133  72 495 610 601 532 492 231 543 161  45 108 622  57 150 695 537 191 585 576 569  32 581 139  43 524 531
  40 603 566 568 623 550 706 649 172 604 312  21  36  93 121 661 668   5 527  37 697 559  33  94 315 506  89
 521 629 507 616 665 671 562 613  20 350 308 129 109  63 240 583 658 309  68 155 624   9   1 357 169 666 253
 103 678   6  23 116 647 648 112 638 251 138 652  60 146 162 677 705  69 564 556 641 235 226 180 722 673 227
 163 528 567  38 664 571 202 173 573 694  49 189 193 365 293 672 460 224 663 211 699 651 637  26 325   3  22
 115 572 701 683 446 669 707 276  96 587 218  13  98 201 239 660 686  15 620 151 621   8 318  35  14 645 461

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 5.34594e+06us (= 5345.94ms, 5.34594s)
Wall-clock time (full program): 5.40229e+06us (= 5402.29ms, 5.40229s)
Satisfaction error: 0
Number of search iterations: 801
Number of local moves: 538 (including on plateau: 218)
Number of local minimum: 39 (including on plateau: 14)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 663  70 278 119 673 622 686 199 602 601   4 609 655  10 120 196  20 202 201  36   8 671 697 595 659  99 560
 650 570 538 147 669 208 502 689  49 638  32 558  47  18 237 728 308 626  88  42 136 709  66 263 660 145 532
 696 545  11  13 687 166 179 590 680 565 132 616   1  81 316 643 224 235   7 509  75 717  41 584 639 603 300
 592 715  89  51 535 530 126 625 442 641  82 627  46  25 125 454 266 580 336 244 112 684 604  30 685 606   3
 676 670 219 468 591 282 283 571 667 519   2 682 567 281 150 583 172 152  19 151  72 216 675 130 491  40 526
 635 713 106 395 543  61  94 548 596   6  86 648 469 566  83 322 104 559  44 127 115 185 515 637 594 610 494
 522 556 135 681 568 574 181 577 575 544 180 505 461  63 140 456  67 107 131  28  65 341 612 221 550 511 504
 553 141 557 516 600 452  21  59 588 619 143 413 149  52 490 297 176  34 424 236 495 411 474 323 472 578 582
 664  87 269 552 615 562 433 489  38 585 212 457 539 547 391  91  50  14  84  58 523 447 449 260 513 486 440
 288 407 476 445 359 466 186 481 507 194 338 333 372 438 471  73 134   5 498 499 441 360 586 148 448 429 473
 384 382 100 408 536 524  53 439 500 430  26 400 455 475 301 367 399  37 525 142 521 417 405 129 528 423 549
 328  69 255 564 459 418  79 383 321 409 317 379 325 390 517 154 366 393 479 206 389 512 386 373 414 492 478
 374 458 305 514 426 380 174 435 646 534 287 482 640 501 272  80 295 277 416 230 421 293 410 302 168 422 113
 285 404 307 537 228 436 420 362 342 270 403 304 443 394 332 375 326 402 444 249 318 510 234 361 398 370 401
 392 256 428 388 385 312 576 327 463 356 634 431  57 275 346 330 329 314 169 453 243 351 233 483 695 319 310
 480 434 397 343 222 124 508 240 460 344 419 280 261 365 175 726 352 349 292 345 198 350 437 645 348 406 355
 340 173 229 354 334 335 464 252 315 425 712 258 241 273 296 620 608 368 497 485 215 274 225 427 268 262 605
 286 188 276 195 387 291 371 250 265 364 607 178 377 267 633 652 632 688 187 540 311 253 279 520 156 396 306
 207 339 611 227 264 324 710 122 248 220 614 303 177 331 702 378 679 245 631 597 309 164 213 541 205 294 200
 189 184 701 242 259 654 432 692 251 209 533 217  85 668 170 488 658 628 167 247 636  56 211 163 204 254 657
 146 257 642 289 101 662 727 190 647 197 358 226 363 561 192 246 678 477 617 690 369 218 412 183  43 133 231
 165 298 299 581  68 629 337 353 102 649 613 239  98 720 569  45 579 462 493 725 698  55 157 159  15 714  33
 109 313 723 160 155 110 415 103 144  39 487 137 210 529 705 518 506 677 598 496 573 708 656 223 232 191 138
  90  27 271 707  16 589 503 546  78 123 693 284 721 691 542 162 320 674 644 706 700  71 121 238   9 158 171
  23 153 665 214  35 105 554 108  77  95 624  96 703 623 451  60 653 593 672 563 666 116 551 555 357  93 450
  64 722 381 716 128  17 465 111 203 118 599  76 694 139 683 193 484 467 661 621 719  62  24 651  31 729  97
  54 724 587  29  12  22 376 114  48 161 718 117 699 572 446 618 470 290 531 630 527 704 182 711  74  92 347

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00018e+07us (= 10001.8ms, 10.0018s)
Wall-clock time (full program): 1.0058e+07us (= 10058ms, 10.058s)
Satisfaction error: 2
Number of search iterations: 2668
Number of local moves: 940 (including on plateau: 449)
Number of local minimum: 210 (including on plateau: 61)
Number of resets: 1
Number of restarts: 0

Problem in column 9: 602 49 680 442 667 596 575 588 38 507 500 321 646 342 463 460 315 265 248 251 647 102 144 78 77 203 48 => the sum is 9854 rather than 9855
Problem in column 25: 659 660 639 685 491 594 550 472 513 448 528 414 168 398 695 348 268 156 205 204 43 15 232 9 357 31 74 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 539 724 655  83 721 534 652 553   4 186 693 169 397  60  76 694   3  43 606  88  84 598 588  51  97 718 239
 584 319  71  70  55 656 569  22  61  90 590 560  52 294 578 700 115  28 400 302 622 219 727 612 708 667 184
 643 669 619 680 200 654 660  13   2  95 599 306 255  81 444 495 135 124 646 202 127 636 696  67 491 179 137
 139  56  93 714 168 611 637 433 106 118 499 641 465  65 209 682 100  79 505 383 673 548 699 705 112 159 256
 663 121 102 165 672 615 706 430 116 665 144 292 519   9 134 668 138  92 642 428 109 688 494 203 240 105 695
 709  24 252 145 229 624 509 501 248  63 671 617 529  47 268 413 132 212 504 676 558 647 576  94 185 131 291
 151 280 259 227 266 728 621 512 133 149 250 593 572  20 258 498 155 320 719 415 729 174 666 198 111 274 577
 712 101 245 648 160 520 247 310 276 525 120 338 661 173 216 296 351  26 544 716 726 717 226 210 244 189 358
 213 148 283 176 158 411 379 485 715 183 136 265 658 195 725 559 243 130 683 472 631 257 614 264 336 237 299
 167 342 235 232 711 388 147 685 480 205 355 201 678 348 308 263 301 589 691 703 197 390 262 273 241 193 270
 279 567 407 305 223 526 128 597 225 164 629 382 608 458 233 277 427 451 404 333 285 371 335 312 290 315 324
 304 349 317 249 323 445 344 713 269 289 192 722 562 123 313 326 328 234 555 628 251 610 284 271 321 161 372
 162 297 242 309 230 508 365 307 298 364 295 375 376 440 254 476 402 369 481 303 454 456 492 416 394 406 384
 345 356 206 374 175 452 468 403 418 535 414 436 434 377 278 399 353 422 361 327 293 332 347 381 267 449 253
 419 178  44 330 393 322 314 334 408 412 448 261 435 462 410 515 395 166 475 541 447 359 282 360 405 429 311
 463 380 459 221 471 188 437 218 479 220 170 339 352 583 521 493 389 423  27 331 337  17 556 368 424 438 551
 507 450 391 531 446 196 431 113 517 272  46 516   1 489 511 473 396 466 222  32 346 497 426 421 528 549  82
 488 363 441 425 455 191 325 207 386 246 417 506 275 439 442 467 470 461 187 103 571 107 156 367 287 503 570
  29 464 579 564 601  87 420 370 409 432 490 224 163 538  54 208 502 510  35 180 457 523 318 565 536  34 563
 469 650 486 477 500 211 487 231 514 460 587 126  99 341  66 182 378 329  78  40 623 392 443 600  33 557 496
  68 385 482 552 204 366 104 129 632 478 522 532  91 607 640 154 513 550 114 190  69  85 157 574 585 545 527
 620  62 586 634 630 238 592 117 453 625 613 152 171 554 387  42 638 594  57 484  10 146  11 286 546 568  39
  37 616 542 214   6 142  58 627 687 618 199  59 217 635 533 357 530 670  75 228 540 150 236 681 537 575  86
 122 626 543  72 561   7  23 172 524 697 602 260 143 604 649  38 664 573 398 316  15 343  80  18 605 653 547
 596 591  21 720 340  96  30 401 689 474  12  48 701 698 645   8 675 679 125 674  25   5  31 177  16 692 686
  77  14 644 702 595  50 153 281 518 580  64 581 141 582  41 119 483 657 181 194 603 373 108 704 707  19 684
 350 723 651  36 362  89  49 690 288 710  98 354 300 633 662  53 639 659 140 566  73 215  45 677 609 110  74

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00018e+07us (= 10001.8ms, 10.0018s)
Wall-clock time (full program): 1.00577e+07us (= 10057.7ms, 10.0577s)
Satisfaction error: 2
Number of search iterations: 1901
Number of local moves: 731 (including on plateau: 208)
Number of local minimum: 131 (including on plateau: 32)
Number of resets: 1
Number of restarts: 0

Problem in column 8: 553 22 13 433 430 501 512 310 485 685 597 713 307 403 334 218 113 207 370 231 129 117 627 172 401 281 690 => the sum is 9854 rather than 9855
Problem in column 18: 43 28 124 79 92 212 320 26 130 589 451 234 369 422 166 423 466 461 510 329 550 594 670 573 679 657 659 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  37 194 650 649 636 124 626 679  97  40 686  22 113 645 112 493  25 689 291 627 138 617  72 690 625 177 101
 240 655 583 527  38 166   7 570 590 542 634  65 163 477 128  80  67 672 638 592 652 144 239 591 576   8 211
   3   5  30  81 552  59 611 600 609 249 631  79 135 488 607  12  17 546 681 577 633 568 235 156 357 674 660
 257 610 662  33 579  96 185  98 554 616 665  55 630 178  54  14  18 643 567 193 559 653  68  47 549 585 687
 574   4 605 218 118 220 606 510  24 614 459 125 637 244 595 553 196 599 406 593 598 537   1 511  49  58 201
 349 594 613 597 589 231 601 558 635 604 115  77  34 146 615 550  21 343 582  41 516  26  63 639 123  46 547
 197 603 384 484 560 114  10 644 530 492 521 226  27 233 279 331 270 543 522 506   9 523 145  76 491 628 507
 415 618 486 544 565 256 612  42 518 413 420 551 545 154 171 203 173 463 519   2 505 621 169 230 526  90  44
 179 392 373 391 648 348 431 561 126 608 498 538 539  48 402 452 335 454  86  16 395 501 421 174 640  51 248
  13 531 512 404 393 152 388 365 578  19 432 435 336 503 370 520 321 412 251 418 496 423 411 252 387 396 137
 426 403 400 405 407 130 478 361  53 489  32 448 378  88 322 504 250 515 362 480 465 473 497 474 422 316 277
 352 471 417 495  15  39 296 433 514 490 397 500 536 372 275 529 311 289 224 410 449 414 298 453 460 356  60
 385 329 394 481 319 293 333 487 482 382 434 389 264 440  20 472 369 347 425 259 317 327 532 390 455 409 122
 381 337 308   6 533 324 562 383 334 375 436 295 399 262 360 446 428 475 269 398  74 479 380 485 292 358 476
 261 517 299 313 470 483 286 241 430 323 363 314 581 302 575 427 419 245 469 429 325 354 341 236 237 271 344
 437 366 315 457 301 443 447 307 326 464 338 439 332 215 150 656 571 509 328 351 221 376 355 274 267 265 345
 368 280 187 266 210 524 217 247 682 209 700 276 282 540 364 499 624 228 162 243 134 451 442 285 572 300 563
 669 320 182 147 202 456 189 222 290 232 258 284 306 714 467 168 254 709 713 199 445 160 620 450 283 330 586
 359  11 149 466 312 664 622 458 438 191 304 305 318 535 278 119 401 216 708 200  73 242 263 705 273 657 588
 641 350 208 234 158 541 353 727 377 170 408 468 719 602 303 260 294 186 151 710 214 110 528 133 207 309 494
 632 288 374 131 157 663 675 238 195 508 188 229 379 654 161 105 580  93 175 253 716 117 629 255 206 688 566
 534 116 287 100 190 339 180 219 227 212 310 667 691 441 213 148 564 204 386 646 246 704 673 720  87 584 167
 698 198 165 142 729 703 569 223 155 695  83 680 573 205 671 104 712 184 102 225 697 109 132 172 121 462 346
 596 181 340 726 272 702 342  85 281 143 297 647 722 548 268 140 717  95 136  92 153  35 371 684 108 555 619
  57  50 728 696 159 685  36  70  71 678 192 525  29 701 711 694 661  62 111 658  82 106 642 107 723 444 176
  89 725 129 141 120 676  99 461 556  45  31 557  84  56 718 693 587  91  78 668 715 724 677 502 127 139 367
 706 707  75 721 623 424  94  66 183  52  23 659 103  64 666 683 670  43 513  69  28  61 651 164 692 699 416

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00026e+07us (= 10002.6ms, 10.0026s)
Wall-clock time (full program): 1.00585e+07us (= 10058.5ms, 10.0585s)
Satisfaction error: 2
Number of search iterations: 1924
Number of local moves: 873 (including on plateau: 232)
Number of local minimum: 157 (including on plateau: 31)
Number of resets: 1
Number of restarts: 0

Problem in row 13: 385 329 394 481 319 293 333 487 482 382 434 389 264 440 20 472 369 347 425 259 317 327 532 390 455 409 122 => the sum is 9856 rather than 9855
Problem in row 25: 57 50 728 696 159 685 36 70 71 678 192 525 29 701 711 694 661 62 111 658 82 106 642 107 723 444 176 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 140 680 110 616  67 674 538 579 627  34 631 683 671  22 691 648 604 104  58  94 183  14  18 107 524 174 564
 638 679  37 289 623 641 610 705 667  52 653 684 636 181 101 159  65 155  27  45 598 177 583 134   2  63 651
  29 669 143 391 596 606 633 670 672  78  83 664 541 212  87  46 123 173 206 179 632  16 687 625 411  95 588
 646 120 131   5 645 158 655 498 663   9 468 603 673  85 154 570 219 166 116 109 654  64 615  11 682 618 518
 540 595  20 102   8 452   1 647 544 216 559 642 574 531 479 424  51 125 510 184 614   6 558 640  38 193 602
 600 629 197 204 585 124 457 613 665  89 142 374 609  32  76 228  28 464 497 371 527  12 668 532 511  73 548
 617 555 145 310 587 345   3 630 482 358 139 557 593 581 643 578  60  40  24 222  13 429 525  26 122 590 681
 495 547 257 246 111 414 443 456 365 326 463  93 526 460 597  70  49  77 612  10 440 483 621 576 560  74 484
 566 471 258 330 393 505 519 409   4 320 294 449 436  75 478 487 425 276 132 192 551 499 442 502 448 355  39
 536 572 282  91 521 187  44 489 577 428 534 408 381 168  80 390 553 203 417 245 386 494 402 356 515 100 496
 200 447   7 362 476  96 322 421 475 435 105 575 486 384 504 543 404 431 353  98 406 382  86 418 506 520 413
 516 372 266 451 248 305 389 327 232 363 461 432 589 259 472 352  79 261 550 427 234 501 415 339 450 149 416
 465 400  23 373 509  33 214 398 396 359 410 549 335 477 462 503 422 136 249 275 490 340 412 405 254 500 466
 349 377 354 306 298 426 369 469 403 480 293 344 295 318 316 280 329 323 278 385 378 584 419 387 368 288 439
 392 308 719 286 311 485 342 285 395 430 470 304 262 189 328 211 703 273 433 324 301 233 227 361 459 423 401
 639 237 467 488 357 514 274 375 238 244 360 512 201 351 260 628 397 264 175 546 350 334 176 195 565 458 250
 399 367 533 582 141 622 217 231 376 696 724 239 272 317 291 199 437 383 309 542 394 290 185 331 321 263 194
 147 336 473 529 347 554 348 319 167 507 312 441 242 666 138 332 337 528 241 517 283 202 300 434 333 571 251
 277 296 343 607 269 455 133 315 718 545 240 243 103 224 701 188 190 723 287 620 207 695 220 270 364 281 341
 253 313 537 568 252 634 223 205 157 235 539 226 208 712 279 656 563 325 247 729 230 225 164 161 299 694 221
 210 191 676 454 297 370 700 265 160 302 492 236 198 552 178 144 523 690 658 271 659 284  50 114 292 693 196
  41 229 657 711 522 346 444  66 151 148  90 130 605 314 380 580 611 710 713 493  59 567  42 661  15 267 303
  55  99 626 649 675 453 163  57  84 698 569 128 112 727 268 117 637 721 182 685  47 716 366 121 162 619 119
 180 171 586 153 152 146 686  56  30 688 530 137  68 722 708 594 513 491 699 689 256 379 150 728  17 255  71
 186  31 697 474  53 135 556 113  61 707 169  72  88 508 118 215 561 601 481 592 706 650 652  36 704 608  81
  25 129 720 172 599 156 445  48 420 662  43 108  54 726 388  69 338 677 709 573 165 562 702 725 218 307 115
 714  35 591 106 213  19 127 209 126 446  82  21  97  62 678 644 635 535 692 438  92 717 170 660 715 624 407

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00009e+07us (= 10000.9ms, 10.0009s)
Wall-clock time (full program): 1.0057e+07us (= 10057ms, 10.057s)
Satisfaction error: 2
Number of search iterations: 2683
Number of local moves: 947 (including on plateau: 436)
Number of local minimum: 246 (including on plateau: 54)
Number of resets: 1
Number of restarts: 0

Problem in column 12: 683 684 664 603 642 374 557 93 449 408 575 432 549 344 304 512 239 441 243 226 236 130 128 137 72 108 21 => the sum is 9854 rather than 9855
Problem in column 17: 604 65 123 219 51 28 60 49 425 553 404 79 422 329 703 397 437 337 190 563 523 611 637 513 561 338 635 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 157 719 102 510 689  90 690 655 462  75 722  55  82 715  84  46 168  45  68 649 656 713 137 107 593 231 635
 123 173 122 700 633 601 111 692 614  71 641 248  34 662 113  47 698 116  35 101 578 686 490  56 625 693 192
  74 514  44 415 694 705 477 516 526 720 418 419  66 172 217 702  86 117  54 663 170 372 647  57 727 140 143
 154 118  38 628 587 617 621 724 100 136 673 466  48  97 125 161 103 169  39 640 543 711 688 716 642 213  98
  53 156 226 699 362 582 544 650 695 145 457 376  43 726  99  69 708  73 160 675 268 723 399 121 519  89 238
 220 670 120 721 592 588 193 128 714 207 613 609 361 150 265 274 237  77 276  91 651 320 630  63 678 243 164
  41 233 195 508 680 580 706 216 206  93 728 284 325 135 499 245 178 188 252 249 707 596 626 392 555 159 279
 350 379 197 697 449 710 382 228 639 134 266 180 141 227 608 146 181 191 262 602 652 502 535 348 332 308 209
 166 378 310 311 553 725 669 212 574 199 303 579 305 290 464 158 718 246 494 272 129 610 479 215 171 162 163
 275 184 401 509 645 312 342 234 236 194 283 632 326 296 562 186 271 533 205 304 406 729 474 201 525 335 255
 369 423 256 506 529 528 319 417 352 410 138 589 257 250 242 343 356 301 435 598 278 344 493 232 254 270 366
 259 112 384 446 447 300 354 293 285 394 349 704 179 317 696 370 260 251 273 244 400 648 682 203 383 295 327
 330 200 377 187 513 219 393 412 444 208 430 380 359 488 463 264 288 414 434 306 452 269 454 489 347 428 307
 292 365 358 235 421 287 391 416 331 450 309 277 480 390 527 375 337 229 397 302 478 461 294 253 469 403 328
 429 583 346  30 470 131 247 448 286 291 240 623 355 389 517 329 258 485 333 371 297 496 280 471 183 542 425
 504 316 438 402 299 442 512 456 368 440 281  49 481 367 387 521 339 500 451 202 363  25 411 313 467 427  94
 520 357 190 424 198 459  76 345 431 536 436 398 324 566 189 413 381 298  81 539 576 221 322 318 340 353 564
 575 364 338 599 144 396 351 565 437  28 591 108 455 439 133 475 386 409 458 443 165 175 433  67 315 501 505
 644 223 586 151 114 130 547 487 426 465 460  29 404 468 241 495  64 653 483 453 267  65  87 606 497 388 422
 557 486 360 218  96 541 585  21 177 540 420 182 631 476 374 538  52 230 558 498 385 155 214 484 210 395 472
 503 618 551 261   7 127   8 408 334 545 152  95 577  22 405 573 548 482 225 549 119 282 174 611 473 532 674
 684 407 620 222 289  18  20 537  70 445 523 196 556 518 211  10 515 507 546 511 622  33 109 561  40 560 524
 571 600 624 149 132  51  60  78 104 550  92 619 595 321   3 552 681 668 717  13  80 167  26 616 441 654 691
 559 627 568   4 142 204 554  50 105 636  15 671 646  32 629 685 153 664 563   1  61 110 341 660  16 522 637
 658  37 709  11  58 126  83 581  85 666  62 147 570 124 569 607 590 665 679 572  42 263 176 604  12 667 492
 603  79 683  88   6  72 597  59 323 672  14 373 612 634 530 677 638 687 701   5 491 148 115 659  17 336  36
 185 534 712 224 106 314  23  27 531 605 239 567 643 584 703 594 661 657 676   2  19  31 139 432  24   9 615

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00564e+07us (= 10056.4ms, 10.0564s)
Satisfaction error: 2
Number of search iterations: 1976
Number of local moves: 736 (including on plateau: 378)
Number of local minimum: 157 (including on plateau: 45)
Number of resets: 0
Number of restarts: 0

Problem in row 22: 684 407 620 222 289 18 20 537 70 445 523 196 556 518 211 10 515 507 546 511 622 33 109 561 40 560 524 => the sum is 9854 rather than 9855
Problem in row 27: 185 534 712 224 106 314 23 27 531 605 239 567 643 584 703 594 661 657 676 2 19 31 139 432 24 9 615 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 729 475 553   4 642 146  75 683 665 556 112  21 515 571  78 705 102 680 727  64  85 694  14  93  41 140 685
  49 512  63  69 701  86  51 711 559 590 636 174 713 402 149 524  50 726 728 718  56 706  82 544 223  28   5
 138 568 655 153 634  30 130 724 401 575 145  79 415 710 121 628  61 554 715 610 134 623  58  52 702 137 103
  99 113 154 719 176  71 389 648 681 584 185 303 538 179  87 540   7 693 716 144 550 691 572 709 100 183  24
 167 539 111  94 586  73 204 677 175 604 214 254 608 619 228 163 220 645 433  84 295 626 723 717  81 573 142
 574 614 131 194 253 566 221 561  40 592 659 178 587 418  45 690 117 725 721 212 241 698  83 256 119 233 127
 379 657 216 225 578 164 714 700 168 259 342 268 202 688 396 633 239 209 720 196 662 482  74 189  90 277 128
 297 229 155 160 695 123 182 506 643 305 663 522 281 708 166 173 124 496 581 285 596 687 331 165 243 226 313
 393 704 161 346 599 722 286 338 676 251 692  92 271 279 213 242 240 531 632 210 252 448 255 278 267 118 359
 317 439 620 340 541 201 199 328 712 280 192 481 523 135 302 291 326 621 661 244 296 511 211 231 316 274 263
 397 513 536 669 304 564 306 148 248 560 445 276 257 321 115 404 336 299 427 260 453 452 266 245 332 375 347
 370 343 374 369 272 292 555 339 235 483 319 494 392 330 367 224 385 287 630 270 314 477 318 230 222 499 465
 476 622 261 356 348 593 419 300 428 436 188 275 301 218 312 250 376 258 141 366 431 617 315 358 284 457 469
 177 320 298 444 467 423 390 394 325 466 424 265 484 501 309 400 474 327 273 310 200 269 463 351 334 372 395
 283 422 380 311 355 535 110 381 382 507 378 289 479 447 191 282 408 440 360 365 495 345 352 322 307 388 341
 569 184 468 362 249 373 409 323 197 526 193  22 487 410 570 425 335 386   6 514 406 344 521 151 558 504 363
 181 349  15 443 368 353 414 510 361  77 398 525 517 377 502 606 171 488 247 435 441  19 601 546 417 157 337
 172  44 413 442 329 387 364  80 405   2 461 490 460 456 450 509 500 158 169 391 446  89 489 384 654 613 498
 549   8 407 520  60 420 464 516   1 147  91 187 478 567 580 416 429 129 133 236 627 217 383 653 537 603 497
 611 333 491 403 438 528 552 101  55  98 471 449 116  65 639 667 412 485  38  16 473 215 120 532 563 454 530
 635 203 437 551 518 294  20 246  26 288 533 480 264 104 508 136 618 107 190 600  39 122 651 421 674 607 583
 459  76 609 562 139 290 637  10 660  54 492 579 125  27 462 577 707  72  97 686  37 219 493 576 675 308 227
 529  46 108 545 159 542 666  70 612 232 470 472 505 324 548  96 594  88 180  17 434  62  11 689 697 534 625
 503 371 644 426 156 238 615  68 432 430 350 699  95 237 682  35 646  57 132 605 547  23 565  36 656   9 598
 186 234 357 672  47 519 631 206 195 557 588 638  13 616 527 143 591  53  12 650 207 150 597 126 106 652 582
 585 451 649  18  43 658 205  25 162 354 105 670  59 114 668  29 684  48  34 696 595   3 678 602 624 455 641
  31 486 589 458 198 664 647 262 411  42 109 673 170  32 640  67 703 293 152 671 543  66 629 399  33 679 208

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00019e+07us (= 10001.9ms, 10.0019s)
Wall-clock time (full program): 1.00577e+07us (= 10057.7ms, 10.0577s)
Satisfaction error: 3
Number of search iterations: 2178
Number of local moves: 876 (including on plateau: 305)
Number of local minimum: 163 (including on plateau: 38)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 0: 729 512 655 719 586 566 714 506 676 280 445 494 301 501 191 425 171 158 133 16 39 219 11 36 106 455 208 => the sum is 9852 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 540 607 183  95 626 228   5 121 628 720 711 691 659  33  94  24  82 602  34  90 653 229 696  30 700  64 710
 706  38   3 202  68 665 641 178 568  20 661 587 186 616   4  17 115 702 235  14 678 618 688  55 660 254 676
 704 652  46  80 357 662 690 639 621 100 273 553  37 630 525 699   2 364  81   1 635 651  26 187  19  48 573
 695 681 512  89 179 671 674  86  15  36 606 625 133 601  73  39 244 408 203 118 684 515 552 274 542  40 560
 508 215  88 197 207 644 524 171 532 123 609 698 167 520   8 529  66 679 513 151 617 637  11 169 577   9 686
 528 664  21 143 145  27 685 333  18 146 647 622 378 588 511 472 120 470 572 107 600  13 620 184 517 206 518
  49 268 545  72 110 564  28 541 530 481 677 614 198 578 358 131 255 496 576 245   6 598 605 152 440 309 429
 526  85  10 161  61 150 594  77 279 158 559 423 623 290 497 501 558 489 403 277 464 610 596 147 604 264 449
 548 252 322 196 122 436 498 537 132 113 417 474 127 447 567 419 531 494 502  87 431 488 427  74 446 324 444
 298 418  32 170  29 549 544 523  42 214 503 351  47 584 426 411 571  45 593 539 522 473 456 204 535 323 453
 135 477 557 340 287 476 153 251 360 366 450 591 218 492 381 479 379 495 384 236 373 461 388 222 428 102 374
 377 510 612 224 457 269 385 345 487 280 352 534 475 546 433  79 382 380 448 103 163 304 469 326  44 482 389
 455 483 325 286 424 386 484 478 359 412  22 208 406 300 363 416 315 302 303 328 550 348 451 463 441 201 346
 314 574 468 399 335 334 395 313 396 413 258 459 195 729 331 391 256 341 438 278 311 173 368 365 270 421 330
 317 437 554 361 505 321 339 460 407 354 266 288 387 500 432 369 375 305 393 318 284 176 319 398 262 445 283
 260 350 343 493 353 362 276 172 452 267 234 295 725 465 376 394 242 471 442 627 405 263 347 289 327 372 253
 226 514 232 435 692 383 165 356 219 595 712 154 687 414  99 294 562 160 308 285 137 307 371 367 282 634 265
 332 141 299 575 458 349 310 402 490 404 410 292 136 434 467 275 297 586 144 507 316 425 211 499 200 624 272
 261 241 312 521 683 223 392 556 462 443 370 240 669 249 174 342 231 149 430 726 157 293 246 580 233 415 257
 355 291 563 504 281 189 336 480 192 422 344 182 547 128 199 561 722 185 649 439 306 227 134 646 175 555 243
 247 209 650 486 519 296 409 619 109 670  35 230 608 164 667 658 643 193 271 320 420 168  58 527  31 400 248
 105 221 177 615 701 721 162 148 565 536 180 159 648 116 237  51 155 238 657 668 190 727 213 592 337 638  98
 125 338 509 589 390 697 217 142 673 543  97 205 119  53 680  63 516 212 108 603 188 129 585 654 642 682  96
 719 329 716 717 640 104  91 506 117 538 216  78 703 114 166 124 655  75 220 663  60 239 259 666  67 401 672
  12  92 713 631 715  52 156 645 533 613  93 140   7  41 582 675 225 250 629 693  16 106 583 689 397 491  76
  59  50 597 708 301  43 112 705 599 694  69 101 579  84 569 728 724 707 181 723  56 126 111 611  23 570  25
 454 718 466 566 210  54 590  71  70 194  83  62 191 139 636 714 632  57 138 709 633 551  65 485 656 581 130

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00013e+07us (= 10001.3ms, 10.0013s)
Wall-clock time (full program): 1.00565e+07us (= 10056.5ms, 10.0565s)
Satisfaction error: 2
Number of search iterations: 2083
Number of local moves: 771 (including on plateau: 224)
Number of local minimum: 145 (including on plateau: 23)
Number of resets: 1
Number of restarts: 0

Problem in column 11: 711 661 273 606 609 647 677 559 417 503 450 352 22 258 266 234 712 410 370 344 35 180 97 216 93 69 83 => the sum is 9854 rather than 9855
Problem in column 12: 691 587 553 625 698 622 614 423 474 351 591 534 208 459 288 295 154 292 240 182 230 159 205 78 140 101 62 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 727 718 714 720  71 636 644 622 646  78  80  60  86 516  36 683 148  49  68  90 681  76 361 513  61  46 725
 705 690 455 623 713 569 254 200 313 378 150  87  56 624 162  64 578 421 107  84 672 611  93 136 163 417 530
  45 117  85 244 719 626 678 221 568  81 149 123 100 721  67 715 697 659 141  83 645  66 211 726 562 133 673
 197 496 696 619 116 552 130 177 661 134 151  55 181 579 118 605 692  96 577 405 657 173 220 712 219  39 598
 152 276 110 688 693 701 658  30 667  24 235 139 105 588 125 675 684 655 187 170 526 265 451 132  97 122 700
  47 121 120 724 179 445 641 322 699 199 504  91 222 541  92 664 592 594 216 164 680 362 234 553  89 111 649
 581 285 154 102 138 627 671 640 709 311 147 168 205 586  62 160 567 694 153 359 587 190 703 318 145 303 290
 159 332 559 166 142 650 156 691 540 215 194 248 264 674 677 396 444 555 114 517 511 191 291 543 329 178 119
 239 261 347 273  43 429 459 474 324 247 253 279 241 563 137 461 729 676 706 272 210 293 165 665 183 325 601
 208 371 382 595 198 599 112 217 409 609 232 246 348 505 233 135 323 389 206 335 252 213 476 708 653 269 632
 363 255 203 180 328 558 380 278 443 388 716 398 146 284 204 404 637 638 262 410 301 319 506 320 376 193 365
 223 307 317 243 478 565 358 419 685 282 306 728 271 300 390 575 423 209 286 338 383 171 202 337 373 295 391
 157 366 334 401 367 314 342 336 439 471 370 345 722 281 308 275 502 242 431 395 604 418 229 321 460 169 256
 472 394 356 509 462 240 414 375 258 267 287 412 407 432 280 274 231 277 458 514 339 464 260 469 426 480  98
 372 392 473  38 263 305 368 381 602 442 377  94 344 441 299  74 487 315 399 331 493 346 545 422 369 326 557
 374 354 433 507 387  51 457 430 292 340 386 456 249 425 483   5 424 343 357 227 411 397 519 349 310 510 379
 466 556 312 503 416 270 470 333 214 481 144 289 360 296 449 547   3 268 463 600 341 259 355 529 350  69 512
 385 527 251  41 393 288 174 188 161 283 364 582 352 452 400 438 309  65 490 316 245 499 620 522 477 618 415
 489 403 436 492 384 140 413 437 175 485 453 434 551  26 428 533 192 574  29 468 406 634 218 101 447 475  32
 446 576  10 498 420 155 408 143  31 570 467 639 491  48 448  37 327 185 531 189 524 542 488 207 454 486 535
 554   6 440 548 536 266 103  18  72 528 521 539 427 201 532 607 508  53 172 544  75 538 236 494 591 518 228
 484 631 571  77 501 124 596 550  27 590 294 500 564  25 625 479  22 176 603 129 196   4 616 109 651 698  13
 695 606 689 195  35 127 630 549 226 537 435 711 520  63 613 566  19  28 465 402   2 495   1 104 525 450 167
 615  23  33 497 589 250  54 546 297 237 662 585 629 212 723 113 128 225 583 642  34 353 597  21 584 573  50
 669 682  99  82   7 115  44 482  73 534 635 643 707 330 670 131  79 652 561 593  57 668  95  88 302 633 224
  17  58 572 184 663 238  59 610 304 523 656 351 647 126 608   9  40 560 580 612  12 628 648 298  42 702 108
  14  52 704 106 614  15 182 186  20 621 687 654 660  16 686 230  70 257 710 666  11 679 515 158 617 717   8

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00014e+07us (= 10001.4ms, 10.0014s)
Wall-clock time (full program): 1.0057e+07us (= 10057ms, 10.057s)
Satisfaction error: 2
Number of search iterations: 1989
Number of local moves: 811 (including on plateau: 275)
Number of local minimum: 144 (including on plateau: 29)
Number of resets: 1
Number of restarts: 0

Problem in column 12: 60 87 123 55 139 91 168 248 279 246 398 728 345 412 94 456 289 582 434 639 539 500 711 585 643 351 654 => the sum is 9856 rather than 9855
Problem in column 22: 76 611 66 173 265 362 190 191 293 213 319 171 418 464 346 397 259 499 634 542 538 4 495 353 668 628 679 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 150 208  29 165 609 718 622 298  69 453 578 623 695 625  53  28 119 117 127 614 694 544  24 110 693 191 699
 155 565  42  11 678 587 707 688  76 713 664 724 141  47 450  67 653  51  27 490 114 170  93 706  63 534 639
 388 686 638  75 434 238 689 643  79 608 420 601 720 145 374 103 655 112 195 682  96 194  82 137 166 562 133
 722  64 153 175 222 410 522 590 399 721 491 193 600  34 144 243 476  45  71 669 698 610  61 715  56  68 703
 102  95 206 111 583 384 674 604 220 553 564 378 692 134 417 146 657  86 197 637 139 132 723 157 123 505 636
  87  57 164 279 630 719 685 672 200 513 478 612 606 122 701  23 254 152 437 589 288 290 250  52  73 717 205
 708  74 616 224 301 364 359 551 135 480 696 336 272 151  92 256 710 156 675 241 727 705  81  49 199 428 269
 673 605 594 209 538 404 468 363 203 275 648 293 324 192 158 126 728 171 140 185 186 709 113 225 278 676 371
 216 177 398  54 266 690 458 624 647 712 586 725 149 136 650 326 244  83 331 235 143 284 227 178 229 640 447
 312 180 260 292 511 322 346 597 295 619 618 660 160 167 542 334 213 716 259 212 319 297 207 264 240 671 242
 108 579 253 231 249 683 454 649 327 343 422 291 255 261 495 274 652 282 316 451 341 218 239 714 393 285  90
 361 726 258 313 125 190 330 382 379 154 436 455 390 268 487 697 230 403 314 270 305 457 498 306 333 569 219
 236 396 483 529 397 356 406 461 344 427 196 325 423 226 412 348 303 408 308 381 365 386 521 262 350 299 307
 280 501 323 351 481 276 233 466 302 395 369 421 392 338 360 385  25 387 370 431 414 329 349 367 394 409 507
 411 484 339 362 289 499 265 263 358 502 281 439 271 442 519   3 373 294 401 549 215 355 311 377 425 273 555
 347 340 515 337 172 168 202 163 595 300 310  17 418 591 159 430 467 509 517 438 510 332 456 449 296 328 489
   2 357 405 321 129  88 443 101 407 548 246 585 366 496 247 452 383 376 574 518 432 342 353 541 477  89 577
 320 469 550 391 234 198 184  26 556  65 286 173 475 572  58 459 479 444 528 415 426 435 503 531 545  62 471
 446 494 500 561 380 440 368 118  43 181 252 267 473 516  66 525 210 472 138  30 558 539 460 588 536 161 533
 613 251 537 557 486 315 214  39 554 211 106 463  44 493 188 448  41 602 527  21 508 485 632 375 413 189 543
 372 514 283 575 464 147 169 124 571 530 182 176 599 433  60 416  84 607 659 576  19  72 621 441 474 217 470
  48 617 546 631  14   1 429 593 651 179  31  50 389 532 679 582  99 667 666 183 568 116  59 445 504 567   9
 641 465 547 512 482   5 121 120 424 162 488  35 232 620 646 563  98 419 573 201  36 626 492 497 654  91 105
 584  55 570 633   7  70  80 142 634  77 204 128 598 462 277 645 629 702 524  37 691 148 658 287 700 309   4
 663 317  22 687 523 345 223 318 670 104  16 174  78 627 644 680 221 656 402 352 131 661 596 552  38 109  46
 248  20 592 729 611 603 107 245 684  12 187 130  85 665 335 628 237 681  13 354 228 304 535  10 526 506 580
 662 559  32 540  40 635  97  15  33  18 100 581   8 560 642 668 615 257 566  94 704 115 711 520 677 400   6

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 5.62375e+06us (= 5623.75ms, 5.62375s)
Wall-clock time (full program): 5.68137e+06us (= 5681.37ms, 5.68137s)
Satisfaction error: 0
Number of search iterations: 877
Number of local moves: 574 (including on plateau: 173)
Number of local minimum: 40 (including on plateau: 22)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  21  60 276 665   3 614  97 116 656 100 654 675 713 708 113 668  47 696  34 689 693 141 643 717   5  45   6
  14 163  23 591 572 659 137  44 657 198 702 674  41 653 122  12  91 633 629 685 694  66 600 376 664  93  62
  24 148  68 667 666  16  64 236 308 598 613 658 140 625 251 576 227 652 705 661 649 683  35 108  48  69 360
 578  37 495 511 558 627 162 331  31 584 560 640 135  10 120 662 207   9 624 616 680 619 204  32 660  13 149
 534  58 581 206 501 510 606 230 655  26 575  20 542 538 129 569  11 261 647 550 599 650  15  27 514 110 191
 333  56  40 527 644 545 526 111 540 638 588 651 144 336 119 537  76 589 519 192 603  17 567 105 605 180  67
 439  89  25 593 573 523   7 139 518  72 636 597 127 529  87 539 133 487 601 607   2 620 395 617 552 187 161
 610 203 628 557 516 477  83  52 554 642 568 631 142  18 189 417 235 621 218  53 210 535 544 212 592 168 181
 559 215 531 428 408 577 503 109  22  80 524 416 494 420 132 604 446 443 310 513 442 555 502   1 422 134  65
 562 252 176  43  46 532 434 264 419 101 543 447  54 452 179 468 504 464 525 448 490 612 429 493 226 172 520
 536 289 463 549 566 484 424 259 323 459 322 497 449   8 190 225 385 451 353 327 456 512 364 412  82 265 205
 370 280 423 445 421 467 390 438 471 361 405 354 498 480 444   4 228 339 475 371 335 381 348  19 414 279 415
 478 296 402  61 320 411 387 326 404 237 201 319 294 460 410 453 399 400 508 324 488 306 441 406 290 384 450
 379 337 431 357 418 288 298 365 430 334 301 473 283 396 469 433 427 250 316 425 345 272 435 256 317 407 413
 397 350 340 200 409 358 368 485 293 374 343 287 528 302 363 211 263 299 344 355 372 318 392 676 380 541 307
 274 351 311 347 359 247 342 352 258 273 349 382 426 269 729 688 377 309 509 202 432 314 303 341 356 440 315
 716 507 328 369 229 332 329 458 304 295 489 375 292 479 462 188 398 286 373 281 232 197 455 325 367 403 386
 291 496 492 312 278 268 233 571 401 719 346 300 282 123 623 383 570 305 297 246 253 241 125 499 160 580 461
 238 639 255 199 285 313 710 585 701 338 164 216 551 145 491 173 474 243 248 547 234 275 186 330 257 389 669
 635 517 691 260 220 114 630 470 185 673 146  59 697 193 579 170 648 244 131 457 366 262 171 223 154 454 506
  78 715 157 681 112 209 271 546 266 284 158 321 692 596 472 720 672 378 587 103 249 178 167 224 151 684 184
  33 522 618 196 221 670 165 563 156 564 183 208 574 245 393 182 609 242 117 155 530 718 240 466 121 553 611
 169 663  94  84 686 239 267 565  79  29  49 152 436 476 722 703 219 723 138  88 194  81 645 711 277 641 725
 195 727 177 704 124  28 646 394 118 159  99 213 515 521 465  98 590 270 254 106  50 634 217 724 533 712 582
  70 709 714  86 561 147 391 677 481 608 222 115  92  96 174  63 231  95 153 583 150 486 699 637 388 632 595
 707 671 437 166 102  74 690 687  39 626  42  85 500 175 728  38 706 130 136 128  77 107 678 362 622 594 548
 615 505 679  51  57 126 695 482 586 483  73  90 214 602 700  71 682  36 104 143  30  75  55 556 698 726 721

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.0057e+07us (= 10057ms, 10.057s)
Satisfaction error: 2
Number of search iterations: 1953
Number of local moves: 772 (including on plateau: 292)
Number of local minimum: 135 (including on plateau: 28)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 578 37 495 511 558 627 162 331 31 584 560 640 135 10 120 662 207 9 624 616 680 619 204 32 660 13 149 => the sum is 9854 rather than 9855
Problem in row 8: 610 203 628 557 516 477 83 52 554 642 568 631 142 18 189 417 235 621 218 53 210 535 544 212 592 168 181 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  52  12 604 126 616 117 718 602  18 597 705  25  30  72 121 164 480 715 585 696  14 682 168 614 563 548 211
 114 658 405   8 380 603 474 105 118 669 549 218  24 709  84 691  97 719  94 398 179 671 708 510 107 520  43
 524  57 274  64 610 680 703 689  54 552 712  11  31 137  16 544 576 134  82 687  34 713 727 103 434 630  77
  71  50 611 521 690 150 500 432 575 482 581 382 522 155 145 628 477 144 200 185  42 673 207 688  91 497 156
 102  93 717 157 663 142 641 283  26 692 151 289 180  51 173 613 516 654 193 148 184 590 361 626 721 653 236
  28 169 495 104 699 644 504 670 219 130 617 238 125  95 290 720 634 578 101 621 188 642 192 657 270 119 106
 212 205 726 252 519 258 424 210  75 702 132 667 275 128 153 264 624 622 140 299 446 166 672 728 230 527 199
 292 240 724 170 629 147 428 316 224 508 383 172 269 256 158 589 650 538 182 716 259 282 251 250 263 710 249
 209 335 627 347 592 223 570 355 448 232 609 243  78 701 174 353 499 221 577 239 326 276 261 176 198 638 348
 358 178 197  79 599 260 636 319 305 725 539 569 385 255 324 325 639 722 294 196 204 133 244 160 234 729 247
 391 227 698 267 404 379 489 340 208 455 695 528 191 321 242 214 723 668 189 314 253 231 318 310 330 341 129
 301 436 237 217 403 317 675 213 389 308 409 356 266 415 678 175 526 329 465 371 393 248 322 397 202 484 323
 378 422 304 683 364 387 407 452 352 372 342 284 328 350 320 429 254 419 220 517 307 414 425 257 313 365 190
 278 439 437 438 463 115 343 288 413 344 507 418 467 375 298 337 286 287 395 346 354 359 327 445 295 399 402
 293 296 368 268 311 360 300 412 464 377 336 367 345 357 362 381 400 246 363 471 530 245 406 394 390 334 479
 462 459 458 392 376 443 181 408 493 410  92  69 315 427 349 177 396 441 183 511 312 470 416 423 457 291 444
 233 421 420 534 228 426 149 550 167  10 309 159 543 339 541 506 374 454 485 547 384 466 143 366 536  87 478
 515 472 109 331 215 487 386 623 509 135 138 540 513 449 401  66  67   6 306 332 615 558 461 505 573  29 514
 664 450 586 531 136 411 162 222 469  80 302   4 433 561 481 468  74 417   9 542 566 483 512  55 498 297 442
 632 555 110 559 195 333 229  88 525 431 280 226 491 619 568 473 161  81 279  47 529  90 556 447 571 216 564
 587 594  53 605 139 494 351 560 460 100  60 562 453  86 496 303 285 281 593 113 625 203 596  19 503  83 651
 532 502 108 598  48  59 225 451 435  37 235 456 537 584 492  21  99 272 574 606 600  33 656 388 665  22 620
 649 486 116 567 369 557  70 488 476 120  27 430 501 618 475  20 122  23 633 591 647 583 171  68   7 490 551
 646 652 123  39  46  41  76   2 572 206 582 677 679 518 580 111 338 440 706 127 535 533  65 676  13 186 686
 694  89  49 693  85 553 146  61 635 648  36 704 545 152 523 565 241  58 681  45 601  38  35 265 659 370 684
 637 661  98 645  44 662   5  73 595 262 154 707 655 579 711 588  40 112 612 187  62  56 640 165 124  96 685
   1 697 201 660  32 607  63 643 631 271 373 554 674 546 700 131 277 273 714   3 666  17  15 163 608 194 141

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00016e+07us (= 10001.6ms, 10.0016s)
Wall-clock time (full program): 1.00567e+07us (= 10056.7ms, 10.0567s)
Satisfaction error: 3
Number of search iterations: 2113
Number of local moves: 717 (including on plateau: 233)
Number of local minimum: 214 (including on plateau: 23)
Number of resets: 1
Number of restarts: 0

Problem in column 16: 164 691 544 628 613 720 264 589 353 325 214 175 429 337 381 177 506 66 468 473 303 21 20 111 565 588 131 => the sum is 9856 rather than 9855
Problem in column 18: 715 719 134 144 654 578 622 538 221 722 668 329 419 287 246 441 454 6 417 81 281 272 23 440 58 112 273 => the sum is 9854 rather than 9855
Problem in diagonal 1: 211 520 434 688 361 642 446 716 577 722 723 175 320 375 345 69 309 135 469 88 351 59 369 39 49 661 1 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
   3 696 266 637  72  30 657 189 647 664  51 486 597 627 708 690 672 143  58  37 125 668  39 141  43 651 258
 702   7 169  21  65 600 709 151  23 683 676 360 589 653  25 649 710 163 104 191 659 592 614   2 159  13 566
 533  79 345 586  11 363 641 222  71 205 621 602 114 680 628 699 684 635 180 196 174 673  10  48 234  47 574
 650  52  36  22 147 681 584 623 636 547 558 543 579 662  97 498 644 111  68 194 135 655 108 262  93 488 182
 677 658  41 569 250 667 692  26 466  86 364 167 604 663 511 526 540  16  44  70 103 590   9  19 401 619 477
 606 386  96 492 136  38 393  59 332 616   1 610 388 581 480 617 563 626 474 124 100 240 496 268 144 489 500
 502 535 129 615 236 512  92  35 531 607 598 120 555 591 485 594 603 274  34 165  42 564 481 118 101 583 153
  31 670 156 611  62 447 532 409   6 509 215 235 612 654 459 453 444  45 399  64  67 599 494   4 483 620 575
 596 510 176 431 140 374 487  83 259 576  61  46 580 471 527 573 550 208 501  78 582 270 519 311 246 192 508
 522 505 440 464 190 436 560 432 417 230  32 251 506 551 398 429 273 224 402 172 414 289 328 229 310 418 433
 389 421 293 438 242 465 286 456 411 292 105 247 578 468 441 264 179 518 277 260 521 537 375 351 131 354 556
 529 458 387 187 291 435 415 377 307 378 394  12 350 524 404 301 284 448 425 408 385 283 523 493 461 391   5
 407 495 451 434  94 324 530 406 460 296 381 249 412 265 281 457 368 413 257 308 373 473 282 285 306 445 403
 541 278 422 462 336 491 325 340 497 253 352 382 344 327 479 365 369  53 304 534 478 359 342 315 276 370 261
 241 442 454 142 507 267 372 516 517 428 367 227 463 272 410 280 397 682 269 358 287 335 343 300 275 392 312
 302 470 357 376 640 427 384 334 439 380 184 252 437 212 326 361 625 362 405 248 420 309 318 337 416 314 220
 295 320 707 371 452 271 170 198 329 238 338 482 571 379 339 476 347 199 356 475 305 213 321 450 317 341 595
 297 256 313 288 426 333 349 210 553 237 633 693 396 254 322 279 132 443 209 546 587 106 455 520 562 201 255
 430 204 214 390 503 231 514 233 648 115 542 570 185 323 188 218 316 207 661 552 688 538  60 557 331 221 216
 202 149 568 203 499 346 395 624 160 137 366 467 263 245 113  91 400 319 423 721 643 171 193 665 704 154 634
 239 200 559 298 669 353  95  66 244 700 469 504  80  15 183 121 181 674 705 695 722 223 186 675 299  87 613
  76 110 609 107 605 712 102 671 243 711 618 525 128  73 116  89 217 446 703 567 219 729  81 631 593  29 145
 146 197 549 608 728 119 109 645 689 348 694 545 117   8 303 112  84 585 164 539 228  33 727 646 601 232  99
  98 148 716 701 629 173  85 678 168 152 157 419 226 195  54  27 158 330 666 544 548 139 632 719 706  74 713
  17 177 714 225 515 206 138 588 536 162 698 577  75  14 726  63  55 638 679 697 126  77 572 484 355 685  56
 133 717 513 127 686 472 211 723 178 150 290 123  57  18 134 554  20 528 449 622 294  24 687 642 656 725 122
 691 715 175  50 724  82  28 561  88 155  90 161  49 130 718  69  40 565 639 490 630 166 660 383 652 720 424

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.16213e+06us (= 6162.13ms, 6.16213s)
Wall-clock time (full program): 6.21847e+06us (= 6218.47ms, 6.21847s)
Satisfaction error: 0
Number of search iterations: 1006
Number of local moves: 701 (including on plateau: 219)
Number of local minimum: 35 (including on plateau: 24)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 725  92 465 233 656  42 714 686  98 623 707 407 184  69 216  26 723 705 122  51 679  70 149 103 504 693 113
  20 729 647  74 530 267 140 376 117 193 563  35  85 126 662  16  77 477 430  38 696 101 711 727 589 713 716
 720 100 422 505 685 162  65 252  18 689 619 512 112 653 135  22 683 712 142 491 602 143  86 220 718 221 166
  84 276 699 675 536 179 186 134 475 218 550 624 265  45 728 170 197 537  61  47 565 603  21 645 627  76 632
 722 119 330 508 467  60 433 518 156 684 671 633 214 706 620 332  88 163 198 185 576 150 606  96 363 116 141
 235 111 586 466 123 717 281 529 282 610 640 283 698 676 630  99 279 109 178 232 639  48 153  37 240 253 721
 204 120 625 678 710 171 700 702 256 709 575 289 294 176 470 127 208 242 114  72 688 201 298  97 642 175 312
 230 102 704 463 535 182 118 695  30 516 561 634  56 648 599 260 202 217 336 726 317 161  67 337 227 213 719
 167 323 655 395 646 255 223 342 697 387 451 605 154 379 273 246 212 224 228 325 580 207 236 188 392 520 545
 329 319 641 346 595 331 190 245 231 514 425 251 165 244 492 257 369 521 427 275 559 243 438 303 322 239 584
 168 144 437 362 644 398 169 556 401 393 287 375 249 250 652 254 206 585 377 177 661 270 424 258 682 271 205
 474 286 310 390 313 372 203 344 534 335 419 420 724 308 371 226 429 416 277 351 458 292 386 359 374 215 269
 364 300 428 439 219 309 263 343 173 373 532 701 367 358 457 454 151 406 381 302 618 241 402 304 237 264 469
 468 288 274 383 326 354 440 361 189 366 238 472 164 572 636 501 247 314 380 414 293 353 350 349 352 431 340
 368 391 211 139  41 327 462 493 339 394 284 311 333 334 409 484 348 360 495 280 307 483 476 441 423 478 444
 500 320 397 295 445 285 345 494 382 389 418 385 417 259 299 452 388 341 324 268 316 405 527 442 347  11 404
 378 498  78 210  90 506 357  68 460 447 496  46 411 515 194 412 137 628 448 549 145 531 432 413 403 554 449
 543 455  93 547 146 355 305 108 548  34 222 209 487 315 408 266 356 301 481 555 187 497 486 461 400 517 573
 541 570 136 503 524 450 399  94 328 526 132  58 464 542  62 435 489 539  13 607 158 566 528 613  52 490  36
 583 601  81 396  44  33 587 522 562 128 160 229 621 159  87 629 421 523 708   1 234 588 426 499 107 473 453
 553 568 365  40 106 650  59 248  63 148  71 297 598 637 415 479 691  15 546 582  55 443 664 540 482 278 262
  57 577 129 480 195 525 115 485 594 306  14 471 591 191 200 564 551   6 600 488  39  23 631 611 574 681 157
 509 456  29   2 104 614 533 133 569  83 180  31 649 507 105 635 593 338 592 567 192 616   8 446 272 511 581
 181 680 152  19 196 434 703 131 557 538   7 657  89 510 125 667 694  10 669 436 121 690 654  25 174 612 124
  91 666 502 579 291 668 578  24 519 155 147 183 692  82  27 596 370 544 660 670 130 597   3 617 290 110  64
 609  49 138 410 622 571 615 459 626  54 225 658 677   4 199 687  73 604 663 608  28 674  50 172   9  75 296
  32 715 321 318  66 638 672 513 651  43 261  79  95 590 384 560 673  17   5 558  12 659 643 552  53 665  80

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0001e+07us (= 10001ms, 10.001s)
Wall-clock time (full program): 1.00524e+07us (= 10052.4ms, 10.0524s)
Satisfaction error: 3
Number of search iterations: 1912
Number of local moves: 975 (including on plateau: 333)
Number of local minimum: 146 (including on plateau: 45)
Number of resets: 1
Number of restarts: 0

Problem in column 16: 26 16 22 170 332 99 127 260 246 257 254 226 454 501 484 452 412 266 435 629 479 564 635 667 596 687 560 => the sum is 9856 rather than 9855
Problem in column 18: 705 477 712 537 163 109 242 217 224 521 585 416 406 314 360 341 628 301 539 523 15 6 338 10 544 604 17 => the sum is 9854 rather than 9855
Problem in diagonal 0: 725 729 422 675 467 717 700 695 697 514 287 420 367 572 409 452 137 301 13 1 55 23 8 25 290 75 80 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  93 479 593 124 677 564 666 394 381 424  59 645  58  78  35  25  40  76 608 579 562 688 653 368 652  48 286
 211 489  45 406 727 699  65 601 729 671  80 696 107  96  44 114 491 125 619 197 715 586 373 728  55 102  84
 513 583 477 459 724 501 566 136 535 525  81  49 110  70  42  50 134 105 592 698 387 649  24 650 721  91 383
 565 701 661 725 173  92 605 664 121 303 101 679 149 246  85  87 221 141 503 112 641 720 529 714  71  95 151
 617 637 627  79 614 158 167 585 168 123 268 710  64 127 140 143 581  83 587 177 615 672 718 222 611 199 163
 527 713 482 159 181 333 189 705 138 706 236 568 230 133 172 453 250  89 563 223 596 623 109 726 318 161 272
 681 571 275 219 164 240 723 621 218 129 216 674  98 117 157 142 695 702 670 214 722 209 610 111 207 231 239
 560 499 345  12 178 215 235 642 146 709 100 546 212 283 365 556 668 249 390 711 578 179 528 308 296 176 169
 500 487 270 309 229 259  62 260 659 707 431 626 252 187 154 257 686 288 609 284 316 327 588 538 152 233 185
 461 558 244 243 343 311 165 256 137 712 317 276 301 293 336 654 414 717 533 119 348 183 692 305 232 539 166
 205 631 351 418 719 689 341 281 292 423 398 264 226 220 313 306 411 290 331 385 253 328 625 193 323 366 273
 203 476 392 330 247 298 291 335 174 582 356 382 445 417 334 515 340 469 466 448 320 287 198 266 307 261 716
 514 494 274 426 234 352 278 347 372 358 436 289 267 294 404 194 271 410 371 360 603 262 458 507 438 363 280
 497 375 432 444 108 412 361 455 395 310 227 357 434 258 304 422 399 377 217 380 355 521 192 344 367 483 429
 376 148 467 450 409 254 326 397 324 553 415 446 279 321 407 498 342  15 389 295 463 300 408 451 486 337 299
 277 322  38  37 401 490 402 454 339 405 379 439 464 403 241 437 534 433 265 511 396 162 319 523 452 378 354
 195 419 391 428 420 353 359 447 297  97  39 338 442 516 520 184  68 481 170 526 435 449 370 510 551 456 393
 182  20 384 524 350 364 485 594 543 282 474 492 329 430 460 541 425 314 210 224 200 116  22 427 478 599 386
 213 191  82 462 470 574 374 346  19 472 540 443 561 591 545 269 255 517 315 413 180 475  33  69 589 369 488
 144 104 416 567 600 548 509   1 480  34 622 196 440 471 468 126  57 388 245  14 465 496 242 400 590 634 598
 238 202 201 547 206  60  29 554 518  27 604 132 570 506 700 508 544 633 155 569  26 325 150 512  77 602 660
 113 421 624 519 495  94 644   2 559  74 532  36 557 537 502 228 552 576 128 572   7 505  28  75 577 647 251
 160 103 683 573 225 638 628 362 349 122 549 145 687 635 584 667  66 665 285   6  10  51 263 204 613  52 530
 312   8  99  17 550 632 522  61  72  73 493 135 555 616 536 651 575 656  32 678 457  54 237  11 636 484 703
 704  53 156  46 106 640 153  88 618 542 597  63 685 657 620 504 607 118 131 473 188  90 658  23   9 646 680
  86  56 171 684 175  18  47 120 643 302 612  43 639 691 690 669 208 606  30 682   4 595 580 139  16 673 676
 708 115 675 648 130  67 663 147 629 190 693 186 694 662 697 655  21 332 441   5  13   3 248 531  31 630  41

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00039e+07us (= 10003.9ms, 10.0039s)
Wall-clock time (full program): 1.00556e+07us (= 10055.6ms, 10.0556s)
Satisfaction error: 2
Number of search iterations: 2078
Number of local moves: 919 (including on plateau: 331)
Number of local minimum: 145 (including on plateau: 40)
Number of resets: 1
Number of restarts: 0

Problem in row 13: 514 494 274 426 234 352 278 347 372 358 436 289 267 294 404 194 271 410 371 360 603 262 458 507 438 363 280 => the sum is 9856 rather than 9855
Problem in row 17: 195 419 391 428 420 353 359 447 297 97 39 338 442 516 520 184 68 481 170 526 435 449 370 510 551 456 393 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 568 724  51 208 699 691 584 722  49 153 110 415  75 418  83 571 468  74  44 720 602  47 578 552 452  73 124
 695 348 611  78  71 591  45 652 727  92 172  22  57 723  95 429  26  56 535 554  93 175 696 721 583 458 550
 107 489 337 463 148  58 127 613  79 600  76 106  53 662 711 512 212 725 115  64 445 715 130 718 334 703 553
 146 729 188 659  87 404 183 622 125 653 394  66  48 631 177 675 677  31 101  97 709 105 128 426 564 635 595
 111 560 203 713 700 118 112 589 150  89 155 207 180 668 716 580 461 102  88 138 216 663 719 697 644 133 143
  43 579 642 503 160 397  27 726 184 129 126 135 176 582 247 707 705 233 305 231 706 717 170 401 599 283 142
 205 676 684 254  82 630 248 617 585 158 171 185 132 140 714 702 605 165 289  68 698 162 168 576 531 325  85
 147 665 532 271 290 438 214 694 186 211 246 345 136 728 145 514 604 256 189 646 229 300 299 614 413 440 103
 161 428 588 293 197 522 228 423 701 213 267 327 174 241 358 357 673 276 661 198 530 113 179 525 647 239 336
 154 234 275 469 223 422 265 664 169 674 245 240 257 261 284 563 650 501 302 210 628 202 306 475 660 226 296
 164 286 301 252 219 656 476 496 195 298 627 279 253 313 338 510 544 498 278 266 414 350 322 551 346 368 255
 380 281 536 340 264 712 224 456 251 361 274 685 303 540 339 291 244 376 236 351 285 196 304 431 332 569 294
 362 272 446 367 347 379 430 250 323 405 450 459 374 242 269 344 425 392 384 318 444 309 421 391 412 372 268
 390 258 280 369 448 442 364 342 343 326 360 407 472 474 330 370 277 359 386 134 470 314 410 324 408 315 483
 182 451 321 187 366 356 287 382 388 316 402 462 416 353 437 565 400 194 310 308 328 455 411 349 641 467 121
 513  16 419 333 509 311 377   5 260 420 460  94 479 424 409 227 434 491 435 488 393 365 427 335 378 373 480
 447 383 117 519 329  55 385 206 526 417 320 457 381 387 436 319 331 403 492 389 527 524 477 123 466 222 217
 464  84 506 157 523  65 398 178 443 363 505 137 590 487 471 433 141 341 399 490 581 396 395 238 237 355 478
 484 288 235 122 542 307 546 144 371 481 609 497 598 454 543  80 166 482   3 575  18 406 567 209  37 570 521
 593 225  70  24 432 317 672 270 596 486 215 586 633 262 494  36  32 533 520   6 516 559 555  17 151 439 616
 548  30 547 529 638 119   8 131 626  60 556 518 517  19 441  41 449 625 508 493  40 637 502 220  10 504 539
 572 511  81 557 608  29 566 173 507 114  54 592 485  21 670 200 108 528 573 654 230  15 603 199 167 500 538
 495 562 375 704  23 352 558 109 577 515 549  63 594 453 100 193 295 710 606 541  33  28  14 163   4 629 610
 587 221   7 104 643 655 534 232 139 243 623 597 465  20 621  86 204 669 263 537  34 667  62 249  91 615 687
 666 218 645  69 648   9 618  50  99 690 658 692 636  11 191  77 273 678 499  72  61 639 354  98 545  39 620
 634 312 297 632 624 149 693  96 649 680 657 681 682 282 116 292 259  67 651 619 473 156  46  52  12   2  42
  38  25 561 679  35 671 686  13 607 708 574 601 689  59 120 181 192  90 683 688 152 640 612 201 190   1 159

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00005e+07us (= 10000.5ms, 10.0005s)
Wall-clock time (full program): 1.00567e+07us (= 10056.7ms, 10.0567s)
Satisfaction error: 2
Number of search iterations: 2390
Number of local moves: 869 (including on plateau: 427)
Number of local minimum: 194 (including on plateau: 57)
Number of resets: 0
Number of restarts: 0

Problem in column 1: 568 695 107 146 111 43 205 147 161 154 164 380 362 390 182 513 447 464 484 593 548 572 495 587 666 634 38 => the sum is 9856 rather than 9855
Problem in column 25: 452 583 334 564 644 599 531 413 647 660 346 332 412 408 641 378 466 237 37 151 10 167 4 91 545 12 190 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 665  50 348 591  58  44 700 100 648 470  48  59 512  36  35  70 719 693 489 705  61 724 131 610 154 622 513
 699 456 164 633  86  65 602 113 667 636 361 105 641 123  95 704 102  56 669 657  94 630  60 728  72 389 249
 721  63 723 727 101 129 575  71 701 634  45 107  75 150 111 696 134  34 647 619 243 515 173 694 556 446 165
 537  91 695 466 125  23 135 729 717 295 679  92 137 140 148 167  64 208 535 716 617 659  90 401  54 720 615
 577 136 181 589 725  68 256  98 592 599  41  62 635 234  24 106 168 722 664 580 110 646 359 593 120 330 640
 189  55 247 516 223 465 676 220 677 604 219  81 715 210 273 226 121 196 479 650 149 624 288 726 369 495 162
 600 352 262 590 225  69 557 170 174 656 144  47 673 195 153 511 265 252 709 678 587 230 439 625 297 166 229
 626  99 488 530 227 139 122 702 191 542 188 212 596 277 280 689 272 147 686 574 613 254 190 500  66 260 385
 603 179 691 335 185 684 207 184 564 653 206 259 606 312 250 271 576 241 467 186 175 235 171 707 263 482 163
 299 268 324 507 319 708 218 632 279 334 284 194 301 323  87 224 404 255 424 339 629 311 292 501 240 461 698
 291 248 397 671 314 413 203 463 718 276 711 307 346 146 282 409 289 532 274 187 199 399 333 582 159 421 285
 233 371 290 601 429 581 237 275 228 525 322 383 309 270 503 697 380 363 172 217 180 343 341 487 342 444 332
 451 412 238 430 419 320 336 368 411 253 681 394 155 337 318 375 347 450 384 458 211 376 370 269 315 357 420
 546 355 423 406 445 246 313 391 499 296 469 447 308 251 293 306 356 222 264 415 360 232 305 403 522 400 382
 477 202 390 231 216 396 422 325 408 528 381 392 340 344 387 373 258 372 366 405 287 481 502 267 365 378 362
 417 316 215 114 358 303 298 317 327 388 374 398 443 474 245 266 442 418 432 518 490 286 326 331 493 414 452
 283 560 377 158 618 425 476 428  53 416 151 483 433 475 454 349 402 517 464 201 494 367 508 204  21 143 395
 407 459 462 294 329 510 568 538 524 214 541 523 345 544 426 449 441 478 239  89 119 261 485  40  39  26 505
  38 460 354 281 304 455 440 353  10   6 548 436 558 559 491 431 547 427 112 468 497 244  37 242 662 674 221
 104 578 473 145 393 529  77  13  43 182 379 498 496 571 612 639 554 141  76 177 526 514 598  20 675 200 642
 257 654 504 127 586 573 567 539  19 118 472 682  46 435 584 552 572 453 132 124  32 550 536 109 611   7  14
 364 509  79  85 597 213 583 448 152 205 457 480 160 569 549  78 519 386   9 351 506 130 668  31 666 623 437
  12 434 627 128 680 338 533 484 471  96 565 651  42 690 551 561 585 520  33  88 410  82   8  22 595 534 115
  74 608  49 328 631 566 521 492  57 117 209 614  27 655 713  52 661 486 126 192 652  16 545 116 620  84 644
 310 637   1 178 607 555  28 570  30 138 706 714 161 605 712   4 579   5 198  80 531  51 687 169 300 683 616
  73 658 660  18 588 688  97 649 142 236 663 563 103 628 685  29  15 638 278  25 543 133 703 321 609  93  17
   2 645 193 176  67 350 108 183 553 438  11 672 692 302 594 621  83 643 527 156 540 562 710 157 670   3 197

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00569e+07us (= 10056.9ms, 10.0569s)
Satisfaction error: 2
Number of search iterations: 2171
Number of local moves: 922 (including on plateau: 342)
Number of local minimum: 165 (including on plateau: 41)
Number of resets: 1
Number of restarts: 0

Problem in row 2: 699 456 164 633 86 65 602 113 667 636 361 105 641 123 95 704 102 56 669 657 94 630 60 728 72 389 249 => the sum is 9856 rather than 9855
Problem in row 22: 364 509 79 85 597 213 583 448 152 205 457 480 160 569 549 78 519 386 9 351 506 130 668 31 666 623 437 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 100 491 139  60 231 255 655 206 151 718 719  33 110  75 449 682 516  71 597  88 121 696 498 669 660 137 728
  68 416 145  30 686 170 149  72 630 620 706 167  70  55 578 560 636 152 616 159 113 683 614 654 313 726  67
 701 423 700  36 713 203 109  77 707 505 359 436  96 451 147 676 421 140 335 165  13 514 712 599  69 446 102
 214 692  23 711  93 107 158  82 656 512  95  91 467  80  27 582 641 125 688  47 210 625 703 716 677 142 691
 261 667  78   7 724 722  35 306 366 588 374 190 193  84 184 665 570 213 610 128 171 709 414 689 661 192  54
 183 684 723 540 248 585 127 116 372 668 628  99 221  81  42 180 615 496 314 301 217 297 725 717 529 119  28
  65 634 169 239 211 282 602 103 510 347 236 132 643 135  63 697 483 444 649 122 720 168 651 481 704 146 219
 267 189 638 157 188 253 288 657 162 591 138 156 608 286 233 166 663 276 368 729 212 687 624 647 321 234 117
 244 447 175 242 426 322 249 246 604 587 268 230 264 439 583 292 195 202 727 225 486 609 492 562 294 204 241
 155 708 257 284 434 302 185 161 524 537 511 209 243 428 600 281 581 721 382 207 278 340 596 273 270 160 228
 220 699 502  76 222 459 296 424 208 521 670 425 258 265 283 194 627 256 369 260 329 327 528 650 303 154 330
 354 693 250 532 311 476 358 174 343 525 293 247 187 318 380 235 341 443 397 182 336 272 606 399 584 381 238
 371 299 266 345 323 332 134 448 342 326 433 201 346 376 392 695 339 419 408 384 430 226 402 277 405 461 475
 305 385 310 470 398 503 383 438 409 198 216 375 275  92 396 328 480 379 482 478 487 312 320 334 317 460 325
 432 337 391 508 367 350 344 307 357 232 418 285 196 390 309 455 458 271 360 291 401 363 229 387 465 530 422
 413 295 353 497 406 254  90 364 493 415 404 300 539 466 315 412 407 569 200 488 356 280 205 237 319 378 400
 572 355 420 462 269 442 546 552 101 240  57 389 176 504  61 499  10 251 559 431 440 506 126 441 515 536 395
 471 262 351 500 519 331 348 464  22 274 626 513 338 450 501 429 111   9 178 457 304 507 153 370 388 494 485
 534  48 453 549  66 437 576 477 118 177 652 601  74 646 517 468 106  44   3 435 417 592 362  18 373 568 544
 308 115 454 542 523 495 490  43 590  53 403 489 518 586 215  59  31 563 474 410 472  98 324  73 456 538 533
 484 104 287 224 473 352 136 577 227 130 548 531 520 637  89  26 469 556 377 522 349 547 143 263 120 613 551
 553  38 197 394 445 259 509 298 333 218  50 672 631 673 535 427 566 555 112 678 639   8  56 186  29 595 199
 611  19 633 589 150  94 561 653 541   4 361 674 598 632 452  37  12 579  51 681 526  85  24  39 148 574 527
 619 123 289  25 658 557 573 617 252 173 622 664 290 386 565 163 179 571  20 479 580 105  49   2  64 685 545
 618 316 365 666  97 575 593 690  79 393   6 463 640 698 671  21 164 694  15 124 543  40  52  86 558  83 605
 715 411 642 603 612 131 659 623 629 245  16 635 644   1 554 594 223 181  14 705 141 172 133  41 279 108 144
  17   5 645 567  62 607 702 680 129  58  46 648 710 621 714  32  11 675 550 679 564  87 114  45  34 191 662

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00018e+07us (= 10001.8ms, 10.0018s)
Wall-clock time (full program): 1.00572e+07us (= 10057.2ms, 10.0572s)
Satisfaction error: 311
Number of search iterations: 2108
Number of local moves: 964 (including on plateau: 291)
Number of local minimum: 170 (including on plateau: 37)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 1: 728 726 69 716 414 297 720 729 727 721 627 235 392 92 196 300 57 274 118 43 136 259 150 25 365 411 17 => the sum is 9544 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  59  90 699 489  35  68 138 131 696  25 697 125 601 711 725  70  89 133 714 233  57 558 712 683  41 552 724
 703 609 644 658  20 167  21 655 726  43 212  38 524 110 303  81 546  58 436 670 140 462 666 397  60 718 188
 557 113 117 707 148 391  22 159 388  74 720  54 565 728 191 141 639 163 642 529  86 548 676  31 573 668 225
 729 124  91  92 213  83 722  30 509  67  51  37 704 605 723 415 132  66 648 594  88 685 695 727 194 116 715
 443  34 153 588 657 166 121 136 610 186  44 150 240 702 719 204 351  14 647 624  93 645 721 119 202 579 708
 673 134 694 198 584 515  48 675 629 151 698  26 178 401 195  62 126 146 582 653  40 421 170 677 399 641 139
 559 288  98 631 175 154 674 656 562 234 282 179 250 640 517 219  97 144 679 221 692 574 206 209 199 494 222
 701 297 545 156 103 158 101 423 502 511 717 187 614 298 665 230 180 245 271 102 474 469 311  76 269 568 682
 700 193 654 320 262 137  73 621 412 291 315 229 161 260 575 183 716 143 567 709 223 684 218 273 301 508 127
 361 261 324 625 142 252 235 649 483 371 263 272 580 420 257 226 367 663 425 322 294 510 197 185 284 422 465
 659 208 207 242 253 414 364 215 451 507 328 366 561 289 464 249 214 612 295 440 217 539 607 228 432 182 312
 244 560 280 705 404 173 264 672 283 375 281 307 246 177 313 713 413 406 431 147 276 466 407 393 190 429 300
 256 216 339 310 323 433 450 452 248 403 356 470 496 331 372 196 418 362 458 227 268 480 411 405 321 537 316
 238 427 270 302 416 445 386 211 231 306 293 689 326 484 467 330 286 292 459 503 353 279 373 380 493 341 275
 345 309 299 329 378 476 398 538 348 384 410 376 181 287 285 304 325 526 424 340 319 247 402 305 460 389 471
 333 569 318 463 342 444 352 358  50 434 327 296 400 343 265  69 525 519 349 381 447 365 457 382 487 236 344
 468 523 500   1 446 377 550 317  27 637 112 448 479 408 189 395 108 438 360 518 453 241 583 363 392 165 357
 243 374 359 383 522 370 544 337 369 350 506 530 461  61 368 547 385 267 100 259 556  79  80 475 535 449 346
  32 602 396  53 439 176 596 589   5 437 394 542 498 239 497 543 160 387 254 419 598 224  55 592 336 478 314
 251 490 430  18 623 603 627   2  46 635  23 531 201 597 454 551 521 516  75 520 455 174 528 499 428  33  24
 109 570 441 492 630 472   6 232 278 379 620 435 482  39 184 456 504 488 532  95 334  72  65 505 572 277 586
 355 591  82 549 646 308 495 220  78 255 347 587 554 514 128 564 541 650 149 172 155  13 571 613 686  15  17
   4 501 595 581 162 662 192 585 417 633 534 600  94  87 114 485 540 130  52  71 608 200 617 527 671 164  29
 123 628 512  47 590 691 604 274 426 390 690 599 210 107 129 622 576 615   7  12 634  84   9 578 536  10 152
 120 122  28 606 555 354 688  19 266 513 486 473 157 237 553 664 491 593 115 442 678 710  99 106   3 145 632
 258 335 203 105 135 660 533 409 338 638 104 616  36 169  85 667 563 661 168 481 681  49   8  64 680 643 566
 332 687 577 205 652 706 651 290 477 626  45 693  56 611 118 669  42 618  16 171 636  77  11  63 111  96 619

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00012e+07us (= 10001.2ms, 10.0012s)
Wall-clock time (full program): 1.00572e+07us (= 10057.2ms, 10.0572s)
Satisfaction error: 3
Number of search iterations: 1955
Number of local moves: 776 (including on plateau: 194)
Number of local minimum: 148 (including on plateau: 20)
Number of resets: 1
Number of restarts: 0

Problem in row 5: 443 34 153 588 657 166 121 136 610 186 44 150 240 702 719 204 351 14 647 624 93 645 721 119 202 579 708 => the sum is 9856 rather than 9855
Problem in row 13: 256 216 339 310 323 433 450 452 248 403 356 470 496 331 372 196 418 362 458 227 268 480 411 405 321 537 316 => the sum is 9854 rather than 9855
Problem in diagonal 0: 59 609 117 92 657 515 674 423 412 371 328 307 496 484 285 69 108 267 254 520 334 13 617 578 3 643 619 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 706 151  66 154 662 134 701 727 109 688 243 149  26 138  84 322 513 530 685 403 161  98 127 681 536 501 560
 660 707 129 126 622  29 679 696  50 595  51 641  61 493 667  43 540 726 526 120  85 574 143 699 102  70  21
 141  56 708 132 724  72 168 600 516 693 177 105  39  88 712  87 226 692 608 500 717  81 204 684 384  97 644
 562  34 110  99 695 224 587 515  52 593 445 719 227 720 153 208 610 498 642  55 200 178  47 430 546 165 541
  91  54 106 584 620 136 289 589 119 250 195 669 101 181 116 317 665 578 275 558  67 148 728 715 698 423 582
  93  82 114 676 658 713 146 203  92 626 548 710  45 240  79  53 180 613 614 518 276 702 158 211 634 239 633
 257 167 238 189 677 375 725 650 244 222 171 245 202 201 401 468 479 467 656 640 297 210 160 321 147 663 383
 579  83  68  78 434 561 179 703 237 111 673 170 283 372 302 326 711 396 440 320 255 194 198 705 115 671 691
 324 284 231 155 643 260 310 314 624 300 675 556 251 172 122 162 490 252 592 499 248 183 221 723 451 594 219
 307 118 293 265 414 344 309 397 378 313 628 271 298 330 341 174 619 571 390 417 235 123 121 184 674 718 623
 352 363 331 277 564 350 220 343 380 354 325 223 267 225 205 192 621 729 282 506 169 319 398 348 686 364 462
 214 296 391 351 597 311 376 533 261 327 133 459 207 242 464 465 291 357 470 368 367 345 301 329 328 424 648
 323 362 233 458 421 241 645 303 273 338 145 340 722 295 333 130 486 385 336 409 304 253 585 388 335 442 370
 404 410 346 269 308 312 377 366 406 360 489 450 299 449  64 262 355 270 441 369 436 256 485 407 280 511 474
 413 444 411 278 290 478 386 315 394 392 259 272 347 446 230 466 416 337 361 140 469 491 274 457 461 399 229
 294 422 437 263 209 246 454 266 415 342 505 125 426 503 539  60 353 428 156 206 420 538 381 427 572 481 387
 356 519 508 408 279 393   6 305 365 545  25 604 405 629 576 286 139 374 517 152 425 432 551 447 117  32 460
 371 521 612 471 213 522 484 104 473 373  38 527 433 487 288 349  57 186 306 318 382 339 418 402 565 419 197
 389 583 379 483  48 554 537 187  24 435 268 412 570 602 359 535 452 113 254  35 400 531 502 395  76 520 212
 453 431 683 475  74 659   7   4 448 524 482 553 627 670 131 694  62 196 456 215 649 476 509  69 258   8  42
 555  16 496 542 185 573 495 128 661  63 549 176 480 689 567 528 108 332 163 217 488 534 552  18 601 103  36
 477 590 438 651  59  44  30 463 559 510 637 159 472 586 532 598 173 112 142 182 523   1 611 529  75 190 512
  95 544 606 514 292 647 525 557 636 492 199  27 580 455  71 655 439 137  89 563 646 653  12  58 107 236  20
 543 616 635  77  19 639 615  28 632 285 175 596 672   9 568 569  96 193  40 216 652 654 630  14  94 566  22
 135 709 547 575  49 599  65 188 609  41 504  90 664   3 697 631 249  11 150 581  23 690 700 166  15 721 443
 497 716  73 714  86 429  33 247 617  46 678   2 494 625 550 687 334 228 100 680 603 234 232  31 682  80 157
 264 577 666 591  13  10 507 124 281  37 638 605 657   5 704 588 191 144 164 668 358 618 607  17 316 218 287

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.00564e+07us (= 10056.4ms, 10.0564s)
Satisfaction error: 3
Number of search iterations: 1954
Number of local moves: 673 (including on plateau: 262)
Number of local minimum: 186 (including on plateau: 32)
Number of resets: 1
Number of restarts: 0

Problem in row 5: 91 54 106 584 620 136 289 589 119 250 195 669 101 181 116 317 665 578 275 558 67 148 728 715 698 423 582 => the sum is 9854 rather than 9855
Problem in row 6: 93 82 114 676 658 713 146 203 92 626 548 710 45 240 79 53 180 613 614 518 276 702 158 211 634 239 633 => the sum is 9856 rather than 9855
Problem in diagonal 0: 706 707 708 99 620 713 725 703 624 313 325 459 722 449 230 60 139 186 254 215 488 1 12 14 15 80 287 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 360 722 727  71 581 378 160 402  61 616 663  80 135 132 479 629 440  35  82 721 725  96 443 147 137 127 706
  63  65 688 100 524 631  78 331  55 682 635  81 694 186 670 723 112  40  59 719  36 563 169 139 399 689 724
 720 699 372 477 142 570  88 298  25 523 495 558 131 650 609 666 340 353  52 456 628  93 115  94 441 122 138
  75 696  67 466 517 103 156 284 408 703 612 329  92 667 617 643 276  76 208 322 154 459 654 427 389 274 181
 686 183 683 164 273 657 123 600  47 606 576 555 252 569 649 438 175 106 235 488  41 130 692 207 468 161  91
 552 705 471  73 613 311 197 598  95 711 191 294 318 196 637 675 520 120  44 674 172 355 510 200 256 214 153
 713 497 599 601 258 627 709 346 133 534   8 105 229  86 636 567 227 286 415 548  66 219 336 269 308 423 110
 659 326 574 305 490 499 315 656  87 253 102 210  34 270 697 265 144 189 357 622 241 176 698 177 652 626 231
 287 302 710 465 611 158 148 232 702 532 125 182 503 218 319 194 226 291 522 708 251 203 595 246 478 455 192
   2 718 537 307 634 436  42 638 221 529 583 297 421 223 300 170 238 660 217 586 243 335 281 188 288 566 195
 230 264 550 119 568 162 323 216 493 511 487 262 224 334 292 205 587 209 293 324 259 374 621 351 664 519 414
 272 151 551 397 279 240 190 398   3 341 559 356 384  74 330 367 447 717 348 561 584 271 392 418 295 306 624
 407 512 542 437 362 333 406 449 368 296 289 422 413 201 379 328 239 255 412 354 254 343 409 304 429 363 349
 608 107 316 361 317 386 482 594 434 233 244 454 134 325 267 290 676 393 143 303 380 366 391 385 433 403 430
 452 337 345 301 442 193 680 327 376 275 528 416 451 358 619 339 387 163 260 152 383 375 640 245 481  18 312
 347  17 149 344 220 518 435 469 618 450 395 350  77 494 184 419 526 320 321 445 544 509 410 446 364 370 114
  57 404 237  72 527 371 515 285 365 426 109 457  68 428 174 396 373 707 460 431 665 591 248 394  90 491 514
 458 607 166 533 496 417 582  85 480 492 577 420 310 475 485 249 278  97 299 159 679 508 108  33 117 215 530
 538 444 204 589  21 439 332  46 309 250 506 476 129 489  24 565 432 536 633  56 448 145 560 472 268 556 388
 401 111 236 716 504  58 462   1 604 178 505 424 562 614  79  70 283 690 632 116 543 578  45 498  99 282 564
 280  15 168 213 128 605  31 541 677 247 150 557 645 593 136 470 630  26 547 179  19 463 531 653 228 484 639
 726 382 212 572 390  16 646  51 648 206  54  89 625 411 695 167 211 661 546 198 535   7  23 554 126 501 603
 171 185  14 615 314 118 545 352 620 180  84 592 521 400 155 113 642 658 507  60 684  22  48 575 644 381 655
 516 257 165  10  32  62 596 369 672  11 222 668 585 473  30  64  39 464 662 121 647 704 202 728 693 266 597
 234 199 553 146 461 641 671 540 513  12 549 486 610 101  29 173  43 453 525 187 277 712  83 502 500 313 342
  37 377   6 687 124 588 242 590 700  53 579  20 623 483 225  98 673 681 651 104 359 580  49 474 539 263  50
   4 573  13 714  27 338 701 157 141   5  28 715 685 405 140 571 691 669 425 261  38 678 602 729  69 467   9

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00014e+07us (= 10001.4ms, 10.0014s)
Wall-clock time (full program): 1.00575e+07us (= 10057.5ms, 10.0575s)
Satisfaction error: 2
Number of search iterations: 2524
Number of local moves: 920 (including on plateau: 350)
Number of local minimum: 194 (including on plateau: 55)
Number of resets: 1
Number of restarts: 0

Problem in column 15: 479 670 609 617 649 637 636 697 319 300 292 330 379 267 619 184 174 485 24 79 136 695 155 30 29 225 140 => the sum is 9856 rather than 9855
Problem in column 16: 629 723 666 643 438 675 567 265 194 170 205 367 328 290 339 419 396 249 565 70 470 167 113 64 173 98 571 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 442 724  45 719  32 145  99 661 117 671  33  62 557  21 716 694 717  52 577 480  61  97  85 649 673 677  49
 147 718  63 689  65 201  73 646 159 140 218 579 656  57 601 697  50 707 120 591 437 108 141 710 484 114 684
 612 596 726  84 182 527 272 698  34 526 157 625 667  25 166 167 203  38 125 439 519  56 354 610 708 644  95
 471 422 112 728 532 603 211  92 142 594 165 454 316 116 129 663 151  30  91 283 652 572 217 406 536 729 438
 168 662 443 252 706 445 106 132  78 680 185 608 711 226  94 102  59 173  79 246 620 237 590 695 683 581 294
 188 350 220  98 665 722 193 380  80 158 177 653 523 322 342 575 221 475 582 163 204 172 714 525 571 301 281
 690 468 180 426 111 675 723  28 144 174 184 213 559 115 148 368 137 214 215 512 705 119 202 511 699 709 626
 632 566 257 152  46 481 239 725 327 155 243 650 713 223 233 153  66 249 259 720 635 101 308 374 691 156 501
 633 410 326 228 504 568 175 164 315 169 138 586 139 128 171 224 200 232 693 236 657 225 676 558 617 205 678
 123 450 105 162 160 666 478 227 133 270 282 721 197 486 361 195 314 701 715 727 687 149 261 447 231 131 476
 339 556 389 613 121 622 268 279 287 190 244 431 498 297 271 135 349 298 194 636 565 310 358 503 222 198 682
 176 513 412 247 248 493 266 293 324 616 344 351 360 411 427 409 286 295 352 394 291 337 292 400 407 296 615
 321 273 290  75 332 325 260 455 333 196 449 434 553 464 336 398 355 424 118 253 318 335 395 595 299 569 700
 491 515 453 210 280 416 341 242 347 440 309 285 489 263 587 124 311 397 384 362 473 370 377 353 357 428 251
 328 433 497 234 405 383 388 404 345 396 170 402 267 319 284 385 212 544 452 382 306 444  77 528 373 364 533
  58 414 366 547 378 146 573 376 359 390 593 127 317 401 386 187 500 467 330 448 458 435 403 340 379 381  96
 550 104 488  60 460 258 429 365 567 520 477 254 392 288 372 451 413 338 430  67 103 554 524 262 303 495 331
  29  72 496 538 514 250 418 483 367 375 482 302 459 517 178 463 457 199 502 499  68 598 508 277 209 387 208
 561 207  26 510 551 230 432 304 539 546 472 134 313 537 518 329 552 506 470 130 276 505 462 136  71 300 238
 399 255 583 494 312  31 618   4 542  81 529  83 461 530 456 658 346 548 589  10 562 521 516  70 420   8 229
 100 265 507 423 643 154  37 509 624 474 592 107 535 531 685 599 408 122 686 334  23 356 256  36 371  87 391
 219   7 436 490 696 417 623 619 659  27 441 446  15 654 465 576 421 668  12 469 189  24  40 192  43 638 369
 574 186 425 672   6 110 670 630 655 393 602 289   1 522 584  20 611 597 645 479 113 543 150  55  17  90 216
 580  82 631  35  16 564 600 541 688 466 534 206  44 560 109  39 702  11   9 545 343 692 621 305  51 606 275
 323 245 681 419 647  53 609 578 415  13 492  64  22 487 563 588 570 627 264  54  42 614 604  48  74 485 274
  41  14 629 143 540 191 628   2 634 555 679 240   5 651  88  19 639 674 642 235 241 712 648 181 363 183 278
 660 348  69 607 703 179 126  18 641 640 664 549  86 704 585 637 605 269 320 161 307 669  76  89   3  93  47

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0002e+07us (= 10002ms, 10.002s)
Wall-clock time (full program): 1.00572e+07us (= 10057.2ms, 10.0572s)
Satisfaction error: 1
Number of search iterations: 2202
Number of local moves: 916 (including on plateau: 366)
Number of local minimum: 164 (including on plateau: 36)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 1: 49 114 708 406 590 172 705 720 693 701 349 409 336 263 267 127 477 375 539 4 37 417 6 35 681 14 660 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 715 202 175 520 204 721 724 470 713  48 649 720  70  23  47  74  14 216 725 577 116  88 676 615 611  62  80
  40 352 413 617 567  81 194 612 658  64 545 555 134  82 702  22 433 163 727 703 174  63 503  85 572 697  97
 306 512 263 526 131 215  65 576 686  25 672 644 103  34 708  31 100 169 501 700 337 181 657 240 726 687  60
  27 375 404 718 716 111  54 659 565 253 656 133 110 155 546 164  92  71 719 554 200  94 633 377 723 689  57
 119 650 564 442 613 673 205 660 487  79 606 152 347  68  91 468 102 112 717 652 264  50 393 265 714  90 272
 117 631 694 691 664 728 191 392 559 113 639 208  83 348 126 257 173  53 302 186 558 712 600 165 343 224  98
 241 136 662 177 158 167 435 647 482 206 598 243 222 171 682 285 270 188 488 678 395 653 619 211 467 179 195
 675 296 327 416 242  28 189 346 582 261 635 583 156 153  95 648 245 408 297 422 259 225 645 140 729 671 182
 364 608 277 214 233 221 383 624 543 144 537 571 121 172 397 436 315 192 550 142 696 266 614 231 317 282 405
 321 586 323 166 170 359 226 274 666 351 197 124 341 298 301 665 331 722 688 132 701 217 427 356 502 201 210
 123 638 314 234 220 362 141 345 380 354 305 360 350 267 318 677 706 449 622 236 229 312 495 336 406 300 376
 260 699 230 451 329 403 146 304 334 271 373 450 303 294 292 394 316 385 311 439 669 232 458 219 532 483 278
 287 630 252 291 330 333 213 339 498 410 367 269 357 568 425 508 268 319 453 218 481 299 457 154 461 289 379
 115 340 185 223 448 474 338 400 593 295 424 414 384 491 371 248 361 366 322 309 332 388 446 428 465 441 254
 326 273 396 344 479  36 368 378 389 477 605 320 544 286 355 580 510 381  18 310 313 402 279 382 437 293 374
 203 599 444 409 460 353  32 517  56 284 411  45 447 522 423 419 369 511 464 438 506 521 135 432  26 431 398
 494  43 475 490 496 308 573 443 262 552 415 237 386 399 466 283 412 358 349 528 280   7 290 139 212 459 499
 560  41 421 493 183 505 538 542 239 255  66 566  61 390 484  30 643 476 452 527 486 523 180 463 328  78 325
 594 128 492 480 536 530 417 106  87 420 307 513 626 407 581 531  76   8 275 161  52 591 387 516 125 455 454
 429 178 401 372  67 610 514 209 251 587 107 597 541 529 525  44 249 524 129   6 500 604 238 434  75 584 551
 469 473 137  69 471 588  72 149 199 667 162 634 430 563   9 198 445 579 122 540  73 621 114 627 244 685 515
 548 539 247 157 147  33 585 196 190 462  99 456 485 478 637 518 595 440 101 507 335 193  20 640 109 509 629
 603  86 519  12 418 674 589  21   2 616  24 504 601 707 569 489 370 324  51   1 176 472  19 570 228 663 547
 628 342 130 556 281 646 661 288  58 680  42  96 642 590 138 553 557 607 118 160 561 250 148  38 105 276 704
 692  46   5  13 108 602 711 187  29 574 104 391 684 497  16 365 705 533   4 535 681 641 150 651 256  39 636
 562  89 679  84 575  35 668 168 120 709 151  55 632 693  17 710 620 618 207 184 235 596 127 592  93  11 625
  37 363 426 690 609  59 623   3 227 698 159  15 695 670 534 258 578 683 143  10 246 654 145 549  49  77 655

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.05945e+06us (= 6059.45ms, 6.05945s)
Wall-clock time (full program): 6.11445e+06us (= 6114.45ms, 6.11445s)
Satisfaction error: 0
Number of search iterations: 949
Number of local moves: 605 (including on plateau: 155)
Number of local minimum: 47 (including on plateau: 23)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
   3 485 583 555  85 565  52  38  78 477 189 699 706 292 708 581 597  73 310 110  58 685  21 450 119 607 729
 124 680 644 325 711 372  45  37  87 679 105  92 260 585 233 623 719  96 407 570  18 692  35 458  91 716 451
  48 562  31 196 483 703 141 115 160 514  55 205 121 609 573 646 604 481 568 590  51 588  82 471  95 526 637
 130 658 503  86 155 463 129 721 107 454 701 201 122 717 173 660 712 441 528 172 256 547 109 431  76 379 224
  68 628 675 531 534 163 187 100 181 446 670 198 700 200  71 453 125 704 346 659 727 633 136  97  20 128 475
 175 649 464 143 152 693 332  61  74 694 497 168 114 707 165 728 206 132 677 185  98 610  63 486 226 643 713
 123 418 459 235  93 271 720  41 227 355 147 218 180 612 241 591 695 726 608 571 104 638 208 263 134 569 408
 270 651 605 690 252 246 244 274 625 595  83 255 266 599 283 621 515 306 207 723 225 343 112 238 195 222 209
 242 525 665 618 191 142 299 223 295 613  77 705 276 334 314 140 137 257 427 360 219 521 203 634  90 722 626
 264 217 641 297 117 645 320 261 288 652 580 237 312 258 204 232 158 718 630 215 316 593 311 668 186 361 174
 253 272 294 281 247 639 291 377 183 308 378 671 290 293 442 243 586 179 663 414 214 582 302 197 280 356 620
 259 296 714 317 169 401 430 267 234 307 440 323 339 381 300 329 396 289 309 212 409 636 262 725 341 434 336
 188 376 577 373 231 364 273 391 468 724 277 353 286 417 366 470 358 350 398 326 337 412 435 354 184 236 331
 402 229 213 383 439 333 327 254 395 390 461 403 347 315 492 363 338 322 359 369 352 385 380 559 275 370 400
 321 287 424 445 182 345 348 399 365 368 406 335 387 386 405 245 410 279 330 500 517 301 404 319 466 268 413
 340 529  81 455 506  50 313 362 392 342 563 511 428 371 512 467 429 448  36 539 436 148 579  57 460 437  64
 472 416 239  65 518 193 538 495 449 351  22 554 524 561 491 444 496 382  49 394 425 220 616 162 457 177 145
 522 151 101 508 578 126 469 397 572 432 367 447 510 556 421 443 328  12  46 426 519 265 456 106 576 494  27
 674  56  47 176 536 388 484 546 304  54 438 393 411 452 375 482 487  72 540 545 606 138 465 135 516 116 419
 476 159   9  80 505 357 587 154 542   8 499 422 553  39 600 549 478 544 298  33 662 210 507  69 490 502 523
 598 171  62 592 622 615 423 473 489  89 567 349 504  67 551  53  60 433  88 596  15 111 501 420 654 550 202
 560 192 199 493 530  28 683 702 557 166 374 474 488 548 617  30  99 552 250  10 635  84 533 156 624 144 127
 647 498 113 601   5 178 150 535 664 146 415 603 689  19 678  14 537 479 161   6 575 269 509 251 632 318 164
 657 103 248  13 574 139  25 619 221 249 589 527 564 324 532   7 240 681 284 566 661  75 656 480 684   4 133
 666 543 602 216 698 520 696 691 513 228 653  24 230  17  42  70  34  40 344 558 149 157 667 669 614 120  94
 686   2 384 640  59 285 673 650 697  44 194 462 118  29  23  66  32 648 710  16 629   1 594 611 715 303 584
 687 102 278 541 682 631 676 672 688 170 108  26 131 167  43 305  79 211 282 190 642  11 709 389 655 153 627

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00021e+07us (= 10002.1ms, 10.0021s)
Wall-clock time (full program): 1.00572e+07us (= 10057.2ms, 10.0572s)
Satisfaction error: 4
Number of search iterations: 2384
Number of local moves: 964 (including on plateau: 477)
Number of local minimum: 178 (including on plateau: 44)
Number of resets: 1
Number of restarts: 0

Problem in row 8: 270 651 605 690 252 246 244 274 625 595 83 255 266 599 283 621 515 306 207 723 225 343 112 238 195 222 209 => the sum is 9854 rather than 9855
Problem in row 23: 647 498 113 601 5 178 150 535 664 146 415 603 689 19 678 14 537 479 161 6 575 269 509 251 632 318 164 => the sum is 9856 rather than 9855
Problem in column 5: 85 711 483 155 534 152 93 252 191 117 247 169 231 439 182 506 518 578 536 505 622 530 5 574 698 59 682 => the sum is 9854 rather than 9855
Problem in column 13: 706 260 121 122 700 114 180 266 276 312 290 339 286 347 387 428 524 510 411 553 504 488 689 564 230 118 131 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 255 500 344 618 722  50  76 149  47 585 615 331 105 715  75 493 632  36 421 108 528 448 717  89  23 457 716
 304 688 630 365 629 123 468  98 466 565 703 603 201 693 160  96 187 120 471 110 374 602 228  42  88 669 172
 145 422 670 350 713 647 137  77  53 445 250 617  94 548 559 266 386  59 340  52 318  95 592 612 712 417 279
  70 665 392 706 725  73 127  99 469 520 300 720 189 143  74 701 509  90 650 170 621 169 600 416 103 285 269
 682 728 535 675 317  34 121 147 461 657 729 674 181 114 680  93 208  80 488 591 637 159 322 197 128 156  61
 113 587 616 607 635  54 530 254 133 595 246 217 221 196 556 253 244 264 619 654 584 667 174 218 117 259 242
 131 529 724 649 482  63 192 643 119 165 212 726  67 721 697 276 609 198 480  43 695 265 309 134 229 227 270
 252 684 406 633 553 239 531 301 554 524 291 158 306 183 694 258 164 248 564 723 362 186 180 287 216 220 138
 179 537 550 610 644 141 330 247 483 631 337 302 393 178 204 278 241 297 501 516 656 194 175 173 136 727 195
 359 292 476 224 561 625 167 267 199 215 597 290 206 381  78 155 363 677 582 314 477 185 719 327 310 452 357
 311 560 544 385 515 338 342 446 289 222 303 191 271 233 339 653 718 323 596 230 307 349 281 207 251 343 308
 313 319 334 329 324 395 409 437 335 678 354 293 272 299 305 321 419 366 435 434 407 210 383 418 294 275 497
 245 214 360 348 579 430 273 223 404 577 234 389 325 328 604 225 403 188 193 296 358 394 184 384 543 661 494
 412 231 492 459 351 410 532 356 280 298 345 256 450 333 380 489 364 376 463 295 361 263 200 496 411 320 232
 546 453  92 436  48 312 282 400 427 347 148 536 401 431 479 470  55 378 382 391 426 486 277 438 336 371 506
 373 462 367 441 399 355 442 332 454 341 439 456 449 424 283   5 578 433 465 157 249 533 472 115 368 428  35
 116 139 262 444 213 698 474 154 240 518  26 555 566 464 613 498  87 507 162 503 142 540 491 408 512  68 455
 458 397 268  16 118 504 379 487 423 237 451 346 508 526 352 499 429 440 168 243 126 396 539  39 475 611 420
 598 124 257  57 146 398 521 460 101 510 372 369 236 562  44 588 594 547 490  91  32 568 571 639 261 202 517
 569 130 171  56 205 481 405  51 375  45 447 377 549  31 575 552 402 671 161 593 140 576 495 574 415 203 606
 505 558 163 182  71 527  46 523  58  79 638 551 645 628 642  15  60 655  41 542 274 622 467 573 623  14 153
 484 125  18 608 209   1  19 511  40   3 692 151 646 534  66 636 413 666 190 388 676 557 663 485 620 432  22
 522 316 525 286   9 326 519 545 687  37 112 538 514 100 109   2 353 583 288 473 176 567  69 572 627 414 586
 681  30 150 106 132 570 590 699 710 284 648  86 601 696 370  38 634 614 226 685  28  11  29  21   7 502 707
 640  81 315  24 443 652 605 659 708 107 235  25  62 211   6 626  27 390  84 166 664 219 513 589 658 478 668
 580  20 177  97 102 705 624 691 689 129  82  33 711  72 673 679 104   8 135 662 152  13  83 702 709 660 563
  12  64  17 144  10 704 714 599 651 541  49  65 686 111 238 690 672 641 260 425  85 581 122 700 683   4 387

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00034e+07us (= 10003.4ms, 10.0034s)
Wall-clock time (full program): 1.00596e+07us (= 10059.6ms, 10.0596s)
Satisfaction error: 2
Number of search iterations: 1868
Number of local moves: 784 (including on plateau: 199)
Number of local minimum: 148 (including on plateau: 26)
Number of resets: 1
Number of restarts: 0

Problem in row 13: 245 214 360 348 579 430 273 223 404 577 234 389 325 328 604 225 403 188 193 296 358 394 184 384 543 661 494 => the sum is 9856 rather than 9855
Problem in row 15: 546 453 92 436 48 312 282 400 427 347 148 536 401 431 479 470 55 378 382 391 426 486 277 438 336 371 506 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 623  18 688  46 183 604 708 526 703  35 585 425 674  29 532  28  82  21 449  22 710 687  42 117 573  25 720
  76 715  16 584 711  65  39 719 677  20 706 627 136  38 418  48 196  85 199 725 113 714 639 691 726 110  62
  45  77 220 698 167  78  55 610 702 673 607  53 660 146 567 172 321 327 693  50  75 704 171 111 433 724 716
 696  84 615 156 450  90  68 690 620 518 153  96 470 163 683 249 422 133  87 718  91 527 222 713 577 424 140
 160 264  31 104 663 594 215 464 493 275 159 107 670  44 665 173 681 197 227 727  59 529 709  88 616 662 279
 207  97  19  54 143 648  71 729 638 590 686 653 580  98 576 284 134 123  70 650 722 137 106 705 541 562  32
 205 177 478 179 307 206 680 482 489 429 669 221 636 101 682 276 236 157 384 114 712 569  99  61 533 643 130
 195 184 481 194 667 127  63 630 563 593 213 174 280 151 699 297 257 247 319 599 695 515  95 121 723 587 186
 255 223 530 240 139 170 266 377 405 692 230 664 243 218 666 326 717 155 661 368 142 251 324 175 535 646 237
 381 333 246 659 226 201 325 500 451 631 340  73 427 359 355 309 414 294 232 268 346 504 176 403 509 561 332
 285 304 606 330 459 360 367 299 707 469 485 399 347 288 461 270 400 225 306 283 185 254 261 245 416 404 440
 305 281 214 162 217 421 353 337 437 303 290 456 474 200 191 274 617 375 501 322 721 728 387 349 409 338 193
 382 419 248 265 393 350 453 352 446 295 250 386 329 442 351 334 434 689 378 105 242 317 300 565 397 505 228
 417 278 316 311 438 342 234 394 341 244 298 357 310 373 457 308 286 503 331 522 432 235 385 392 483 477 391
 408 435 412 468 371 282 369 358 372 410 344 314 465 323 318 396 293 380 406 413 252 370 473 272 273 401 277
 390 479 365 524 364 388 578 166 224 129 480 496 233 301 296 154  57 486 444 269 356 498 508 531 343 336 460
 467 462 216 516 402 431 289 335 168 147 513 328 490 497 423 126 203 379 566 363 538 445 320 455 267  51 458
 361 430 366 471 376 507 540  40 131 120  34 539 362 544 537 447 348  17 463 525 407 253 345 389 315 374 614
 517 521 229 547 487 302 383 312 231 181 632 495 354 506  37 555  23 488 124  74 550 443 494 582  93 219 476
 454 595 441 426  30 600 475   2 212  14 592 548 149 625  58 428 571 398 502 520  24 239 568 534 164 122 564
 675 415 262 514 466 528  11 182 144 169  83 395 145 559  56 655 452 597 510 558 259 178 672 484 271 116 499
 448 420 602 119 545   3 536 287 192 626 238 583 138 560  60 542  72 635 546  13 511 339 556  47 241 439 557
   6 619 609 551   1 554 668 187  66 260 208   8 581 647 112 621 637 613 671 553 436  86   5 519 132  33 472
  15 694 150  12 575 552 128 263 141 570 654 158   9 622 125 656 629 611 549 588 188  36 605 313 102 292 618
 651  41 291 574 491 676 645  94 190 572 209 589 586 697 202 678 103 543   7 135 679 165 649 161  67  81  79
 640 633 603 628  92 180 684 109 108 701  49 642  43 624 210 608 658 598 204 115 152  52 100 198  27 512 685
 591 657 601 523 492 596 652 411   4 189 148  69  64 700 118 641 612 579  26 256 258  80 644 634  89 211  10

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.54755e+06us (= 7547.55ms, 7.54755s)
Wall-clock time (full program): 7.60467e+06us (= 7604.67ms, 7.60467s)
Satisfaction error: 0
Number of search iterations: 1649
Number of local moves: 763 (including on plateau: 338)
Number of local minimum: 99 (including on plateau: 39)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 703 560 487  49 625 461 168 573 223  65 721  85 712  37 700 116  33 565 599 538 125  57 665 121  53  90 724
  62 716 609  39 719 195 445 685 106  14 230  32 673  84 540 132 109 653 647  43  68 695 635 164 252 715 593
  83 342 393  42 714  78 690 619  48 404 614  91 718  28 539 118 162 670 627  34 144 667 648  63 727  41 551
  75 588 689 159 453 142 584 582 210 177 613  44 129  52 167 711 682 263 296 324 485 265 688 728  55 633  61
 117 642 708 112 371 138 701 720 156 145 683  69 397  47 677  74 303 623 729 158 199 645 723 334 115 143 126
 150 597 587 483 639 722 674 180 127 170 621  66 713 102 622  54 270 508 520 137 108 710 602  67  93 181 153
 617 399 561 228 463 241 632 249 221 110 414 152 382 676 694  95 185 224 686 236 717 255 329  94 165 173 657
 140 669 474 504 543 176 680 576 192 198 709  76 278 183 698 274  46 208 658 496 578 231 410 386 209 203  59
 726 519 571 288 644 191 331 212 725 247 261 396 316 169 273 643  26 220 610 240 552 222 545 114 286 260 268
 304 489 549 395 490 298 428 149 403 611 272 294 290 279 637 216 113 417 292 319 408 353 521 123 662 200 343
 245 494 528 427 493 429 175 668 297 234 366 407 310 527 174 193 444 257 482 441 456 171 547 264 202 187 437
 388 476 544 308 438 430 704 104 300 452 155 346 421 141 412 311 447 276 258 188 405 379 424 349 213 401 585
 207 368 262 374 381 339 251 416 218 335 226 376 387 436 634 467 338 344 248 322 320 581 526 435 479 301 284
 357 398 462 359 243 385 373 355 418 291 384 277 347 530 321 330 315 350 498 361 372 327 179 480 356 332 455
 253 271 440 326 215 420 409 402 345 389 457 325 227 464 484 522 439 380 239 182 400 383 217 378 454 317 517
 285 475 238 595 434 354 406 394 363 472 473 477 281 299  21 370 470 568 449 391 323   5 512 481  12 275 432
 446 375 178 362 242 411 337 556 513 557 111 431 360 367 305 283 107 280 197 448 478 492 219 509 532 505 254
 289 269 312 295 235 503 451 537 415  80 422 348 365 369 555 459 390 287 336 511 340 499 147 244 433 471 293
 518 466  70 575 246 502 351 122  50 341 120 620 250 488  29 497 469 486 133 443 675 541 184 598 525 534  22
 458 154 309 189 211 574 101 130 377 605  30 535 554 501 136 392 500 656 148 128 558 606  71 318 589 515 510
 590 124 358 507 204 423   3  27 419 529 542 559 629 569 190 616 603  92 139 604  31  58 229 594 660 460  96
 592 172  38 652 205  40  88 580 586 328 533 664  10 651  73 572 495  87  82 570 232 256   4 615 491 608 631
 630 105 201 601   8 687 134  89 523 583  72 546 607 237 163 514 564 641  35 567 259  18 314 506 650 516  86
 702  99 103   2 364 426 313  15 659 577 151 562  19 696 302 663 618 531 282 579 352 119  79  97 566 646 333
 536  23   7 679  24 640 266 196 655 707 425 706  13 624 267  11 465  20 146 684 553 135  77 548 307 450 691
 157   9 160 693 206   1  60 413 678 563  64 705 442 699  81 550 636  16 468 697  36 524 166 591 638   6 596
 225  56  17 612  45 649 100 306 628 671 186 666  25 600 161 672 626 233  51 214 681 661 194 654 131 692  98

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00016e+07us (= 10001.6ms, 10.0016s)
Wall-clock time (full program): 1.00572e+07us (= 10057.2ms, 10.0572s)
Satisfaction error: 4
Number of search iterations: 1953
Number of local moves: 828 (including on plateau: 376)
Number of local minimum: 151 (including on plateau: 57)
Number of resets: 0
Number of restarts: 0

Problem in row 6: 150 597 587 483 639 722 674 180 127 170 621 66 713 102 622 54 270 508 520 137 108 710 602 67 93 181 153 => the sum is 9856 rather than 9855
Problem in row 8: 140 669 474 504 543 176 680 576 192 198 709 76 278 183 698 274 46 208 658 496 578 231 410 386 209 203 59 => the sum is 9854 rather than 9855
Problem in row 23: 630 105 201 601 8 687 134 89 523 583 72 546 607 237 163 514 564 641 35 567 259 18 314 506 650 516 86 => the sum is 9856 rather than 9855
Problem in row 27: 225 56 17 612 45 649 100 306 628 671 186 666 25 600 161 672 626 233 51 214 681 661 194 654 131 692 98 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 263  10 321  58 641  37  28 613 694 660 683 669   4  12   6  61 695 639 608 701  23  33 344 654 661  56 681
 634 527 664 113 135 114  29 699 659 553 192 614 475 190 112   3  64 672 688 679 166 551  22 154 247 368 531
 566 678   5 133  53  14  24 698 316 205 200 598 680 157 671 627 633 682 693 325  11 538 243 106  32 670 297
 702  66  30 234  85   9  73 690  94 139  69 181 541 593 655 588 500 583 685 646 173 625   8  47 674 617 548
 454 622  19 224  38 638  25 657 565 183 306   1 610 619 560   2 689 533 589 656  46 150 153 558 666 210  82
 604 119 540 188  68  67 230 600 592  84 158 568 400 520 658 484 626 513 590 346  34 486  13 607 545 170  45
 507 640 564  83 177 489 167 498 216  65 143  57 238 452 514 365 464 522 418 555   7 662 427 517 382 571 155
 603 542 523 248 149 420 223  31 597 341 261 505 352 159 602 567 575 579 609  27  78 483  17  35 471 423 435
 310 493 562 203 246 416 232 554 440 142 110 510 404 620 491 612 286 529  44 543  16 490  15 605 383 228 371
  52 496 524  72 134 470 236 460 456 469 304 431 331 594 397 370 380 569 340  18 327 547 235 518 359 466 300
 474 357 437 285 237 494 281 535 481 123 367 479 272 596 384 457  90 356 468 443 459  51  20 415 552 477 265
 485 406 354 451 178 446 409 227 438 414 417 288 388 534 398 249 502 221 201 348 239 270 207 376 482 501 426
 516 519 377 339 317 390 363 298 375 434 473  49 360 318 433 369 351 372 330 497 303 324 302 429 407 277 333
 428 421 422 366 320 305 329 273 374 337 441 391 260 396 386 412 313 256 461 450 358 361 445 219 392 314 425
 334 364 287 326 703 307 467 512 332 250 595 253 335 122 259 309 315 394 399 362 611 345 465 301 311 244 353
 218 424 439 402 449 343 453 319 199 283 294 393 405 447 180 255 347 710 182 296 530 189 526 252 419 528 373
 697 220 378 511 349 231 506 401 161 275 581 271 131 204 215 342 561 266 280 389 488 642 492 290 193 587 194
 152  92 240 487 448 442 577 163 323 643 637 312 537 209 251 111 299 165 293 729 578 411 544 208 274 268 462
 144 295 336 644 476 137 629 350 282 408 692 140 211 126 258 413 707 292 480 174 539 262 549 264 328 574 145
 687 686 267 504 563 127 648 146  77 478 242 226 269 222 705 233 284 291 381 432 559 455 665 100 107 289 212
 184 630 147 509 684 503 436 129 245 725 601 175 709 197 117 675 308  40 196  88 385 213 704 254 169 241 591
  80 499 618 584 582 616 556  99 217 624 508 395  21 187 706 202 403 156 198 118 570 355 472  96 151 257 585
  95 128 276 387 711 647 463  86 712 673 278 700 279 195 229 214  60 101 179 225 649 124 430 721 206 572 515
 172 103 628 715 696 676 727  93 138 650 136 663 185 724  75 521 191 168 141  62 635 108 652 726 120  59  91
  76  48 714 636 546 130 606  42 125  89 576 162 186 713  81 667  43 102 105 623 645 160 586 691 717 109 677
  39 322  79 580 338 668 410 550 632 164  55 171 621  26 458 631  98  70 176  36 708 495 599 615 557 716  41
 379 148 104 573 532 719 728 132 115 444 536 653 651 723  54 116  71  74 121  87 718 525 720  97  50  63 722

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.4087e+06us (= 7408.7ms, 7.4087s)
Wall-clock time (full program): 7.46534e+06us (= 7465.34ms, 7.46534s)
Satisfaction error: 0
Number of search iterations: 1444
Number of local moves: 826 (including on plateau: 385)
Number of local minimum: 93 (including on plateau: 46)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 645 181  72 542 721 260 267  59  71 702 532 720 609  33 477 438 363  90 537  32 696 116 724  93 119 711  45
 390  44  14 593 146  99 705 135 723 175 650  83 545  29 115 671 727 522 493 707 726  22 373 329  88 689  62
  57 145 649 626 121  95 713 153  70 151 557  68 639  39 670 664 501  84 330 106 719  61 666 544 644 697  86
  52 171 150 665 656 199 565  56  37 198 551 686 675 122 578 494 690  47 144 489 718 174 716 397  80 142 403
 204 128  87 558 646 107 434 436  89 411 651 652 528 109 715 600 699 249 177 113 728 120 357 101 134 693 129
 185 102 190 603 426 729 555 224 212 533 468 137 657 111 511 182 709 131 507 275 505 154 583  73 209 725 159
 176 215  76 694 282  49 228 229 139 717 269 105 672 188 596 456 608  94 586 700 708 179 549 648 315 250 127
 226 263 706 604 514 256 431 663 200 167 655 365 612 245 143 677 296 237 602 166 163 248 265 473 304 241 133
 205 638 147 634 450 183 633 279 210 681 660 255 642 307 156 206 550 202 299 187 195 194 585 637 161 208 351
 311 314 230 252 312 295 678 291 385 688 540 207 178 278 266 184 538 579 588 261 192 423 239 581 382 243 420
 227 238 218 552 326 321 470 211 216 298 518 352 232 337 336 301 335 328 692 714 685 158 254 640 319 318 259
 342 624 305 253 345 332 506 257 292 300 372 338 441 320 288 405 414 379 333 492 389 348 442 513 280 251 294
 388 221 404 302 297 383 223 331 203 157 341 374 703 347 349 457 455 480 186 643 622 293 369 618 308  98 303
 313 284 580 432 189 350 471 376 488 428 324 322 222 343 569 469 425 247 160 325 287 366 402 240 316 515 412
 339 508 483 367 290 415 439 197 375 458 281 433 437 344  24   6 353 409 361 427 617 465 466 396 410 309 246
 424 356 140 401 487 449 362 277 559 340 236 520 377 560 413 126 358 370 391 360 273 359   4  96 615 408 594
 378 524 451 364 346 398 354 490 448  43 271 371 123 453 447  55 417 276 264 496 446 463 535 180 355 422 485
 625 393 421 225 169 523 130 475 562 440 394 443  91 486 495 530 384  25 481  10  63 462 219 368 590 406 445
 306 623 399 482 564   3  26 395 500  46  48 516 262 435 561 539 220 460 149 566 430 510 429   1 452 547 386
 601  23 444  66 474 611 168 499 132 283 416 472 310 519 616  97  60 502 162 461 234 380 104 606 571 476 568
 419 498 531 114 201 454 503 286 509 541 125 407 478 484  75 418 289 563 231  38   9 597 103 233 668 504 577
 543 521 570 124 619 400  79 526 464  34  16 491  81 589  92 517  65 459 170 591 100 598  67 268 682 467 722
 512 680 576  11  12 479 323 628 630  35 213 574 117 599  15 110  85 527 193 242  77 621 575 553 654 152 662
 592 684 497  53 529 667 118 658 605 567 173  40  31 683  17 525  20 607 112 334  42 546 272 244 534  64 641
 704 620 536 108  30 556 191 387 554 548  50 584  36 636 614   5  51 613 381 631  54 653 274 392   8   7 632
 673 196 285  74  27 669  69 710 595 679 217  82 138 572 659 582  78 674 691 172 136 698 270  21  28 148 712
  18 661 695 155 676 573 214 627 587 235 327 258  19 687  58 141 165 701 635 317  41 647  13 610 629 164   2

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00039e+07us (= 10003.9ms, 10.0039s)
Wall-clock time (full program): 1.00529e+07us (= 10052.9ms, 10.0529s)
Satisfaction error: 2
Number of search iterations: 2072
Number of local moves: 682 (including on plateau: 250)
Number of local minimum: 174 (including on plateau: 32)
Number of resets: 1
Number of restarts: 0

Problem in column 3: 72 14 649 150 87 190 76 706 147 230 218 305 404 580 483 140 451 421 399 444 531 570 576 497 536 285 695 => the sum is 9856 rather than 9855
Problem in column 4: 542 593 626 665 558 603 694 604 634 252 552 253 302 432 367 401 364 225 482 66 114 124 11 53 108 74 155 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 725  51 711 546  47 595 678 696 129 623 545 145 644  40 670  31  97 147 702  30  49  55 672 427  76 465 259
 560 668 459 399 136 594 124 397  99 708 510  21 695  71 537 701  78  73 149  33  44  98 486 713 155 715 632
 574 162 721  72 270  92 123 687  70 499 513 114 592  13 666  26  16 113 660  86 470 244 717 400 699 683 573
 616 174 455 265  89 165 324 615 192 690 476 108 551 139 528 641 408 520 593  34 213 177 634 404  81 133 630
 636 185 527 700 312 724 253 475 134 204 561 111 604  67 729 676 117 190 548  38 106 138 497 370  63 172 718
 166 109 227  87 707 620 176 693 517 697 539 292 271  82 612 218  80 183 280 160  69 706 684 716 276 150 538
 446 152 614 586 230 426 128 151 203 590 566 200 167 157 299 516 295 164 667 195 669 112 625 638 277 256 526
 232 273 691 723 140 646 158 685 536 505 712 142 148 156 266 656 243 303 144 720 219 120 542 181 175 275 264
 611 215 654 643 567 305 173 168 588 664 674 212 262 189 209 260 258 191 597 377 241 198 494 341 210 291 263
 380 637 633 619 201 326 351 153 487 581 569 159 368 281 237 301 245 681 211 240 169 250 357 309 337 202 571
 306 317 205 386 714 304 412 285 563 197 491 323 247 726 267 286 344 269 663 290 238 591 493 234 161 233 310
 249 272 376 508 372 356 307 355 432 450 188 722 727 178 321 199 246 254 216 361 346 282 728 354 214 362 480
 381 385 410 449 458 375 461 327 366 296 320 279 298 278 394 350 308 378 392 367 440 274 316 359 252 223 719
 431 429 462 325 300 433 284 342 393 289 421 343 255 226 318 371 339 452 137 353 444 456 231 423 535 479 384
 395 424 416 334 443 110 302 464 220 315 383 390 261 436 422 332 345 387 319 396 478 398 257 518 294 374 442
 502 365 414 439 352 389 311 293 448 336 333  35 349 430 401 441 419 454 329 358 391 208 373 116 524 457 388
 364 297 314  15 180 382 572 504 420 434 347 557 543 451 340  94  39 437 363 418 500 407 222 468 485 463 239
  83 532  56   3 507 403 415 492 206   5  28 453 460 495 503 402 540  61 529 587 411 501 235 509 482 519 438
 405 435 466 221  45  58 335 483  11 506 115 477 523 328 163 467 484 490 511 559 534 631 184  37 589 605 193
  24 122  20 554 481 207 639   4 471 447  53 512 525 608 102  29 489 583 582 228 425 570 194 555 680 515 236
 154 530  74  62 369 531   6 496 127 251  50 428 472 679 131 522 658 474 225 662   9 552 186 607 617 514 469
  91 564 313 196 498   7 649 584 105 171 288 578  25 533  23  48 704 598 406 624 568 348  93 550 473 576 242
   8 549 179 413 626  54 130 121 565 170 268 661  64 647 338 544 613 609 135 709 686 610  10  79 562 488  17
  75 556 182 248 621  84 585 125 675  88  36 579   2 628 627 287 558 602 146 577 553  14 445 283 659 601  19
 547 521 187  52 379 618 635  96 655  41 126 703  90 694  22 657 629 596  68 645 682 575  95 104 330   1 107
 217 331  77 322 710 642 671 118 640  66 600 606 580 673 665 103 651 417  59 119 541 692  42  60  27  85 141
 677 599  12 688 101 409 653  46 603  32 143 705 132 650  65 698 652 229 224 689 360 648  43 100 622  18  57

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.00583e+07us (= 10058.3ms, 10.0583s)
Satisfaction error: 3
Number of search iterations: 2100
Number of local moves: 864 (including on plateau: 319)
Number of local minimum: 155 (including on plateau: 30)
Number of resets: 1
Number of restarts: 0

Problem in column 2: 51 668 162 174 185 109 152 273 215 637 317 272 385 429 424 365 297 532 435 122 530 564 549 556 521 331 599 => the sum is 9854 rather than 9855
Problem in column 16: 31 701 26 641 676 218 516 656 260 301 286 199 350 371 332 441 94 402 467 29 522 48 544 287 657 103 698 => the sum is 9856 rather than 9855
Problem in diagonal 0: 725 668 721 265 312 620 128 685 588 581 491 722 298 226 422 441 39 61 511 228 9 348 10 283 330 85 57 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 408 116 710 640 359 160 326 386 369 589 301 252 622 137 572 471 591 728 683  79  26  18 148  87 602  56 419
  80 316 207 633  65 103  39 405 485 616 518 383 679 284 521 108 241 313 639 113  27 601 122 650 703 342 662
 582  93 278 623 168 678 324 713 649 592  64  12 625 290 238 603 656 578 659 208  33 135 152 117 604  51 130
 598  35 692  22  67 632 138 176 661 663 681 466 642 563  63 102 319 599 531 263 143 612 213 440  23   8 503
 430 315 251 686  21 560  47 673 645  11 721 228 169 297 331 554 688 232 648  40  16 198 583 570 568 186 187
 567 249 544 711 127  44 178 712  54 641 540 610 677 112 577  53 147 671 596 165  57 310  70 269 558 493 123
 457 438  69 259  45 723  20 462 384 532 618  61 643 489  46 522 605 477 184 287 355 481 393  10 562  86 647
 530 220 472  73 192 498 517 654 180 260 523 157 552 579 270 442 444 546 510 189  83 205 538 188 483  25 526
 464  72 423 606 429 129 607 341  37 409 460 125 506 495 499 437 449 317 513 505 234 276 131 515 636  91 149
  82  85  15 422 292 415 482 345 621 368 501 463 652  31 545 445 550   9 390 486 223  81 289 637 478 500 448
 173 171 492 561 288 392 454 347 537 357 416 520 488 553 107 417  62  34 272 194 528 574 343 566 474 124 411
 496 425 300 446 395 507 590 458 236 406 451 676 120 512 455 330 674 527 110 476   5   1 365 121 114 279 380
 344 396 372 426 167 675 467 687 286 327 397  74 475 680 387 356 172 296  29 373 318 439 497 144 412 311 348
 580 303 247 334 367 371 434  38 428 328 484  48 361 306 402 719 322   6 398 385 350 491 217 388 427 701 420
 391 325 154 353 403 349 407 346 374 410 375  96 381 627 404 432 443 378  95 394 354 366 588 465 470 293 182
 382 435 253 509 401 502 338 190 473 399 277 224 291  92 266 281 323 569 669 333 666 235 320 218 332 233 644
 203 542 630 206 543 255 196 717 608 271 273 360 302  89 267 212 684 202 214 336 539 453 620 487 106 309 231
  58 595 362 611 312 613 285 265 657 695 274 222 400 283 246 358 379  77 133 199 533 629 242 702 155 262 308
   7 524 708 452 668 667 490 141 151  13 200 508 226 304 321 211 119 696 519 413 525 480 183 239 170 725 195
 229 693 549 248 651 294 244 376 230 329 221 551 237 159  97 118 339  49 689 600 468 363 494 573 163 664 227
 166 715 722 280 556 134 626 634 215  76  84 587 204 594 364 150 421 670 209 541 337  90 389 197 145 593 156
 179 516 275   4 581 727 261 139 264 441 216 529 250   2 615 243 514 105 191 698 697 305 685 225 414 646 132
 557 576 153  99 377 164 307 181 690 146 109 672  68 140 614 240 282 142 128 704 619 314 461 724  42 718 628
 726 351 104 111 665  50 256  66 258 177 456 571 100 436 175 694 340 469  78 162 655 548 126 682 586 534 479
 201 699 299 185 555  14 729  32 268 716 101 193 136 700 450  75   3 352  94 705 720 624 597 564 245 424 174
 418 219 459  98 714 158 660 210  24  55  59 658  30 565 370 707  36 559 631 298 638 335 504  60 295 584 511
 547 431 115 257 447  41 433 161  71  28 535 609  19 536 653 575  52 254  43 709 706 691 585  17  88 617 635

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00028e+07us (= 10002.8ms, 10.0028s)
Wall-clock time (full program): 1.0061e+07us (= 10061ms, 10.061s)
Satisfaction error: 2
Number of search iterations: 2107
Number of local moves: 862 (including on plateau: 386)
Number of local minimum: 170 (including on plateau: 56)
Number of resets: 1
Number of restarts: 0

Problem in row 8: 530 220 472 73 192 498 517 654 180 260 523 157 552 579 270 442 444 546 510 189 83 205 538 188 483 25 526 => the sum is 9856 rather than 9855
Problem in row 22: 179 516 275 4 581 727 261 139 264 441 216 529 250 2 615 243 514 105 191 698 697 305 685 225 414 646 132 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 148   2 635  74 134 655  30 679 549 701 210  20 389 540  89 162  66 671  44 643 259 651 677 367 647 705 108
 619 165 579 248 691 244 592 669 681 205 470 599  67 715  77  85 163 707 405  69  57 218 596 290 590  29  25
 666 104 522  83   5 468 156 656   8 189 107 449 610 695 595 603  68 490 109 620 105 520 692  14   1 645 675
 329 577 541 237 637 604 141 608 304 591  22 203 665 652 611  95 127 169  51  55 233 492 471 124 112 685 519
 350 176 634 106  61 570 664  12 247 524 609 582 572 565 593 265  72  93 173  52 114 485 628 321 423 431 533
 674 135 238 445 243   4 280 689  59 650 255  97 297 281 573  24  73 632 313 633 474 712 568  26 337 696 447
  10 214 100 486 646 338 356 616 101 425  11 508 586  50 404 516  92 497 322 622 204 545 653 493 161 535 364
 494  46 436 286 511 567 564 117 192 702 158  37 554 437 155 417 164 271 460 560 278 358  18 339 500 536 698
 385 293 661 662 523 154 206 547 209 484 458 295 539  16 482  13 551 373  84 585 249 451 422 414 561  17 221
 507 334 316  27 562 538 466 452 262  21 128 153 453 399 548 354 597 710 139 513 207 253 432 502 435 113 434
 532 122 352 426 455 429 454 465 216 421  54 325 440 528 375 231 487 526 137 402 348 379 142 386 598 476 149
 571 558 344 276 285 351 377 315 232 457 250 515 170 479 461  49 151 198 623 581 103 424 409 584 427 398 267
 498  47 147 384 563 217 428  80 242 614 374 553 456 415 279 576 320 412 349 530 312 473  63 223 607 230 463
 319 365 580 410 303 208 462 501 392 343  71 450 309 459 266 641 302 260 416 413 390 200 408 272 527 314 274
 388 430 690 376 264 318 397 270   7 407 574 256 566 525 362 323 369 387 433 240 282 196 307 327 663 118 380
 368 506 406 345 472 420 306 340 478 269 288 186 254 292 419 589 371 503 178 300 638 298 287 245 241 627 229
 464 713  19 383 381 326 629  32 355 160 372 529 438 144 709 403 687 150 228 257 546 225 308 602 333 131 331
 145 396 483 411 273 299 332 400 543 441 639 258 324 252 353 341 401 649 443 220 658 370 359 168 330 184 183
 727 283 481 555 227 446 234 621 544 136 699  96 222 475 180 120 504 146 366 301 395 310 181 328  62 659 557
 174 612 363 291 676 605 193  88 575 116 534 277 157 212   6 631 496 311 518 284 657  81 224 648 268 378 480
 236 550   3 559 179 195 172 194 708 187 682 275 542 152 686 182 509 697 642 191 569 261 716  79 199 133 357
  34 246 335 683 197 725 143 121 514 556 510 171 185 505  56 444 583 111 693 119  45 706  58 704 175 606 630
  87 723 439 711 673 618   9 201 625 129 488 636 110  48 125 601 714  28 347 382 654 294 360 624  91  36 102
  60 678 296 729  78 188 721 489 688 166 442 226  70 167 215 703 720 672 700 213 670  15  43 251 219  90 346
 140 644 190 491 235 177 640 115 531 202 211 719  33  76  41 552  75  53 694 289 668 394 660 588 667 684  86
 537 342  23 132  82 126 512 130 495  31 613 718 724 159 726 517 578  40 521  64 477 305 138 600 587 361 317
 393 594  42  39 499  65 391 448  98 728 626 722 123 617 469 418 615  99 467 717 263 239  35 336  94  38 680

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.15657e+06us (= 9156.57ms, 9.15657s)
Wall-clock time (full program): 9.21247e+06us (= 9212.47ms, 9.21247s)
Satisfaction error: 0
Number of search iterations: 2185
Number of local moves: 954 (including on plateau: 392)
Number of local minimum: 189 (including on plateau: 56)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 716  55 663 423  89  78 576 557  34  43  32 708 614 627 113 173 570 715 652  60  90  76 148 609 646  69 719
  62 107 612 573 437 104 420  44  50 721  64 111 416 582 376  86 535 141 653 499 100 528 579 162 458 706 729
  82 200 718  65 698 115  67 139  38 168  58 723 472 687 212 655 595 498 707  85  63 684  42 681 668  79 656
  37  72  75 726 637 205 390 151 289 697 688 117 244 517 236 530 538 131 622 126 658  57 119 636 572 146 639
 714 711 218 142 370  87 229  73 129 725  31 188 546 346 446 180 682 713 630 561 103 144 710  93 279 155 650
  45 165 178 213 234 727 439 109 175 149 202 260 623 657 476 317 693 215 586 699 348 722 127 177 673  56 590
 105 242 211 527 114 207 724 267 110 704 176 280 592 442 453 252 580 543 511 695 689 245 182 194 263 254 293
 225 335 677 157 610 270 318 709 256 197 210 238 679 467 608 240 324 278 469 696 239 159 203 224 359  80 628
 246 233 399 717 678 294 214 206 705 174 296 686 680 676 566 209 208 199 386 118 603 227 201 191 231 292 220
 281 424 166 593 108 537 283 295 298 291 161 138 632 551 526 268 272 645 464 248 169 712 357 323 183 290 640
 352 204 125 667 328 276 388 187 373 385 720 520 342 369 235 351 315 195 544 400 282 366 429 226 613 353 310
 196 531 339 305 273 340 426 393 421 193 412 217 365 415 634 691 274 269 607 275 341 223 473 153 389 403 297
 379 337 320 391 478 257 664 284 404 406 232 375 251 402 304 362 372 432 418 387 258 332 354 358 326 355 417
 434 503 241 299 433 136 319 377 350 255 277 449 302 395 253 330 378 325 462 541 474 475 264 410 493 306 374
 312 303 411 329 427 452 360 344 398 500 460 536 266 124 152 313 371 441 331 396 454 367 345 408 343 311 401
 333 181 380 487 384 438   6 316 414 436 381  53 529 135  48 599 490 347 338 481 488 504 300 512 519 349 407
 392 445 422  51 321 525 140 482 456 448 228 547 237 184 198 288 440 397 216 361 457 430 443 540 435 485 287
 314 425 444 554 363 455  25 450 364   5 555 479 160 249 172 383 394 507 308  52 470 532 451 509 497 477 261
 409 259 471 550  11 589  23 533  61 468 461 463  91 189  20 545 465 483  81 523 524 307 496 510 521 501 301
 585 565 492  94 428 508 431  26 647 405 621 413  39 285 466  17  30 625 132  10 334 549 419 505 514 581 134
 515 447 596  83 516 513 271 649 556 641 506 574 121 539 123  47 163 250 147  28  19 584 548  88 486 660 185
 631 665 617  41 562 265 568 247 669 597 502 495 154  36 221 611 171  15 112 624 106  13 604 577  27 558 167
 601 382 563 222   2 484  33 567 587 368 616 598 190 122 602 629 186  66  77 518 459 648   9 552  21 583 170
 588 675 491 356 336 600 569 480 560  95 654  84 158  92 327 534  24 101 179 230 700 643 571   3  49 619 137
 626 651   4  68 559 116 638 685 661 133 672 243 322  16 701 618 143 564  97 591 662 102 164 575  12  40 192
 674  35   8 578 150 606 642 615 156 633 594 286 702 262 659 620 120  70  71 553  99  96 635 145 219 605  22
   1 703  14 644 309 671 692 670 694  18  46  74 128 489 728   7 522 690  54  98 666 130 683 494  59 542  29

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00014e+07us (= 10001.4ms, 10.0014s)
Wall-clock time (full program): 1.00581e+07us (= 10058.1ms, 10.0581s)
Satisfaction error: 2
Number of search iterations: 2427
Number of local moves: 857 (including on plateau: 449)
Number of local minimum: 196 (including on plateau: 50)
Number of resets: 0
Number of restarts: 0

Problem in column 19: 652 653 707 622 630 586 511 469 386 464 544 607 418 462 331 338 216 308 81 132 147 112 77 179 97 71 54 => the sum is 9854 rather than 9855
Problem in column 23: 148 579 42 119 710 127 182 203 201 357 429 473 354 264 345 300 443 451 496 419 548 604 9 571 164 635 683 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 716  39 664  51 717 293 709  42  56  30  27 577 636 527  69  52  75 135 700 721 685 618  74 654 153 651 184
 626 306 574 115  41 141 469 131  37 708 553 588 652 625  33  53 121 580 113 684 645 563 591  83  88 314 421
 647  82 350 559  67 111 662 205  55  93 107 551 608 187  64  65 236 128  87 582 655 546 602 682 714 536 674
 592 680 585 524 126  58 542 123  97  96  24 493 725 567 124  70  63 140 556 673 435 474 607 540 138 102 701
 528 378 640 284 726  61 283 133 164 291 114 678 657 364  45  15  80 453 227 525 711 568 715 158 193 142 722
 554 144 155 181 169 728 681 195 217 266 207 486 713 476 127 311 425 667 220 629 327 718  92 119  78 277 693
 178 233 161 190 103 145 719  95 134 175 203 616 538 656 198 279 557 710 122 605 720 663 160 179 549 707 260
 621 132 679 177 130 229 635 390 174  59 212 643 248 675  11  90 448 723  89 485 218 694 209 691 234 230 729
 249 247 189 322 110 252 518 558 727 604 192 308 432 226 210 272 312 237 282 479 494 630 688 380 355 301 281
 400 363 239 677 280 705 467 316 200 307 344 224 168 692 358 257 232 259 211 513 245 584 206 401 256 689 262
 699 330 191 570 129 389 269 309 273 440 490 426 288 215 185 377 622 613 422 548 297 341 222 437 186 319 268
 292 173 263 614 545 231 313 348 416 502 243 382 289 531 445 315 492 336 446 430 286 611 157 221 167 376 431
 392 246 361 254 398 235 408 405 491 339 393 285 326 333 712 298 399 337 345 482 303 465 427 304 349 290 278
 387 442 471 354 383 496 264 352 318 412 360 356 332 351 391 455 225 373 375 241 403 310 238 489 441 267 369
 299 359 415 396 305 276 411 436 395 497 484 335 379 287 334 454 362 463 265 328 404  18 462 180 423 385 503
 366   1 468 532 428 413 449 296 381 529 199 343 477 544 439  10 409 507 370 271 464 208 420 213 365 433 320
 137 456 204 419 451 418 338 459 434 498 346 447 223 101 533 520  40 500  91 324 571 120 473 526 414 410 402
 460 388 475 295 329 386 566 274 317 242 522 300  12 444 505 478 510 125 407 196 371 406 596  54 458 342 397
 116 466 514 321 472 550  23 560 302 601 374   2 483  34 417 424 509 512  57 353 530  71 501 620 394 499 150
  76 600 534 470 384 511 255   9 543 270 368 165 147 106 372 623 148 547 579 367   8 240  62 642 578 617 634
 100 519 555 481 450 438  20 461 569 603 696 188 506 166 535 487 152  84 590  77 172 139 598 541 586  98  44
  49 669 443 521 624  43  46 615 357 452 597 146 495  99 609 670 523  94 606 136  48 258 516 628 429  31 151
  32 517 183 156 325 706 552 659 575 583 515 163  25 197 646 644 610 251 695  86 171 149  66 589 641  47  72
  73 633  26  50 648 599 118 671 658 539 572 457 109 562 639 672 294 504 619   3  38 104   4 331 561 253 117
 261 565 275 653 182 581  21 627 593  16 508 219  68 537 612 564 724 347  35  81  60 244 480 143 216 650 594
 665 250  79 676 631 170   5 488 704 595 632 154 214 159 576 703 649 201 686  19 587  85   6  36 202 661  22
 340 637 162  13 702 690 112 698 668 108 573 323 105 194 666 697 638  29 660  17   7  28 683  14 687 228 176

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00012e+07us (= 10001.2ms, 10.0012s)
Wall-clock time (full program): 1.00576e+07us (= 10057.6ms, 10.0576s)
Satisfaction error: 2
Number of search iterations: 1949
Number of local moves: 831 (including on plateau: 276)
Number of local minimum: 131 (including on plateau: 43)
Number of resets: 1
Number of restarts: 0

Problem in row 24: 73 633 26 50 648 599 118 671 658 539 572 457 109 562 639 672 294 504 619 3 38 104 4 331 561 253 117 => the sum is 9854 rather than 9855
Problem in row 25: 261 565 275 653 182 581 21 627 593 16 508 219 68 537 612 564 724 347 35 81 60 244 480 143 216 650 594 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 106 356 629  72  76  20 241  10 696 691 672 659 183 654  78  55 645 707 365 299 634   8 112 709 322 464 392
  14 111 700  40  77  24 139 209 533 595 536 194 620 649 601 675 487 670 632  27  23  41 639 688 704  25 202
 664 136 287 637 693 162 128 642 610 626 689 646 195 206 256  94  47 544 584  49 385 135 663 678  22  33  44
 613 164 662  11 580  95 603 640 336 701 216 298   4 641 117  18 650 303 614  46 607   2 657  12 573 608  84
 586 495 609 624  35  29 105 491 616 518 554 314   5   9 189 605 638 612 272 149 576   1  13 590 593 466 161
 611 151 680 630 558  50 557  28  57 516 173 109   6   7 587 713  58 479 481 165 489 450 643 526 500 549  83
 513 148 472 619 581  59  17 541 578 494  97  19  31 570 517 426 521 560 551 121  15 542 512 107 582 588  74
 589 184 420  51 456 263 507  81  60 474 565  52 562 478  16 519  61 545 579 130 497 503 535 528 567 553  80
   3  30 440 527 594 123 583 441 124 635 467 205 572 548  32 412 514 538 147 251 480 490 449 119 484 459 188
  34 244 406 442 445 271 537 454  42 260 486 290 425 530 473 496 524 505 167 324 577 382 295 120 501 475 150
 534 186 416 455 458 247 413 428 102 482  89 434 380 397 408 360 511 453 302 235  63 352 525 515 421 485 204
 125 529 347 431  39 429 396 417 284 333 254 311 423 510 332 307 267 476 405 387 435 432 436 547 483 361 159
 427 317 422 330 415  48 457 274 493 477 377 323 394 381 400 318 407 439 338 433 357 418 296 321 395 228 370
 376 367 372 465 461 402 345 326 378 225 419 388 444 403 276 452 383 358 289 353 384 399 291 191 391 348 369
 555 320 262 316 410 355 373 411 354 462 362 312 414 366 714 335 319 279 269 331 350 308 349 325 255 363 386
 285 393 339 292 437 470 379 310 243 315 253 398 160 286 390 328 364 297 681 463 651 371 334 268 273 343 532
 257 374 717 265 404 602 492 180 447 171 690 199 342  56 344 293 648 249 539 471 278 280 232 239 252 234 600
 340 667 401 337 193 596 222 217 282 230 599 520 313 281 652 245 710 561 211 460 242 304 219 240 198 226 389
 259 591 246 133 231 676 187 628 636 506 540 687 237 208 215 166 301 126 633 563 221 346 288 277 294  96 564
 227 606 207 200 224 679 671 556 705 223 448 694 711 250 571 182 172 275 170 327 152  85 181 214 261 196 668
 248 574 108 118 283 598 615  90 201 238 168 618 644 174 623 258 141 179 306 523 647 728 300 504 163 132 674
 157 509 203 137 229 329 655 673 438 176  70 627 708 692 143 218 351  82 210 597 169 729 270 543 115 233 592
 468 522  88 127 375 666 660 175 220  64 197 568 146 145 721 720 156  91 669 569 129 110 727 192 677  98 575
 508 443 116 699 185 621 142 661 469  66 100  87 266  79 559 368 631 190  86 531 703 409  69 430  53 719 665
 341 585 153 656 138 658 113 101 264 212 724 359 550 114 155 502 144 103 122 715 697 723  37  93 702 177 716
 309 722  99 695 552 685 140 566 451  92  67 499 498 617 424 104 134 213 158 653  68 682  65 154  36 684 488
 706 131  54 546 726 698 178 305 236  73  43  45 622 604  62 686  71  21  75 683  26 625 718 725  38 712 446

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00016e+07us (= 10001.6ms, 10.0016s)
Wall-clock time (full program): 1.0058e+07us (= 10058ms, 10.058s)
Satisfaction error: 2
Number of search iterations: 2238
Number of local moves: 1021 (including on plateau: 325)
Number of local minimum: 160 (including on plateau: 46)
Number of resets: 1
Number of restarts: 0

Problem in row 6: 611 151 680 630 558 50 557 28 57 516 173 109 6 7 587 713 58 479 481 165 489 450 643 526 500 549 83 => the sum is 9856 rather than 9855
Problem in row 25: 341 585 153 656 138 658 113 101 264 212 724 359 550 114 155 502 144 103 122 715 697 723 37 93 702 177 716 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 434 729 146 601 122 721 715 624 496  91  92  90 527  55  93 149 264  99  56 686  89 682 486 618 112 638 440
  66 676 549 361  76 475 423 123 186 287 217  44 664 713  74 554  65  80  73 626  77 673 652 649 116 630 726
 727 156 346 629 109 104 628  59 168 204  67 150 697 292 530 529  71 619  83 698 141 663 694 555 719  42 175
 567 142 668 584 111 612 627 151 350  51  58 119 179 718 695 562  49 717 532 106  64 623 653 421 118 139 239
  43 180 478 608 607 706 702 194 675 128 190 191 565 107 556 173 177 538 140 171 518 524 620 152 147  45 720
 165 113 681 674 685 600 687 160 374 182 534 127 199 170 679 724 218 648 157 193 132 447 143 203 158 658 144
 100 187 701 625 215 725 603 402 390 223 336 162 192 129 253 195 301 692 662  98 722 587 164 723 120 176 172
 214 225 290 202 716 166 582 714 670 306 161 437 647 167 451 136  50 531 219 407 315 311 348 598  52 362 578
 197 222 373 285  96 371 508 201 499 227 234 708 502 244 592 678 110 684 677 185 135 473 639 255 198 284 278
 297 257 226 229 260 276 590 211 610 343 385 671 382 312 188 212  97 711 683 274 236 295 379 597 208 324 602
 258 345 241 207 637 352 611 405 519 273 265 294 209 279 242 389 728 271 381 183 291 699 259 596 334 342 245
 228 145 196 413 657 233 506 270 666 327 309 712 399 240 349 501 269 321 148 474 354 331 412 344 355 400 296
 154 365 251 512 308 367 403 353 485 358 243 206 328 266 409 310 369 341 340 488 444 449 395 484 380 453 394
 210 335 503 460 163 433 436 445 455 330 319 466 425 316  34 267 497 323 368 387 392 414 535 408  15 338 581
 417 452 491 429 376 448 230 322 304 235 411 435 378 288 454 237 326 333 254   7 418 546 424 464 404 504 268
 364 318 289 459 516 325 401  46 356 481 366 178 482 320 428 490 351  21 439 299 388 507 360 357 359 462 493
  37 298 543 329 430 286 252 483   6 386 457 416 275 552 568 232 375 332 551 537 410 256 205 441 263 479 456
 465 470  13 550 432 443 261 293  72 347 477 427 282 442 514 492 396 468 300 302 398 231  11 277 509 525 458
 463 494 131 422 498 510   5 586  23 372 384 114 397 594 155 528 526 250  61 616 533 101 469  57 461 520 585
 591  47 573 377 589 126 130  18  75 574 511 313 487 450  95 553 480 133 505  16 570 200 588 363 513 558 420
 646 539 560  78 317 547 339 548  85 415 125 561 137 609 121  39 564 189 559 650  35  40 495  88 476 557 536
 599 500 615 174 426  79  22 593 184 540 659 569 517 605 544 105 522  94  41  30 621  20  54 383 655 566 138
 606 472  32 314   9 489   8 406 635 703 576 696  82 631 545 124 642  38 307 654 690  53  19 391 644   2  87
 672 634 220   3 577  24  14 579  63 595 707 580 115  17 249 633 515 272 641 419 521 283 102  26 710 622  62
 693 665  10  36  86  31   4 661 632 617 613 688 103  12 181 213 541 431 563 640 704 262 542 246 438  27 216
 614 238  84  70 467  69  60 303 572 689 523 280 604 667 281 583 643 471 669 680   1 117 159 134 691  33 153
  28 651 645 224 370 337 108 705 305 571 636 221  81 660 575 247 709 248 446  29 656  68  48  25 700 169 393

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 5.37122e+06us (= 5371.22ms, 5.37122s)
Wall-clock time (full program): 5.42723e+06us (= 5427.23ms, 5.42723s)
Satisfaction error: 0
Number of search iterations: 789
Number of local moves: 630 (including on plateau: 183)
Number of local minimum: 32 (including on plateau: 21)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 614 135 654 147 694  26 722 544 141  41 391 421 113 402  62  14 129 700 723  11 352 236 568 561  93 692 669
 683 724 704 132 701  30 716 133  22 131 697  17  72 542  78 225 641 457 634  15 155 649 508 459 666  58   6
 711 721 725  85 633  71 583 127 144  59 588  81 219 522  56  36 419 263 547  54 143 487 578 646 726 512 119
 103 411 153  53 671 275 728 483 122  82 509 316  91 527  13  31 605 591 495 708 120  16 617 621 714 663 137
 112  86 366 433 729  35 191 667  73 110 660 146  77 531 175 105 619 682 600 686 367 567 712 227 142 636 121
 140 196 493 593 590 516  89  97 202  20 675 278  43 575 313 178 658 139 400 330 185 689 620 695 279 706 156
  65 187 638 176 570 134 650 643 245 194 446 224 334 668 288 104 200 380 691 106 727 559 674 188 223 465  76
 206 111 266 364 398 207 221 623 170 232 719 226 208 679 114  70 627 397 703 647 203 546 534 297 165 684 238
 150 718 167 163 479 262 596 253 715 261 642 136 138 597 258 302 608 301 329 556 193 651 310 220 166 436 248
 235 237 363 251 440 173 283 535 339 720 228 308 197 662 182 537 231 376 584 336  94 476 350 168 351 489 710
 717 250 230 285 502 255 174 271 327 294 444 229 335 274 272 612 345 270 360 629 379 616 470 280 384 318 333
 300 319 540 396 467 268 707 195 242 126 378 269 260 454 443 338 464 303 491 337 466 428 403 249 456 252 304
 458 437 286 408 552 264 102 452 429 606 353 349 317 468 172 358 431 241 340 325 281 453 204 474 373 426 296
 451 222 180 385 342 713 218 322 362 390 359 326 377 455 441 243 276 347 306 344 430 371 388 449 423 387 348
 382 307 505 370 312 328 190 394 299 529 521 412 413 383 405 320 420  99 287 246 424 293 422 323 357 375 539
 315 372 365 392  96 442 477 497 416 393 256  61 331 475 513  57 233 586 267 472 506 234 498 511 374 282 434
 550  98 562 435  92 482 386 481 445 488 410 507 401 130 381 414 406 478 149 341   7 164 305 389 523 432 399
  88 404 254 501 273 460 599 427 321 463   9 409 361 117 469 473 355 215 183 369 549 145 514 368 415 576 538
 517 407 553 189 314 184  69  23 557 563 461 356 462 107 518 595 192 448 265 543 492  42 244 425 494 171 664
 289 332 519 579 128 471 450  45 582 480  34 611 572 211 577 490  52 515 205  40 574 438  27 510 343 124 657
 533 693 499 566 157 486  80 626 545 354 213 496 548 109 528 564  90 604  46 541  75  38  39  84 569 240 532
 598 447 108 615  68 702  49 573 551 503  32 632 661 290 395 500 309  10 239 217 603 186  51 277 644  37 558
  95 581   3 640   2 698  55  18 685 705 116 536 655 179 681 678 524  50 123 504 631 257 154 151 565 152 417
 610   8 525  47  79 624 212 520 439 295 199 602 688 159 696 652 161 613 198 571 585  19 526   4 177  21 625
 607 635  25 560  64 485 554  74 648 587 118 687 673  29 484 645 247 169 346 259  44 291 101 609  83 201 630
 298 158  12 672 210 670 115 214 709 699 181 592 656 162 665 677 589 555  60 601 580 324  33  48  63 311   1
  28 659 160 418 292 594 639 618 125 530 216 628 653 148 676 637  24  66 284  67 690 680   5 622  87 209 100

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 5.13406e+06us (= 5134.06ms, 5.13406s)
Wall-clock time (full program): 5.19006e+06us (= 5190.06ms, 5.19006s)
Satisfaction error: 0
Number of search iterations: 766
Number of local moves: 548 (including on plateau: 176)
Number of local minimum: 27 (including on plateau: 18)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 330   3 712  76 226  65 144 587 702 593 290 621   5  32 176 655 167 680 565 684 703 404  12  72 615  10 726
 485 232 142  16   9 495 133 115 689 586 633 610 673 566  48 677 264 675 643 584 120 481 196 659  35  14  75
  86  44 143  47 331 126 667 685 616 116 106 697  30 544 105 639 238 526 619 211 579 474 218 599 528 644 237
 577  64 585 551  59 178 575 496 629 602  93 637 112 391 131 687  73 648 620 523 572 149  28  41 135  88 611
  85 188 672  82   6  38 555 519 552 590 557 128  29 600 275 664  80 499 543 662 606  46 262 596 181 231 609
 562  92 665 123 336  23 630   4 678 172 563 312 488 462 513 671   8 411 399 607 635  33  39 693 525  97 114
 598 219 567 130 283  27 320 121 541 433 592 245 504 500 191 534 175 473 533 538  58 475 366 581 506 190 155
 568 368 582  17 560 100 514 148 512 532 652 157 580 591 202 645 147 491 395 279 417  56 224 468 489  91  70
 333 263 233  99 490 521 358 649  13 570 617 154 618 453 531 463 554 385   2 277 536 508  89 425 540 108  66
 520 200 479 242 309 550 524 657 338 266 456  84 410 470 430 449 416 387 501   1 351 558 239 487  20 186 325
 355 150 535 217 420 493 380  87 434 451 419  37 435 505 348 446 447 256 626 392 442 350 408 482 376 339  25
 542 448 423 244 455 390 444  19 345 478 492 530 515 310 394 317 412 511 502 426 261 281 353 280  45  98 340
 471 546 405 429 372 184 486 389 329 361 467 296 413 259 379  22 388 267 311 294 472 384 292 360 418 516 346
 458 363 427 398 428 415 382 313 407 285 324 318 364 286 373 326 367 445 307 343 421 347 295 396 393 272 402
 327 406 377 341 255 400 258 432 335 314 357 483 223 356 352 323 308 337 302 658 694 439 371 248 268 316 375
 321 383 129 522 303 193 656 386 466  95 727 401 270 229 332 424 370 247 374 569 359 235 459 299 293 709 104
 452 319 476 480 260 220 273 265 161 623 192 477 209 257 304 354 305 414 234 553 213 269 461 344 605 628 507
 691 686 225 494 706 409 278 297 236 282 166 240 276 549 342 221 436 274 362 205 369 692 503 253 198 222 243
 153 454 246 638 228 230 306 556 646 301 137 669 195 152 284 214 518 349 159 322 545 288 441 315 365 627 517
 163 578 204 537 674 622 287 695  53  81 254 588  61 208 640  90 716 291 197 156 124 564 548 182 189 624 529
 132 469 170 714 670 666 173 216  11 180  68 457 199 177 547 227 597 723 328  79 720  78 603 109 574 334 634
  49 464 271 699 241 571 162 203 252 249 683 608 711 101 139 397 194 169 145 625 107 713 440 141 298 650 573
 151 594 183 631 604 715  24 250 117 110 710 559 681 174 641 111 601 171 215 187  34 484 422 207 138 443 698
  51 642 168 300 690 614 701 509 185 700 113  18 289 119 595  26 612  96 201  54 146 165 696 707 378 583 497
  15 682 729 653 210 705  43 160 118 725  77 127 679 125 212 136 708  40 668 431  31 179 613 158 717 403 510
 661 561  71 636  67 654 122 465 438 103  50  21 722 721 647  74 660   7  62 140 134 676 688 102 576 728  69
 719 437  36 539 663 251 460 632  52  57  60 381 164 718 724  63  94  83  42  55 206 527 589 651 450 704 498

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00023e+07us (= 10002.3ms, 10.0023s)
Wall-clock time (full program): 1.00572e+07us (= 10057.2ms, 10.0572s)
Satisfaction error: 2
Number of search iterations: 1908
Number of local moves: 804 (including on plateau: 281)
Number of local minimum: 158 (including on plateau: 40)
Number of resets: 1
Number of restarts: 0

Problem in row 13: 471 546 405 429 372 184 486 389 329 361 467 296 413 259 379 22 388 267 311 294 472 384 292 360 418 516 346 => the sum is 9856 rather than 9855
Problem in row 25: 15 682 729 653 210 705 43 160 118 725 77 127 679 125 212 136 708 40 668 431 31 179 613 158 717 403 510 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 344 673 599 656 129 629  96   6 163 115  75 678  83 651   4 135 702  70 624 618 679 332  44 654 586  27 483
  25 104  45 426 593 642 700 683  22  92 201 563 448 699  19 425 461  50 472 592 660  56 284 571 600 343  79
   9 710 692  99 669  87 616 713  72 168 200  11  54 532 283 235 681 406 645 707 628  57 567 617 351  14  32
 286 602 481 589 685 566 204 705  37 169  16 453  85 677 258  35 416 507 577 575 643 611  60   3 544  13  58
  74 696 657 565   7 437 697 469  82 138  49 551  24 137 549  71 615 495 548 627 623 540  42 535 462  98  67
  20 388 704 482 572 635 640 141  89  88 311 666 182 281  38 122  10 607 557 588 709  80  61 558 711 176 439
 224 149 450  28 516 514 603 428 121  41  93 531  12 597 538 574 313 489 583 612  59 674   8 397 595 179 527
 211 625 620 177 330 446 494  97 124 173 338 339 508 568 189 130 295 542 240 314 475 423 251 526 411 474 534
  94 562 522 621 546 501 596 493 513 146 221 560 528 409 435 119 347  46  23   5 413 468 213 582 354 470  68
  40 539 473  65 529 403 573 684 319 385 183 391 511  18 128 536 491 132 312 510 328 480  31 533 414 402 445
 112 133 581 449 342 464 394 337 353 172  91 590 349 348 438 382   2 463 405 585 376 503 304 487 386 442 368
 228 515 427 404 412 512 564 591 220 276 255 144 390 395 443 441 244 498 471 120 550  66 294 492  63 457 383
 433 455 336 454 317 321 357 431 389 387 396 380  78 247 341  77 543 401 381 356 399 290 467 490 434 479 216
 275 226 340 452 392 377 335 417 248 365 264 297 456 418 373 346 429 419 504 422 506 372 289 306 547 285 195
 184 421 440 430 398 420 363 361 708 293 269 364 327 345 324 378 249 322 237 308 379 486 242 307 500 477 323
 663 305 303 367 288 545 261 296 299 717 277 485 496 298 263 194 555 374 250 350 360 271 333 219 366 358 362
 661 117 436 334 407 310 253 203 316 537 530 524 369 291 210 234 703 359 695 371 218 282 478 215 268 301 233
 690 259 292 688 256 229 161 274 606 502 243 217 236 318 262 208 569 410 714 185 140 265 630 212 693 241 355
 525 266  64 278 254 238 205 484 451 601 626 214 326 576 315 287 370 223 682 505 329 148 675 199 260 638 116
 579 302  48 309 273 147 222 580 523 662 636 196 459 142 158 672 280 671 151 444 134 519 432 190 153 272 701
 520 165 192 518 180 143 715 650 668 729 655 227 706 197 598 509  86 225 198 267 191 159 641  84 206 252 174
 553 114 145  26 178 716  30  90 676 400 728 106 726 476 552 670 162 447  55 113 152 415 691 232 109 644 649
 664 127  34 231 712 103 125 186 622 619 647 246 631 687 465 605 488 325  33  39 193 139 408 100 207 610 609
 646 722 107 167 157 245  15 170 466 570 614 101 632 279 724 652 156 331  69 202 126 171 658 384  43 727 721
 639 118 719  29 604 187  73 166 653 424 725 105 181  81 561 680 131 209  62 239 160 694 521 175 393 718 608
 698 460  95 352   1  17 375 164 556 499 634 686 541  52 720 554 257 111  47  51 270 689 594 633  76 110 613
 458 102  53 659 108  21 188  36 559 587 578 230 517 136 667 584 300 723 320 150 155 665 637 154 123 648 497

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.00585e+07us (= 10058.5ms, 10.0585s)
Satisfaction error: 3
Number of search iterations: 2044
Number of local moves: 835 (including on plateau: 308)
Number of local minimum: 162 (including on plateau: 41)
Number of resets: 1
Number of restarts: 0

Problem in row 8: 211 625 620 177 330 446 494 97 124 173 338 339 508 568 189 130 295 542 240 314 475 423 251 526 411 474 534 => the sum is 9854 rather than 9855
Problem in row 11: 112 133 581 449 342 464 394 337 353 172 91 590 349 348 438 382 2 463 405 585 376 503 304 487 386 442 368 => the sum is 9856 rather than 9855
Problem in diagonal 1: 483 343 351 3 42 80 59 314 23 132 2 441 341 418 327 485 530 502 451 580 715 716 712 167 719 460 458 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 729  80  12 180  16 574 601 178  99  72  40 714  56 245 626 422  13 716 550 701 553 593 697 602  54  15 717
 625 382 664 275  68 182 134 552  67  87 151 689 141 132 643 645 514 137 634 117 710  43  71 679 113 676 723
 494 114 649 599  35 505  88 184  92 127 106 709 255 130 569 474  51 653 658 165 627  78  91 718 466 660 558
 395  44  36 166  66 199 432 100 673  76  30 725 728 622 719 519 198 655 646 108 722  73  97 644 481 144 557
 513 126 102 116 668 677  93 281 177 486 175 125 487 163 632 636 115 234 647 289 543 210 721 169 274 565 631
 563 174 202 253 111 699 682 123 152 201  86 306 498 229 614 661 138 491 147 507 678 684 128 600 124 225 579
 510  75  81 193 354 337 619 146 648  62 216 236 532 690 196 651 293 617 472 256 258 140  94 572 200 681 726
 665 674  70 164 191 620 205 705 271 122 389 208 534 691 235 621 240 176 262 462 385 204 230 190 186 607 548
 398 524 153 349 211 712 475 158 659 209 220 254 630 224 223 680 243 252 331 449 325 247  64 588 352 703 222
 564 482 298 162 259 288 492 185 320 671 343 228 567 261 670 248 351 370 624 154 533 299 239 156 376 328 387
 470 227 357 268 231 309 700 358 291 461 217 369 623 394 305 194 480 266 523 284 478 188 417 576 355 237 277
 346 521 356 363 314 276 500 402 221 311 353 172 720 161 360 727 302 338 526 485 295 436 294 267 414 181 214
 473 424 397 502 392 381 520 359 213 249 378 365 333 393 348 278 366 336 310 383 290 454 464 380 361 264 242
 241 324 435 364 319 286 301 499 330 270 379 419 374 409 406 384 212 460 438 321 350 522 280 303 260 544 425
 246 341 244 375 496 456 463 304 323 329  42 416 427 347 312 403 497 372 423 251 282 345 445 452 434 504 326
 441 373 580 335 104 300 410 368 391 453 322  74 287  18 327 317 401 367 399 517 493 371 404 386 501 440 476
 263 143 433 584 516 443 233 479 489 426 577 458 160 405 179  26  69 412 420 400  84 637 431 547 488 136 418
 307 207 429 455 411 308 269 525 468 477 439 604 297 451 226 484 511 362 159 421 279 110 428 446  37 430 315
 292 641 531 465 490 542 318 448   1 536 506 537  17  83 413 459 437 109 509 570 447 587 618  23  65  19 192
 112 591 556  32 530  29 155  39 535 562 515 597 170 589 609  82 549 554 340 344 467 555  47 142 527  59 568
 407 551 596 469 508 586   8 545 573 578 390 592 283 197 189  79 503  34   6 595 257 616 613  46 529  52  53
 103 272 608 457 633   3 377 561 538 612 528  48  21 662 442  28 692  14 101 590 273   2 704 342 540 585 119
 203 594 512 696 560 173 334 541 495 582 657 149 265 183 107 218 685 642  20  11  10 583   7 539 605 313 171
  98 546 148  61 640 131 396 638 559 518 702  38  77 639  60  22 628 606 408 598 195 656 566  50 675 105  95
  85 672   5 611 415  90 444 575 724 168 686 615 388 683 118 150 711 603  49  57 129 706 666  58  89 238 120
  27  45 688 698 650 610 135 571 296 581 715 145 316 635 206 232   4  24 157 133 167 483 707 339 654 450 187
 285 708 713 663 667 139 471  31 250 629 693  63 669 219 121 215 652  55  96 687  25  33 332  41 695 694   9

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00014e+07us (= 10001.4ms, 10.0014s)
Wall-clock time (full program): 1.00573e+07us (= 10057.3ms, 10.0573s)
Satisfaction error: 2
Number of search iterations: 2001
Number of local moves: 709 (including on plateau: 203)
Number of local minimum: 146 (including on plateau: 25)
Number of resets: 1
Number of restarts: 0

Problem in row 2: 625 382 664 275 68 182 134 552 67 87 151 689 141 132 643 645 514 137 634 117 710 43 71 679 113 676 723 => the sum is 9854 rather than 9855
Problem in row 17: 263 143 433 584 516 443 233 479 489 426 577 458 160 405 179 26 69 412 420 400 84 637 431 547 488 136 418 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 521 682 102 175 696  26 501  58 248 675 246 676  56 146 585 562  13 617 677 264 664 632  62  27 108 186 650
 538  18 655  92 663 115 170 142 149 685  48 645 122 189 688   6 109 627 124 668 653 648 128 689 679   3 602
 527 703 107  53 666 637  69  60  85 702 192 683  46  81 541 353  70 665 651 254 661 706  59 613  21   4 646
 534 701 636 410  86 580 257   5 287 707 140 533   9 447 698 134  93 626 565 285 608  44  52   2 512 207 697
 455 488 594 226 414 656  11 205 158 569  22 595 600  41 420 604  40  15 693 117 528 589  30 547 642  32 564
 441 612 561 332 630  35 101 194 136 442 374 603  49  89 660  79  90 621 559 464 539 113 182 548 624 123 654
 372 535 555 137 499 517  82 225 536  34 302 514 421 159 597 206 129 524 582 326  19 380 141 530 494 588 451
 443 545 484  43 553 537 583  63  75 491 132 609 164  67 581 510  64 610 446 437 463 579 130 546 171  20 509
 487 503  55 444 596 586 605 265 173 392 103 401   7  84 523 450 429  16  17 214 490 552 500 525 454 393 591
 492 502 143 462  23 554 197 291 476 403 307 349 318 568 245 355 220 498  94 121 601 493 202 427 477 459 578
 670 370 187 165  10 408 412 385  71 458   1 543 593 371 177 406 506 556 522  38 496 483 231 511 376 481 428
 253 327 241  76 153 456 478 233 453 368 250 431 485 467 471 417 289 439 518 195 419 377 373 251 566 465 404
 388 357 375 448  88 312 382 422 364 391 472 416  74 473 550 268 435 389 296 411 432 350 317 314 425 383 323
 284 544 282 356 311 474 324 267 255 148 690 378 347 409 540 366 399 344 261 549 228 362 352 330 258 384 413
 495 280 475 346 247 331 178 424 395 336 519 217 461 271 169 398 587 387 479 641 367 168 394 279 262 386 363
 243 407 337 497 266 301 277 295 333 342 469 365 340 304 329 611 319 298 379 640 400 438 358 348 278 320 361
 563 328 345 288 306 290 252 557 710 292 489 305 415 244 466 232 717 273 430 426 276 188 354 281 402 163 263
 219 335 303 672 191 322 321 433 573 572 571 204 351 606 272 300 343 213 359 681 240 234 620 210 154 297 259
 274 145 283 482 270 227 638 625 686 199 558 212 725 616 183 200 235 275 700 293 208 260 570 256 222 369 144
 396  54 310 315 218 294 196 423 584 126 634 299 480 507 230 338 542 381 334 714 211  61 445 229 691 504 339
 139 249 470 684 236 316 560 695 662 111 667 161 649 652 269 209 440 198 193 390  57 119 619 157  97 614 242
 174 135 216 723 162 114 515 709 659 313 577 221 726 669 150 184 526 203 131 516 215 713 505 180 201 239 179
 133 106 486 599 715  98 705 513 574 224 567  68 436 238 147 692 678 127 151  99 592 237 674 166 110 708  12
  66  45 607 360 223 100 529 622 576  73 671 160 657 628 125  96 590 155 167 418 176 118 644 718 680 623  28
  36  95 673 286 449 120 615 532 341 722  77 172 647 520  50 629 658  83 405  24 190 309 551 397 694 468 112
  25  78 308 727 460 721 185 704 181  47 325  87 639 575 138 719 699 643  80  39  91 598 729 156 152 720  29
 687 711  65 457 724 728 712 508 116  33 452   8  37 434  51 531 635  72  42 631  31 104 633 618 105 716  14

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.0057e+07us (= 10057ms, 10.057s)
Satisfaction error: 2
Number of search iterations: 3128
Number of local moves: 888 (including on plateau: 293)
Number of local minimum: 268 (including on plateau: 43)
Number of resets: 2
Number of restarts: 0

Problem in column 9: 248 149 85 287 158 136 536 75 173 476 71 453 364 255 395 333 710 573 686 584 662 659 574 576 341 181 116 => the sum is 9856 rather than 9855
Problem in column 13: 56 122 46 9 600 49 421 164 7 318 593 485 74 347 461 340 415 351 725 480 649 726 436 657 647 639 37 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  31  29 615 660 458 362 322 619 685 688 662 202 700 627  24 180 115 594 140 481  23  53 192  80 567 576 170
 653  15 647 680  62 291  73 593 678 137 651 164  95   5 669 126 535 635 108 639  81  77 633 186 665  96 661
 642  32 312 227 649   2  19 682 557 701 602 309 368 516 673 259 165 598 279  18  92  11 542  63 545 352 640
 664 715 616  33  58 361  16 612 676 301 637 196 176 711 671  66 160 586 100 556  74 209  39 205 523 242 652
 650 675 502 568 130 571  49 606 451   4 585 507 207 482 591 107 114 666  71  17 188  45 492 266 604  37 670
  76 505 667 570  54  14 213 597 588 104 559 278  69 463 529 268 187 607  56 375 103 495 549 178 512 601 638
 430 581 462  12 613 272 358 692 460 457 610 169 329 552 464 295 146 554 129 121 269  41 630  91 429 172 517
 655 573 385 364 574 423 544 379 424 299  38  61 152 510 564 144 534 595 208 206  83 232 466   3 561 440 438
 560 417 378 541 355 589 448 421 333 125 538  46 154 528 496 418 145 547  13 392 101 211 476 411 577 136 499
 486 332 501 563 316 474 605 408 455 252 592  86  52 434 456 288  48 487 372 127  68 349 636 314 472 150 532
 363 579 521 583 480 419 391 425 360  50 330  88  97 539 475 491 224 354 230 181 212 428 504 473 410  70 578
 452 485  10 422 376 248   7 537 347 590 530 270 437 367 383   1 489 412 436 407 275 500 449 427 400 293 305
 380 409 420 334 387 406 494 484 282 477 431 471 339 321 342 443 328   6 401 390 247 377 260 394 297 441 294
 555 395 442 405 399 302 281 109 276 319 210 580 508 313 350 398 341 317 373 413 465 386 327 325 157 525 384
 515 467 366 600 404 265 310 131 403 217 292 388 262 263 493 444 320 497 397 446 365 668 298 216 345 233 250
 245 479 371 254 267 722 353 193 370 416 190 454 393 311 243 546 396 478 524 338 531 415 251 306 239 214 356
 289 359 348 221 447 705 220 307 468 246 439 603 283 389 326 304 382 308 522 222 609 241 608 234 285 155 335
 337 369 402 102 277 162 631 264 197 710 351 553 498 258 717 173 582 453 331 168 520 273 219 343 286 426 253
 185 218 718 249 177 195 237 303 235 623 357 572 628  94 139 658 271 414 182 526 624 229 203 681 261 693 183
 153 346 124 280 110 677 199 558 300 323 324 509 644 200 215 318 584 236 691 683 490 461 117 513 226 433 141
 166 201 256 721 223  89 336 287 184 621 161 684 511 142 191 699 648  72 716 432 551 643 698 257  36 198 132
 189 231 344  57 284 634 686  21  28 562 128 626 435  99 296 503 654 116 724  98 696 617 143 679 238 618 149
  34 134  35  93 728 714 707 147  43 518 175 506 704 720  90 167 519  27 620 614 483 450 158 533 123 708 105
 111 290 135 225 697 171 641 156 244 459 112 587 689  51  75 706 548 120 470 381 687 596 118 599 204 632 151
 315 122  20 690 703  87 575 119  40 179  44 374 543 719  59 540 255  65 709 274 659 657 566 625 725 106  85
  47 723  64 340 514 674 695  67 729   8 228  22  55 163 240 611 536  82 565 656 713 569 148 727   9 645  25
 672 174 194  60 113  26 445 138  42 469  79 550 527  78  84 702 629  30 488 694 646 622 133 726 159 663 712

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0001e+07us (= 10001ms, 10.001s)
Wall-clock time (full program): 1.00576e+07us (= 10057.6ms, 10.0576s)
Satisfaction error: 3
Number of search iterations: 2108
Number of local moves: 695 (including on plateau: 187)
Number of local minimum: 160 (including on plateau: 22)
Number of resets: 1
Number of restarts: 0

Problem in column 4: 660 680 227 33 568 570 12 364 541 563 583 422 334 405 600 254 221 102 249 280 721 57 93 225 690 340 60 => the sum is 9854 rather than 9855
Problem in column 18: 594 635 598 586 666 607 554 595 547 487 354 412 6 317 497 478 308 453 414 236 72 116 27 120 65 82 30 => the sum is 9856 rather than 9855
Problem in diagonal 1: 170 96 545 205 492 495 269 206 13 487 224 1 342 313 262 454 439 710 235 558 336 634 728 225 20 723 672 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  36  77  45 678 668 698 690 723 700 109 598  74 120  28 722  83  40 489 218 625  78 114 224 455 464 513 586
 688 672  15 706 519 711 600 604 571 131 705 399 112 106 654  64  21  67 526 158  20 603  55 634 223  89 202
  72  32 693 507 616 661 154 115 501 228 708 149  44  22 515 378 695 137 102 648 113 642 231 702 710  43 437
  58  39 124 259 632 559 554  63 639  65 640 646  61 669 470 724 148 117 156 440 144 583 713 393 581 174 204
 168 164 268 222 578 172 720 126 631  82 528 226 333 143 407 707 205  66  99 292 162 696 726 691 573 195 675
 349  52 167 309 649 560 531 717 721  81 662 229  51 157 719 232 278 306 107 185 163  29 674 545 472 715 194
 682 110 243 499 192 727 493 177 328 276 527 284 359 169 687 411 152 166 272 273 729 597 103 681 227 275 217
  93  79 187 718 620 347 496 421 701 140 444 635 249 610 566 709  84  85  98 147 155 119 248 692 712 142 358
 636 146 250 315 252 548 161 136 293 562 430 679 237 433 303 614 357 647 151 389 485 221  59 490 580 261 220
 200 182 210 534 230 320 520 401 288 716 439 254 369 141 676 286 318 590 305 666 159 160 130 290 338 728 405
 362 214 255 683 670 337 694 267 260 376 370 686 258 291 265 186 602 100 388 317 441 181 289 263 628 279 193
 234 360 340 295 365 269 336 316 416 307 384 458 296 180 725 505 379 367 462 330 274 415 170 618 471 233 350
 342 447 346 325 424 321 567 298 391 277 377 335 574 460 397 310 449 453 256 344 219 299 213 312 387 246 486
 448 308 428 282 438 351 426 297 406 238 324 479 343 348 390  23 459 363 380 375 386 283 491 371 300 414 504
 304 538 319 356 398 467 436 244 332 525 563 383 235 404 481 427 242 368 454 417 361  10  48 251 394 395 503
 374 533 555 432   7 588 285 420 412 139 302 372 452 322 392 326 373 516 446 425 353 402 466 409  75 422  57
 199 468 301 209  94 400 506 535 465 271 198 502 434  41 118 385 482 498 480 366 329 475 431 477  96 487 608
 530 522 514 165 512 345 123 473 457 354 183 540 313 211 264 396 494  56 355 245 544 557  87 339  86 569 621
 511 539 331 101  31 521 327 463 196 575  62 225 509 208  35 495 492 532   1 582 611 529 474 287 456 500 262
 442 523 443  49 568 403 314  11 518 615  71  50 595 704 134 619 579 469 364   4 543 478 565  24 216 419 135
 451 517 589 171 294 104 239 542 206 541 423 605 450 413  38 418 132 435 546 629 323 537 650  13  73 483  33
 203 484 576 591  68 145 133 476  69 382 138 599 572 609 105 549 641 536 445 524 685  90 488 153  91  42 461
 664 550 553 179 429  26  80 547   6 552 191 190 564 657 111  17 677 215 623  27 627 606 352  16 127 624 645
 637 561  53 173 266  76 281  37   5 665  46  60 556 626 241 585 257 408 689 253 656 236 594 175 551 508 660
 587 643 699  14  92   8 108 596 125 653 150 592 601 593 334  25   2 558 651 570  18 129 613 178 577  95 644
 497 714 671 673 189  70  34 638 188 311 122 201 510 607  97 197 667 659 584  12 622 617 128 280 207 341  19
  88 381 680 410  54 121  47 212  30 684 270   3 658 703   9 184 630 652 697 612 655 247 633 116 240 663 176

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0001e+07us (= 10001ms, 10.001s)
Wall-clock time (full program): 1.00533e+07us (= 10053.3ms, 10.0533s)
Satisfaction error: 2
Number of search iterations: 2632
Number of local moves: 971 (including on plateau: 423)
Number of local minimum: 217 (including on plateau: 57)
Number of resets: 1
Number of restarts: 0

Problem in row 6: 349 52 167 309 649 560 531 717 721 81 662 229 51 157 719 232 278 306 107 185 163 29 674 545 472 715 194 => the sum is 9854 rather than 9855
Problem in row 7: 682 110 243 499 192 727 493 177 328 276 527 284 359 169 687 411 152 166 272 273 729 597 103 681 227 275 217 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 342 318 729  35 128 352 552 170 585 704 390 693 125 696 597 559 682  71 340  43 400 451  40 638  79  41  95
 157 528 294  37 105  49 136 644 706 506 346 603 304 702 432 710  66 446 217 513 427  78 131 725  29 697 267
 462 669  74  31 197  19 205 705 541 520 549 640  82 383 472 698  63  69 700  51 722 526  89 533  81 124 650
 721 452 694 468 608 306  62 407 661 209 123 671  86 620 611 689  39 110 331  99 430 358  17 503 408  76  96
 151 645 634 166 720  28 182 665 534 307 102 572 207 581 617 179 500 180 625 165 701 244 301 242 183 235 189
 224 577 607 225 381 188 196 517 560 233 687 490 133 208 281 171 382 497 514 257 728 378 243 574 392 127  85
 695 367 639 174 154  94 250 454 667 548 630 115 575 394 564 554 193  90 582  91 724 688 153 214   8 126 112
 140 547 384 141  87 516 673 584 684 185 626 148 273 251 553 374 253 129 316 677 397 351 104 615  21 282 544
 499 321 635 152 218 101 199 562 555 190 270 162  30 727 248 337 278 636 450 355 111 642 510 723 312 215 417
 119 690 210 335 231 613 201 614 435 135  60 332 532 268 527 537 222 656 456 339 655 610 187 164 142 300 285
 241 556 666 198 341 286 308 504 216 302 686 269  23 411 703 336 393 360 493 137 221 481 478 114 398 238 496
 325 457 368 624 254 401 711 236 343 100 326 474 420 228 305 558 550 410 543 461 261  98 484 345   2 279 292
 586 466 425 324 424 293 344  48  59 169  10 445 569   7 426 314 616 255 120 298 717 249 726 350 648 683 284
 329 495 414  92 206 713 327 421 263 365 349 338 416 333 328 347 413 489 234 290 395 348 315 323 415 291 606
 718 483 237 479 402 376 277 428 262  32  38 439 370 289 299 317 455 353 356 377 334 364 399 441 429 540 361
 371 230 297 266 375 260 674 366 288 404 418 389 412 423 168 272 531 369 391 313 438 444 422 409 449 295 181
 464 149 213 566 275  25 477 387 143 643  20 106 678 651 463 433 167 568 320 373 144 632 459 322  80 388 709
 172 184 592 492 646 583 195  44 437 252 113  75 482 502 518 471  65 657 359 386 309 379 443 442 579 436  42
  58 229  22 511 488 507 508  77 406 447 670  84 116 647  47 475 467 385  18 287 202 372 431 658 691 419 633
 330 173  70 563 458 567 357 220  27 530 712 519 480 470 274 515 485 200 226 716 156 150 259 247 204 494 453
 132  68 211 598 509 545  56 121 103 578 240 588 175 117 176 212 487 512 699 551 271 310 557 203 719 571 546
 535 186  26 561 542 521 522 145 134 525 664  57 600 191   6 258 264 601 192 501  45 276 685  64 675 619 460
 621 245 536 715  36 498 679 649   3 580 448  88 676 219   4 246 629 523 227 538 296 158 146 109 570  13 403
  24  72 265 194 637 659 362 138 108 708 529 486 641 107 139 177 622 155 707 605   1  33 668  15 628 602 573
  93  83  73 631 680 714 118 476 303 663  67 440 627  14 232  54 653 590 283 280  97 405 465 147 595 599 473
 654 354 380 681 130  52 612  50 593  11 178 469 662  53 256  16  61 539  34 587 618 434 652 159 524 505 591
 692 311 160 596 623 589 672 223 239   9 604 163 161 363 609  46 319   5 122 565  55 396 491 576 594 660  12

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.24319e+06us (= 9243.19ms, 9.24319s)
Wall-clock time (full program): 9.29933e+06us (= 9299.33ms, 9.29933s)
Satisfaction error: 0
Number of search iterations: 2084
Number of local moves: 735 (including on plateau: 216)
Number of local minimum: 176 (including on plateau: 31)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 713 685  48 715 637  47  39 189 562 517 108  38  51 192 659 213 728 724 102 711 680 615  58 560  97 114  53
 211 719  71 641 642  94 161 437 708 526  64  96  45  70 709 147 512 130 128 619 479 544 268 673 553 407 201
 590 623  28 563 653 589 138 181 717 663 139 178  44 134 384 377 126 103 160 647 726 325  80 705 721 199  62
 131 700 697  32 655 151 121 671 643 605  55  83 262 214 172 141  33 725 239 723 583 566 152 272 667 495  67
 644 638  74  40 720 150 656 600 165 144  87 269  35 107 729 474 100 204 190 493 722 156 417 603 518 683 237
 536 570  66 551 577 682 238 125 582 664 154 140 146 303 233 212  85 314 115 556 704 712 492 591 259 180  68
 559 645 149 676 124 159 694  99 188 696 170 148 173 207 429  77 133  95 163 626 714 652 662 254 718 193 452
 584 668 227 403 240 271 155 675 182 650 255 256 158 594 225 716 309 119 228 380 528 382 612 573 195 104 166
 567 496 305 669 246 167 218 284 469 548 129 267 116 248 220 727 164 260 431 515 702 674 333 266 242 286 306
 312 297 349 475 483 365 287 383 177 424 282 378 370 249 273 263 408 416 293 629 504 276 521 608 300  93 440
 565 435 332 466 278 275 283 135 347 602 340 514 371 183 366 368 373 329 288 461 473 301 624 316 251 229 350
 247 327 187 506 241 413 307 243 198 502 356 367 337 649 197 445 409 205 374 387 393 394 462 217 542 661 289
 397 412 264 453 401 396 468 118 235 258 454 344 400 313 609 369 402 230 308 470 510 176 434 390 328 525 191
 326 398 357 364 298 358 215 426 318 419 244 281 569 270 353 363 477 274 352 335 381 430 360 421 411 348 507
 392 334 361 346 414 372 418 385 250 498 487 441  21 362 516 294 406  26 436 543 168 428 448 444 355 388 322
 311 137 523 331 359 545 345 422 572 317 472 315 253 509 338  23 508 391 484 231 245 459 354 433 216 442 320
 451 219 534 339 319 604 290 324 485 304 432 458 537 399 234  82 423 522 438 132  54 291 280 481 593  69 561
 279 343 476 179 488 489 596 415 222 232 520 449 578 539 404 379 252 375 310 196 153  30  72 490 491 478 420
 546 143 503 257 425   7 460  14 576  27 342 446 529 538 581 455 410 464 535  76 321  29 341 285 427 587 531
 206 292 467 186 439 579  16 524 494  50 505 564 500 465 658 480   5 571 640 336 112  84  18 210 558 395 501
 200 175 597 265 532 677 621 540 636 106 688 554 586 499  86 463 527 351 174 122  24  34 209  57  59 457 616
 296  46 665  89 447  65 443 552 684  81 511 533 580 330 613 113 482 574 679 221  90  10 672   1 101 299 678
 497  79 601 184 120 486 618 471 142 194 549   6 575 224  19 111 639 557 632 185 127 595 450  11 519 630 634
  52  61 568 376  20 620 610 606  91 105 689 611 607 162 530 670 651 585 208  56  49 261 109 588  43 302 625
  88  60  25 110  15 592 631 648  36 202 666 703 699 690  37 693 654 547 692   3  41 157 633   8  13 598 614
  63 236 695 617   9  42 277 386  78 226 701 710 691 707 145 513 635 223 657 171 203 628 405  75 123  12 627
  92 117 686  22  73 660 550   2  98 295 456 706 622 698 136 687   4 541 599  31 169 646 389 323 555 681  17

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 4.2975e+06us (= 4297.5ms, 4.2975s)
Wall-clock time (full program): 4.35296e+06us (= 4352.96ms, 4.35296s)
Satisfaction error: 0
Number of search iterations: 841
Number of local moves: 594 (including on plateau: 147)
Number of local minimum: 37 (including on plateau: 16)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  67  28 100 536 686  53 137  78 681 313 640 410 287 665 336 616 612   8 269 343 660 234 672 695   3 713  13
 625  61  14 162 635 122 143 637 621 256 641 575 166 632 476 705 577  93 517 678 723 103 567  18  17  62  29
 702 689 117  39 110  52 156 682 555 155 606  15  21 597 425 656 402 330 177 662 589 120 584 644  57  59 654
 653 657  96   1 591 104  83 645 209 642  79 679  34 712 105 386  35 509 592 501 559  49 473  10 216 565 670
 693 572 602 231  33  70 118  94 303 618 520 668 109 466 369 113  47 582 123 571 253 542 324 544   4 676 610
 687 588 611   7 552 165 198 522 427 498 583 484  86 578  87 288 339  71  56 576 661  36  23 535 126 521 550
 603 614 585 119 605 465 323 561 488  58 241 646 247 650  40 421 581 134  27 432 439 147 619 549 125 131   5
 598 448 595 480 599 490  11 144 514 167 541 189 543 604 111  76 478 121  97  26 538 573  46 493 192 548 633
 513 452 519 453 487  16 116 510   2 494 558 467 475 213 459  51 441  43 197 413 532 503 250 556 184 417 534
 491 294 570 455 286 352 237 530 469  25 271 537 428 468 115 354 349  37 462 505 438 419 230 366 223 404 540
  30 474 311   6 545 447 142   9 590 526 454 420 456 375 431 485 251 388 437  99 463 442 233 378 390 511 562
 435 523 440 496 396 363 238 374 433 486 418 470 415 299 333 451 461 181 282 445 304 407 346 429 236 130  64
 364 322 444 518 479 393 395  12 373 341 298 408 392 483 260 312 387 249 504 350 529 306 368 401 310 380 277
 446 385 477 412 377 279 371 382 381 293 405 200 307 434 355 403 356 406 291 398 335 500 348 414 257 283 360
 361 206 290 666 235 351 506 328 376 261 317 362 300 315 372 411 423 471 152 297 273 729 574 274 495 347 163
 325 289 327 275 326 594 525 179 224 357 246 557 244 329 643 497 607 358 308 301 168 337 629 359 426 186 239
 305 345 383 146 338 389 391 314 489 169 710 217 201 242 658 608 630 528 367 457 265 182 219  88 443 340 430
 284 208 255 285 240 205 580 270 228 680 272 690 264 353 688 321 210 721 173 331 176 292 394 384 615 458 278
  98 397 295 276 268 248 647 225 553 243 211 365 222 267 560 703 190 399 685 334 379 281 691 204 568 344 202
 196 112 158 280 102 539 613 706 226 220  82 263 624 262 711 160 482 569 320 697 342 302 409 252 724 188 316
 141 132 221 663 214 652 254 215  85 708 212  81 318 106 492 258 533 554 623 180 659 424 626  95 671 587 151
 127 174 124 677 128 727 700 309 157 218 648  69 472 170 516 622 183 649 601 449 229 199 135  54 639 172 707
 140 159 227 245 728 232 667 195 638 696  41  72 609 203 266 187 319 617 664  80  75 709 725 502 507 145 207
 133 673 674 719 185 718 436 460  55 524 675 150 579 154 296  74 684  32 171  44 129 701  92 717 422 194 164
 138 191  24 627  48 651 683 499 161 400  65  73 694  63 508 139  45 481 596 546  77 512  66 698 563 593 715
 114 714 704 566  42 631 634 716 153 416 101  89 726 107 175 527  84 655 564  50  38 178 193 136 722 370 450
 586 148 692 515 620 547 551 259 464  91  20 699 636 108  68  31 149 669 600  90  22 628  19  60 720 531 332

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0001e+07us (= 10001ms, 10.001s)
Wall-clock time (full program): 1.00567e+07us (= 10056.7ms, 10.0567s)
Satisfaction error: 2
Number of search iterations: 2781
Number of local moves: 1196 (including on plateau: 561)
Number of local minimum: 206 (including on plateau: 56)
Number of resets: 1
Number of restarts: 0

Problem in row 17: 305 345 383 146 338 389 391 314 489 169 710 217 201 242 658 608 630 528 367 457 265 182 219 88 443 340 430 => the sum is 9854 rather than 9855
Problem in row 25: 138 191 24 627 48 651 683 499 161 400 65 73 694 63 508 139 45 481 596 546 77 512 66 698 563 593 715 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 548  20  21 677 517 603 649  80 572 644  49 106 128 460 671 699  42 484  76 195  61 417 714 592  52  51 727
 690   7 722 518 558 729 726  53 545 102 219  58  24 707 290  37 669 107  73 689 724 728 574  98  85  13 110
 684  67 700 563 538 349 664 168 201  48 104 487  46  45 710 565  35 556 177 720 116 472 577 271 697 170 125
  74 186  65 657 715 638 721 681 656 570 211  78 135  38 153 105 420 529 611  82  92 130 685 668 129 123 703
 630 235  56 610 464 670 679 210 655 614 228 571 247 182 628 637 136 370  91 300 119  97 331 533 172 193 197
  93 124 217 589 587 687  88  27 686  99 522 712 166 528 675 651  72 672  87 175 156 647 581 121 154 258 481
 626 231 191 287 551 688 192  95 580 658 117 360 142  94 501 640 132 408 141 229 692 226 639 338 268 127 702
 599 213 317 654 711 279 122 694 719 207 304  55 155 725 613 498  18 667 120 666 152 103 468 167 137 239 253
 723 180 181 150 496 176 274 208 576 310 288 641 190 143 334 584 512 622 661 234 241 459 470 341 348 262 251
 660 252 202 588 485 306 184 265 372 573 113 352 263 224 281 463 381 705 198 403 157 561 695 183 169 473 347
 371 221 232 623 717 199 709 389 489 450 469 329 214 244 325 236 309 303 289 206 542 704 415 151 237 160 322
 284 314 532 233 492 158 416 298 215 478 246 713 482 376 294 297 285 693 266 449 222 282 479 273 471 272 335
 429 384 220 171 250 477 243 448 249 691 442 308 311 332 414 413 312 275 698 238 212 344 425 380 439 435 315
 270 440 301 345 368 594 295 278 378 405 386 283 276 264 291 369 337 327 336 509 362 393 379 552 357 421 339
 292 261 359 260 427 209 411 506 316 320 358 364 373 330 355 409 396 391 523 515 326 351 356 321 354 387 385
 296 318 419 407 216 483 307 227 343 353 346  84 423 230 497 328 531 394 390 383 412 488 109 424 476 404 567
 555 511 200 480 225 466 530 569 493 539 323 248 519  30  69  14 422  50 461 382 388 502 293 432 526 187 441
 447 566 433 367 350 324 204 399  79 145 520 436 516 454 418 196 255   6 456 500 541 428 163 395 363 457 437
 402 474 494 149 375 118 503 398 269 521 426 465 406  40  29 319 593 188  59 400 451 564 366 491 455 508 392
 174 458 513  66 257 374 510   2 550 443 606 134 527 444  32 205 486 159 505 361 499  19 242 547 634 562 546
 267 453 650  36  22 245 397 559  68 462 544 430 475 514 280 111 340 240 410 259 438 524 277 597 600 642  15
 148 696 504 162  57  10 557 590  70 431 543 218 678 445 256  47 507  26 591 635 377  11  90 663 401 605 537
 223 617 495 140  86 112 114 648 179 299 549 602 540 627 595 490 194 625 525  43 645  81 165  17 161 631 452
 139 643 676 313  23  39   3 619 305  16 615 536 535 534  83  75 554 164 636 632 553 616 189  12 596 653  96
  25 601   1 333 147 586 178 115  71   4 718 652 716 583 607 126 585 173 286 578 612  33  28 618 302 568 609
 146 701 579  31  77 133  41 646 185 342 604   9 706 582 365 633 659 254 629   8 100 621 101 608 598 434  63
  60 682 575 446 144 203 138 683  34 131   5 624 662 680  89 708 673 467 560  64 665  54  44  62 674 620 108

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00022e+07us (= 10002.2ms, 10.0022s)
Wall-clock time (full program): 1.00581e+07us (= 10058.1ms, 10.0581s)
Satisfaction error: 1
Number of search iterations: 2648
Number of local moves: 863 (including on plateau: 312)
Number of local minimum: 219 (including on plateau: 38)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 0: 548 7 700 657 464 687 192 694 576 573 469 713 311 264 355 328 422 6 59 361 438 11 165 12 302 434 108 => the sum is 9856 rather than 9855
