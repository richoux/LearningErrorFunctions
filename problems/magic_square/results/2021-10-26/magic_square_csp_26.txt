@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 605 669 275 505 273 495 181 536  92  97 499 409 285 159 502 307 215 417 547 452 176 177 494 118 154 162
 411 552 111 131 519 334 110  40 588 666 583 433 558 602 268  28 243 129 464 166 630 596  49  84 460  46
 420 264 225  70  69 627 599  14  86 483 156 321  61 108  82 146 400 589 194 611 554 113 612 296 625 112
 439 281  64  50 262 277 249 381 642 248 295 344 641 542  12 567   1 594 282 600 651 670 607 134 480 429
 337  62 674 561 659  54 128 167 451 504 440 117 614   8 358 587 286 242 643  35 555 487  89 208  48 510
 672 123 213 461 203  76 540 193 443 535 640  74 507 244  83 551 616 172  51  85 136 668 450 608   4 453
 623 212 133 491 446 628 341 584 328   5 511 214 253 126  43 178 339 537 503 601 139 500 408 368  56 234
 228 200 291 226 636 488 597 335  58  11 140 331 466 481 412 508 236  75 649 655 496 171 398 351 170 192
 644 430 122 509 246 646 405 609 247 545  55 100   9 355 479 664 245 287  15 360  53 365 657  45 397 312
 444 135 124 263 457 418 525 531 356 497 297 653  66 516 482 435 300 524  41  30 195 462 153 290 206 401
 449 468 252 407 383 375 428 490 476 369  47 458 639 419 620 210 463  31 125 421 367  87 105  19 255 438
 320 314 294 324 363 361 352 340 394 298 346 431 359 293 221 313  16 406 258 423 315 465 436 391 343 425
 384 354 362 393 442 330 238 387 304 185 475 319 382 396 305 532 459 254 347 303 274 209 327 348 147 345
 130 619 402 565 115 270  22 279 585 149 498 265 227 302 637 257 187 615 283 216  27 574 526 322 353 376
 301 570 591 629  94 144 116 661 432 662 199 158 164 546 350 218 143  91 278 390  80 260 477 121 553 573
 229 675 413 633  44 467  93 259 539 251  71 577 377 621 198  25  18 427 492 634 232 280 109 534 580  23
 104 269 631 395 593 306 520 288 114 512 514 202   3 239 501   6 654 311 404 179  10 316  65 635 557 473
 422 533 541 403 538 284 648  90 142 188 364  20 563 371 182  24 652 175 603 160 357  36 186 205 469 645
  95 189  68  60 138 378 604  52 180 333 576 658 191 120 517 211 163 370 434 624 632 626 207 581 379 415
  72 564 568 237 155  67 385  38 544 617 389  81 230 241 399 317 647 673 323  77 342 448 650 119 470 148
 272 455 478 223 528 522 392 196 410 560  29 173 575 137 222 373 566 151 472 388 486 204  21 592 152 224
 613 233 595 299 578 107 132 261 326  32 521 556 250 445 201 454 267 106 325 102 318 240  78 582 515 665
 197 127 150 414 183 571 437 484 338  79 550 523 598 161  99  96 579 271 101  33 506  17 610 543 572 562
 157 332 671  13 289  42 190 329 184  59  63 586 141 219 559 663 424 656 638 606 548  34 618 518 174  88
   2  26 217 441  39 527 349 590 168 386 308 309 569 474 447 471 372 169 292 165 266 416 366 513 426 493
 231 145 336  98 549   7 220 667 374 530 235 489  73 676 622 660 310 529  37 485 456 380 103 276 256  57

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00003e+07us (= 10000.3ms, 10.0003s)
Wall-clock time (full program): 1.00535e+07us (= 10053.5ms, 10.0535s)
Satisfaction error: 3
Number of search iterations: 5972
Number of local moves: 4989 (including on plateau: 4939)
Number of local minimum: 43 (including on plateau: 626)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 420 264 225 70 69 627 599 14 86 483 156 321 61 108 82 146 400 589 194 611 554 113 612 296 625 112 => the sum is 7837 rather than 8801
Problem in row 4: 439 281 64 50 262 277 249 381 642 248 295 344 641 542 12 567 1 594 282 600 651 670 607 134 480 429 => the sum is 9742 rather than 8801
Problem in row 5: 337 62 674 561 659 54 128 167 451 504 440 117 614 8 358 587 286 242 643 35 555 487 89 208 48 510 => the sum is 8824 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 674 488  36  50 406 378  16 143 669 672 455 203 519 607 114  99 287 149 252  19 240 654 540 333 620 178
 185 651 588 621 450  53 173 408 106 592 466 561  71  44 453 110 169 612   4 570 159 425  14 322 360 634
 207 120 288 477 166 452 586 532  76 569  88 505 225 444 261 662 542 142 127 202 115  92 328 188 253 204
 659  38 157 598 103 422 342  10 184 197  40  28 436 269 445 613 461 460 595 136 534 439 397 585 132 521
 574 449 657  27 529  20 536 546 211 164 604 605 663  90 198 194   8 141 413 223 231 526 232  41 389 530
 537 564 366 285  23 554  26 601 262 352 393 373 549 303 667 195 482  48 577 254 590   1 400 238  43 118
  46 571 513 467 642 496  65 308  77 416 478 151 503 172 105  35 609 545 476 560 208  58 259 306 465 270
 492 516 392 274 675 648 119 485  25 399  79 230 137 649 235 495  45 584  59 562 471 506 580  21 121   2
  61 301 434 257   7 491 104 632 457   3 566 183 279 509 567 267  78 410  24 179 201 525 481 676 578 531
 442  85 673  29 398  87 299 384 199 438 220 418 426 113 636 278 412 660 628 665  81 330  18 382 463  37
 255 260 527 409 641  32  70 483 640 653 427 581 122 246  74 498 404  34 165 472 630 128 548  83 321 650
 414 459 250 644 464 582 144 175 376  91  42 362 215 123 583 565 555 361 275 364 368 369  22 281 209 508
 326 395 396 353 371 343 391 347 339 356 365 351 370 112 357 304 317 302 346 327 331 313 355 359 340 335
 358 375 296 324 320 363 349 319 307 297 323 344 289 310 315 316 318 348 338 298 292 635 332 336 354 345
 263 329 282 239 291 350 539 314 312 325 290 248 334 380 629 273 309 341 276 284 233 294 499 623 264 280
  69 283 152 167  72 221 227 451 265 266 515 271 593 594 556 311 510 448 551  11 405 415 116 479 277 576
  66 150 500 237 186 126 170 573 420 249 293 670 645 403 176 236 247 244 544 558 528  64 646 154 243 473
 402 615 187 134 518 474 429 637 511 507 625 222 417 486 611 377 158 213 655 619  67 245 286 387 535 596
 633 205 501 411 647 156 591  95  93 251 168 610 419 652  39 514  17 228 182 437 443 624 216 111  96 462
 161 575 241 210 458 212 617 300 272 155 147 435 140 658 550  75 661 475 367 160 401 171 394 480 432  54
 504  12 162 470 146 538 664  89 643 192 441 124  56 497 489 631 523 440 138 456 133   5 543  94 390 421
 381 618 337 563 148 135  47 229 600 608 502 547 189 374 214 130 626 193  55  98 256  84 117 622 606 522
 490 305 258  73 524 234 447 226 423 372  33 100  31 190  13 433 383 108 597 616 572 493  86 602  82 217
 153 180 407 388 125 671 579  51 599  60 533 177  63 379  80 145 131 638 242 206 219 191 468 512 559 224
 268  57  62 428 295 174 668 454 517  97 656 487 557 129  49 431 163 568 469 424 552 627 430 102  30 107
 181 200 139 666 196 589 603   9 218 520  52  15 553  68 385 614 386 109 446 101 541 587 494 484 639   6

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00016e+07us (= 10001.6ms, 10.0016s)
Wall-clock time (full program): 1.00534e+07us (= 10053.4ms, 10.0534s)
Satisfaction error: 5
Number of search iterations: 3455
Number of local moves: 2853 (including on plateau: 2805)
Number of local minimum: 30 (including on plateau: 359)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 207 120 288 477 166 452 586 532 76 569 88 505 225 444 261 662 542 142 127 202 115 92 328 188 253 204 => the sum is 7851 rather than 8801
Problem in row 11: 255 260 527 409 641 32 70 483 640 653 427 581 122 246 74 498 404 34 165 472 630 128 548 83 321 650 => the sum is 9353 rather than 8801
Problem in row 18: 402 615 187 134 518 474 429 637 511 507 625 222 417 486 611 377 158 213 655 619 67 245 286 387 535 596 => the sum is 10913 rather than 8801
Problem in row 23: 490 305 258 73 524 234 447 226 423 372 33 100 31 190 13 433 383 108 597 616 572 493 86 602 82 217 => the sum is 7908 rather than 8801
Problem in row 24: 153 180 407 388 125 671 579 51 599 60 533 177 63 379 80 145 131 638 242 206 219 191 468 512 559 224 => the sum is 7980 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 654 651 472  31 553 231 288 296 154  71 537 604 199 655 637 371 475  46 292 416 186 465  74  35  25 383
  55 157  85 307 626 448 263 488 352 670  43 171 190  81 628 406  17 357 513 473 353 204 278 340 647 649
   3 622 594 404 305 248 104 179 392 251 603 593 126 309 321 512 634 301 588  97 396  19 407 452 264  77
 592 414 502  36  57  66 617 585 315  64 399 559 423 607  11 310  15 176 345 330 556 182 511 235 432 462
 341 518 335 508  39 498 378  24  59 410 580 314  28 657  32 564 195 611 554 239 145 365 376 312 598 121
 291  70  72 578 579 619 476 466 590 653 170 144 311  99 247  79 479 575  90 424 497 582 128 557 260 477
 279 388 368 187 229 130 496  56  69 529 487 661 181 483 460 329 566 395 581 426  60 567 385  68 338  83
 435 540 387 276 327 652 625  78 211 132 164 158 258 114 646 439  13  65 562 600  41 601 421 571   7 478
 336 326 268 243 505 467 419 614 245 668 675 107 608 249 492 110 118 437 596 490   8 320 493 333 192  47
 645 541 555 372 674 583  76  12 503 443 287  50   9  16  52  86 280 641 148  21 325 522 354 548 528 530
 216 222  95 322 417  33 319 461 370 344 459 449 391 393 630 360 510 273 217 215 543 125 577 214 151 495
 454 438 430  63 180 444 272 451 412  82 101 283 648 469 317  93 364 379 500 350 515 422 270  48 299 517
 308 377 303 316 246 285 535 300 381 274 403 468 367 418 380 481 167 230 275 342 434 281 295 408 221 306
 297 663  84 639 374 212 613 673 115 318 218  42 351 343 137 568 152 156 135  30 572 521 411 184 599 394
 402 172 446 474  51 240 140 210 636 369 524 456 447  98 384 520 189 627 277  92 514 499 366 265  54 349
 523 429 633 549 455 166 563 334  18 160 146  29 141 252 109 120 213 362 241 620 662 382 574 433 339 534
 255 123 267 501 616 113 638 491 565 194 233 361 525 237 440 173 551 102  10 284 644 142 375 489 238 234
 298 386 185 203 112 629 100 550 162  91 363 427 119 293 471  80 527 197  62 624 450  73 623 143 209 672
 347  20 129 560 494 561 198 573 485  38 442 169 595 536 105 602  61 294 531 226 409 286  22 632 163 445
 188 266 542  96 348 290 183 660 539 589 676 206 324 207 671 428 666   6 168 117 193   4 116 587 642  89
  67 356 401 259 200 271 178 108 153 656 196 610 659 538 103 236 667 621 533 165 106 544 415 313 359  87
 219 331 390 665 131 486  34 124 302 591 150 223 545 398 134  88 480 232  14 658 202 397 323 631 507 546
 191 509 618 136 615 177 504 122 463 253 205 257 133 420 405 337 269 532 127 346 458 155   5   1 441 289
 516 227  26 282 139  58 161 254 605 220  27 609 586 669 552 643 355 612 332 208 389 224 358  23 484 242
 425  53  44 635 328 244 584 261 558 225 457 547  40 149 262 413 664 138 640 526  49 400  75 606 228 250
 464   2 570 159 201 650  37 431 147 506 256 304 597 111 175 453 174 436 470 482  94 519 569 373 576  45

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00526e+07us (= 10052.6ms, 10.0526s)
Satisfaction error: 7
Number of search iterations: 3917
Number of local moves: 3260 (including on plateau: 3215)
Number of local minimum: 39 (including on plateau: 377)
Number of resets: 0
Number of restarts: 0

Problem in row 6: 291 70 72 578 579 619 476 466 590 653 170 144 311 99 247 79 479 575 90 424 497 582 128 557 260 477 => the sum is 9513 rather than 8801
Problem in row 9: 336 326 268 243 505 467 419 614 245 668 675 107 608 249 492 110 118 437 596 490 8 320 493 333 192 47 => the sum is 9366 rather than 8801
Problem in row 16: 523 429 633 549 455 166 563 334 18 160 146 29 141 252 109 120 213 362 241 620 662 382 574 433 339 534 => the sum is 8987 rather than 8801
Problem in row 18: 298 386 185 203 112 629 100 550 162 91 363 427 119 293 471 80 527 197 62 624 450 73 623 143 209 672 => the sum is 8049 rather than 8801
Problem in row 19: 347 20 129 560 494 561 198 573 485 38 442 169 595 536 105 602 61 294 531 226 409 286 22 632 163 445 => the sum is 8923 rather than 8801
Problem in row 23: 191 509 618 136 615 177 504 122 463 253 205 257 133 420 405 337 269 532 127 346 458 155 5 1 441 289 => the sum is 7968 rather than 8801
Problem in diagonal 0: 654 157 594 36 39 619 496 78 245 443 459 283 367 343 384 120 551 197 531 117 106 397 5 23 228 45 => the sum is 7517 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 673   3 577 190 223 214 123 458  94 595 155 204 175 438 125 621  89 217 292 659 478 257 638 244 594 465
 156 541 157 626 289 532 639  60 471 195 183 111 212 323 656  54 179 311 150 321 517 509 393 433 197 586
 360  14 508 672 424 619 227 143 302  93 350 298 662 546 203 647 447 487 189 134 351 615 193 225  11  81
 278 287 570 580 540 303 668 408 295  42  48 599 498  98 439 486 208  92  52 264 228 251 221 456 511 379
 499 160 259 445 596 185 579 382 196 665  19 564 100 348  15 623 247 568 441 151 182 409 114 237 431 386
 593  71 553 165 191  53 328 209  31 525 239 258 316 432 597 154 604 262 284 404 452 164 609 574 631 102
  44 192 283 201 530  33 243  65 383 427  74 493 495 565 526 324  20 115 308 286 633 307 505 466 606 460
 484 463 148 506 412 423 139 502 523  70 365 268 588  40 649 174 534 557 461 524  29 110 270  17 389 543
 205 585 248 420 122 418 373 563 643 167 194  26 443  96 528  80  68 602 620 468 510  85 233 504  97 503
 407 240  30 454 413  56  64 352 513 273 444 437 105 660 152 476 467 381 537 397  95 653 266 410  91 428
 224 230 181  47 655 578  24 539 305 600 363 635 542 629 558  43 216 215 285 106 584 172 457  45 491  77
 611 488  69 422 317 421 416 616 547   5 170 367 490  59  75 279 552  62 592 419 496 178 429 234 261 226
 346 356 353 331 349 384 362 357 339 359 378 375 371 340 310  22 366 345 355 368 322 336 347 372 304 354
 294 398 343 361 300 598 325 290 313 329 341 337 344 297 288 435 319 326 309 330 314 306 335 312 342 315
  16 531 338 462 145 133 263 390 159 654 667 140 162 267 405 485 245  50 582 607  34 587 249 415 210 605
 482 573 301 281  86 518 576  25 515 119 277 664 229 501 128 652 634 272 130 394 137 364 104 109 241 489
 213 392 642 522 430  66 464 581 657 242 572  99  58   1 207  87 206 624 187  88 658 168 388 603 202 274
 562 117 112  27 299 222 282 644 391 637 613 163 327 276  55 661 651 188 529  36 260 507 569 426  12 235
 220 395  67 186 280 469 254 218 107 296 440 676 334 481 127 126 149 575 231 158 403 425 385 559 630 610
 544 265 442  28 514 271 618 318 332 556 640 101  49 253 550 614 449 453 536 131 293  84 176 400 177   7
  82 622 477 535 671 141 669  10 670   9 533 549 519 120 211 171 548 473 113 561  76 648  39 132  38 184
 411 118 512  90 238 566 450 129 246 590 521 236 636 199 374 617   6  13 161 527 474 136  61 320 538 632
 142 451   8 333   4 417  57 666  72 475 571 414  51 554 627 252 436  78 645 625 545 555 144 124 402 153
 103 200 583 612 255  35 376  41 138 589 500 448 198 470 169 146 291 663 396 591 108 497 646  18 459 269
 494 675 641  73  63 674 135 275 480 173  23  83 377 180 608 166 387 492 370   2  21 446 479 516 567 401
 358 434 399 232 455 472 147 560  79 116 121 256 520 628 219 406 483 380  46 250 601  32 551 650 369  37

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0003e+07us (= 10003ms, 10.003s)
Wall-clock time (full program): 1.00551e+07us (= 10055.1ms, 10.0551s)
Satisfaction error: 3
Number of search iterations: 3386
Number of local moves: 2802 (including on plateau: 2752)
Number of local minimum: 26 (including on plateau: 348)
Number of resets: 0
Number of restarts: 0

Problem in row 7: 44 192 283 201 530 33 243 65 383 427 74 493 495 565 526 324 20 115 308 286 633 307 505 466 606 460 => the sum is 8584 rather than 8801
Problem in row 8: 484 463 148 506 412 423 139 502 523 70 365 268 588 40 649 174 534 557 461 524 29 110 270 17 389 543 => the sum is 9188 rather than 8801
Problem in row 17: 213 392 642 522 430 66 464 581 657 242 572 99 58 1 207 87 206 624 187 88 658 168 388 603 202 274 => the sum is 8631 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 629 196 352 650  84 359  14   1 581 453 295 612 383  97 582  50  71 268  45 160 125 106  98  75  26 651
 530 190 593 615 120 409 166 589 632 244  18 191 186 550 301 507 562  39 311 192 626  58 371 199 509  93
  83 501 163 113 412 176  11 584 363 497 154 480 597  15 197 540 314 605 395 389 519  22 140 642 565 324
 284 257 297 474 460 485 452 649 101  48 212 397  68 230 210 124 617 245 374 227 653 406 579 600 146 206
  16 647 326 425 541 517 136 265 241 310 391 336 204 455 179 458 544 607  86  85  19 552 623  94 490 254
 557  52 634 555 248 518 448 603 602 539 289 236  67  77 328 215 481 183 132 151 477  80 450 504 305  70
 590 466 368 134  90 531 529 522 264 463  73 496 361 285 356  66 234  36 339 168 547 202  82 128 546 611
 251 333  89 162 672 104 644 315 636 200 280 613 117 551 139 303 150 542 471  69   5 290 637 250 487 491
 340 135 494 392 123 384 398 560 609 563 573 373 413 424 645 121 444 587 583 394 594 619 219 211 608 147
 277 638  55 262 272 437 442 172  96 194 484  54 112 620 410 489 402 237 304 260 116 365 319 574 564 646
 421 559 535 665  74   4 472 119 381 155 578 148 561 353 396 538  56  60 317 221 661 127 266 184 439 511
 596 313 195 342 506 592 588 102 130 408 502 169 188 213 382 577 329 231   3 441 430 358 508 558  61  79
 307 259 393 400 370 419 357 298 372 354 308 399  91 344 263 335 278 350 375 385 287 447 337 351 306 416
 182 516 283 309 495 293 668 275 388 349 321 459 282 366 271 325 526 378 114 386 318 288 187 322 261 239
  40 355 242 331 534 171 478 273 422 674 401 173 253 281 181 167 418 662 436 360 240 222 205 614 348 320
 379 667 345  44 149 296 364 456  88 108 341 601 586 255 107 292 666 657 346 387 157 214 440 238  64 554
 585 569 622 138 235  41 640 443   2 203 673 126 654  20 207  87 279 143 423 300 431 486  53 390 537 514
 216 141 498 165  72 548  99  76  95 233 621 445 330 376 630 624  17 256 567 500 671 174 228 294 591 334
 312 670   7  92 269 606 224 220 156 598 467 133 468 513 512 465   8 414  63 475 105 523 316 525  32 628
  25 343 208  38 676 510 129 451 362 158  33 226 625  35 549 503 655  21 428 618 252 599 435 142 433 347
 669 232 338 457 462 109 170 575 137 198  47 274  49 568   9 528 131 664 659 449  46 515 675  12 635 193
 543 405 438 533 276 144 246 103 159  59  28 556 660 218 627 367 247 152 576 100  23 604 427 616 122 572
 493  34  13 110 209 115 580 145 492 482 189 217 291 656 185 420  51 461 570 652 267 641 377 469 521 161
 380  62 415 610 483 225  43 177 249 643 411 499 446 532 332  24 223 404 663 479 520 270 229 302 153  27
  31  81 434 527 566 175 473 505 595 299 658 470 631 524 327  37 545 488  57 417 286 201  29 429  10   6
  65 180 464 258 403 633  30 323 648 369 454 118 178 243 476 639 553 111 164 536 426 432 571  78  42 407

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00004e+07us (= 10000.4ms, 10.0004s)
Wall-clock time (full program): 1.00529e+07us (= 10052.9ms, 10.0529s)
Satisfaction error: 3
Number of search iterations: 3397
Number of local moves: 2829 (including on plateau: 2780)
Number of local minimum: 20 (including on plateau: 353)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 629 196 352 650 84 359 14 1 581 453 295 612 383 97 582 50 71 268 45 160 125 106 98 75 26 651 => the sum is 6963 rather than 8801
Problem in row 7: 590 466 368 134 90 531 529 522 264 463 73 496 361 285 356 66 234 36 339 168 547 202 82 128 546 611 => the sum is 8487 rather than 8801
Problem in row 9: 340 135 494 392 123 384 398 560 609 563 573 373 413 424 645 121 444 587 583 394 594 619 219 211 608 147 => the sum is 10953 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 142 561 382 668 273 637 570 166 266 466 676 124 644  44 315  41 502 222  85 191   3 495 636  95 264 333
 593 316 670 332  43 582 278 107 342 119 314 439 160 414 586  26 655 169 500 243 462 197 374 248   1 631
 642 117 478 499 597 104 656  40 425 303 494 449  83 340 343  16 595 564 647  25 581  53  70  84 528  68
 317 557 319 105  32 213 130 349 249 128 438 233 393 569 602 622 546  71 491 463 158 161 572 532 341 210
 509 395 446 630 553 587 367 613 381  67  39 240 663 262 216  29 510  46 650  24 133  76 549 195 368 253
  75 145 200 657 483  82 146  81   9 390 591 571 176 585 162 589 245 215 513 660 665 338 170 675  60 318
 424 514  94   6 269 135 126 289 535 607 205 397 605 443 515 450 179 467 296  77 431 545 369  58 456 309
 486 116 232 555 436 259 529  28 627 580 481 114 641  37  65 620 194 632 217 329 417 399  66 489  54 198
 616 506 422 516 550 442  92 260  96 430 187 358 226 220 547 653 141 378 313 403 155 112 139 270 412 357
  99 435 167 255 271 603 386 578 121  97  88 312 396 174  86 153 211 376 427 583 353 624 669 328 394 615
 177  27 468 531 348  35 147 237 567 625 140 633 149 276 599 472 227 164 302 544 400 143 649 190 672  79
 263 204 511 335  72 208 568 477 540 659 311 118 129 301 323 182 351 168 180 275 364 460 496 614 185 507
 560 384 258 406 218 366 234 413 322 299 230 300 108 320 347 256 330 360 228 356 504 352 565 339 337 409
 295 350 484 257 420 447 178 440 387 306 359 426 144 479 327 345 402 294 398 405 279 375 286 290 326 102
 127 524 562  19 664 428 212  57 346  23 452 473 385 277 458 109 388 539 163 554 297 355 122 365 361 541
 184 106  80 454  21 254 501 662 612 392 661 551 282 181 617 389  31 592 280 383  15 265 115 202 283 250
 242 199 196   4 267 588  98 268 548 674 125 638 362 640  51 437 493 434 503  78 623 518 123 103   5 584
 474 111 459 470 552 373 646 654  20 610  63  55 671  49 138  17 421 525 331  74 193 410  13 530 487 455
 519 308 229 175  73 598 490 667  87 391 344 457 281 527 284 152 526 285 628 206 241 113 542 274 371  33
 224 186 498  61 563 307 488 520 288 137 239 407 150 451   7 419 618  48 576 334 429  56 372 543 634 246
 566 521  89   2  36 476 101 219  47 441 626 173 183 573 574 522  34 537 471 132 606 512  64 575 652  69
 608 538 559 151 415  45 223 416 645 305 192 209 134 207  93 517 453 201  11 658 336 611 354 465 298 157
  42  90 432 310 480 377 100 304 418 214 508 448 651 235 370 404 231 621 189   8 423 148 648 379 171 600
 464 604 292 533 252 172 444 380  12 247 433  50 325 534 497 579  10 236 291 629  18 594 272 110 188 635
  22 321 154 619 408  38 482 411 238  30 136 225 324  62 156 244 287 643  59 590 159 596 475 363 492 203
 131 666 120 251 505 445 609 165 673 261 469 401 536 601 523 558 221  14  52 577 556 293  91 485 461 639

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.00541e+07us (= 10054.1ms, 10.0541s)
Satisfaction error: 3
Number of search iterations: 3500
Number of local moves: 2922 (including on plateau: 2873)
Number of local minimum: 25 (including on plateau: 350)
Number of resets: 0
Number of restarts: 0

Problem in row 16: 184 106 80 454 21 254 501 662 612 392 661 551 282 181 617 389 31 592 280 383 15 265 115 202 283 250 => the sum is 8363 rather than 8801
Problem in row 25: 22 321 154 619 408 38 482 411 238 30 136 225 324 62 156 244 287 643 59 590 159 596 475 363 492 203 => the sum is 7737 rather than 8801
Problem in row 26: 131 666 120 251 505 445 609 165 673 261 469 401 536 601 523 558 221 14 52 577 556 293 91 485 461 639 => the sum is 10303 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 676 186 470 420   2 157 663 590 604 228 340 561  51  14 269 153  28  75 606 387 523 108 409  52 573 656
 408 241 675 150 256 218 627 255 501 347 246  31 217 665 189 430 533 525 239  53 674 370   5 252 618  76
 657  22  63 520 672 629 174 536  70 135 162 648 422 172 543  15 261 624 202 611 209 547 111 583  47 166
  46 562 257 587 465 211 301 297 101 592 293 176 639 322 589 560 222 444 303  41 268 373 632  92  99 329
 147 136 572 307 570 273 645  64 199 342 514 122 551  44  89 537 385 553 124 143 581 541 626  55 446 235
 294  96  68 500 563 544 443 489 610 181  42   9 106 274 137  21 457 237 398 564 516 285 145 325 279 591
 447 582 210 538 250  11 120 194 380 418 654 435 491 115  32 404 512 395 283 473 462 441 540 159 161  94
 485 286 219  61 125 151   3 229 571 507  27 548 664 584 588 472 578 567 481  12 154 140 384 346 169 450
  79 596 179 493 113 142 173 640 475  71 403 433 203 110 480 476 138 454  13 612 238 634 227 426 414 579
  82 534 445 670  24 165 262 556 600 438 608 509 205 413 141 103 386 178 453 412  26  29 117 388 641 416
 499 116 132 434 109 622 317 631  69 204 436 427  54 492 400 393 635 396  16 152  35  85 360 605 636 546
  72 637 220 272 497   6 251 341 281 448  73 366 586 602 394 265 277 382 471 112 344 585 488 311  56 464
 375 362 363 324 336 357 319 374 358 330 345 339 368 350 371 353 377 335 323 355 367 365 298 127 292 338
 361 320 134 155 655 148 405  57  98 669 487 184 321 158   8 482  17 484 348 506 352 200 574 549 598 531
 642 290 284 245  81 331 569 349 308 185 490 309 310 609 314 295 264  95 599 354 463 289 175 180 415 356
 459 513 502 554 483 558   7  30 566 242 191 195 287 479  74 315 478 282 258 557 397   1 253 614 207 299
 539 428 652 369 524 440 647 595 105 267 144 343 223 234 406 100 296 266 381 197 254 306 275 104 616  90
 580 555  20 247 364 213 510 276 224 527 568 625  87 221 230 206 326 214 333 288 243 671 193 508  67 505
 495 673 431  40 620 424 565 215 259 552  34 467 437 432 615 119 659 305 545 535  60 156 248 244 383  83
 208 232 359 233 225 559 196 518 667 511 528 313  33 644 660 212 139  48  36 192 666 126 300 593 496 107
 128 594 530 190 372 291 121 421 649  18 468  86 114 451 334 171 411 168  65 390 337 668 658 429 521 216
 332  97 607 312 130 410 280  84 160 379 182 577 477 198 466 617 628 271 389 351 163 146 187 399 316 643
 407  66 425  77  49 423 456  93  38 603 517 328 391 439 167 318  88 102 149 646 170 498 494 515 123 177
 240  59  50 638 601 449  78 504 417  58 278  45 529 129 503 661 576 621 550 201 188 474 458  37 231 226
 133  43 630 442 452 650 486  62 164  80 522 455 402 131 542 597  39 118 613 653 460 461 619 532 378 236
  10 575 304  23 263 419 183 401 327 469 249 270 633 519 260 526  91 662 623   4 651 302  25 376  19 392

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00004e+07us (= 10000.4ms, 10.0004s)
Wall-clock time (full program): 1.00525e+07us (= 10052.5ms, 10.0525s)
Satisfaction error: 6
Number of search iterations: 3370
Number of local moves: 2747 (including on plateau: 2700)
Number of local minimum: 34 (including on plateau: 326)
Number of resets: 0
Number of restarts: 0

Problem in row 6: 294 96 68 500 563 544 443 489 610 181 42 9 106 274 137 21 457 237 398 564 516 285 145 325 279 591 => the sum is 8174 rather than 8801
Problem in row 19: 495 673 431 40 620 424 565 215 259 552 34 467 437 432 615 119 659 305 545 535 60 156 248 244 383 83 => the sum is 9596 rather than 8801
Problem in row 23: 407 66 425 77 49 423 456 93 38 603 517 328 391 439 167 318 88 102 149 646 170 498 494 515 123 177 => the sum is 7759 rather than 8801
Problem in row 25: 133 43 630 442 452 650 486 62 164 80 522 455 402 131 542 597 39 118 613 653 460 461 619 532 378 236 => the sum is 9900 rather than 8801
Problem in row 26: 10 575 304 23 263 419 183 401 327 469 249 270 633 519 260 526 91 662 623 4 651 302 25 376 19 392 => the sum is 8576 rather than 8801
Problem in diagonal 0: 676 241 63 587 570 544 120 229 475 438 436 366 368 158 314 315 296 214 545 192 337 146 494 37 378 392 => the sum is 8931 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
  27 292 261 425 431 544 558 393  85  16 514 564 179 395 585 195 133 560 546 540 115 510  12 616 144 161
 470 332 522   5 268 407 473 646 167 674 130 468 429 132 530 604 226 154 427  62 165 659  77  94  15 665
 527 667 588 304 635  69 185 591 171 331 206 630 125 375 608 308 140 196 258  95 534 209 475  61 330 481
 494 201 139  93 324 352  45 595 284 273  91 118  74 439 124 459 554 279 599 414 240 578 117  86 224 177
 417 555 136 434 159 576 589 508 343   8 245 311 397 172  30 275 515 565 181  26 441 574 492 336 390 126
 281 280  29 563 542 152  14  39 450 282 120 243 543 448 158 486 432 654  64 579 360   2 482 521 506 571
 351 348 200  22 488 294 146 318 532 221 346 413 276 103 553 212 374 426 249 134 420 303 650 457 566 399
 228 520 410 642 577 670  32 186 391  31 238  53 411 499 223 440 478  84 207 636 241 163 178 430 405 428
 476 624 355 111 290 495 236 129 339 628 671 568 523 260 293 584 502 192 160 562 505 656 422 401  90 222
 620 446 327  88 283 408 513 232 357  60 389 597 548 634 197   1 231 329 256  99 485 379 400 183 252 487
 100 198 629 373  28 337 453  79 573 500 309 257 367  50 507 298 156 469 575 605 477  40 286 570 253 312
 557  97 611 229 110 265 300 116 516 356 166 301 291 669 287 353 593 385 271 550 319 153 313 168 497 328
 259 270  33 217 536  13  56  24 278 451 618 122 662 296 234 602 211  42 552 262 666 572 644 503 598  80
 359 364 349 314 347 310 354 394 317 350 341 320  38 415 386 333 371 340 299  43 365 344 672 342 366 368
 199 383 639 169 138 511 596 517 208 114 471 378 204 501 376 227 537  51   9 538 180 225 202 614 233 581
 334 622  21 559   6 150 437 409 369 387 392 358 467 404 419 480  48  78 489 218 266 335 173 444 648 288
  73 449 626 295  58 141 106 272 586 423 625 322 274 533  66 606 412 326  75 307  70 493 594   4 455 610
 101  47  83 643  98 623 673 580 484 583 603  18 381 174  52 651 205 454 255 406 285  71  76 170 424 661
 135 104 289 162 617 658 377 535 128 582 547  55 215 269 490  37  25 655 545 458 676 403 316 213 121 189
 483  65 182 384 398 418 445 587 518  17 107 668 102  44 657 338 157 561 613 460 263 264 526  63 435  46
 601 302 436 109 254 569 203 145 652  54  82 551 187 433 142  11 315 649 248 305  72 539 456 297 675 151
 246 474 464 498 512 380 504 529  59 421 362 627 637 214 524   3 131 137 361 382  81 612  96 143  34 370
 105 466 247 641 479 113 363 267 190 631 321 443 194 609 184 123 638 112 447 210 465 239 149 472 251 442
  35  23 176 462 619  19 607 438 600 633 191 230 491 519  68 640 509 345   7 567 325  89 541 590  41  36
 663 615 396 528 416  92 388 164 155 219 220  67 549  87 645  10 244 452 647 323 193 147 175 402 632 372
 660  57 653 531 188 235 148 108  49 556 496 119 237 127 463 525 664 306 461  20 592 242 277 621 216 250

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00009e+07us (= 10000.9ms, 10.0009s)
Wall-clock time (full program): 1.0053e+07us (= 10053ms, 10.053s)
Satisfaction error: 4
Number of search iterations: 3890
Number of local moves: 3189 (including on plateau: 3141)
Number of local minimum: 35 (including on plateau: 403)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 527 667 588 304 635 69 185 591 171 331 206 630 125 375 608 308 140 196 258 95 534 209 475 61 330 481 => the sum is 9099 rather than 8801
Problem in row 4: 494 201 139 93 324 352 45 595 284 273 91 118 74 439 124 459 554 279 599 414 240 578 117 86 224 177 => the sum is 7373 rather than 8801
Problem in row 9: 476 624 355 111 290 495 236 129 339 628 671 568 523 260 293 584 502 192 160 562 505 656 422 401 90 222 => the sum is 10294 rather than 8801
Problem in row 21: 601 302 436 109 254 569 203 145 652 54 82 551 187 433 142 11 315 649 248 305 72 539 456 297 675 151 => the sum is 8438 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 318 232 534 610  20 265 405 253  44 227 564  37 664 458 567 494  79 148 358 587 543   7 340 392 485 170
 489 210 156 129 590 447 621 244 643 486  69 377 464 126 425 212 313  97  19 383  16 596  26 624 636 403
 535 179  76 229 481  93 510 208 274 581 319 331 434 180 649  80 589 456 507 143 127 154 532 609 113 412
 293 195 673 435 199  92 583 270 444 463 402 133 262 165 671 385 136 573  73 109 364 586 561 647  53  34
  68 571  48 214 267 236 163 520  28   4  98 451 509 553 565 566 574 661 287 278 469 542 544  25 552   8
 352 591 193 599 584 310   3 547 607 200 665 638 149  63 418  64 105 298 224 477 530  10 223 306 356 289
 194 355 461 470 452 102 429 633 249 521 347 272 189 235 631 138 351 424  90 558  12 379 388 250 413 258
 181 628 198 188 466 131 540 346 284 112 524 575 644 410 176 269 280  71 476  50 655  85 307 562 498 145
 675 359 546 672 299 207 563 239 226  84 641 490 321 473 541 185 653 460 514 108 501 517  66 416 190 132
 454 457 381 431 151 178 505 394 305 420  89 449 439 533  45 255 395  22 411 440 438 478 399 152 139 441
 433 123  13  41 515 618 414 658 390 141  81 175 487 663 128 404 626 437  58  57 386 503 484 103 283 580
 172 384 325 450 556 115 275 276 415 371 622  77  86 614 135 225 281 203 349 630  56 529 623 291 130 611
 606 111 354 251  35 612 669 162 220 659 266 122  82 369 201 668  52 613  38 551 116 157 651 495 341 400
 303 309 338 332 320 297 300 330 348 336 311 324 327 350 572 333 312 326 374 323 322 342 315 360 317 380
 568 446 475 158  27 603  51 428 187  75 597 277 482  21 522 627 468 370 657 527  67 421  23 140  29 555
 286  49 608 652 259 670   1  61 124 537 254 539 601 134 382 445 376   5 282 292 166  91 617 202 656 512
 159 222 605  72 417 459 237 294 550 256 639 230  55 637 177 523 506 168 549 353 479 329 248   2 576  59
 114 508 155 500 676 205 648 513 196 406 493 488 314 375  96 600 174 147 218 453 526 216 247 316 257 295
 221 528 228 285 472   9 396 645 560 146 153 616 357 261 183 197 345 362 629 209 186 171 432 167 474 569
 252 373 234 548 264 674 160  47 465  40 246 667 161 471  42 602 419 144 582 245 635 407  18  31 480 594
 646  60  87 233 585 366 215 389 519 368 499 308 595  43  24  70  15 557 169 660 545 118 173 496  32 211
 598 335 448 492 107  94 302 397  62 296  54 241 579  14 650 288  95 554 344 192 243 491 467 531 430 497
 164 511 337 100 367 620 150 365 387 290  30 423 206 393 263 516 518 328 559  36 378 662 391 334 260 213
 204 301 125  65 427 592 343 121 182 604 442 240  17 422 106 462 363 642 137 619 242 339 191 577 502 536
 483 110 578 525  46 398 101   6 426 640 117 238 104 268 271 119 634 504 304  78 184  39 436 401 588 409
  33 654 625 120 219 408 217 455 666 538 279  83 273 570 361  74 142 231 593 443 615 632  99 372  11  88

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00024e+07us (= 10002.4ms, 10.0024s)
Wall-clock time (full program): 1.00554e+07us (= 10055.4ms, 10.0554s)
Satisfaction error: 4
Number of search iterations: 3606
Number of local moves: 2987 (including on plateau: 2939)
Number of local minimum: 23 (including on plateau: 369)
Number of resets: 0
Number of restarts: 0

Problem in row 9: 675 359 546 672 299 207 563 239 226 84 641 490 321 473 541 185 653 460 514 108 501 517 66 416 190 132 => the sum is 10078 rather than 8801
Problem in row 18: 114 508 155 500 676 205 648 513 196 406 493 488 314 375 96 600 174 147 218 453 526 216 247 316 257 295 => the sum is 9136 rather than 8801
Problem in row 21: 646 60 87 233 585 366 215 389 519 368 499 308 595 43 24 70 15 557 169 660 545 118 173 496 32 211 => the sum is 7983 rather than 8801
Problem in row 25: 483 110 578 525 46 398 101 6 426 640 117 238 104 268 271 119 634 504 304 78 184 39 436 401 588 409 => the sum is 8007 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 666 426 528 255  56 228 364 142 195 236   9 470 459 116  78 135 346 349 546 258 192 411 319 413  51 671
 381 596 463  24 130 194  12  67 444 204 487 619  45 543 551 324 161  77 176 239 331 480 569 541 659 484
 438 447 373 631 259 119 603  21 206 499 112 164 138 320 644 182 559  95 574 490 205  60 606 572 294 190
 578 101 454 137 299   6 473 394 645 214 291  10 589  73  44  35 597 445  36 637 604 169 509 187 614 660
 643 534  17  80 562  29 495 209  37 560 279 502  66 529 443 547 464 563 450 302 103 561  59 120 532 115
  54 339 409 290 654 488 566  15   1 342  83 469 504 125 250 674 196 269 441 268 555 556  41 406 525 387
 639 337   5 132 433 630 610 317  75  11 199 649 114 527 462 109 322 492  98 163 629 134 104 526  14 517
 181  63 493 451 531 240 467 587 661 105 479 144 414 647 118 292 308 398  72  53 333 460 162 557 264 321
 567 417 599 139 632 225 669 432 448 254 627 170 468  33 486 564 121 424 123 129 430 641 410 511 247 407
 359 429 388 242 227 421 277   7 332 446 466 113 329 503 412 420 260 140 383 234 295 474 491 249 419 485
 670 497 304 298 256  74 185 648 198 422 440 457 174  92 159 338 276 498 428 330 215   2 602 117 536 585
  85  13 635 418 434 427 155 552 598 634 636 405 545 122 425 386  76  94  32 507 345 305 455  46 449  22
 334 270 395  93 318 442 453 154 286 437 213 377 494 382 355 391 328 376 360 611 222 335 323 232 313 307
 607 343 396 390 325 357 310 389 344 300 385 379 353 348 265 226 358 272 416 179 393 341 296 392 257 180
 128  81 397 244 623 665 223 663 588  64  87 311 580 231 172 266  40 662 540 354 657  26 271 217 508 203
 230 289 183 608 261 133 326 500 403 263 280 237 583 676 293 316 542 549 175 211 284 314 166 248 384 347
  61 283 458 675  18 173 233 658 267 628 219  88 476 538 229 475 200 278 253 590 252 153 618 577 158 243
 201 352 287 609 465 553  62 171 224 613 107 273 108 245 554  43 620 281 408 472 168 655 297 638 340  55
 351 642 303 617 367 601 216  79 512 371 667 519  30 582 208  23 189 160 309 370  48   4 251 550 586 246
 481  82 483 191 548 435  70 652 537 595 315 431 165 178 625 365 102 262 668 350 145  97  89  58 656 221
 478 651   8 285   3 167 399 516  25  91 375 568 584  65 581 646 521  20 152 461  84 535 600 400 218 368
 149 515 131  31  68 592 664 513 401 156 150 327 523 622 110 126 544 539 207 212 640 100 482 210 477 312
 111 612 186 593 402 456 336 306 143 672 653 177  71 193 518 615 366  96 127 380 356 471 157 147  99 558
  28 184 274 378 530 489  50 452 436 506 650 202 361 197 141 188 616 415 624 238 520 439 363 151  19 374
 275  57 605 369  38 571 282  69 220 136  16 146 579 510 626 591 124 533 633 673 372 505  39 235  34 496
 106 241  27 621 362  86 301 288 575  42 576 594  49 404  52 524 565 514 570  90 423 573 522 501 148  47

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00022e+07us (= 10002.2ms, 10.0022s)
Wall-clock time (full program): 1.00519e+07us (= 10051.9ms, 10.0519s)
Satisfaction error: 6
Number of search iterations: 3333
Number of local moves: 2827 (including on plateau: 2781)
Number of local minimum: 19 (including on plateau: 327)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 666 426 528 255 56 228 364 142 195 236 9 470 459 116 78 135 346 349 546 258 192 411 319 413 51 671 => the sum is 7919 rather than 8801
Problem in row 6: 54 339 409 290 654 488 566 15 1 342 83 469 504 125 250 674 196 269 441 268 555 556 41 406 525 387 => the sum is 8907 rather than 8801
Problem in row 7: 639 337 5 132 433 630 610 317 75 11 199 649 114 527 462 109 322 492 98 163 629 134 104 526 14 517 => the sum is 8248 rather than 8801
Problem in row 9: 567 417 599 139 632 225 669 432 448 254 627 170 468 33 486 564 121 424 123 129 430 641 410 511 247 407 => the sum is 10173 rather than 8801
Problem in row 24: 28 184 274 378 530 489 50 452 436 506 650 202 361 197 141 188 616 415 624 238 520 439 363 151 19 374 => the sum is 8825 rather than 8801
Problem in row 25: 275 57 605 369 38 571 282 69 220 136 16 146 579 510 626 591 124 533 633 673 372 505 39 235 34 496 => the sum is 8734 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
  37 629  64 514 583 653 140 494 446 490 171 192  34 159 202  73 659 357  75 630  24 642 532 122 393 486
 297  72 560  44  79 224 455 611 577 119  27  98 217 567 458 575 322  94 636 499 415   1 146 582 622 504
 533 173 633 187 274 608 431 214 143 424 613 558 188 442 277 312 265 110 542 127 111 451 594 512  10  69
 128 418 453 592 229 396 496 209  85 100 525 520 457 502 365 363 251 372  20  80 377 421 638 356 121 327
 606 427  53 160 559 444  13 491 637 266 253   5  54 647 507 650  58 591 607 112 126  39 163 596 239 498
 288 290  42 621 383 572 189 394 371 268 313 216 634 240 651 482  49 182 308 175 603 196 422 226 124 562
 435 335 359 360 130  88 505 318 331 518 241   9 294 155 625 656 475 154 405 218 515 618 574  31 129 323
 152 674  50 261 115 147 554 484 280 391 345 429 376 476 541 395 432 375 466  97 352 138 439 205  56 571
 198 172 116 483 176 287 568  76 459 537  93 452 317  18 211 197 337  81 350 612 487 381  17 260 509 168
 413 309 675 411 524 329  48 566  68 398 267 252 456 409  66 101  55 529 423 666 343 370 340 109 428 246
 540 564 215 488 390 536 303 672 664 366 328 384 485 569 437 264 655 141 534 118 570 479 497 619 445  46
 201 425 410 417 516 231 615  89 578  71 450 131 589 132 414 194 385 464  65 123  91 543 565 321 113 668
 434 402 330 162 316 406 443 538 185 333 169 604 364 362 179  40 102 510 285 626  43 114  38 513 654 649
 212 544 441 105 225 465 353 203 193 259  52 348 419 341 235 271 561 177 286 662 438 407 503 186 301 614
 645 108 489 181   6   8 293 387 632 392 669 349 167 440 281 493 620  32 661 599  12 447 258  45 190 397
 275 319 238 517 338 262 272 282 300 310 273 579 307 302 295 255 292 557 237 236 602 495 299 598 222 139
 623 373 374 549 204 257 142 199 311 276 643 388  15  92 610 386 673 470 207 314 134 263 220 590 269 219
 233 535 254 137 530  70 326   2 227 368 156 545 646 587  96 531 474 184  21 248 412 158 652 609 550 250
 472  28 521  35 191 511 665 149 420 648 469 548 660 663  14   3 430 284 228 478 585 315 210  51 467 270
 379 462 551 588 166 195 670  30  19 136  60 278 448 256 325 556 157 426 593 153 291 586 389 436 174 477
 657 245 641 170 471 180 354 232 580 576 461 403 125 221   7 433 506 644 244 523 106  90  26 165 597 144
 378 351 135 324 635  16 247 161 508 528 584 283 249 616 526 347  11 522 595 416 468  61  78 547 339 336
 243 103 208 640 449 481  22 463 400  59 454 382 519 380 553 501 344 304 296  77 492 671  47  87 563  63
  67 631  83 242 401 667 183 639  33 500 555 408 539  57 480  74 355  62 107 178 346  99 573 658 460 404
 332 117 305 334 306 151 369 600 120 320 546  41 206  86 104 624 200 552 581 361 628 289 358 213 676 367
  23  95 601 279 605 617 145 298 234 148  84 399  36  82 342  25 133 627  29 473 230 527 223 164 150   4

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00004e+07us (= 10000.4ms, 10.0004s)
Wall-clock time (full program): 1.00505e+07us (= 10050.5ms, 10.0505s)
Satisfaction error: 6
Number of search iterations: 3139
Number of local moves: 2613 (including on plateau: 2566)
Number of local minimum: 22 (including on plateau: 325)
Number of resets: 0
Number of restarts: 0

Problem in row 9: 198 172 116 483 176 287 568 76 459 537 93 452 317 18 211 197 337 81 350 612 487 381 17 260 509 168 => the sum is 7562 rather than 8801
Problem in row 11: 540 564 215 488 390 536 303 672 664 366 328 384 485 569 437 264 655 141 534 118 570 479 497 619 445 46 => the sum is 11309 rather than 8801
Problem in row 19: 472 28 521 35 191 511 665 149 420 648 469 548 660 663 14 3 430 284 228 478 585 315 210 51 467 270 => the sum is 9315 rather than 8801
Problem in row 22: 378 351 135 324 635 16 247 161 508 528 584 283 249 616 526 347 11 522 595 416 468 61 78 547 339 336 => the sum is 9261 rather than 8801
Problem in row 25: 332 117 305 334 306 151 369 600 120 320 546 41 206 86 104 624 200 552 581 361 628 289 358 213 676 367 => the sum is 8786 rather than 8801
Problem in row 26: 23 95 601 279 605 617 145 298 234 148 84 399 36 82 342 25 133 627 29 473 230 527 223 164 150 4 => the sum is 6573 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 676 224 330 300 512 494 557 337 195 460  44 249 254 558 141 142 589 410 445 149  52 251  59 448 551 374
 408 650 143 535  69 298 546 635 294 455 639 147 485 361 244 290  29 242 495 102 248 116 164 321 476 409
  72   7 625 446  20 452 609 590 353 271 188 134 181 469  86 565 376 595 210 631 470 606  12 237  89 507
 573 624 342 574 128  38 204 154 667  21 513 139 246  75 253 456 566 201 202 359 629 641 591 285 183 137
 196 354  84 150 556 580 283 497 379  63 111 219 603 638 620 387  28 505 428 217  13 563 479 434 365  49
 526 370 403 163 458 511 329 381 530 132 436 211 477 100 669  32  58 263 675 206 534 277 297 432   9 322
  87 176 367 510 519 190 122 541 406 646 308  25 108 269 540   2 276 106 146 521 657 543 626 502 482 126
 258   6 655 486  27 123 630 489  19 240 373 175 462 375 594 645 475 622 592 199 230  73   1 508 347 197
 105 610 568 628  79  53 670  85  70  64 614 664  91  80 466 567 214 411  83  41 529 402 182 401 637 487
 394  76 501 426 303  26 583 545 171 423  35 172 250 413  90 668 431 579  77 443 474 528  11  45 599 538
 288 562 415 383 642 615 386 384 416 184 241 390 243 115 612 397 215  36 136 564 231  40 493 216  60 537
 450  97 671 674 672 380  81 120 360  14 221 377 435 107 399 186 179 611  46 268 481 398 135 488 461 490
 371 357 363 274 336 311 393 378 575 420 352 400 338 364 341 340 627 369 155 323 348 339 324  22  66 315
 503 153 239 366 335 643 496 351 506 331 157 412 327 319 166 453 424 343 301  39 279 295 349 282 281 451
 235 312  71 261 404 226 198 289 516 491 520 317 658  62 273 632  57 553 169 602 200 229 550 318 648  10
 616 465 514 533 260 114 355 608 430 307 256 286 656 578 205 310 280 499  55 414 159 208 536  67  48  42
 523 252 272 292 267 193 233 438 382 291 587 561 332 218 457 473 265 299 209 284 213 582 350 278 125 425
 194 440 444  96 464 498  33 158 344 555 162  78  93 661  24 418 187 212 640 220 407 570 459 644 467 333
 320 569 346 247 597 173 441 156 328 395 559 542 129 478 305 306 110  50 447 660 598 236 385 191  65 168
 345 552 588 207 427 326 222  15   3 185 325 313 518 388 596 112 525 662 571 189 607 429 227 548 152 389
 302 262 174 634 633 109 130 666 165 148 192 605 405   5 522 144 391 103 517  88 161 659 421 524 586 255
 572 372  31  23  94 334 316 118  17 653 623 647 167 613 223 232 636 392 560  43 117 151 619 304 527 417
 437  92  51 131 119 442 160 264 101 663 138 203 554 532 419 133 652 170 604 539 584 228 471 234 287 593
  61 492  34 140 515 665 145 433 581 463  54 531 483 576 178   4 547  18 314 472  37  56 654  98 649 601
 259 600 121 275  99 422 225  95 509 309 480 504  68 177 362 358 368  82 544 651 439 257 113 618 245 621
  30 127 449  47 266 585 454  74 484 617 673 500 238 270  16 549 296 468 180 577 104 124 293 356 396   8

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00002e+07us (= 10000.2ms, 10.0002s)
Wall-clock time (full program): 1.00528e+07us (= 10052.8ms, 10.0528s)
Satisfaction error: 2
Number of search iterations: 4375
Number of local moves: 3623 (including on plateau: 3573)
Number of local minimum: 39 (including on plateau: 439)
Number of resets: 0
Number of restarts: 0

Problem in row 20: 345 552 588 207 427 326 222 15 3 185 325 313 518 388 596 112 525 662 571 189 607 429 227 548 152 389 => the sum is 9421 rather than 8801
Problem in row 26: 30 127 449 47 266 585 454 74 484 617 673 500 238 270 16 549 296 468 180 577 104 124 293 356 396 8 => the sum is 8181 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
  24 352 198 155 444 627   3 628 270 468 498 195 484 410 395 671   2 349  71 458  54 479 538  14 431 583
 193 611 229 133 333 353  79 199 518 523 482 153 293 360 315 597   8 520  77 595 667 235 463 563 664 389
 311 359 515 337 208 170  43 149 271 460 109 564 603 160 640  46 492 299 251 304  89 609 339 608 441 424
 402 635 118 618 131 115 473 543 234 112 645 547  73 128  91 496 481 519 672 167 241 436  72 168 210 474
 455 105 125  44 614 305 223 591 494 379 599 138 348 329  90  29  94 191 572 488   9 201 185 533  13 620
  45 243 557 561 596 425 646 367 302  99  33 272 139 222 532 110  58 548 415 343 435 633 151 256 582 487
 409 182  41 406  27 660 534 544 309 613 204 666 559 296 511 423 135  40 558 231 509  56 117 456 194 121
 317 485  64 470 388  78 452 531 426 442 445 490   1 206  75 499 574  65 418 636 324 196 113 277 278 551
 207  66 376 652 136 606 179 668 647 219 663 462 528 650 233 244 416  18  74  62 413 261 230 227 657 394
 598 126 644 216 398 116 308 114 560 450 211 567 616 506 123  11 226 371 214 419 310 405 638  12 466 176
 306 530 675 581  38 341 268 190  15 259 368 446 430 351 119 586 370 541 300  23 570 648  68 449 154 175
 344 540 592  16 510 127 661  31  63 626 232 422 546 550 483 427  51 237 549 266  47 486 364 147  67 417
 411 213 164 397 387 228 297 321 316 385 275 414 327 524 491 283 263 412 326 403 334 330 401 262 319 318
 174 629 669 218 378 284 291 338 428  19 248 526 260 289 242 459 569 313 140 448 508 361 187 493 173 157
  88 507 632 497 383 205 373 464 440  49 381 366 252 120 189 552  82 542 220 475 676  26 651 280  61 290
 162 568 169 562 604 505 512 362 437 545 625 393  84 495 673 502 555 590 654 377 163 665 522 514 619 129
 386  50 236 314 225 286  53  20 477 215 438 432 161 180  97 674 322 434 615 253 469 407 200 575 643 639
 621  57 264  59  10 601 577 465 553 100 209  28 593 622 122 539  87 307 255 642 589 354 183 396 461 107
 573 323 142 181  76 513 656   5 303 439  37 249 607 556 433  48 594 382 150 369 653 408 374 166 224 340
 375  86 158 420 342 630 258   4  17 421 331 101 584 617 358 143 301 535 380 245 451 217 221 612 565 429
 637 104 350 443 335 292 554 566 447 372  35  42 146 156 536 285 578 159  96 177 365 178 641 457 325 525
  93 332 472 238  81 357 145  34 239 165 517   7 137 152 454 124 265  60 246 102  70  32 294  95 267 171
 662 658 298 184 328  30 202 148 400  25  22 274 132 203 602 192 659 623 471 282 108 576 186 605 478 453
 399 288 134 254 580  92 287 585  83 404 537 279 336 610 269 295 521 504 392 257 320 273 655  55 111 281
 106 276 345 356 579 355 480 587 240 363  69 571 390 103 516 527 467  98 600 529  36 141 384 501  52 130
 503 476 634 489 670 500 247 347 312 649 588 197 172   6 212  39 631 144  85 250 391 188 624  80 346  21

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00012e+07us (= 10001.2ms, 10.0012s)
Wall-clock time (full program): 1.00543e+07us (= 10054.3ms, 10.0543s)
Satisfaction error: 6
Number of search iterations: 4217
Number of local moves: 3434 (including on plateau: 3388)
Number of local minimum: 33 (including on plateau: 432)
Number of resets: 0
Number of restarts: 0

Problem in row 2: 193 611 229 133 333 353 79 199 518 523 482 153 293 360 315 597 8 520 77 595 667 235 463 563 664 389 => the sum is 9552 rather than 8801
Problem in row 5: 455 105 125 44 614 305 223 591 494 379 599 138 348 329 90 29 94 191 572 488 9 201 185 533 13 620 => the sum is 7774 rather than 8801
Problem in row 6: 45 243 557 561 596 425 646 367 302 99 33 272 139 222 532 110 58 548 415 343 435 633 151 256 582 487 => the sum is 9057 rather than 8801
Problem in row 9: 207 66 376 652 136 606 179 668 647 219 663 462 528 650 233 244 416 18 74 62 413 261 230 227 657 394 => the sum is 9288 rather than 8801
Problem in row 16: 162 568 169 562 604 505 512 362 437 545 625 393 84 495 673 502 555 590 654 377 163 665 522 514 619 129 => the sum is 11986 rather than 8801
Problem in row 22: 93 332 472 238 81 357 145 34 239 165 517 7 137 152 454 124 265 60 246 102 70 32 294 95 267 171 => the sum is 5149 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 220 597 117 572 410 140 567 444 284 492 203 173 132 645  52 546 104 425 359 289  71 227 651 591 294 196
 314  88   3 112 625 603 256 312 355 668 550 539 499 223  79 276 230 627 604 141 176 637  73 235 377 199
 305 533 673 438 181 544  18 669 421  41 213 557 269 664 204 185 461 371 614  21 259 182 552 187  14 640
 385 212 621 339 378 392 484 163 620 228 570 338  95  83 130 268 137  12 537 483 647 528  37 522 478 114
  24  81 510  34 564 423 226 596  17 634 105 480 599 225 538 393 237 250 325 352 329 543 315 318 101 362
 563 106 509 450  51 515 667 547 240  11 292 149  46 111 649 247 152 613 675 465 232  56 420 242 519 274
 451  36  80 193 214  27  90 635 125 370 175 495 520 454 322 571 281 147 383 655 395 248 610 306 521 497
 267 523 403 500 134 110 386 404 432  43 592 606 233  25 559 197  28 424 332 494 560 578  22 437 166 346
 536 279 439 608  32 548 491 470 502 190 221 143  74 389 198 534 485 574  54  20 616 402 401 396 457 525
 115 411 364 124 291 244 160 493 119 429 229 453 409 595 569 399 418 508 238 161  58 431 482 387 135 579
  66 540 151 588 448 633  69   1 208 558 171 200 300 449  33  64 580 652 566 246 412 317 617   7 659 266
 139 297 100  61 447 365 109 375 341 600 374 666 390 441 366 350 455  98 361 477  77 661 180 561  23 487
 343 372 422 351 376   5 323 379 369 398 373 347 394 326 302 345 334 335 344 354 333 330 295 316 407 328
 530  68 474 446 503 108 400 156 443 542 129  93 178 158  96 639 501 286 526 184 144 445 397 665 382 308
 406 342 205 672 468 565 293 384 632 460 253 357 168 505 303 164 277 541  86 576 607 636 280 174  38 629
 148 290 241 622 601 337 310 327 527 255 258 249 275 217 260 272 529 299 287  97 408 311 271 419 532 459
 270 674 188 154 121  65 128 473 102 307 145 298 658 507 391 172 231 496 475 504 642 239 216 224 301 587
 177   9 556 414 472 511  39  60 662 202 631 209 650 146 471 464 349 211 194  31 304 157 367 628 381 506
 458 581 309 263 282  87 222  72  85 131 136 251 206 283 589  76 415  84 201 103 498  62 116  55 551 405
 646 313 380  16 654 218 643 348  35 605 549 368 594 568 585 657 624  92 122 644 611 126 435 462 626 167
 358 179 618 356 133 490 583 252 169 155 663  47 513 296  53 467  26 584 670 262 321 598 573 278  30 127
 285 416 265 531 554 430 433 150 219 123 452 638  15  40 656  78 512  82  50 577  42 207 159  75 234 288
 488 319 653  91 191 671 236 183 476 545 353 586 210  94  44 615 553 590 189 426  10 261  63 535 360  59
 612 630 427 153  29 264 463 192 516  70 257   4 456  49 245  13 324  99 442 120 575  89 641 243 162  67
 676 436  48 195 388 170 582 107 340 413 428 417 555 660 514 489 118 215 165 517 466 524 142 481 619 113
  19 469  45 518 254 336 623 609 562 331 479 138 363 648 593 320 440 186   2 602   8   6 486  57 434 273

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00012e+07us (= 10001.2ms, 10.0012s)
Wall-clock time (full program): 1.00532e+07us (= 10053.2ms, 10.0532s)
Satisfaction error: 10
Number of search iterations: 3192
Number of local moves: 2635 (including on plateau: 2592)
Number of local minimum: 24 (including on plateau: 333)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 305 533 673 438 181 544 18 669 421 41 213 557 269 664 204 185 461 371 614 21 259 182 552 187 14 640 => the sum is 9216 rather than 8801
Problem in row 5: 24 81 510 34 564 423 226 596 17 634 105 480 599 225 538 393 237 250 325 352 329 543 315 318 101 362 => the sum is 8581 rather than 8801
Problem in row 9: 536 279 439 608 32 548 491 470 502 190 221 143 74 389 198 534 485 574 54 20 616 402 401 396 457 525 => the sum is 9584 rather than 8801
Problem in row 15: 406 342 205 672 468 565 293 384 632 460 253 357 168 505 303 164 277 541 86 576 607 636 280 174 38 629 => the sum is 10021 rather than 8801
Problem in row 17: 270 674 188 154 121 65 128 473 102 307 145 298 658 507 391 172 231 496 475 504 642 239 216 224 301 587 => the sum is 8568 rather than 8801
Problem in row 19: 458 581 309 263 282 87 222 72 85 131 136 251 206 283 589 76 415 84 201 103 498 62 116 55 551 405 => the sum is 6521 rather than 8801
Problem in row 20: 646 313 380 16 654 218 643 348 35 605 549 368 594 568 585 657 624 92 122 644 611 126 435 462 626 167 => the sum is 11088 rather than 8801
Problem in row 22: 285 416 265 531 554 430 433 150 219 123 452 638 15 40 656 78 512 82 50 577 42 207 159 75 234 288 => the sum is 7511 rather than 8801
Problem in row 24: 612 630 427 153 29 264 463 192 516 70 257 4 456 49 245 13 324 99 442 120 575 89 641 243 162 67 => the sum is 7142 rather than 8801
Problem in row 25: 676 436 48 195 388 170 582 107 340 413 428 417 555 660 514 489 118 215 165 517 466 524 142 481 619 113 => the sum is 9778 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 674 143 544 673 457 216 262  94  40 376 207  61  27 499 240 467 546 237  15 198  23 646 466 456 581 653
 363 264 148 525 320 543 629 360 164 591 661 437 300 329  11 220 114 188 249 494 301 565 130  42 620 233
 652  95 551 468  21 129 449 452 122 362 636 411  86 474 657 286 455 663 186 177  87  74 409 150 298  31
 440 604  45   7 123 296 627 285 418 623 580 590   2  77 584 153   8 588 368 116 305 377 263 181 567 574
 302   3 481 279 447 134 589 592 669 282 430  32  57  18 676 106 483 176 647 372 412 107 424 126 465 492
 120 128 267 228 621 573 606 309 311 218 113 656 651 659 157 616 265 612 206 595 488 548 253 608 331  39
 101 144 479 638 540 246  81 557 230 458  41 622 593 480  54 141 560  26 600 283 386 209 439 417 383  93
  24 482 421 135 358 373 197 347 598 495 507 260   9 343  69 390 654  47 241 201 541 303 630 485 453 238
 208 599 675 433 170 617 266 506 504 163 527 665 215 193 251 464 119  92 428 403 532 257 585 508 109 339
 323 536 639 524 597 187 151 289 259 547  12 174 413 569 402 224 184  75 322 550 648 100 165 173 517 221
 133 423 288 533 385 522 112 596  60 475 169 255 219  58 614 419 662 640 542 631  78 615  25  98  38 211
 401 382  22  14 410 391 384 387 354 365 359 108 427 357 335 388 397 332 583 352 312 380 406 393 196 366
 414 338 341 399 405 364 310 356 340 353 348  96 505 350 154 337 336 344 370 367 346 330 327  59 318 594
 361 575 334 269 183 478 670 254 284  53 328 561 316 313 375 342 345 278 147  73 175 571 308 576 333 299
  55 501 205 295  64 438 167 667 351 271  17 582 518 520 315  51 516 664  66 568 180 268 554 610 212 146
 634 660 149 487 349 672  97 234 490 355 277 125  83 194  72 291  82 446 103 463 470 400 185 635 379 469
 225 139  48 426 645 642  52  36 156 618 534 127 666 250 502 611  84 489 200 531 442 105  16 650   5 602
 454 395  68  90 304  44 497  99 553 407 244 514 243 425 530 190 307 535 306  67 256 445 321 280 668 559
 605 537 613  46 171 281 381  56 632 210  70 451 587 324  79 586 398 435 161  80 552 142 138 529 294 443
   1  49   4 477 493 274 392 389 556  88 232 217 563 371 273 152 396 168 572 566 538 448 633 317 500 132
 258 292 191 369 498 117  10  13 625 111 476 235 199 394 136 607 202 252 603 293 649 314 261 115 459 624
 484 319 444 118 172 461 223 213 460 528 619 523 242 626 512 658 245 162 404 110 145 159 655  91 166  62
 297 420 513 509 189  50 226 601 102  89 429 124 526 562 643  43 521 434 511 378   6 515 158 325 545  85
 539 275 570 239  71 471 519 422 432 441 290 408 450 155 192  20  65 160 227  19  33 641  37 236  29 374
 555 276 203 204 137 247 326 415  28 140 564  76 473 231 472 577 229 579 195 270 609 248 503 637 121 486
 178 222 558 416 671  35 578 272  63 182 131 491 431  30 496 462 628 179 549 644 287  34 510 104 214 436

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.00545e+07us (= 10054.5ms, 10.0545s)
Satisfaction error: 5
Number of search iterations: 3100
Number of local moves: 2621 (including on plateau: 2573)
Number of local minimum: 19 (including on plateau: 307)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 652 95 551 468 21 129 449 452 122 362 636 411 86 474 657 286 455 663 186 177 87 74 409 150 298 31 => the sum is 8381 rather than 8801
Problem in row 6: 120 128 267 228 621 573 606 309 311 218 113 656 651 659 157 616 265 612 206 595 488 548 253 608 331 39 => the sum is 10178 rather than 8801
Problem in row 9: 208 599 675 433 170 617 266 506 504 163 527 665 215 193 251 464 119 92 428 403 532 257 585 508 109 339 => the sum is 9828 rather than 8801
Problem in row 21: 258 292 191 369 498 117 10 13 625 111 476 235 199 394 136 607 202 252 603 293 649 314 261 115 459 624 => the sum is 8303 rather than 8801
Problem in row 24: 539 275 570 239 71 471 519 422 432 441 290 408 450 155 192 20 65 160 227 19 33 641 37 236 29 374 => the sum is 7315 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
  39 374 676 500 636 151 608 503  79  71 458 217 147 561 655 475 630  46  10 621  21 439  60 373 429  22
 459  40 602 177  27 657 144 138 474 170 258 316 631 578 200 355 117 457 448  62 343 467  31 311 124 234
 650  51  67  72 524 557 108 568  20 604 637 664 565 444 104 314  43 291 640 201  64 290 609 203 192 319
 585 452 125 141 364 484 231 411 255 628 397  25 435   1 454 541 598 450 573 215  55 166  52 413 232 518
  17 419 259 120 274 487 537  28 425  13 635 265 286 211 508 194 243 671 594 205  48 112 401 587  85 346
 629 675  74 339  75 185  23 297 142 613 514 202 165 478 273 230 198 334  26 451 182 672 511 417 472 624
  29 307 426 674 207 212 246 432 497 456  15 548  84 358  54 468 617 223 333 407 244 520 431 382 412 219
 338 610 553 481 445 241  98 466 410  30 340  37 507 155 531 116 186 101 238 465 611 662 275 189 519 197
 667 447 490 140 546 532 342 145  68 669 208 143 139   3 114 271 483 239 220 281 442 225 462 351 584 590
 331 204 262 395 536  50 563 424 402 160 293 136 129 600 418 625 226 229 409 470 545 615 210 156 242 171
 336 133  58 620 575 283 199 430  91 596 387 569 540 216 570 236 335  81 303 354 550  95  77 173 579 415
 132 306 464 595 163 607 317 123 162 367  11 485 341 564 264  61 193 365 245 556 318 670 353 577 404 158
 406 651 423  32 110 605  66 494 260 270 105 312 362 332 278 666 449 392 504 349 188 345 391  89 489 233
 251 427 369 249 559  14 592 347 190 380 254 632 348 614   7  92 547 586 196 118 330 172 350 441 178 558
  82 461 428 656 289 498 438 496 257 191  16 294 399 128 400 181 157 298 325 309 593   6 659 601 295 344
 107  78 282 250 492 422 288 100 389 403 394 473 554 665 213 102 527 534 126  97 673 308 268 482 327 247
 227  41 187 388 280  56 214 634 580 566  86 528 463 495 647 582 510 115 619 352 562 284 599 111 168 440
 324 535 357 612  59 326   9 195 642 287 446 370  80 256 501   5 471 512 299 522 506 169  69  44 583 622
 623  38 533  99 228 515 571 261 408 121 477  83   8  24 434 320 555 130 530 663 543 521 486 153 328 149
 119  65 513 296 237 148 525   2 523 591 443 398 493 661 152 209  76 396 134 390 361 455 174 616 218 606
 315 646  36 164 240 544 644 385 359 480 516 589 633  96 588 376  93 538  34 159 371  18 292 377  87 221
 437 652 135  94 386  42 574 668 517 150 368 529 654 180  53 643 122 113  57 384 269 363 272 639 433 127
 488  19 302 603 648 253 285 638 549 206 491 176  90 179 279 539 313 167 421  47  45 581 597 416  33 436
 321 277 653 378 300 131 542 267 322 393 235  73 184 263 372 248 360 505 660 304 252 460 645 224 103 329
 420 479 366 154 379 618 567 337 405 323 266 649   4 383 106 499 476 526 305 310 109 137 146 175 627  35
 469 414 161 572 222 183  70  12 375  63 551  88 560 356 626 453 276 502 552 509 576  49 381 301 658 641

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.00531e+07us (= 10053.1ms, 10.0531s)
Satisfaction error: 5
Number of search iterations: 3501
Number of local moves: 2937 (including on plateau: 2890)
Number of local minimum: 29 (including on plateau: 352)
Number of resets: 0
Number of restarts: 0

Problem in row 2: 459 40 602 177 27 657 144 138 474 170 258 316 631 578 200 355 117 457 448 62 343 467 31 311 124 234 => the sum is 7820 rather than 8801
Problem in row 5: 17 419 259 120 274 487 537 28 425 13 635 265 286 211 508 194 243 671 594 205 48 112 401 587 85 346 => the sum is 7970 rather than 8801
Problem in row 17: 227 41 187 388 280 56 214 634 580 566 86 528 463 495 647 582 510 115 619 352 562 284 599 111 168 440 => the sum is 9734 rather than 8801
Problem in row 22: 437 652 135 94 386 42 574 668 517 150 368 529 654 180 53 643 122 113 57 384 269 363 272 639 433 127 => the sum is 8861 rather than 8801
Problem in row 26: 469 414 161 572 222 183 70 12 375 63 551 88 560 356 626 453 276 502 552 509 576 49 381 301 658 641 => the sum is 9620 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 372 264 156 552 397  18 571 251 446 308 208 577 458  98  87  64 661 534 510  41 102 193 200 621 467 645
 167 255 650 641 610 157  80 565 306 116 507 509  16 135 517 160 525 271 384 277 230 615  50  69 622 367
  81  29 136  32 198 613 104 148 428 655 422  24 182 212 533 332 196 378 494 637 416 213 478 614 662 584
 477 124 225 620  75 567 522 243 611  94 607 194 566 299 582 227 345  13 120  10 407  26 588 186 520 553
 564 581 273 511  38 180 502 138 339 371 629 600  95 444 195 197 171 164 237 314 221 560 463 529 313 172
 414 454 545 211 672  99  54 542 539  23 113  73 544 595 152 114  11 260 550 287 513 405 396 358 374 503
 429 143 435  97 103  35 617 395 181 499  86 409 464 133 618 424 421 283  43 518 375 551 257 548 606 131
 468 619 469 676 174  59 398 504 366  76  51   2 173  70 418 530 238  89 472 265 112 640 675 453 329 475
 122 541 280  49 258 290 341 445 216 664 480 425 110 241 430  53 204 485 653 127 598 657 547 125   4 456
  60 146 423 516 512 417 234 363  39 540 365 592 279 573 105 558 434 165 563 659  37 639 154 126  93 209
 381 674  25 575  20 134 442 585  19  27 331 438 163 673  36 385 391 321 158  47 153  96 342 450 457  85
 210 302 455 170 362 370  55 259 665 628 546 192 658 179 354 404 474 663 368 412 451 162  31  68   7 356
 521 333  79 392 312 401  67 119 111 591 376 352 121 317 336 597 574 141 296 343 377 590 549 132 205 569
 348 440 402 349 415 360 340 289 355 319 353 304 335 310 326 303 351 325 300 330 323 301 334 337 328 324
 318 294 282 531 554 642 489 311 117 178  77 268 298  34 527 426 587  92 207 269 413 272 626 278 361 350
 249 515 654 523 236 482 247 652 498 168 307 244 578 293 309 262 297 250   6 285 462  40 288 246 488 222
 239 493 656 252 669 206 624 291  88 261 505 490 357 231 284  66 359  21 175 232 441 447 608 497 292  17
 631 214 562 145 202 561  74 437 224 386 106 266 609 481 400 115 201 603 295 535 465  30 322  33 461 443
 142 630 410 479 140 240 668 129 242 604 670   8 388 149 245 519  28 572 589 583  65 568   3 648 107 253
 491 101 184  15 647 593 176 666 625 460 166  82 215 616  62 254 327 492 420 411 586  58 643 305 137 316
 151 118 399 320 576 226 427 538 270 274 452 390 228 532 470 219  90 436 150 394 627 449 155 526 108 276
 185 408 191 556 144 281 373 159 431 403 161 501 484 486 555 638  14 557 364 602 233  12  44 419 543  57
 528 389 596  71 495 223 471 601  61 448 559 379 229 267 315 644 634 344 128  46 275 147 139 380 169 263
 649 466 100  63 406 537 594  78 605 473 393 633 651 459 256 235 188 646  72 476 369 177 130 433 524  56
 599  48 123 109 199 439 286   9 483 183  83 189 382 636 667 579 500 190 635 187 508 570 347 217   1 632
   5 220  91 346 387 671  45  84 536  52 248 660 218 338  22 496 580 506 612 514  42 383 432 203 623 487

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00027e+07us (= 10002.7ms, 10.0027s)
Wall-clock time (full program): 1.00546e+07us (= 10054.6ms, 10.0546s)
Satisfaction error: 4
Number of search iterations: 3503
Number of local moves: 2911 (including on plateau: 2862)
Number of local minimum: 35 (including on plateau: 352)
Number of resets: 0
Number of restarts: 0

Problem in row 11: 381 674 25 575 20 134 442 585 19 27 331 438 163 673 36 385 391 321 158 47 153 96 342 450 457 85 => the sum is 7408 rather than 8801
Problem in row 19: 142 630 410 479 140 240 668 129 242 604 670 8 388 149 245 519 28 572 589 583 65 568 3 648 107 253 => the sum is 9079 rather than 8801
Problem in row 20: 491 101 184 15 647 593 176 666 625 460 166 82 215 616 62 254 327 492 420 411 586 58 643 305 137 316 => the sum is 9048 rather than 8801
Problem in row 24: 649 466 100 63 406 537 594 78 605 473 393 633 651 459 256 235 188 646 72 476 369 177 130 433 524 56 => the sum is 9669 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 424 513 459 547 631 478 606 394 261 172 376  53 270 180 502 216 192 262 106 649 508  65  16 413  77 431
 185 302 188  80 579 669 252 415 450 545 553 266 179 388  36  44 105 309  42 422 612 604  60 354 620 542
 171 386 614 118 258 438 414 115 641 650  63 660 509 260 251 550 205  52 328 159  18 174  59 638 552 518
 618 675 430 259 322 581 173 648 352  90  11 213  12 237 295 114 603  49 190 592 264 635 539  66 534 299
  85  86 375 348 667  50  27 273   4 671 111 175 303 412 408 558 506 656 659 368  13 571 215 563 596 101
 404 220 599 331  75 304  79 575 662 602 446 442 255 186  19 496 344 197 554 178 522 244 289 246 475  57
 357 381 184 204 578 465 519 503 160 177 642 516  10 182 668 485 113 132 203 464 491 597  54 390  88 238
 418 224  91 569 510 449 653 483 451   6 146  62 170 647 565 187  51  70 476 326 665 622  35 239 484 202
  83  56 441   2 108 229 487 609 472 325 570 335 623 585 616 576 130 643 588 524  45  81 535 396 595 112
 198 582 445 566 457 153 406 145 200 437 427 587 358 107 195 181 136 176 626 102  25 657 387 646 149  89
 201 525  95  48 211 231 405 254 573   9 670 557 562 156  97 365  93 580  31 532 235 402 651 652  73 593
 353 337 209 466 222 421 493  23 361 489 234 676  40 110 230 305 411 340 360 206 407 364 533 409 279 523
 395  69  78 555 347 312 526 377 444 281 374 157 367 371 366 233 529 362 189 349 227 531 640  20 370 332
 319 285 320 336 314 334 343 329 323 363 355 548 359 385 342 333 318 300 306 310 317 292 346 384 313 327
 378 584 561  28 454 166 601 245 598 666 577 341 435  30   5 621 293 403 505  21 440  14 351 297 163  24
 124 241 307 494 275 316 290 269 287 283 286 280 551 633 356 256 257 339 288 268 253 272 243 627 589 417
 221 474 470 637  46 549 613 473   1 247 495 193 167 664 477 122 439  22  76 250 469 129 594 158 277 538
 590 123 673 448 265 629 116  99 207 126 617 142 536  61 568   8 658 161 400 223 636 263 644   3 249 504
 514 453 140 543 393  34 350 154 151  39 194 133 661 605 291 498 278 559 321 447 468 461 117 298 301 398
 564 452 544 392 144 236 137 481 482 462 214  98 634 282 164 100 456 611 345 121 434 429  38 373  87 521
 500 645 109 423 397 155 330 199 276 152 165 225 458 632 169 416 674  15 162 455 125 379 460 432 420 428
 436 131 567 520  67 624 284  68 128 210 410 148  74 219 497 382 419 512 591 443 271  92 608  94 655 479
 168 183 212  41 228 296  72  37 615 488  43 654 104 540 389 663 600 628 425 119 515 490 242 527  55 467
 191 586 120 556  82 511 208 433  26 499 372 486 463 308  96 143 583 401 426  47  29 196 380  84 399 507
 294  71 232  64 630 138 150 672 139 311 315 383 574 141 560 625  17 530 546 607 240 103 517 218 369 147
 610 217 338 226 541  33 267 528 537 501 135 471 127 480 639 324 391 492  58 619 572 134 248 274  32   7

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00013e+07us (= 10001.3ms, 10.0013s)
Wall-clock time (full program): 1.00532e+07us (= 10053.2ms, 10.0532s)
Satisfaction error: 6
Number of search iterations: 3341
Number of local moves: 2789 (including on plateau: 2743)
Number of local minimum: 24 (including on plateau: 314)
Number of resets: 0
Number of restarts: 0

Problem in row 9: 83 56 441 2 108 229 487 609 472 325 570 335 623 585 616 576 130 643 588 524 45 81 535 396 595 112 => the sum is 9766 rather than 8801
Problem in row 10: 198 582 445 566 457 153 406 145 200 437 427 587 358 107 195 181 136 176 626 102 25 657 387 646 149 89 => the sum is 8437 rather than 8801
Problem in row 18: 590 123 673 448 265 629 116 99 207 126 617 142 536 61 568 8 658 161 400 223 636 263 644 3 249 504 => the sum is 8949 rather than 8801
Problem in row 22: 436 131 567 520 67 624 284 68 128 210 410 148 74 219 497 382 419 512 591 443 271 92 608 94 655 479 => the sum is 8929 rather than 8801
Problem in row 24: 191 586 120 556 82 511 208 433 26 499 372 486 463 308 96 143 583 401 426 47 29 196 380 84 399 507 => the sum is 8132 rather than 8801
Problem in row 25: 294 71 232 64 630 138 150 672 139 311 315 383 574 141 560 625 17 530 546 607 240 103 517 218 369 147 => the sum is 8593 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 644 261 493  30 381 611 315 423 671 664  15 509 163 555 293 127 188 169 193 117 100 443   5 417 640 374
 580  59  58 410 411 444 137  84  11 401  21 167 471 352 217 622 176 573 547 613 463 587 466  63 267 601
 675  97 597  18 128 210 413 593 328 173 504 312 524 341 131 499 490 170 365 325 330  20 207 139 557 655
 246 126 476 301  65  91  98 132 390 510  27  33 297 540 474 276 502 230 641 535 220 171 627 554 102 642
  24 461 179 323  68 308 288  71 513 396 197 114 638 446 617 191 155 657 532 247 205 346  38 674 506 632
  43 605 360 203 563 481 136 264 619 265  90 668 150 206 209 277 248 266 503  55 497 477 492 645 226 253
  64  96 576 483 145 673 363 515 123 626 570 165 620 595 462 183 623 612 201 498 245 594 345 278 380  19
 339 254 455 579 394 538 521 336 271 608 146 240 158 512 225 662  77 488 152  25 495 548 436   7 607 556
 473 456  67 178 236 569 143  62 468 190 469 442  22 302 369 451 552 447 453 454 430 514  48 575 162 269
 518 523 151 465 235 625 562 149 258  61 202 581 224 529 118   1 439 161 590 450 598 331 530 391  35  74
 409 404  80 384 414 445 364 429 405 408 440 419 361 371  83 368 424 366  10 379 422 372 392 129 415 108
 182  37 658 475  34 324 491 643 101 148 367 416 385  75 449 376 387 216 435 386 111 649 154 542 508 252
 383 400 457 356 354 357 418 338 344 306 347 313 358 314 399 337 362 342 184 322 355 359 320 389 370  17
 212 234 284 650 631  85 393 388 484 335 283 584 545  92  28 544 334 141 229 223 298 437 550 618  42 157
 531 519 572  29 214 539 621 661 606 470 156 353   9 659 637 218 272  78 124 317 242  45 303  46 421 159
 501 243 287  60 120 432 672 591  49 185 307 610 135  89  86 425 667 592 333 237 420 112 305 329 412 602
 294 647 231 291 646 195   6 568  88 106 648 516 199 373 377  56 382  95 479 485 583  51 651   8 285 541
 147 215 198 558 332 144 192 522 458 299 511 487 255 292 467 566  81 433 262 669 327 222  87 615 119 343
 172 251 628  82 604 280 578 219 653 571 260 239 398 177 505 427 122 174 153 186 452 213 232 496 270 459
 268 520 589 616  12 295 180 259  79 464 603  69 318 319 304 574  76 525 654 200 349   2 663 110 189 564
 296 551 397  94 340  72  57 431 316 517 666 559 460 536 480 109  26 241 403 402 116 596 553 407  16 160
 586 629  70 472 257 249 256  40 227 228 107 208 406  54   3 600 181 634 577 130  36 263 238 168 133 438
 104 676 533 321 543  50 652  73 526 175 546  39 588 221 434 486 639 311 273 233 378 166   4 134 500 196
 375 142 105 670 665 274 582 534 194 348 567 103 656 279 660  99 310  23 244  93 428  41 115 565 448 281
 614  44 286 204 482  32 250 187 125  47 326 624  66 282 636  52 560 507 211 635 164 609 599 489 630 140
 121 351  14 549 527 478 113 289 494 300 426  31 395 290 138 275 528 350  53 585 537 633 441  13 561 309

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00531e+07us (= 10053.1ms, 10.0531s)
Satisfaction error: 6
Number of search iterations: 3616
Number of local moves: 3025 (including on plateau: 2978)
Number of local minimum: 23 (including on plateau: 357)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 246 126 476 301 65 91 98 132 390 510 27 33 297 540 474 276 502 230 641 535 220 171 627 554 102 642 => the sum is 8306 rather than 8801
Problem in row 5: 24 461 179 323 68 308 288 71 513 396 197 114 638 446 617 191 155 657 532 247 205 346 38 674 506 632 => the sum is 8826 rather than 8801
Problem in row 7: 64 96 576 483 145 673 363 515 123 626 570 165 620 595 462 183 623 612 201 498 245 594 345 278 380 19 => the sum is 10054 rather than 8801
Problem in row 8: 339 254 455 579 394 538 521 336 271 608 146 240 158 512 225 662 77 488 152 25 495 548 436 7 607 556 => the sum is 9629 rather than 8801
Problem in row 22: 586 629 70 472 257 249 256 40 227 228 107 208 406 54 3 600 181 634 577 130 36 263 238 168 133 438 => the sum is 7190 rather than 8801
Problem in diagonal 1: 374 267 139 627 346 497 498 152 447 439 368 449 314 545 353 307 106 458 219 180 72 257 321 105 44 121 => the sum is 8005 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 621 675  43 106  33 175 236 323 390 249 620  25 612 591 203 252 626 522  99 151  63 300 386 635 235 630
 597 326 119 202 580 417 508  49 268 531  15 260 486 250  22 661 648 289 103 554 656  12 435 189 387 237
  91 211 467 426 639 489  42  84 180 341 625 607 259  98  79 421 253 347  62 601 470 557  19 589 453 391
 515 263 234 535 501 299 126 117 110 416 547 577 278  93 631  32 550  40 436 242  23 451 563 517 247 458
  82 534 651 674 600 264 397 472 290 176 579 500  71 190 398 160 156  37 583 427 147 561 124 570   8 150
 177 483 673 491 122 158 351 348 475  27 516 482 628 440 172 529  31 545  16   1 540  52 629 383 504  28
 233 430 452 205 183 666  76 437 671 498 308 330 493 658 257 148 492 164 411 513 116 100 510 112 314  24
 123 413 574 633 301 115 627  17 133  45  69 224 541 538  59 619 527 632  47 361 593 127 652 173  55 603
 284 544  29  10 166 659 104  30 487 399 558 530 479 316  60 143 468 433 428 618 407 459 389 229 461 111
 304 275  97 623 495 276 575 197 611   7 135 481 438 193 476 309 362 609  85 396 560 410 149 335 317  86
 457 145 456 188 141 128 581 392 208 465 223 552 377 494 279 450 134 524 511 178 405 199 195 305 553 261
 406 307 613 381  80 401 382 420 539 641 376 142 171 443 327 217 140 191 568 384  87 474 368 454  61 228
 375 320 369 350 363 354 344 364 346 339 355 329 342 366 338 353 315 322 367  26 324 379 360 374 371 356
 154 595 267 272 385 256 325 653 645 480 101  14 588 269 477 657  56 434  35 464 159 423 546  36 179 331
 291 555 388 576 566 113 409 129 372 200 215 169  81 395 646 412 415 251 643   9 239 157 448 444 634  44
 497 182  64 345 615 152 509  92   4 230 533 402 196  41 536 170 114 662 636 559 298 638 213 478  68 567
 647 446 254 449 460 473   5 549   6 562 293 192  94 488 120 155 287 442 286 281 598 174 565  21 578 161
 295  38 221 118 418 590 642 246 226 297 282 218 664 400 622 311  74  11 306  39 241 660 606 302 334 640
 447  77 548 586 573  13 231 505  83 201 139 288 273  18 404 216 572 414 644 670 285 186  53 359 424 592
 463 167 313 507 187 650 206  54 318 663 198 212 181 445 462 551 274 608  88 543 328 336  66 485 225 271
 564 245 132 136 532 138 667 610 349 210 373 310 352 121 265 571 432 105 262 220 107 248 243 584 596 429
 676 604 419 340  78 542 523 332 616 512 222 168 109 499 403 227 519 108 496 184 594 102  89   3 258 393
  57   2 441  72 153  73 232 585 422 605 525 624  34 296 569  48 665 238 378 655 617 537 209 204  46 514
 185 520 294 214 130 649  51 669 431 131 370 668 357 365 582 380 283 163  95  90  67 266 146 637 502 556
 240 125 518 292  75 471 162 455 484 255 528  58 194 587 270 506  65 244 602 358 469 394 526  50 654 219
  20 319 165  70 425 280 490 672 137 321  96 439 503 207 144 303 343 466 614 277 408 599 312 333 337 521

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00541e+07us (= 10054.1ms, 10.0541s)
Satisfaction error: 3
Number of search iterations: 3512
Number of local moves: 2738 (including on plateau: 2688)
Number of local minimum: 43 (including on plateau: 351)
Number of resets: 0
Number of restarts: 0

Problem in row 17: 647 446 254 449 460 473 5 549 6 562 293 192 94 488 120 155 287 442 286 281 598 174 565 21 578 161 => the sum is 8586 rather than 8801
Problem in row 22: 676 604 419 340 78 542 523 332 616 512 222 168 109 499 403 227 519 108 496 184 594 102 89 3 258 393 => the sum is 9016 rather than 8801
Problem in diagonal 1: 630 387 589 563 561 540 513 47 433 362 450 327 366 588 169 533 562 226 505 206 138 78 72 294 125 20 => the sum is 9284 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 674 217 534 338 104 299 103 560 172 667  22  28 472 296  71 590 632 524 408 424 107 259 561 572 306 650
 183 653  23 613   4 356 263 668 330 363 354 208 427  85 454 265 230 269 444 350 300 319 501 438 466 235
  11  92  50 413 388 624 462  83 579 485 448 253 371 656 441 176 475 573 180  34 291 581 118 601 152 264
 367 458 185 587 343 129 404 605 121 386 607 592  66 596 397  81 360 184  61 463 340 600 204   7 102 556
 586 362 286 510 580 597 480 124 101 541 135 213 492 628   2 133 645 382 652 209 226 512  39 112 178  76
 544 417 379 535 452 378 128  82 546 337 528 134 603  18 117 519 540 461 139  35 525 138 431 191 127 497
 310 276 457 245 255 602 272 120 326 593 266 446 355 464  10 666 552 582 529 557 504 210 279 327 636  20
 465 309 165  29 215 169 154 479 633 250 638 646 168 238 115 157 502 660 527  51 575 550 205 203 366 332
 171  32 537 293 654 673 342  93 469  77 123 173  49  46 509 311 517 491  97 637 459 202 484 564 292 506
 324 500 261 437 620  15   3 374 433 416 381 348 177 456 422 547 436 281  86 644 401  99 496 282  26 336
 455 563  59  41 549 395 357 182 254 108 398  69 664 242 583 385 218 419  57  37 507 392 220 648 609 390
 647 228 399 161  84 447 608 476  80  21 599 403  67 131 369  30 155 554  24 449 260 148  27   8 227 584
 315 158 566 672 240 231 372 389  38 622  48 396 333 376  13 294  14 639 518 658 140 420 591 532 283 429
 358 317 352 347 328 400 298 370 302 273 453 322 329 323 297 166 307 321 421 345 344 533 610  44 316 325
  65 214 303 196 669 132 318 160 570 471 542 334 301 236 508 585 305 270 221 312 402 434 146 375 562 170
 232 675 109 159 219  63 445 410 604 384 246  17 567 548 287 515 251 503  96 145 621 175 212 383 495 440
  90 523 520  95  55 483 164 661 280 248 290 473 558 308 643 241 192 201 271 516 393  88 635 243 555  75
 195 143 200 642 423  58  16 179 256 530 487 576 470 612 577 222 588 206 267  94 665  25 268 478 377 247
 252  72 514 499 511 234 631 224 539  54 505 474 313 559 662  47 616  43 189 368 151 443   9  45 442 405
 435 594 531 414 126 163 606 659 295 153 162 545 425  74 595 349   6 186 538 130 188 387  12 598 486 144
 617 391 167 275 149 156 634 415 335 125 569 536 136 277 194 629 119 346 304 619 150 649 657 105 211  36
 284 198 655 565 137 641 571 314 670 249 174  70 141 439 513 489 193  89 522 262  40 122 671 494  91 207
 521 288 676  52 274 320 229  68 364 543 233 187 223 110 618 498  60 428 432 190 106 409  64 615 663 630
 353 625  33 216 426 488 406 365 244  98 225 468 526 553 114 574 451  73 551 418 614 197 411  31 199 142
 285  19 467 351 589 490 257 380 113 626  79 239 481 100 237   1  78 111 640 460 450 341 339 412  56 482
  62 477 373 116 407 258 278 361 147 181 289 651  87 430  53 331 359   5 627 394  42 568 611 493 578 623

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00532e+07us (= 10053.2ms, 10.0532s)
Satisfaction error: 5
Number of search iterations: 3225
Number of local moves: 2662 (including on plateau: 2614)
Number of local minimum: 17 (including on plateau: 327)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 674 217 534 338 104 299 103 560 172 667 22 28 472 296 71 590 632 524 408 424 107 259 561 572 306 650 => the sum is 9590 rather than 8801
Problem in row 7: 310 276 457 245 255 602 272 120 326 593 266 446 355 464 10 666 552 582 529 557 504 210 279 327 636 20 => the sum is 9859 rather than 8801
Problem in row 12: 647 228 399 161 84 447 608 476 80 21 599 403 67 131 369 30 155 554 24 449 260 148 27 8 227 584 => the sum is 7186 rather than 8801
Problem in row 13: 315 158 566 672 240 231 372 389 38 622 48 396 333 376 13 294 14 639 518 658 140 420 591 532 283 429 => the sum is 9287 rather than 8801
Problem in row 25: 285 19 467 351 589 490 257 380 113 626 79 239 481 100 237 1 78 111 640 460 450 341 339 412 56 482 => the sum is 8083 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 450 446 105   5 487 422 272 474 520  11 539  26 134 480 296 590 236 642 624 224  41  50 533  83 452 659
 485 676 395 605 502   1 525   8  90 337 221  61 377  21 154 465 338 528 101 131 199 596 392 464 628 501
 651   6  57 223 594 381 612 672 159 627  73 243 623 635 264 234 262 130 366 648 211 106 563 562 143  14
 447 657 396 481 268  75 478 551  85 139 128 122 608 553 619 535 658 123 197 188 408 132  77  53 643 180
 327 389 202  82 574 460 144 435 111 573 515 589 340 385 161  70  88 201 489   7 397 151 473 546 549 543
 492 363 190 178 355 153 367 258 585 357 542 550 242 491 174 442 156 380 488 173 522 471 534 254  39  45
 671 110 307 265 674 538 107  79 530 448 537 560  36 212 109 510 532 228 239 402  94 358 284 482 186 303
 209  63 527  48 218 245 667 475 646  49 575 359 135 213 472 127 518 263 570 286 281 649  98 653 388  67
  30  17 225 379 282 654 559  35 423  86  29 394 595 114 505  15 165 468 620 625 372 531 256 335 650 437
 119 216 310 421 455 241  84 411 406 451 193 181 404 630 255 292 416 445 148 420 168 430 645 586 215 259
 270 433 587 427 203  28 113 116 593 636 348 524 508 410 227 391 652 582  89  31 136 561 240 354 238 104
 540 230 456 315 196 177 163 639 179  46 250 267  76  64 407 509 557 603  38 597 601 167 217 490 548 469
 336 345 393 412 352 331 365 353 383 343 376 311 326 346 387 364 323 329 317 361 332 374 356 324   2 360
 350 341 330 351 349 321 347 273 362 342 439 302 325 298 339 305 333 306 382 409 313 299 319 443 334 289
 285 294 328 287 318 300 308 309 312 461 251 517 279 293 314 244 295 662 160 638 278 206 316 297 235 614
 400 457 486 252 523 598 440  97 398 210 185   4 529 647 466 584 322 247 276 541 554 304 158   9  81  33
 147 514 571 200 499 261 184 198 280 275 205 108 666 266 640 195  13 484 253 370 613 604 470 375  37 373
 521 507  19 616  56 670  68  99 103 483 500 449 390 257 405 459 141  66 133 564 269  27 512 419 399 467
 599 558 145 444  58 138  54 137  69 140 463 661  25 274  32  65 536  51 556 424 656 576 609 441  22 579
  43 121 384 644 413 431 233 479 519 260 226 626 547  18 566 120 577  34 369  78 458 629 415  55 386 170
  59 291  60 526 183 277 414 513 208 166 663 220 182 632 494 634 631 157 611 249 146  80 655 118 477 155
 432 175 498  92 191 552 504 545 162 665 417 497 102 371  42  12 493 567 565 171 271 229 115  93 434 606
 172 591 615 169  40 192 637 621  23 222 117 453 588 496 126 207 248 511 664 320 403 246  10 152 610 164
 572 214  71 568  95 436 569 237 673 516 583 149  91 100 668 660  87 176 401  52  24 506 418 495  72 368
 150 675 503 669 283 301 125 187 544 580 232  47 219 592 555 344 204 429 129 602 578 288  74  96 607 425
  44 112 641 142 633 618 462 600 438 378 194 581 454   3 124 428  20 189  16 290 476 231  62 622 426 617

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00529e+07us (= 10052.9ms, 10.0529s)
Satisfaction error: 5
Number of search iterations: 3885
Number of local moves: 3215 (including on plateau: 3168)
Number of local minimum: 23 (including on plateau: 395)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 651 6 57 223 594 381 612 672 159 627 73 243 623 635 264 234 262 130 366 648 211 106 563 562 143 14 => the sum is 9059 rather than 8801
Problem in row 18: 521 507 19 616 56 670 68 99 103 483 500 449 390 257 405 459 141 66 133 564 269 27 512 419 399 467 => the sum is 8599 rather than 8801
Problem in row 19: 599 558 145 444 58 138 54 137 69 140 463 661 25 274 32 65 536 51 556 424 656 576 609 441 22 579 => the sum is 8312 rather than 8801
Problem in row 23: 172 591 615 169 40 192 637 621 23 222 117 453 588 496 126 207 248 511 664 320 403 246 10 152 610 164 => the sum is 8597 rather than 8801
Problem in row 25: 150 675 503 669 283 301 125 187 544 580 232 47 219 592 555 344 204 429 129 602 578 288 74 96 607 425 => the sum is 9438 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 342 349 299  16 668 558 494 274  60 268  84 514 223  12 171 135 582 484 315 289 576 138 430 361 513 646
 676 105 322 413  41 524 374  59 602 545 183  89 504 479  50 491 273  20 381 359  91 210 304 644 620 442
  57 577 658 153 150 269 631 260 124 219 113 263 239 445 104 298 450 377 622 220 335 502 476 607 160 492
 613 618 259 509 529 117 272 255 466 569 356 119 266 122 598 630 229 389  88 116 470 114 580 154  51 312
 441 404 252 278 629 192 190 586 215 500 347 463 434 211 382  54 185 387 547 182 486 531 187  23  69 626
 667 650 475 599 250  82 256  49 608 300 306  94 125 348 233 530 639  25  71  78 247 600 617 516 649 161
  34 311 561 357 627 597 544  48 241  14 594 324 184 517 605 152 351  10 437 526 433 489 376  44 279 146
 162 414 128 542  65 316 432 619 641 174 251 452 634 222  87 186 589 331 482  74 662 193 230 188 528 199
  68 189 384 221 431 293 271 232  29 603 497  31 415  81 467 147 449 461 422 474 226 403 236 666 436 669
 164  58 118 362 451 653 401 584 130 395 671 571 168   1 134  93 419 366 102  21 616 455  17 652 472 234
 254 386 604 108 265 313 551 427 423 636 283 519 144 412 573 340 285  97  42 579 176 103 360 651 141 129
 633 574 400 197 288 341  52  83 407  37 465 458 307 562 411 332 549 510 444 543 126 385 508  96 225 596
 369 421 180 406 326 372 358 352 339 350 309 355 498 317 416 368 330 346 379 380 258  32 336 321 318 365
 308 672 632 120 460 566 204 261 282 101 408 487 337 328 638 157 237  86 290 370 270 231  67 625 397 267
 238 410   9 565 173 170 286 121 522 503 645 334  70 163 276  72  79 656 224 418 136  18 485  63 140 292
 655  35  85 242 398  22 477 480 546 167 302 635 610 488 165 447 338 563 575  76 420 424 177  80  11 383
 647 327   4 394 578 253  47 521 426 301 550 539 393 159 195 628 363 611 402 583 151 564 660  45 439 145
 319 296 495 499 123 505 592 158 249 559 142 425 453 643 110 606 375 218 275 262 227 284 111 345  92 438
 440 205 200 443 228 235 137 527 206 581 198 587 572 175 659 478 554 166 133 297 637 593 240   7 213  90
 557 446 320 209 333  43 178 601 172  53 454 511 654 378  24   5 143 473 661 179 207 556 191 532 396 525
 214 534 536 481   3 169 675 325 459 257 496  40  36 567 344 560 515  77 555 642   2 287 457 329 202  39
 131 507 483  46  98 469 468 305 353 585 373 112 156 248 364 264 203 623 127 520 323 399 570 367 568 139
 295  33 553  38 294 614 493 246  15 490 354  30 518 621 291 664 244 343 155  28 535 428 132 624 657 106
 409 201  62 281 612 670 391 390 665  56 148 371 471  99 552 303  55 310 615 464 548 538 100  27  75 388
  95   6 673 674 280  66   8 448 506  26 208 417 194 540 429 405 216 595 245 533 181 107 314 591 609 435
  13  73 109 648 501 392  19 590 115 512  64  61 196 663 523 456 149 277 212 588 462 217 640 243 541 537

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00005e+07us (= 10000.5ms, 10.0005s)
Wall-clock time (full program): 1.00533e+07us (= 10053.3ms, 10.0533s)
Satisfaction error: 5
Number of search iterations: 3453
Number of local moves: 2876 (including on plateau: 2827)
Number of local minimum: 35 (including on plateau: 337)
Number of resets: 0
Number of restarts: 0

Problem in row 6: 667 650 475 599 250 82 256 49 608 300 306 94 125 348 233 530 639 25 71 78 247 600 617 516 649 161 => the sum is 9175 rather than 8801
Problem in row 10: 164 58 118 362 451 653 401 584 130 395 671 571 168 1 134 93 419 366 102 21 616 455 17 652 472 234 => the sum is 8308 rather than 8801
Problem in row 12: 633 574 400 197 288 341 52 83 407 37 465 458 307 562 411 332 549 510 444 543 126 385 508 96 225 596 => the sum is 9529 rather than 8801
Problem in row 15: 238 410 9 565 173 170 286 121 522 503 645 334 70 163 276 72 79 656 224 418 136 18 485 63 140 292 => the sum is 7068 rather than 8801
Problem in row 17: 647 327 4 394 578 253 47 521 426 301 550 539 393 159 195 628 363 611 402 583 151 564 660 45 439 145 => the sum is 9925 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 358 480 320 670 206 282 469 289 467 197 522  15 649 190 164 301  95  21 102 510 666 652 120 106 294 656
 601 314 539 313 112 456 296 481 419 508 533 356  58 260 568 295 380   9 196 628 493 214  78  67 506 121
 175 350 553 437 580 564 115 193 592 520 549 161  14 476 593  88 511 227 579 130 671 373 431  10 200 618
 107 606 446  64 163 405 591 659  45 104  81 466 471 487  60  66 521 563  33  68 389 218 626 411 176 351
 156 195 330  37 557 418 629  36  35 615 584 425 326 490 572 492 111 401 375 300 585 485 219 160  17 251
  74 630 624 639  40 523 167  97 571 122 191 636 199 365  20 642 504 198 397 676 526 138 242  12 194 374
 305  51 477 548 371  48 110 631 126 311 316 239 173 395 233 450 528 230 152 546 547 407 323 451 345 488
 157 594  70 421 610 531 237 515 635  94 570 274 338 170  23 507 139 516 479 259 306 484  75 598 116  83
 558 554 250 400 420 269   1 500 136  47 470  11 434 118 525 133 412 453 223 565 135   6 398 662 478 643
 378  56 203 209 390  55 348 496 150 243 641 657 169 494 315 124 426 432 357 447  16 127 556 370 262 388
  19 271 442 498 658 275 387 620 224 361 436 232 519 131 604 448 318 439 441 362  26 347 475 100  54 114
 463 575 255 650 129 368 599 567 235  61 141 573 113 482 346 648 309 179  90 433  59  22 499 503 655 461
 367 386 288 438 459 297 145 415 307 399 265 403 651 332 299 236 376 360 268 308 377 317 261 143 363 341
 422 455 518 187  84 185 134 473 355 483 212 596 252  93 464 204 613 675 424  28 254 529 270 668 166  57
 244 321 339 281 310 336 354 312 272 385 253 329 468 569 366 393 249 343 560 327 221 291 337 234 404 303
 220 502 137  99  79 202 555 109 532 396 280 588  80 622 428 328 285  89 540 495  29 359 644 364 653 186
 633 213   4 273 562 602 497 334 619 158 427 228   5  71 394 319 222 616 279  72 444 182  53 600 625 369
  76 180 632 257 263 103 140 353 245 406 240 247 322 597 216 188 486 293 340 217 440 611 646 264 267 215
  43 123 501 614 462 423   8 149 210 603 416 144 577 435 342 534  73 672 172 105 566 383 177 283 384 402
 638 174 586 201 290 178 325 458 248 647  85 155 660  63 154 535 207 517 509  62 544 408 324 443 304  86
 333 381 449 189 277 208 181  77  41 183 527 543 524 550 609 225 505 561 664  25  42 537 352  38 153 627
 410 457 409 578 147 595 640 132  98 229 231 514 612 148 372 530 417  92 241 246 298 663  31 142  96 623
 559 331 302 168 552 673  46   3 669 582  39  52 474 146 576 542 286 284 171 287 392 335 108 454 605 165
 429 414  13  27 460  49 590 226 634 667  34  65 205 151 192 541 545 162 258 645 349  18 617 665 256 589
 489 101  82 512  69 119 654 465 491 430 574 513 117 292 238  30 276 125 413 608  44 536 278 472 607 266
 587  87  32  91 551 637 583 211 445  50 184 379 391 674 128   2   7 344 538 452 382 159 661 581 621  24

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00002e+07us (= 10000.2ms, 10.0002s)
Wall-clock time (full program): 1.00832e+07us (= 10083.2ms, 10.0832s)
Satisfaction error: 7
Number of search iterations: 4038
Number of local moves: 3322 (including on plateau: 3277)
Number of local minimum: 35 (including on plateau: 408)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 175 350 553 437 580 564 115 193 592 520 549 161 14 476 593 88 511 227 579 130 671 373 431 10 200 618 => the sum is 9710 rather than 8801
Problem in row 4: 107 606 446 64 163 405 591 659 45 104 81 466 471 487 60 66 521 563 33 68 389 218 626 411 176 351 => the sum is 8177 rather than 8801
Problem in row 10: 378 56 203 209 390 55 348 496 150 243 641 657 169 494 315 124 426 432 357 447 16 127 556 370 262 388 => the sum is 8309 rather than 8801
Problem in row 12: 463 575 255 650 129 368 599 567 235 61 141 573 113 482 346 648 309 179 90 433 59 22 499 503 655 461 => the sum is 9415 rather than 8801
Problem in row 18: 76 180 632 257 263 103 140 353 245 406 240 247 322 597 216 188 486 293 340 217 440 611 646 264 267 215 => the sum is 8244 rather than 8801
Problem in row 22: 410 457 409 578 147 595 640 132 98 229 231 514 612 148 372 530 417 92 241 246 298 663 31 142 96 623 => the sum is 8951 rather than 8801
Problem in diagonal 0: 358 314 553 64 557 523 110 515 136 243 436 573 651 93 366 328 222 293 172 62 42 663 108 665 607 24 => the sum is 8678 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 667  23 270 424 477 636 481 413 227 222 119 449 572   2 445 254 472 516 114 319 416 142 283 436 101 321
 217 170 158 165 660 303 193 182 113 498 633  97 388 524 669  77 156 121 406 634 600  29 650  57 666 435
 454 421 662 426  64 322 670 177 548  62 561 267 587 511 250 642  79  21 149 582 181 192 256 143 490  84
 360 229 187 155 255 618 397 200 411 197 450 115 593 347  15 464  56 183 615 108 412 356 167 506 628 549
  10 455 325 569 522 463 361 299 520 136  89 127 578  31 186 502 282 620 296 470 179 617  99  67 495 503
 276 597 514 354 396 442 151 157 291  82 496 348 239 241 221  92 483 456 608 518 598 621 352  86  34 148
 138 403 131 300 527 107 573 469 504 581  59 512 568 203 595   6 521 564  41 648 164 312 365 205 161 144
 358  36 448 343  47 188   9 507 476 603  66 565 128  39 224 583 120  16 478 418 665 651 577 519 676  28
 571 308 589 146 460 111  60 616  43 604 378 219  20 359 345 491 510 479  33 405 591 109 385 248 137 584
 531 468  98 145 333 232 390 277 488 404 611 625 433 655 446  22 124 316 415  30  46 557  32 540  40 543
 194 166  83 594 471 629 526 645 236 499 173 231 329 641 261  49 489  61 487 473   8 639 575 100  18 485
 271 574 195 160 420 482 102 631 214 579  95 243 528 610 434 202 185  81  65 147 668 357 643 159 233 523
 414 367 315 294 279 373 515 340 560 337 123 408 369 317  42 374 307 338 234 376 302 480 344 238 423 332
 324 364 242 262 306 429 401 292 342 266 438 387 287 328 289 596 399 353 395 310 334 327 320 212 372 226
 627 566  88 380  71 204 140 218 370 362  14 199 251 505 375 541 657  87 552 355  78 371 525 588 555 122
 398  11 417 169  91 311 172 466 562 132 259 451 447 313 430 235 331 551 652 592 245 150 457 116 384 459
  45  53 377  44 281 383 428 576 257 389 106 559 213  96 461 607 168 640 153  13 298 606 290 672 484 602
 240 530  52 538 230 126 624 613 112 475 547 638  19  25 632  68 439 453 141 220 623  48 653  51 494 210
 394 609 663 619 244 129 513 223 346 206 467 104 288 335  24 492 278 366 117 105 452 443  76 533 425 350
 441   4 323 301 658 330  90 225 269 118 654  80 545  37 501 539 508 263 431 252  94 580 174 444 318 622
 644 286   3 493 554 563 326  72 675 275 260 550  17 293 534 626   7 486 265  35 391 209 191 336  54 656
 309 529 556 422 130 635  26 630 599 535 614 134 103 402 110  74 546  75 273 586 295  55 386 258 272 247
 198 304 542 216 211  12   5  69 268 284 458 432 673 637 612 237 659 201 517 382 407 341 176 537 208 215
 351 590 536 196 410  70 605 427  58 339 285 368 184 392 409 246 305 661 465 381  93 125  85 674 297 249
 180 567 474 437 497 133 664  27  38 154 175 253 280 558  63 419 647 393 314 178 509 349 139 544 646 163
 189 171 553 649 207 570 379  50 274 462 671 440 162 400 228 363  73 500 585 264 152 135 601 532 190   1

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00531e+07us (= 10053.1ms, 10.0531s)
Satisfaction error: 3
Number of search iterations: 5153
Number of local moves: 4271 (including on plateau: 4223)
Number of local minimum: 49 (including on plateau: 475)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 360 229 187 155 255 618 397 200 411 197 450 115 593 347 15 464 56 183 615 108 412 356 167 506 628 549 => the sum is 8573 rather than 8801
Problem in row 8: 358 36 448 343 47 188 9 507 476 603 66 565 128 39 224 583 120 16 478 418 665 651 577 519 676 28 => the sum is 8768 rather than 8801
Problem in row 11: 194 166 83 594 471 629 526 645 236 499 173 231 329 641 261 49 489 61 487 473 8 639 575 100 18 485 => the sum is 9062 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 452 254 274 401  64 133  47  54 157 386 517 282 100 134 587 445 424 232 537 345 132 645 333 633 621 612
 247 671 107 342   3 503 433 249 143 425 663 642 102 484 448 350 330 202  10 465  62 185 585 639 489  22
 255 440 620 291 523   5 634  81 357 241 339 301 544 502  65  50 239 364 449 643 394  34 563  72 545 250
 146 137 450 611  85 296 334 538 592 442 393 522 117 653 307   1 190 387 207 395 217 626 159  14 654 328
 360  42 413  30 566 304 230 420 672 289 234 588 557 377  90 390 317 616  87 201 244 670 417 569 204 183
 577 605  20 316 655 553 367 406 261 494  11 138 482 200 163  19 453 579 286 632 439 229  67 121 356  68
  17 492 556  83 368 459 536 366 646 438 169 227 173 108 470 212 294 295  92 299 549 574 313 542 300 223
 309 112 583 457 343 153 493 476 508  84 184 491 238 469  21 499 391 136 479 236  52 472 647 477   8 483
 176 213 528 160 597 258  15 559 473 664 546 220 464  26 551 118 674  58 326 162 198 486 410 447  76 396
 667  63  75 145 422 525 409  66  39 644 455 488 155 130 540 656   2 260 266 327 640 369 219 290 408 541
 131 341 272 435 324  74 631 205 348 171 379  49 485 125 214 561 187 606 414  89 182 595 432 514 659 378
 151 119 209 676 613 103  93  57 568  29 421 331 548 571 215 451 416 392 600 529 380 543  18 402 265 101
 372 572 521 622 122 398 596 586 400 114  73  53 363 534 349 218 383 106 578 315 340  88 168 443 405  82
  28 312 273 669 441  40  56 259 161 158 148 275 256 318 599 496 194  51 662 584 268 376 277 338 323 515
 604 178 319 658 283 564 487 306 526 257 264 661 237 292 203 320   6 263 305 147 467 270 321 311 267 285
 466 336 332 325 180 248 505 222 355 495  37 444   4 627 637 280  94 565  48 603 426 490 139 253 428 262
 468  27 211  13 281 199  31 614 221 166 598 174 608 547 298 142 278 430 507 415 518  44 660 434 480 437
 231 359  79 188 196 353 303 641 419  70 293 129 423 206 513 636 458 195 362 354 216 352 550 504 170 601
 638 512 497 240 154 243 335 235 361  46 412 224 284 165 128 615 650  23 193 580 506 252 581 120 344 463
  59 591 365 105 461 652 126 666 527 462 519 329  69 276 210 582  61 115 251 150 657 314 436 208 446 164
 532 140  41 460 673 346  71 172 404 629 498 630 177  43 242 127 192 594 110 144 179  98 628 602 511 558
 418 302 113 520 403 607 456 478  80 226 189 552 308 431 337 124 573 156 539 531 310  96 560  35  60 397
 149 648 635  99  55 617 625 111 186 501 197 411 389 624 385 371 618 530 382 167 593 191  91 279 152 554
 570 135 609 322 246 370 271 567 287 535 575 141 668   9 347 555 388 481 104  16 181 509   7  95 516 297
 533 610 228 524 510 123 288 351  77 454 649  25 399 576 475 225 427 665 623  97  32  24 175  86  36 589
 245 590 471 109 233 675 429 116  33 381  38 474 651 374 407 358 562 500 384 375 619 269  45 373  78  12

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.00525e+07us (= 10052.5ms, 10.0525s)
Satisfaction error: 4
Number of search iterations: 3081
Number of local moves: 2586 (including on plateau: 2536)
Number of local minimum: 22 (including on plateau: 307)
Number of resets: 0
Number of restarts: 0

Problem in row 5: 360 42 413 30 566 304 230 420 672 289 234 588 557 377 90 390 317 616 87 201 244 670 417 569 204 183 => the sum is 9070 rather than 8801
Problem in row 6: 577 605 20 316 655 553 367 406 261 494 11 138 482 200 163 19 453 579 286 632 439 229 67 121 356 68 => the sum is 8497 rather than 8801
Problem in row 14: 28 312 273 669 441 40 56 259 161 158 148 275 256 318 599 496 194 51 662 584 268 376 277 338 323 515 => the sum is 8077 rather than 8801
Problem in row 23: 149 648 635 99 55 617 625 111 186 501 197 411 389 624 385 371 618 530 382 167 593 191 91 279 152 554 => the sum is 9560 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 277 675 417 647 532 439 225 552 563 217  22  80 465  55 415 628 114 108 485 350 281 120   7 361 109 657
 655 645 651 576 659 244 102 646 419  54  59  23 330 164 340 116  36 437 349 333 226 467  28 526 634  82
  30 159 436 154 339 129 669 591 291 530 446 319 247 139 369 170 611 146   3  38 544 537 556 598 470 280
 600 308 328 127 335 106 266 667 528  87 248 285 527 539 190 662 617 385 531 171  44   1 568 157 476  48
 388 510 315 358 589 258  77  66 197 555 559 623 236 479 135 412 115 260 241 619  53 573 255 253 150 525
 261 548 564  35 141 218 451 324  57 188 305 413 399 242 204 119 663 614 612 461 536  71 610 125  86 554
 173 616   5 264 219 407 499 496 629 271  97  33 664 613 643  14 641 175 585 489 516 457 168 453 370 390
 478 214  90 493 671 234  19 334 377  39 338 177 427 434 215 505 292 411 502 237 630  69 459 458 203 495
 231 156 491 454 304 507 481 267  72 553  17 473 534 262 572 317 376 449  73  70 238 320  42 632 492 418
 158 484 523 549 410 603 558 621 223 363 602   8 566 445 625 314 278 420  89  29 494 597 279 229 151 403
 202 401 300  62 143 601 299 455 293  49 606 426 475 273 209 395 448 582 463 490  92 658  98 107 429 245
 577 210 162 440 301 122  18 336 593 468 635 355 165 414 389 574 404  56  50 382 182 232 396 287 394 124
 406 195 372 274 362 387 346 351 130 137 512 249 295 386 514 337 235 367 550  10 373 128 365 546 599 375
 224  67 132 297 515  65 140 380  37 560 342 193 366 322 497 169  76 309  61 288 243 327 398 561 138 185
 283 517 149 676  64 354 631 167 670 668 313 272 298 199 644 543 100  32 408 519 163 216 286  11 347 246
 441 509 359 121 513 501 282 196 134  81 269 665  47 110 435 303 483 166 653 252 442 344 529 307  63 596
 326 207 294 257  31 477 325 425  96 409 666 482  94  75 341 447 131 567 268 571 604 472 240 511 384 101
 117 152 421 456 581 673  99 276 250 650 200  20 220 222 535 265 379 290  21 400 654 579 520 368 178 275
 580 259 198 228 402 640 487 213 488  51 147 504 498 570  13 469 153 648 133 656  84 112 145 638 306 179
  95 608 486 506  79 311 155  25 443 239 542 474 378 391   4 194 343 518 637 594 289 104 221 172 562 431
 508 430 230 627  91 201 371  12 547 174 126 113 360 633 183 540  58  74 345  68 142 444 624 416 205 578
 329 464 500 674  60 569 587 466 590 424 191 348 192  45 364 181 565 521 161 176 422 423 652 302 522 541
 452  24  85  93 433 356 618  40 310 438 353 584  78  15 642 595 533 233 212 636 256 450 184 189 270 118
 392  88  16  27 480 312 545 586 208 615 186 557 180 575  43   6 284 144 352 405 592 583 462 211 332 620
 609  34 672  83 296  46 428 206 551 374 432 622 111 661 254   2 227 626 357 397 383 136 316 331 460 187
   9 321 605 323 251  41 123 103 105 607 588 503 649 538  26 524 639 263 660 160 318 381 393  52 471 148

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.0054e+07us (= 10054ms, 10.054s)
Satisfaction error: 8
Number of search iterations: 3140
Number of local moves: 2579 (including on plateau: 2534)
Number of local minimum: 20 (including on plateau: 315)
Number of resets: 0
Number of restarts: 0

Problem in row 7: 173 616 5 264 219 407 499 496 629 271 97 33 664 613 643 14 641 175 585 489 516 457 168 453 370 390 => the sum is 9887 rather than 8801
Problem in row 10: 158 484 523 549 410 603 558 621 223 363 602 8 566 445 625 314 278 420 89 29 494 597 279 229 151 403 => the sum is 10021 rather than 8801
Problem in row 12: 577 210 162 440 301 122 18 336 593 468 635 355 165 414 389 574 404 56 50 382 182 232 396 287 394 124 => the sum is 8266 rather than 8801
Problem in row 14: 224 67 132 297 515 65 140 380 37 560 342 193 366 322 497 169 76 309 61 288 243 327 398 561 138 185 => the sum is 6892 rather than 8801
Problem in row 15: 283 517 149 676 64 354 631 167 670 668 313 272 298 199 644 543 100 32 408 519 163 216 286 11 347 246 => the sum is 8776 rather than 8801
Problem in row 21: 508 430 230 627 91 201 371 12 547 174 126 113 360 633 183 540 58 74 345 68 142 444 624 416 205 578 => the sum is 8100 rather than 8801
Problem in row 22: 329 464 500 674 60 569 587 466 590 424 191 348 192 45 364 181 565 521 161 176 422 423 652 302 522 541 => the sum is 10269 rather than 8801
Problem in row 23: 452 24 85 93 433 356 618 40 310 438 353 584 78 15 642 595 533 233 212 636 256 450 184 189 270 118 => the sum is 8197 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 675  73 673 656  30  61  53 638 481 146 668 577 116  85 629 548 135 610 133 527  32  18 403  66 282 486
 260 646  48 605 287 643 649 662 501 485 473 423 127 614 559 653 421   5 665  80 417 566  67 474 383 213
   4 367 621 230 289 185  14 269 323 401 328  87 654 104 608  21 598 475  88 579 521 385 220 555 520 355
 560  97 353 593 541 243 442 539 671 368  39 518 187  33 195 193  75 405 496 303 340 225 584 239  94 468
 440  13 123 231 431 664  62 318 176  72 167 433 277  49 320 636  16 570 295 434 632 200 291  60  98 639
 601 114   7 310 616 551 414  93 435 251  52 622  25  27 186 446 517 464 338 334 550   1 418 384 516 529
 107 184 138 505 312 469 535 602 438 427  77 506  51 549 398  47 131 300 301 502 189 307 525 149 661 391
   6 222 428 574 192 408 331 499 179   2 242 356 430 463 556 497 119 490 212 313 370 633 223 455 488 113
 350 611 202 171 627  70 109 210 161 647 271 487 495 492  36 493 216 443 623  59 479 467 424 507  31 120
 214 201 524 609 169 151 248 254 375 581 470 250 592 670 419 378 219 117 409 207 175 426 599 399 188 491
 508 676 402  56 504 397 354 275 532  84 345  40 538 163 393 429 600 237  28 298 597 484 553 648 617 591
 437 369 290  89 558 389 387 396 395 534 363 366 332 382 352 365 344 373  17 406 348  69 380 111 413 336
 358 476 519 154 118 480 177  35 293 565 364 557 339 349 315  23 585 330 309 147 205 587 262 204 606 444
 546 392 165  58 139  38 232  34 594 575 245  78 514 302 162 148 471 170 482 386 106 379 155 324 180  54
 322 360 308 247 460 263 547  63 554 410 530 305 228 285 221 299 270 327 531 466 288 256  19 620 361 261
  57 637 267 650 640 144  86 141  44  12 511 325 631 292 465 244 540 157 458 449 663 453 362  50 142 381
 448 461  26 667 227 439 182  90 190 625 152   8 411 576  92 329 183 337 150 669 523 234 454 573 229 526
 173 209 215 407 259 343 235 371 197 635 588 206 145 451  45 136 203 226 174 618 233 478 658 489 571 536
 483 562 542 498 306 432 284 172 357  46  11 218 613  96 510 580 659 121 168 266  99 102 273 457 351 595
 645 211 583  65 283 572 191 477 624 494 122 240 268 198 265 249 644 666 316 108  55 522 156 552 224  71
 252 281 651 296 390 132 544 537 159  83 196 660 335 319 257 412 568 586 420  10 103 513  42 255 528 272
 258 274 500 134 112 607 512 445 129 626 347 280 388 503 110 317 241 630 333 253 415 140 342 374 416 115
 515 545 304 341 472 509 672 603 236  76 642 130 563 441 246  82 321  95  24 199 452 194 674  15 286 164
  79 561 153 238 394 125 311 578  41 404 582  29 314 425 217 105  20 564 612 450 166 294 124  43 143  22
 377 158 297  91 181 208 634 372 652  74 569 641 160 400 590 628 346   3 615  81 276 279 137 376  37 619
 126 101 462 326 264 278 596 128  64 178 447 459  68 533 655 543 359 100 604 657 567 589 456 422 436   9

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.0054e+07us (= 10054ms, 10.054s)
Satisfaction error: 7
Number of search iterations: 3369
Number of local moves: 2792 (including on plateau: 2747)
Number of local minimum: 28 (including on plateau: 332)
Number of resets: 0
Number of restarts: 0

Problem in row 2: 260 646 48 605 287 643 649 662 501 485 473 423 127 614 559 653 421 5 665 80 417 566 67 474 383 213 => the sum is 10926 rather than 8801
Problem in row 5: 440 13 123 231 431 664 62 318 176 72 167 433 277 49 320 636 16 570 295 434 632 200 291 60 98 639 => the sum is 7647 rather than 8801
Problem in row 10: 214 201 524 609 169 151 248 254 375 581 470 250 592 670 419 378 219 117 409 207 175 426 599 399 188 491 => the sum is 9335 rather than 8801
Problem in row 11: 508 676 402 56 504 397 354 275 532 84 345 40 538 163 393 429 600 237 28 298 597 484 553 648 617 591 => the sum is 10349 rather than 8801
Problem in row 14: 546 392 165 58 139 38 232 34 594 575 245 78 514 302 162 148 471 170 482 386 106 379 155 324 180 54 => the sum is 6929 rather than 8801
Problem in row 24: 79 561 153 238 394 125 311 578 41 404 582 29 314 425 217 105 20 564 612 450 166 294 124 43 143 22 => the sum is 6994 rather than 8801
Problem in row 26: 126 101 462 326 264 278 596 128 64 178 447 459 68 533 655 543 359 100 604 657 567 589 456 422 436 9 => the sum is 9427 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 649  71 287 363 132  75 611 425 203 411 477 117 440 394 281  40 358 511 463 603 284 262  56 385 381 522
 282 635 564  25 524 266 198 523 607   6 609 234 570 481 237  29 444 267 195 265 261 162 350 627 305 135
 404 623  69 537 432 269 659 535  70 473  74 414 532  96 427 645  54 299 298  78 103 591 653  49 161 445
 232 633 517 650 392 137  76 377 508 472 238 661 399 297 219 296 400 531  37 390 556 226 599  81 395 177
 567 118 665  85 180 111 100 108 571  10  62 119 129 675 563 484 545 183 601 431 521 562 494  28 597 292
  88 114 585 493   1 320   4 324 258 600 617 589  17 206  89 163 278 632  61 558 628 670 345 642 498  21
 439 144 131 172 253 542 583 344 193 428 530 221 408 429 268 561 643 147 102 658 676 151  20 146  84 528
 360 467 130 555 212 462 420 499  14 447 145 674 668 421  66  18 227  16 566 637 626  79 215 391 185 301
 160 476 106 478 516 342 143 415 416 459  42 357 465  83 398 380 454  48 654 240 332 586 349 316 541  45
 436 322 540 520 260 593 314 354 582 179 367  57 171 264 379 338 176  86  44 337 497 225 351 197 127 619
 141 113 384 616 116 323  72 378 289 666 455 471 156 359 168 568 187 403 122 669  55 402 543 482 575 602
 401 159 489 153  35 527  92 614 538 667 554 409 370 302 223 503  64 107 664 175  13 639  60 435 438 170
 254 336 388 312 449 364 434 307 340 405 291 209 313 230 311 277 453 306 396 437 519 222 200 372 355 321
 346 328 155 672 329 407 389 243 201 573 189 317 167 356 288 361 618 300 273 353 352 382 310 308 325 259
 348 397 184 376 587 279 276 256 318 217 362 579 247 341 134 249 190 410 315 413 274 652 210 270 309 608
 191 549  22 443 663 515 510  38 547 495  87 257  58 485 326 158  12 233 461 174 422 452 539 426 641  97
 101 430 507 505 250 334 327   9  68 173 656 181 468 466 651 491  27 613 457  24 335 128 186 631 417 366
 565 148 592 252 319 512 526 202 124 383 205  30 246 480 188 235 371 576 492 139 647 460 229 244 263 373
  63 236 138  51  39 406 638 166  91  65 458 605 606  73 644 509 625 615 343 109 424 105 525 216 557 207
 486  59 293 272 630 442 612 553 595 490 121 533 196 204 501   5 572  32 393 110 115  67 255 120 594 551
 673 149 479  31 339  98 569 634 446 164  41 136 182 604 580 496 251 475  80  52 154 552 441 548  77 550
 636 662 192 178 588 165 331 152 248 231 241 126 504 374 450 590 387  90 290 448 451 529  33 464 199 242
 142 577 629  26 283 194  99 578 544 534 470 112 500 224 214 456 213 333  95 419  19 286 514 488 487 365
 123 502 368 433 157 483 150 208 386 125 295 513 671  15 506 303 559 621 596 239  43 304 657 211 280  53
 581 546 169 375 646  11 245  23 598  34 560 660  47 294  50 610 275 347 285 369  82   3  93 140   2 622
 133   7 218 228 469 624 423 536  46  94 655 220 271 648 640  36 418 620 518 474 412 104 574 584   8 330

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00014e+07us (= 10001.4ms, 10.0014s)
Wall-clock time (full program): 1.00539e+07us (= 10053.9ms, 10.0539s)
Satisfaction error: 7
Number of search iterations: 3060
Number of local moves: 2547 (including on plateau: 2502)
Number of local minimum: 20 (including on plateau: 324)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 404 623 69 537 432 269 659 535 70 473 74 414 532 96 427 645 54 299 298 78 103 591 653 49 161 445 => the sum is 8990 rather than 8801
Problem in row 4: 232 633 517 650 392 137 76 377 508 472 238 661 399 297 219 296 400 531 37 390 556 226 599 81 395 177 => the sum is 9496 rather than 8801
Problem in row 10: 436 322 540 520 260 593 314 354 582 179 367 57 171 264 379 338 176 86 44 337 497 225 351 197 127 619 => the sum is 8335 rather than 8801
Problem in row 11: 141 113 384 616 116 323 72 378 289 666 455 471 156 359 168 568 187 403 122 669 55 402 543 482 575 602 => the sum is 9315 rather than 8801
Problem in row 19: 63 236 138 51 39 406 638 166 91 65 458 605 606 73 644 509 625 615 343 109 424 105 525 216 557 207 => the sum is 8514 rather than 8801
Problem in row 25: 581 546 169 375 646 11 245 23 598 34 560 660 47 294 50 610 275 347 285 369 82 3 93 140 2 622 => the sum is 7667 rather than 8801
Problem in row 26: 133 7 218 228 469 624 423 536 46 94 655 220 271 648 640 36 418 620 518 474 412 104 574 584 8 330 => the sum is 9290 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 309 142 540 557 258 302  69 111 108 410 454 163 439 660 183 461 614 405 609 492  16 311 373 674  94  47
 242 469 639 579 513 255 246 556 247 173 145 589  83 220 522 282 421  95  98 555  55 440  35 199 144 188
 297  93 230 154 573 433 669 434 330 129 645 215 491 149 228 174  90 607 407 333 578 637  46   7 420 432
 168 169 585 431 382 435 560 244 467 460  82 478 388 483 274 112 487 128 156 548 530 121 187 450 416  60
 626 267 500 606 551 305 146 337  79  81 537 307  63 245 159 549 547 178 214 343 179  12 482 673 424 391
  99 506 619 546 138  17 471 170 415 526 364 105  33 387 141 115 193   3 185 153  38 474 652 110 176 419
 172 316 284 196 226 515 532 601 512  72  67 190 524 553  13 445 249 561 414 668  54   2 497 180 509 449
  66 438  86 543 340 640 603 672 152 354 451 666  58 581 518  30 480 219 248 436 225  68 565  85 216  61
 444 572 425 120 315 536 380 319 277 287 372 295 595 270 147 100 191 488 508 408 300 117 505 116 184 671
 457 339 401  74 202 231 131 430 464 571 389 413 308 455 574  91 257 411  92   6 663 657 293 470  70 352
  29 493 370 283  40 586 166  19   5 243 516 628 610 119 534 426 642 181  75 456 402 109 623 335 570 341
 360 289 604 376 171 366 398 390 377 371 182 409 194 207 400 393 357 384 345 363 582 301  28 362 323 269
 353 383 651 404 358 368 359 346  45 375 318 328  31 320 381 365 334 348 351 327 361 350 342 299 355 349
 259 597  43 324 162  51 290 139 161 448 336 106 552 325 458 234 378 479 321 379 374 653 599 417 519 197
 442 189 322 397 278  18  89  36 294 641 593 649 229 276 296 118  78  88 462 587 502 423 446 466 646 236
 648 271  25 394 155 266 612 177 198 208 650 558 476 618 616 264 233 209 403  80 495 223 314 251 292 165
 250 395 568  14 104 535 102 559 507 344 367 473 406 428 331 313 594 521 490  65  97 496  41 218 453 130
  20  26 596 122 514 103 252 523 654 477 531 396  50 260 150 203 481  11 542 175 392 624 472 602 529  96
 291 656 263 569  24  27  71 630 520 192 600 206 468 443 562 655  10 298   1  76 605 590 148 369 275 486
 217  62   9 237 441 627 643 224 661  39 132 127 554 636 611 566 412 347 201 575 253 157 268 186  52 564
 676 447 158 107 498 239 494 356  15 235 212 499 281 200  59 386 114 591 583 164 124 427 539 326 463 608
  56 238 125 617 123 285 329 399 489 629 279 533 304  23   4 544  49 485 647 312 288 632  37 338 511 525
 662 675 592 422 644 310 126  53 634 286 240  73 385 541 622 580 576 621 631 261 615 577 459 638 332 538
 588 221  22 528 667 633 256 429  77 133  84 101 664 232 195 613 658 222 241 204 501 265 205 160 151 254
 503  64 136 167 504 584 527 137 550 452 211  21 140 113 517 317 213 262 545 625 437  48 418 598  42 670
 567 484   8  34 620 134 280 510 563 665  44 273 475  57 306 465 143 659  32 210 135  87 227 272 635 303

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00004e+07us (= 10000.4ms, 10.0004s)
Wall-clock time (full program): 1.00519e+07us (= 10051.9ms, 10.0519s)
Satisfaction error: 7
Number of search iterations: 3390
Number of local moves: 2874 (including on plateau: 2829)
Number of local minimum: 20 (including on plateau: 334)
Number of resets: 0
Number of restarts: 0

Problem in row 2: 242 469 639 579 513 255 246 556 247 173 145 589 83 220 522 282 421 95 98 555 55 440 35 199 144 188 => the sum is 7990 rather than 8801
Problem in row 6: 99 506 619 546 138 17 471 170 415 526 364 105 33 387 141 115 193 3 185 153 38 474 652 110 176 419 => the sum is 7055 rather than 8801
Problem in row 9: 444 572 425 120 315 536 380 319 277 287 372 295 595 270 147 100 191 488 508 408 300 117 505 116 184 671 => the sum is 8942 rather than 8801
Problem in row 19: 291 656 263 569 24 27 71 630 520 192 600 206 468 443 562 655 10 298 1 76 605 590 148 369 275 486 => the sum is 9035 rather than 8801
Problem in row 23: 662 675 592 422 644 310 126 53 634 286 240 73 385 541 622 580 576 621 631 261 615 577 459 638 332 538 => the sum is 12093 rather than 8801
Problem in row 24: 588 221 22 528 667 633 256 429 77 133 84 101 664 232 195 613 658 222 241 204 501 265 205 160 151 254 => the sum is 8304 rather than 8801
Problem in row 26: 567 484 8 34 620 134 280 510 563 665 44 273 475 57 306 465 143 659 32 210 135 87 227 272 635 303 => the sum is 8188 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 491 566 218 402 573 194 612 487 557  76 508 663 307  16 375 549 511 444 609 268 619 447 666 484  62 512
 514 335 154  97 589 505 331 439 128 191 321 504  57 660   6 267 252 433  61 506 424 656 563 153 158 351
 272 518 617  33 485  23  21 122  22 412 436 346  46 411  43 427 536 670 597 658 608  94  59 621 142 582
 150 516 147 152 522 238 446 294 537  17  15 481 639 538 392 127 266 204 419  87 546 290 107 593 625 453
 156 320  74 474 545  44 493 341 182 574 630 231 265 188 464 578 503 603 303  45 115 515 172  81 651 254
 173 223 476 623 393 606 101 562 344 117 472  83 602 121 517 286 167  78 438 224   4  75 478 220 233  38
 140 148 279 242 389  30 551  64 542 667  80 247 241 524 443 236 467 641 213 528 644 544 105 253  27  37
 490 293 675  65 604 576 206 124 126 338 498 139 123 615 129 469 197 482 480 264 203 162 460 662 312 109
  79 119 567 306 368 671 456 669 284 260 352 458 477 413 187 353 151  28 572 102 426 637  56 291  51 558
 275 192 650 527  19 235  26 560 222 463 585  86 337   5 437  24 580 110   9 225  40  72 281 112 664 634
 595 132 169 160 138 314 327  92  77 649 386 416 298  36 473 520  50  73 217 618 556 591 554 369 108 305
 174 404 348 374 248 400 403 398 379 257 384 388  54 342 133 373 367 362 349 378 387 399 363 376 396 365
 371 357 300 401 276 360 356 394 336 361 350 358 319 347 355 366 364 324 322 323 328 170 334 343 332 354
 390 168 455  90 311 219 646 118 100 624 143 532 640 380 370 383  89 216 535 227 445  34 345 548 616 177
 420  69 409 201  47 429 245  98  60 372 189  12 125 137 657  70 208 250 513   2 652 432 377 255 299 509
 540 441 313  20 193 339 106 605 577 569 271 199 659 185 103 289 269 486 131 627 246 261 502 519 215 136
  42 228  14 308 258  85 239 240 316 274 665 626 414 262 594 647 643 468 501 141 179 164 632 452 200 209
 676 256 310 449 635 561 541 648 496 525 186 190 244 263 144   3 479   8 297 434 422 410  13 315 489 655
 283 497 326 198  71 638 423 214 622 488 454 579  18 584 586 230  55 587  25 340  39 470 210 280 552  32
 180 381 543 674 553 104 278 333 229 171 407 317 309 163  58 492 661  10 178 620 483 285 237  29 555 425
 451 590 318 654  88 431 205 166  95 462  67 277 613 325 226 428 499 196 588 165  31 448 475 417  68 282
 304 120  48 523 382 395 631 415 642  82  63 645 459 628 539 295 288 273  35 457 547 145  41   1 636 207
 614 673 610 598  66 500 359 592 430 155  52 600 330 301 466 596 270 130 461 440  91 292 234 251 507 653
 571 159  93 611 568 559  84 510 418 161 534 212 599 421 564  49  11 521 471 181 296 135 530 116 195 232
 397 526 157 184 221 249 581 202 408   7 146  99 450 494 211 111 533 575 175 391 287 405 601 565 243 583
  53 570 531 435 259  96 134 114 672 529 607 113 176 442 329 633 385 629 302 550 183 668 406 495 465 149

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00005e+07us (= 10000.5ms, 10.0005s)
Wall-clock time (full program): 1.00524e+07us (= 10052.4ms, 10.0524s)
Satisfaction error: 13
Number of search iterations: 3016
Number of local moves: 2526 (including on plateau: 2486)
Number of local minimum: 21 (including on plateau: 314)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 491 566 218 402 573 194 612 487 557 76 508 663 307 16 375 549 511 444 609 268 619 447 666 484 62 512 => the sum is 11216 rather than 8801
Problem in row 2: 514 335 154 97 589 505 331 439 128 191 321 504 57 660 6 267 252 433 61 506 424 656 563 153 158 351 => the sum is 8655 rather than 8801
Problem in row 6: 173 223 476 623 393 606 101 562 344 117 472 83 602 121 517 286 167 78 438 224 4 75 478 220 233 38 => the sum is 7654 rather than 8801
Problem in row 7: 140 148 279 242 389 30 551 64 542 667 80 247 241 524 443 236 467 641 213 528 644 544 105 253 27 37 => the sum is 8282 rather than 8801
Problem in row 9: 79 119 567 306 368 671 456 669 284 260 352 458 477 413 187 353 151 28 572 102 426 637 56 291 51 558 => the sum is 8891 rather than 8801
Problem in row 10: 275 192 650 527 19 235 26 560 222 463 585 86 337 5 437 24 580 110 9 225 40 72 281 112 664 634 => the sum is 7370 rather than 8801
Problem in row 11: 595 132 169 160 138 314 327 92 77 649 386 416 298 36 473 520 50 73 217 618 556 591 554 369 108 305 => the sum is 8223 rather than 8801
Problem in row 15: 420 69 409 201 47 429 245 98 60 372 189 12 125 137 657 70 208 250 513 2 652 432 377 255 299 509 => the sum is 7037 rather than 8801
Problem in row 18: 676 256 310 449 635 561 541 648 496 525 186 190 244 263 144 3 479 8 297 434 422 410 13 315 489 655 => the sum is 9649 rather than 8801
Problem in row 20: 180 381 543 674 553 104 278 333 229 171 407 317 309 163 58 492 661 10 178 620 483 285 237 29 555 425 => the sum is 8675 rather than 8801
Problem in row 21: 451 590 318 654 88 431 205 166 95 462 67 277 613 325 226 428 499 196 588 165 31 448 475 417 68 282 => the sum is 8565 rather than 8801
Problem in row 23: 614 673 610 598 66 500 359 592 430 155 52 600 330 301 466 596 270 130 461 440 91 292 234 251 507 653 => the sum is 10271 rather than 8801
Problem in row 26: 53 570 531 435 259 96 134 114 672 529 607 113 176 442 329 633 385 629 302 550 183 668 406 495 465 149 => the sum is 9925 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 430  28 529 129 672 263 436 328 307 128 634 325 675 290 658  35   7  12  21 127 559 504 650 231 176 647
 194 109  25 515 107  32 673 549 363 668 331 351  49  40 557 434 587 601   4 632 654 196 130 114 594 292
 433 122 663 233 419 552  20  91 518 628 376 318 614 180 314  44 321 633 207 567  38 428 340  88 479 175
 350 181 264 112 659 561 432 199 323 651 261 195  86 285 581  37 131 167 125 471 625 560 554  66 426 294
 369 551 144 563 553 322 584 304  67 183 622 513 301 250 140 385 271  54 448 527  41 573   5 577 381  73
 166 408 585 393 455  77 276 507 141 542  11   8 491 151 423 535 110 541 550 555 516 636 460 215   6  43
 345 116 477 258 138 188 568  85 649 485 523 395 579  92 260 137 228 338 226 525 517 638 510 316 178  30
 463 245 482 366 475 221 497 108 383  19 334 365  79 360  26 655  42 441 488 273 374 446 639 339 179 502
 150   2 401 368 623 489 100 185 543  71 412  78 227  95 121 570 259 472 498 329 500 417 317 669 514 391
  74 586 442  29 298 232 431 641  65 447 119 379 266 522 387 230 425 422  94 657 597  64 413  81 486 414
 346 353 356   9 191 378 343 415 225 198 396 160 435 390 406 397 600 117 624 388 367  24 599 566  97 421
 184 652 105 578 159 626  75  48  13 496  16 671 270 630 355 295  53 389 451 443 157 148 533 661 531 262
 102 373 596 609 403 556 214 437 213 123 279 469  63 359 336 361 505 315 344 400 309 201 310 224 126 574
 320 375 635 603 246 384   1 674 182 269 187 174 249 192 456 104 152 205 591 257 252 377 465 495 219 521
 326 467 189 115 519 330  46 272 332 282 526 302 506 444  68 643 371  98 660 313  96 106  52 670 595 473
 546 452 481  90 111 300 305 136 606 580 241 202 627 352 501 458 135 333  57 143  15 509 405 565 253 398
 478   3 268 631 223 372 420 235  33 312 274 503 409 538 222 453 220 256 244 604 275 162 289 620 474 283
 208 642 347 411 466 615 348 293 169 311 662 133  99 303 534 407 450 280 392  55 287 284  18 158 319 610
 575 254  59 278 349 483 613 203 484 142 547 621 656 445  34 186 548 156 418 612  56 590  69  50 324 113
 206 308  72 163 583 139 155 487 499 382  60 508 569 170 210 545 464 197 589 147 440 209 327 296 459 617
 605 593 171 665  70 212 648 335 438 238 532 629 476 462 190 200 380 592  93  22 429  51 164  84 439  83
 291 242 576 520 118  82 410 494 103 218 145 637 149 512 153 640 402 653 277  31 468 644 358 237 354  87
 611 582 134  61 299  27 239 572 399 571  80 193 370 480 562  89 664 539 537 211 177 457 247 234  62 404
 357 492  47 243 248 240 173 564 461 394 470 645 288 216 511 165 544 524 297 101 255 364 281 154 588 536
 540 607 416 251 341 454 236  23 618 427 161  17  39 424 120 490 286 342 204 146 530 168 449 598 528 386
 132  58 337 608  76 666 558 616 667  36 602  10 229 619 676 306 646 124 362 265 267  45 217 493  14 172

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00004e+07us (= 10000.4ms, 10.0004s)
Wall-clock time (full program): 1.00528e+07us (= 10052.8ms, 10.0528s)
Satisfaction error: 5
Number of search iterations: 3733
Number of local moves: 3094 (including on plateau: 3046)
Number of local minimum: 31 (including on plateau: 340)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 350 181 264 112 659 561 432 199 323 651 261 195 86 285 581 37 131 167 125 471 625 560 554 66 426 294 => the sum is 8596 rather than 8801
Problem in row 14: 320 375 635 603 246 384 1 674 182 269 187 174 249 192 456 104 152 205 591 257 252 377 465 495 219 521 => the sum is 8585 rather than 8801
Problem in row 19: 575 254 59 278 349 483 613 203 484 142 547 621 656 445 34 186 548 156 418 612 56 590 69 50 324 113 => the sum is 8865 rather than 8801
Problem in row 24: 357 492 47 243 248 240 173 564 461 394 470 645 288 216 511 165 544 524 297 101 255 364 281 154 588 536 => the sum is 9158 rather than 8801
Problem in diagonal 0: 430 109 663 112 553 77 568 108 543 447 396 671 63 192 68 458 220 280 418 147 429 644 247 154 528 172 => the sum is 8697 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 676 552  25 468  62 258 217 584  13 125 668 405 650  22 669  87 516 263 259 384 406 236 553 531 132 428
 572 660 366 311 594 308 419 580  74 201  85 286 665 368 295 105 456  28 137 596 494  58 582 210 505 627
 166  93 606 632 256 195  88 504 227  64 391 617 554  56  76 333 111 140 616 442 478 607 232 266 548 503
 462 123   8 597 513 386 393 443 131 666 573 196 116 191 508 316 126 253 336 415 423  10 578 524 359 155
 433  63 671  67 603 466 115 212 267 452 136  14 389 346 205 130 430 317 211   2 398 465 492 321 183 633
  49 147 314 230 448 560 610  86 207 663 601 458 229 625  75  23 171 439 404  61 328 441 445 550 100 599
 521 640 215 349 203 637 483 247 626  44 501 498 135 661 160 421  43 520 200 491  51 114  32  71 568 370
 238 199 561 220 337 659 567 471 417  77 119 545 581 544 187 185 407  48 588  50 463 288  83  31 507 429
   3 675 486 546 652  12 129 228 440 224 121 475 106  99 134 198 480 434 127 615 460 585  41 537 649 345
 340 275 497  79  46  52 500 535 636 222 559 249  65  15 493 150 280 339 221 517 619 390 204 325 387  96
  20 414 409 432   1 367 418   9 410 300 403 401 360 394 397 425 241 371 110 413 402 376 352 565 400 411
 375 104 233  45 635 358 641  78 369 351 593 353 190 646 399 223  33 542 575 218 184 347 319 159 591 240
 643 158 422  11 395 271 583 670 107 482 265  39 329 372  47 655 327 512 348 457 522 270 570 306  94 557
  84 653  53 361 364 103 297 487 304 450 197 318 381 341 293 489 628 178 261 324 216 431 331 518 424 315
 335 302 305 326 408 149 260 299 303 426 334 272 292 562 470 323 490 312 589 281 248 278 274 374 291 298
 282 254 234 268 244 564 322 639 163 667 250 277 307 296 264 301 396 530 642 290 309 252 246 294 231 279
 574 362 209 674  42 214 469 437 664 157 170 373 243 332 586 529 208 365 454 506 154 161  36 577 182   6
  16 620  97 239  95 124 225 382 598 379  37 648  26 181 495 600 310 144 472  34 623 519 455 618 622 242
 237 488 113  35 543 534  70 189 526 412 193 172 609 245 473 590 188 662  40 169 165 510 141 614 342 541
 143 251 644 612   5 357 128  21 558 313 449 608 527 579 356 436 330  68 122 162 569  38 656 283 194 392
 533 484 338 151 672 146 255 444 145 605   4 539 164 177 613 638 180 624 547 179 117 438  91  30 206 481
 549 523 515 388 148  54 536  19  98 459 629 654 380 464  92  82 551 611 566 153 139  60 630 257 226  18
 485 363 595 631 420 383  73 385 479 112 509 142 474 511 447  55 167  72 262 645 651 108 109 186 435 102
 192 156  66 427 587 592 673 416 133 219 175  24 289 502 555 532 621 101 658 138 285 647 378 276  69  90
 604   7 320 528 355 576  57 284 350 377 343 120 453 213 168 514 540 451  29 657  17 538 446 202  89 563
 269 235 499 174 173 476 273 152 556 354 496 118 287  59 344 461 571 477  27 602  80 634 525 176 467  81

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.00536e+07us (= 10053.6ms, 10.0536s)
Satisfaction error: 8
Number of search iterations: 3662
Number of local moves: 3049 (including on plateau: 3004)
Number of local minimum: 24 (including on plateau: 363)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 676 552 25 468 62 258 217 584 13 125 668 405 650 22 669 87 516 263 259 384 406 236 553 531 132 428 => the sum is 9189 rather than 8801
Problem in row 2: 572 660 366 311 594 308 419 580 74 201 85 286 665 368 295 105 456 28 137 596 494 58 582 210 505 627 => the sum is 9582 rather than 8801
Problem in row 5: 433 63 671 67 603 466 115 212 267 452 136 14 389 346 205 130 430 317 211 2 398 465 492 321 183 633 => the sum is 8021 rather than 8801
Problem in row 6: 49 147 314 230 448 560 610 86 207 663 601 458 229 625 75 23 171 439 404 61 328 441 445 550 100 599 => the sum is 8863 rather than 8801
Problem in row 10: 340 275 497 79 46 52 500 535 636 222 559 249 65 15 493 150 280 339 221 517 619 390 204 325 387 96 => the sum is 8091 rather than 8801
Problem in row 13: 643 158 422 11 395 271 583 670 107 482 265 39 329 372 47 655 327 512 348 457 522 270 570 306 94 557 => the sum is 9412 rather than 8801
Problem in row 17: 574 362 209 674 42 214 469 437 664 157 170 373 243 332 586 529 208 365 454 506 154 161 36 577 182 6 => the sum is 8684 rather than 8801
Problem in row 26: 269 235 499 174 173 476 273 152 556 354 496 118 287 59 344 461 571 477 27 602 80 634 525 176 467 81 => the sum is 8566 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 499 568  31  97 464 591 225 276 257 659  47 270 168 285 603 600 241 171 117 101 208 436 561 350  18  53
 207 542 627 673 424 324 214 322 630 271 230 526  48  90 497 619 161 387  24 513  19 176 182 223 215 657
  95 183 110 450 625 485 421 417 213  43 120 534 199 505 602  35 141   2 606 359 564 663 178 244 382 364
 589   7 466  33 532 452 301  89  64 546 672  71 537  27 521 409 578 170 470  85 459  72 581 144 533 393
 233  96 189 557 266 279 665 406 654 473 634 640 114  45 313 377 576 338 467 451 146 538 281 100 231  60
 165 481 553 128 247 237 366  32 579 252 617 103 478 361 219 226  25 140 662 504 517 531 535 565  51 227
 367 523 201 136 508 240 320  55  80 633 221 184 395 493 469 484 123 494 302 503 197 295 477 370 471 260
 559  94 408 390 135 649 456 326 371  91  82 506 527 209  10  42 218 427 453 592 595 586  83 420 385 187
 108 607 510 222 122 667 638 263 190 118 554   8 447 383 563 159 232 486 569  44 442  34 346 307 426 356
 480 268 422 489 205 121 556 373 454  87 457 411 172 413 416  50 448 658 249 148 360 174 399 461 342 188
  86 253 495 419 109 137 407 516 195 446 288  21 629 492 242 555 316 522 394 311 282 637 192   1 476 380
 475 620 177 612  62  28 153 551  52 127 341 661 228 336 107  76 500 644 369 577 520 358  37  30 651 509
   6 287 388 352 261 265  63  39 567 156 593 552  65 106 650 155 507  40 631 636 468 206 403 643 274 488
 332 339 293 363 389 315 372 275 331 290 601 343 335 479 321 305 349 299 340 289 328 278 292 303 354 286
 357 656 308 277 317 598 330 169 483 334 487 337 306 134  66 251 543 273 238 272 297 323 545 348 258 294
 482 212 588 645 549  29 544 594 164 428 291  57 312  11 384  98  13 248 119 374 666 437 671 430 216 239
  38 675 648  41 112 496 616 193 515 596  49 472  16 256 401 435  20  54 398 255 175 194  78 304  12 597
 639 443 582 524  79 158  68 502 217 444 262 327 284 573 124 626 355 125 173 269 434 333 250 530 410  70
 575 139 669 431 611 365 105 460 381 203  74 235 405 562  77 465 423 624 131   5 432  17 438 396 160 418
 220 319  88 283 414 404 154 415 511 344 157 512 632 668 347 433 198 375 151 425 613  46 150 210 111 621
 163 490 310 267 449 181  84 609 623 519 362 116 646 412 664 345 147 463 441 102 167 325 166 113 615  22
 590 138 185 104 179 376 608 670 518 610 143 455 145 202 379 614 400 129 548 440 211 572 566 622 558 318
 628 298 224 309 329 536  58  23  93 351 560 180 280  14 162 126 660 491 264  67 229 462   3 585 133 583
   4 391 259  81 674 599 296 458 149 498 474 605 574 618 132 254 445 635 142 584 245 397 353 529 571 501
 300  73   9 368 647  69 547 115 314 246 429 439 204 540 402 386 541 580 528 243  75 186 392  59 570 539
 604  99  61 550  92 200 234 653 196  36  56 236 655 587 130 676 641  26  15 652 152 525 642 514 378 191

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00534e+07us (= 10053.4ms, 10.0534s)
Satisfaction error: 8
Number of search iterations: 3955
Number of local moves: 3328 (including on plateau: 3282)
Number of local minimum: 18 (including on plateau: 401)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 499 568 31 97 464 591 225 276 257 659 47 270 168 285 603 600 241 171 117 101 208 436 561 350 18 53 => the sum is 7896 rather than 8801
Problem in row 3: 95 183 110 450 625 485 421 417 213 43 120 534 199 505 602 35 141 2 606 359 564 663 178 244 382 364 => the sum is 8540 rather than 8801
Problem in row 5: 233 96 189 557 266 279 665 406 654 473 634 640 114 45 313 377 576 338 467 451 146 538 281 100 231 60 => the sum is 9129 rather than 8801
Problem in row 17: 38 675 648 41 112 496 616 193 515 596 49 472 16 256 401 435 20 54 398 255 175 194 78 304 12 597 => the sum is 7646 rather than 8801
Problem in row 22: 590 138 185 104 179 376 608 670 518 610 143 455 145 202 379 614 400 129 548 440 211 572 566 622 558 318 => the sum is 10280 rather than 8801
Problem in row 23: 628 298 224 309 329 536 58 23 93 351 560 180 280 14 162 126 660 491 264 67 229 462 3 585 133 583 => the sum is 7648 rather than 8801
Problem in row 24: 4 391 259 81 674 599 296 458 149 498 474 605 574 618 132 254 445 635 142 584 245 397 353 529 571 501 => the sum is 10468 rather than 8801
Problem in diagonal 0: 499 542 110 33 266 237 320 326 190 87 288 661 65 479 66 98 20 125 131 425 167 572 3 529 570 191 => the sum is 7000 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 423  17 397 259 406 138 469 200 398 174 293 517  40 566 426 134 565 586 104 479 244 529 591 187  19 640
 357 562 214 329 620 227 539 527 281 383 512 449 483 458 543 626 464 641  34  75 584 429 559 556 634 552
  38 295 179 114 602 336 576 416 100 540 247 665 597 661 151   9 442 619 268 188 598 662 173 217  24  84
 233 470 490 514 133  31 599  78 667 612 537 333 489 407  30 231  29 385 639 145 121 672  66 160 278 452
 504 430 129 312 228 636  50  26  65 595 651 544 411 311 159 102 224 510 663  63  13 578 238  48 647 664
 579 308 317 245 176 657 371 438 600 670  62 674 169  56  16 153 646   6 482  74 524 506 377 243 246 206
 156  46 135 445 505  39 643 287 546 249 223 480 628 193 175 241 513 569  71 500 451 477 232 257 644  96
 181 146 525 550 202 573 210 502 440 340 433 118 164 495 655 548 107 184 493 115 155  10 186 376 487 606
 492 258 608  87 653  97  41 434 497 140 428 142 589  80 633  12 323 144 601  72 444 220  57 631 528 590
 255 437 242 501 321 624 427 303 239  55 225   7 551 274 273 632 425 256 341 203 522  15 124 441 582 526
 313 235 269 642 384  73 262 172  23 607 393 213 618 408 431 372 334 148 180 389 375 564 531  32 218 615
 381 404  77 360 365  98 386 343 335 388 240 226 402 344 369 359 396 374 387 417 324 363 370 349 399 345
 318 221 366 358 347 364 195 327 352 373  64 382 294 367 348 319 332 353 342 379 390 351 350 593 355 361
  91 507 478 136 461 554 453 109 485  67 143 656 310  51 571 162 424 585 575 219 471  43 207 229 542 272
 616 499 557 623  95  94 122 276 523 196 560 285 380 125 468 534  82 289 183 588  47 209 592 230 165 463
 301 113 494 264 292 649 266 248 250 306 583 561 253 283 190 263 338  49 309 279 305 530 603 395 315 362
 637 260 555 412  89 302 532 617 212 284 337 192  83 645 275 198 496 378 237 296 331 271 280 503  11 368
 105 450 413  60 158 621 101 587 261 409  35 516 304 574 251 436 339 106 215 629 638  69 415 400 421 288
 454 465 208 443 291 459   4 671 320 108 270 299 119 498  22 604  27 117 391 613  99 476 648 625 447 123
 652 654 307  42 432  70 204 614 630  86 520 149 392  90 558 611 112 222  59 660 163 491 328 420  81 254
 403 410 439 191 547 448 267 166 567 541 141  52 152 322 605 650 170 418 126 300 326 466 488 182 422   2
  14 356  76 110 201 330 139 211 533  28  54 161 435 197 316 286 549 265 457 325 205  88 290  20 103 137
  79   5  93 553 673 481 467 519  61 472 596 168 236 116 627 282 177 521 194 577 658  25 462 535 216 572
 475 509 346 178 111 401 610  44 154 635 570 147  36 538 167 486 252   8 511 563 171 659 456  37 609 128
 676 446 473 405 508 185 199 150 130 189  18 297 581 622 484  33 580 474 394 234 127  45  21 675 277  92
  68 298 414 668   1 314 669 536 132 354 666 568  85 120  58 518 455 594 545 419 515  53 157 460 131   3

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00541e+07us (= 10054.1ms, 10.0541s)
Satisfaction error: 5
Number of search iterations: 3146
Number of local moves: 2542 (including on plateau: 2494)
Number of local minimum: 34 (including on plateau: 286)
Number of resets: 0
Number of restarts: 0

Problem in row 2: 357 562 214 329 620 227 539 527 281 383 512 449 483 458 543 626 464 641 34 75 584 429 559 556 634 552 => the sum is 11638 rather than 8801
Problem in row 22: 14 356 76 110 201 330 139 211 533 28 54 161 435 197 316 286 549 265 457 325 205 88 290 20 103 137 => the sum is 5886 rather than 8801
Problem in row 23: 79 5 93 553 673 481 467 519 61 472 596 168 236 116 627 282 177 521 194 577 658 25 462 535 216 572 => the sum is 9365 rather than 8801
Problem in row 25: 676 446 473 405 508 185 199 150 130 189 18 297 581 622 484 33 580 474 394 234 127 45 21 675 277 92 => the sum is 8315 rather than 8801
Problem in diagonal 1: 640 634 217 66 578 524 500 493 144 425 372 369 367 310 285 583 284 261 671 204 448 201 553 346 446 68 => the sum is 9989 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 161 119 583 111 168 344 272 488  28 428 560 486 533 147 431 110 491 388 237 365 430 454 182 163 505 617
 607  68 346 136 131 509 589  96 546 374 616 397 523 614  84 209  99 390 256 570 239 541 120  66 107 568
 166 610 581 422 273   1 254 552 141 313 632 138  46 636 556  80 403 445  35  62 339 326 652 510 130 498
  93 426 674 398 382 642 654 526 380 329  45 184 175 414 233 464  53 167 105 218 504 206 618 291 195 425
  88 659 181 296 551 600  95 569 501 177 529 451 115 135 108 540 347 476 103 228 173 578 549 148 269 101
 112 497 518 378 289 576 104 615 567 240 314 410   3 596 458  83 153 355 522 185 494 284  90 408 527  23
 132  76 156 358 559 635 492 534 630 480 155 572 487 255 467 622 612  79 307 609 356 152 190 305  43  69
 669 584   5 644  64 641 246 207 106  77 407 608 381 524  57 516 599 675 563 292 278  22  32 137 429  38
 226 392 227 502  92  48 285  33 514 249 293 159 174  49 268 637 129 539 376 547 535 520 663 538 627 179
 405 280 634 157 676 198 144 573 399 201 571 456 469 271 647 574 450 585 562 436  55 532 460 485 199 202
 196 416 580 575 360 432 154 224 605 127 276 667 189 639 668 404 542 299 220 623 651 367 354 557  63 320
 300 363 437 253 342 327 350 340 364 322 530 413 332 331 463 371 309 348  11 353 427 341 395 366 393  20
 274 601 317 295 286 400 323 525 440 146 386 421 396 362 263 409 265  74 455 244 333 345 334 248 298 361
 338 401 225 250 282 351 475 433 372 471 465 375 473 379 335 349 310 221 321 438  30 337 383 270 303 214
 553 193 264 452 643 235 493 219 543 211  94 369 223  37 442 325 213  82 621 187 319 165 324 662 517 415
 472  27 506 629 238 121 511 586 113  97 311  87 435 267   2 318  21 208 483 593 441 554 499 294 544 444
 402 564 598 150 592 611 457 411 134  89 100  98 359 197  59 417 653  41   6 336 446 191 412 459 118 656
 123 277 290 183 461 122 245 482 169 582  54 631 312  51 484 125 306 205 658 603 297 531  71 373 666 500
 566  14 217 281 287 231 548 308 252 619 180 232   9 537 513 638 186 587 481  86   4 561  44 591 301 528
 507 242  67  34 423  81 178  15  40 434 257  91 462  65  12 595 124 406 624 140 143 109 243 394 604 490
 216   8 468 470  17  52 259  16  42 357 515 172 512 479 649 503 633 550 626 670 283 133 389 194 145 443
 590 439 262 328 210 260 420  72 418 555 142 449 648 588 657 448 489  19  47 261 508  26 466 279  56 164
 536 665 236 139 304 391 128 188 558 613 594 650 203 387 212   7 215 628 229 126 288  61 171 424 370 478
 660 302 151 447 117 114 602 474  24 521 661  31 496 519 102  10 176 368  39 149 385 579 625 251 655 343
 384  13 162 672 577 234  70 230 275 597  36  50 200  75 316  29 352  60 495 222 170 620 158  58  73 160
  25 565 116 241 477 645 453  85 640 192  78 204 646 247 315  18 671 606 419 258 673 266 377 330 664 545

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00004e+07us (= 10000.4ms, 10.0004s)
Wall-clock time (full program): 1.00519e+07us (= 10051.9ms, 10.0519s)
Satisfaction error: 8
Number of search iterations: 3806
Number of local moves: 3121 (including on plateau: 3077)
Number of local minimum: 35 (including on plateau: 403)
Number of resets: 0
Number of restarts: 0

Problem in row 5: 88 659 181 296 551 600 95 569 501 177 529 451 115 135 108 540 347 476 103 228 173 578 549 148 269 101 => the sum is 8567 rather than 8801
Problem in row 7: 132 76 156 358 559 635 492 534 630 480 155 572 487 255 467 622 612 79 307 609 356 152 190 305 43 69 => the sum is 9332 rather than 8801
Problem in row 10: 405 280 634 157 676 198 144 573 399 201 571 456 469 271 647 574 450 585 562 436 55 532 460 485 199 202 => the sum is 10621 rather than 8801
Problem in row 11: 196 416 580 575 360 432 154 224 605 127 276 667 189 639 668 404 542 299 220 623 651 367 354 557 63 320 => the sum is 10508 rather than 8801
Problem in row 17: 402 564 598 150 592 611 457 411 134 89 100 98 359 197 59 417 653 41 6 336 446 191 412 459 118 656 => the sum is 8556 rather than 8801
Problem in row 20: 507 242 67 34 423 81 178 15 40 434 257 91 462 65 12 595 124 406 624 140 143 109 243 394 604 490 => the sum is 6780 rather than 8801
Problem in row 25: 384 13 162 672 577 234 70 230 275 597 36 50 200 75 316 29 352 60 495 222 170 620 158 58 73 160 => the sum is 6288 rather than 8801
Problem in row 26: 25 565 116 241 477 645 453 85 640 192 78 204 646 247 315 18 671 606 419 258 673 266 377 330 664 545 => the sum is 9756 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 612 438 251 339 123 506 306 675  14 668 635 284 196 318  79 454 300 128 126 185 441  82 216 285 632 508
 567 646 333 405 499 268   3 179 131 244 458 158 109 414 274 425  93 209 510 459  23 361 460 484 558 531
  53 392 102 471  61 439  25 673 111 552 236 502 282 565  47  76 606 466 434 288  72 656 223 587 277 605
 385  55 649 608  67 403 120 428 415 167 588 150 394 133 648 227 106 432 379 151 564 115 254 220 496 647
 247 376 548 232 583 266 325 554 490 637 311 522 194 210  62 292  29  84 653 262  18 667 607  36 396 200
 498 304 246 672 624 539 540  86 162 595 440  78 541 521 481 603  35  44 488  70 536  17 117 296 104 164
 639 159 308 662  97 197 511  90 520 228   2 589 430 472 427 416 530 175  85 497 636 163 389 147  31 401
  95  24 241 474 513 203 477 450 509 547 494 400 100 584 259 211 198 286 492 213 532 338 475 461 169  56
 485  69 463  13 226 356 204 222 446 525 234 195 676 173 482 572 136   6 276  46 480 230 519 591 600 576
 145 515 642 139 160 293 631   1 399 437 188 545 626 225 420 242 443 516 336 156 295 224 313 229 214 467
 206 505 566 221 578 586 208 489  51 452 633  54  77 413   5 202  50 473 590 571 294 523 550  99 212 193
 393 398 364 359 390 436  43 369 320 181 387 391 386 397 355 382 381 371 346 363 182 404  34 409 365 395
 362 353 344 358 343 141 366 351 402 354 314 375 383 341 337 368 348 347 360 332 260 349 331 322 290 370
 384 317 121 263 281 252 309 367 357 326 289 493 267 127 319 177 562 664 410 327 535 444 307 302 303 298
 500 114 503 324 315   4 245 271 556 563 581 310 501  80 257 168 594 329 174 455 186 129 504  71 553 514
 321 297 671 261 132  30 669 323 283 275 273 597 201 249 178 272 279 614 377 543 476 487 233 239 278 243
 301  58 237 570 406 561 640  59 577 330  94 559 528 108 372  74 291 350 538 560 419 619 107 215  75 153
 388 280  12 144 617  98 250 157 183 138 342 479 464  20 659 638 312 172  60 457 335  11 373 424 629 152
 593 537 421 412 658  45 569 423 255 149 137  32 134 253 113 533 661   9 171 634 218 146 316 655 573 154
 187 674 408 345 507 374 161 644  66  88 142 328  22  28 148 670 166 546 305 217 575 235 478 517 378 592
 585 180 299 124  38 189 582 140 447  39 442  96 625 287 529 110 512 666  33 270 143 468 596 491 465 445
 119 495  40  92 190 663 411 231   7 118 610 609 269 665 568  49 627 380 165 657  83 429  19 651 130 524
 462 219 103  87 101 616 456 135 205 623  73 248  15 602 557  21 184  64  68  26 650 615 191 426 192 451
 199 601 654 527 340 652 486 435 613  91 264  42 574 641 618 469 483 604 620 580 112 645 549  52 352  16
  27 240 170 155 418 621   8 579 660 433 518 122 265 526 431 599 422 238 598  65 611  37 630 258  81  89
  48 555 105 544 534  63 256 470 622  41 116 643 542 449 176 551 453 628 207 417 125 407  10 334 448  57

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00012e+07us (= 10001.2ms, 10.0012s)
Wall-clock time (full program): 1.00533e+07us (= 10053.3ms, 10.0533s)
Satisfaction error: 3
Number of search iterations: 3480
Number of local moves: 2884 (including on plateau: 2834)
Number of local minimum: 25 (including on plateau: 363)
Number of resets: 0
Number of restarts: 0

Problem in row 18: 388 280 12 144 617 98 250 157 183 138 342 479 464 20 659 638 312 172 60 457 335 11 373 424 629 152 => the sum is 7794 rather than 8801
Problem in row 23: 462 219 103 87 101 616 456 135 205 623 73 248 15 602 557 21 184 64 68 26 650 615 191 426 192 451 => the sum is 7390 rather than 8801
Problem in row 24: 199 601 654 527 340 652 486 435 613 91 264 42 574 641 618 469 483 604 620 580 112 645 549 52 352 16 => the sum is 11219 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 676 255 250 627 478 580 650 168 287 455 253 243 547 101 165 171 385  74 514  72 482 602 430 409 300 116
  80 660 566 643 636 199 582 217 428 118 330 151  79 642 522 114 544 404 471 301 195 192  28 120 516  63
  22  25 616  13 431 122  78 502 592  60 507 153 559 668 425 162 107 158 412 644 399 443 388 213 540 562
 277  38 652 614 671 615 590 405 234  40 235 578  54 169  52 423 215 159 526 640 175 393 402  27 450 167
 635 267  69 572 148 138 669 240 666 591 448 595  42 262 597 284 113 579 508 207 142 659 232 272 239 398
 143 674 180 672  30 532 464  97 294 320 487 661  85 403  18 441 528  33 606 457 184   4 553 410 432  93
 600 601 327 583 157 519 480 203 418 216 176 181 221 577 537 461 229 204 245  26 427 117 483 396   1 416
 467 135 111  11 466 608 112 511 645 266 125  77 529  41  71 538 657 509 574 133  21 558 196 536 411 493
 214 131 586 475  45 673 470 456 490 179 123 485 447 436 238  67  12 513 105 518 233 622 531 438 218  96
 626 631 384 251 202  68  55 230 146 434  75 560 121 219 639 335 134 106 637 260 656 506 413  32 571 510
 289 568 198 494 144  70 628 224 152 469 362 187 299  64 565 520 611 581  89 325 424  92 209 282  91 489
 392 377 366 429 102 354 108   2 389 372 358 367 381 387 419 364 353 348 373 368 334 383 401 376 370 328
 103 415 340 312 271 382 361 576 332 386 324 460 322 333 351 355 310 363 338   6 369 365 390 352 346 339
 336 349 292 347 342 309 344 356 634 315 329 313 345 357 379 296 337 371 308 331 323 291 316 298 286 297
 584  16 545 319 228 276 270  49 542 185 307 523 621 247 321 654  58 288  83 535 279 406 259 646 311 249
 570 501  84 248 435  81 439 543 556 302 549 541 503   9  61 295 178 273 222 629 242 220 359  56 254 651
 397 306 465 452 278 194  47 664 208  57 119 314 303 391 378 197 261 290 421  19 539 521 499 618 605 258
 341 437 305 252 619 486 191 463  23 263 641 177 140  88 472 132 517 244   8 594 587 182 283 573 647 136
 126 190 675 109 596 649 193 293 161 638 445  53 609 625 268 127 110  48 172  95  15 269 575 598 530 632
  17 141 318 170 453  98 304 655 147  94  31 231 557 612 380 617 458 623 241 569 451 188  24 227 588 476
 524 555  34 422 326 433 149  66  90 481 564 498  39 534 604   5 407 607 226  87 115 183  65 515 201 317
 129 449 280   7 400 459  76 375 150 512 442 160 446 561  43  73 206 653 285 658 496  86 624 468 211 552
  37  46  50  99 408 394 275 567 497 585 620 440 648 200 124 603 343 533 360 174 186 563 100 274  82 593
 473 420 210  51 633 237 525 223 104 417  59 173  36 257 670 589 488 548 350 527 554 662 395  35 155  10
 264 477 454 484 163 281 236 550   3 495 225 189 663 156 256 474 610 128 665 212 599  29 492 130  20 546
 479 137 444 145 139  44 505 166 613 551 667 491 205 462 246 504 630 164  62 414 374 265 154 500 426  14

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00747e+07us (= 10074.7ms, 10.0747s)
Satisfaction error: 5
Number of search iterations: 3311
Number of local moves: 2781 (including on plateau: 2733)
Number of local minimum: 21 (including on plateau: 326)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 676 255 250 627 478 580 650 168 287 455 253 243 547 101 165 171 385 74 514 72 482 602 430 409 300 116 => the sum is 9290 rather than 8801
Problem in row 5: 635 267 69 572 148 138 669 240 666 591 448 595 42 262 597 284 113 579 508 207 142 659 232 272 239 398 => the sum is 9572 rather than 8801
Problem in row 11: 289 568 198 494 144 70 628 224 152 469 362 187 299 64 565 520 611 581 89 325 424 92 209 282 91 489 => the sum is 8426 rather than 8801
Problem in row 20: 17 141 318 170 453 98 304 655 147 94 31 231 557 612 380 617 458 623 241 569 451 188 24 227 588 476 => the sum is 8670 rather than 8801
Problem in row 21: 524 555 34 422 326 433 149 66 90 481 564 498 39 534 604 5 407 607 226 87 115 183 65 515 201 317 => the sum is 8047 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
  76 246 380 231 191 429 400  55  66 362 548 555 528 533 256 237 397 595  81 652 168 129 582  97 360 647
 236 366 277 462 651 376 179 646 138 622  12 664  68 643 399 296 146  39 338 182 155 220  43 543 569 531
 114 432 238  59 446 122 442  24 585 141 642 183 340  63  22 466 213 584 614 609 447 514 471 496 305 229
 364 119 673 374 158 369 273 580 497 561 315 618 542 629 670  53 537 381 195 583 562 116 184 271 192 521
 603 301  93 433 575 523  50 597 189 177 611 134 112 245 491 498 534 309 607 121 188 285 219 355 540  11
 291 294 201 339 406 477 144 151 660 403 149 389 234  32 530  51 402 393 145 140 510 419 594 455 139 283
 450 196 164 418 198 474  28 235 653 558 209 347 288 156 464 367 136 311 396  87 511 615 535 181 426 398
 425 465 518 228  69 300  41 483   9 126 448 240 210 100 592 505 608 479 487  34 620 499 566 281  25 443
  92 215 370 401 449 211 174  42 254   6 630   8 657  14 476 565 326 644 161 278 557 648 671 190 638 124
 176 576 132  75 519  85 478 186 517 413 117 612 133 589 617  62  16 436 567 574 359 159  13 415 551 424
 275 485 142 563  20 358 404 672 493 258 635  56 581 385 337 110 503   3 160  67 383 292 318 571 120 610
 631 251 410 532 242 111 545 525  78 666 131 549 411 170 306 166 308 204 352 320 423 321  18 279 468 384
 371 641 382 375 353 513 348 350 312 335  23 361 659 417  83 669  35 276 224 388  72 372 328 346 239 329
 222 101 456 298 601 501 322 332 354 304 650  54 319 303 333 128 470 639 365 395 586  47 416  21 173 105
 323 172 297 674 263 327 508 458 293 317 274 351 171 284 405  89 282 302 299 554 314 325 482 640 102 295
 378  30 169 509 269 539 324 266 163 472  88 165 137 663 218 287 440 512 427 414  90 633 421 481 226 480
 507 636 289 248 593 247 253 391 205 290 605 259  10 454 412 280 206 408 570 428  65  49 262 461 187 486
 675 676  52  60 268 430 559 546 272  29 624 473 125 103 203 233 241 200 207 363 261 392 598 564 469 178
 244  27 626 604 527 599 270 208  70  91 488 541  71 502  57 504 260 217 661 336 490 435 167 199 460 147
 387 550 313 130 331 345 606 180 544  86 153  82 573 568 194 560 377 368 516 475 135  33  45 150 356  84
   7 106 572  17 108 243 667 390 344 265  61 467 255 250 632 665 536 552  64 214 658  31  94 654 492 457
 154 434 109 264 118 495 123 621 437 556 225 104 409 520 157  15 628   1  38 422 267 590 649 212 637 616
 655 148 602  79  48  46 634 445 342 341   2 587 216 506 197 373 662 143 307 623 202 627 252 357  77 330
 185 452 600 579 625  99  96 113 444 459 529 257 668 484 127 578  80  40 553  98  95 394 489  37 613 107
 522 431 420 193 524 175 547 232 286 463 588 230 645 152   4 591 115 227 441 223 334 494 310  19  58 577
 438 451 316 656 249 407 386  73 596 500  44 515 439  36 619 453 343 538  26 221 349 162  74 526 379   5

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00026e+07us (= 10002.6ms, 10.0026s)
Wall-clock time (full program): 1.00499e+07us (= 10049.9ms, 10.0499s)
Satisfaction error: 5
Number of search iterations: 3601
Number of local moves: 2962 (including on plateau: 2914)
Number of local minimum: 22 (including on plateau: 366)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 364 119 673 374 158 369 273 580 497 561 315 618 542 629 670 53 537 381 195 583 562 116 184 271 192 521 => the sum is 10337 rather than 8801
Problem in row 6: 291 294 201 339 406 477 144 151 660 403 149 389 234 32 530 51 402 393 145 140 510 419 594 455 139 283 => the sum is 8231 rather than 8801
Problem in row 14: 222 101 456 298 601 501 322 332 354 304 650 54 319 303 333 128 470 639 365 395 586 47 416 21 173 105 => the sum is 8495 rather than 8801
Problem in row 20: 387 550 313 130 331 345 606 180 544 86 153 82 573 568 194 560 377 368 516 475 135 33 45 150 356 84 => the sum is 8141 rather than 8801
Problem in diagonal 0: 76 366 238 374 575 477 28 483 254 413 635 549 659 303 405 287 206 200 661 475 658 590 252 37 58 5 => the sum is 9264 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 676 675 552 432 491  93  67 585 365  72 196 535 544 181 209 140  22 117 220 619  53 116  28 611 551 651
 281 638 258 509 431  35  75 580 391  24 189 227 641 463 289 556  71  20 126 153 652 490 671  97 372 562
 137 273 314 448 609 333 409 125  56 225 575 284  62 532 635 230 445 242 367 605 533 219 109 441 411 607
 264   7 475 592 144 631 296 250 407  98 637 563  59 390 596 520 601 403 398  33 514   5 477 206  34 201
  46 567 283  82 583 410 452  91  15 590 404 593 665 501 451 656 478  45 158 110 239 536  63  95 618  70
 481 460 516 504 238 489 496 111 625 148 541 660 356  84  66 254 405 505 482 480 488 598 435 454 579 114
 392 240 498 464 135  48 594 221 624 545 414  68 165  69 438 108 275  16 387  13  61 495 646  64 433 395
  86 118 577 107 645 527 184   9  25 244 569 459 252 565 487 425 633 549 560 469 187 208  12 542 100 262
 548 555  14 259 476  54 434  80 471 634 205 256  87 661 251  88 662 443  31  42 393 630 642 113 255 517
 138 513 655 203 194 200 455 336 602 559 160  60 257 386  26 416 406 591 226 447  36 543 341 347 375 329
 468  43 402 150 444 561 568 654 523 112  30 506 659  27 418   2 119 397 606 389 103 167 216 608 578  51
 627 179 190 217 492 141 279 102 228 494 129 383  32 615 429 486 213 312 628 653 436  76  37 503 483 437
 361 350 370 385 326 373 394  58 358 382 360 368 357 307 317 319 346 369 322 354 345 302 298 352 362 366
 331 334 300 328 325 315 337 321 286 364 359 301 484 249 304 349 614 320 339 266 330 318 343 340 353 291
 355 294 305 306 348 338 295 327 267 351 311 324 413 269 263 293 270 278 299 316 629 308 332 610 415 285
 222 183  18 323 193 218 639 617 180 363 130   1 462 620 534 582 371 157  47 512 524 274 423 649  85 177
 422 384 581   8  17 500  40 211 507 613   3 170 531 497 621 335 303 588 168 120 237 461 525 287 260 412
 310 223  77 408 282  19  79 485 173 457 473 612 519 132 657 261 597 202  44 576 154 396 276 313 510 566
 424 143 479 666 673 420 290 557 272 547 245 197 529  39 241 192 101 616 207 178  78 199 603   4 234 667
  89 540 166 268  96 265 124 515 674 669 453 149 558  81 229 522 136 439 663 379 426 344 121 191 571 133
 115 309 188 600  90 145 644 537 182  29 446 248 151 640 538 622 243 499 521 169 161 574 508 236 159 247
 171 428 128 155  50 648 518 427  52 280 233 450  57 467 156 388 297 139 442 277 400 470 664 342 176  83
 570 106  99 122 528 599 526 672 131 421 377  11 399 186 123 636 573 643 175 215 554 195 224 587  74  55
 650 564 440 553 232 474  23  10 511 162 164 417 376 147 380  73 142 174 586 595 604 152 212 231 658 271
 172  49 670 647 378 419 127 632 584 204 530 493  92 458 105 163 104 198 210 401 623 253 146 572  21 550
 465 626 246  65 381 546 456 288 292 214 668 466  94 235  38 185 374 539 589 430  41 472 449   6 134 502

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00013e+07us (= 10001.3ms, 10.0013s)
Wall-clock time (full program): 1.00533e+07us (= 10053.3ms, 10.0533s)
Satisfaction error: 6
Number of search iterations: 4007
Number of local moves: 3228 (including on plateau: 3181)
Number of local minimum: 43 (including on plateau: 400)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 137 273 314 448 609 333 409 125 56 225 575 284 62 532 635 230 445 242 367 605 533 219 109 441 411 607 => the sum is 9226 rather than 8801
Problem in row 6: 481 460 516 504 238 489 496 111 625 148 541 660 356 84 66 254 405 505 482 480 488 598 435 454 579 114 => the sum is 10569 rather than 8801
Problem in row 7: 392 240 498 464 135 48 594 221 624 545 414 68 165 69 438 108 275 16 387 13 61 495 646 64 433 395 => the sum is 7808 rather than 8801
Problem in row 16: 222 183 18 323 193 218 639 617 180 363 130 1 462 620 534 582 371 157 47 512 524 274 423 649 85 177 => the sum is 8504 rather than 8801
Problem in row 22: 171 428 128 155 50 648 518 427 52 280 233 450 57 467 156 388 297 139 442 277 400 470 664 342 176 83 => the sum is 7898 rather than 8801
Problem in diagonal 0: 676 638 314 592 583 489 594 9 471 559 30 383 357 249 263 582 303 202 207 379 161 470 224 231 21 502 => the sum is 9489 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 453 556 670  30 219 510 545 560 411 252  89 226 190 418 305 163 599  68 145  64 140 347 512 200 482 647
 646 208 602 550 342 624 273  88  38 139 461 612 635 417  95  14 127 135 361 625 660 522 516  41 440  34
 508 363 357 655 667 253 311 289 671 113 157 674  48 101  99 483 443 186  84  51 147 178 285 257 615 622
 588 229 130 250  63 223 668 321 192 314 575 224 112 193 567  22 631  80 640 392 561 500 584 430   6 306
 540   9 169 341 659 166 225 284 408 559  18 552 191 546 436 570   7 633 322 410 154 558 323 195 470  56
 450  70 221  74 432 413  40 261 627 125 597 629 276 509 562  67 566 109 526 632  28  97 332 415 587 156
 434 525 505 141 521  50 106  85 493 573 254 444 654 539 499 617  53 537 247 496 331  52  16 563  19  47
 142 585 520 265 251 664   4 439 272 610 280 359  58 134 270 460 199 464 544 398 231  44 476 202 366 564
 616 244 577 501 644 237 287 144 283 117  43 158 451   1  54 536 449 334 547 100 529 636 414 108 337 454
 233 376 291 581 204 391 609 637 582 281  82 565  15 349 298 168 435  26 455 431 511 172 216 282 249 362
 318 641 188 402 365 479 503   8 608 534 375 458 469  49  23 407 102 212 380  79 292 400 403 404 574 128
 215 459 379 159  24 399 425 669 296 353 209 290 387 620 355 182 329 607 487  92 405 457 151 313 118 421
 336 388 367 302 242 356 343 374 317 370 338 386 129 333 369 368 345 325 384 371 307 346 354 315 385 351
  98  72  32 441 268   2 572 220  57 489 295 234 319  83 328 498 429 579 462  45 490 279 447  55 488 160
 330 456 165 137 288 373 473 589 148 446 185 348 486 132 240 176  90 383 601 269 426 201 196 593 513 557
 506 304  35 263 227 571 428 406  13 271 293 580 412 262 634 606  73 364 235 309 126 650 218 651 136 228
 389 180 206 116  75 377 104 472 326 205 548 114  20 603 427 672 502  87 416 549 628  81 339 492 111 448
 171 598 248 611 592  93 239 275 222 495 527 485 181 393   3 648  12 138 382 653  69 255 531 352 121 507
 467 143 340 335 471 390 170 277 184  37 465 258 569 619 210  71 299 246 256 149 264 442 626 578 538 397
 197 187 649 211 124 308 167 630 286  96 533  25 542 652 445 155 517 372  29 491 360 583 614 120 401 107
 105 409 676 463  27 642 638 123 530 452 350  60  66 312 541 594 468 161 131 494 543  11 174 514 119 198
 173 675  10 478 122 189 419 153 423 150 213 177 613 551 600 241 656 663 207  42 422 378  86 297 259 604
  31 484 532 424 535 420  46 553 586 665 618  76 590 243  94 175 524 591 232 554 344 324  62 133 394 301
  33 294  61  17 661 358 303 528 480 238 437  77 596 115 666 568 621 523  65 515 179 466  39 164 320 477
 555  36 475 381 183 110 643 395 245 639 645 316 274 300 519 146 266 497   5 152  78 605 657 504 662 236
 267 310 396 673 595 203 260  21 103 278 214 474 518 327 162 194  59 481 658 438 576 217 230 623  91 433

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00018e+07us (= 10001.8ms, 10.0018s)
Wall-clock time (full program): 1.00542e+07us (= 10054.2ms, 10.0542s)
Satisfaction error: 6
Number of search iterations: 3095
Number of local moves: 2582 (including on plateau: 2535)
Number of local minimum: 22 (including on plateau: 302)
Number of resets: 0
Number of restarts: 0

Problem in row 2: 646 208 602 550 342 624 273 88 38 139 461 612 635 417 95 14 127 135 361 625 660 522 516 41 440 34 => the sum is 9205 rather than 8801
Problem in row 3: 508 363 357 655 667 253 311 289 671 113 157 674 48 101 99 483 443 186 84 51 147 178 285 257 615 622 => the sum is 8617 rather than 8801
Problem in row 14: 98 72 32 441 268 2 572 220 57 489 295 234 319 83 328 498 429 579 462 45 490 279 447 55 488 160 => the sum is 7442 rather than 8801
Problem in row 17: 389 180 206 116 75 377 104 472 326 205 548 114 20 603 427 672 502 87 416 549 628 81 339 492 111 448 => the sum is 8487 rather than 8801
Problem in row 23: 31 484 532 424 535 420 46 553 586 665 618 76 590 243 94 175 524 591 232 554 344 324 62 133 394 301 => the sum is 9531 rather than 8801
Problem in row 25: 555 36 475 381 183 110 643 395 245 639 645 316 274 300 519 146 266 497 5 152 78 605 657 504 662 236 => the sum is 9524 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 517  73 358 217 178 283 670 429  54 574 593  91   3 245 226 623 126  63 289 520 461 582 371 445 159 651
  32 325 146 300 578  96 553 647 186 132 360 400 534 609 161 644 349 259  79 585 253 452  31 408 627  55
 504 203 672 650 135 547  39 136  20 220 634  98 636 521 332 344 294 612 122 417 115 167 172 586  94 531
 133  75 123 376 527 614 391 550 163  85 165 621 660 117 615 328 112 393 235  70 444 143 489 513 359 326
 210 424 603 480  56 357 385 493 667 505 305   2 551 562   5 137 387  89 198 414 565 567 316   9 361 215
 350 492 626 303 205 467 105 577 301 174   1 227 495 384 154 604 496 365 509 347 168 113 108 572  42 616
  58 573  16  82 103  80 544 189 558 399  66 665  27 535 519 453 658 218 460 510 273 192 656  76 605 286
 637 279  40  21 195 673 261 664 529 313 516  60 470 638 206  35  41 185 428 271 561 618 340 364 499 197
 657 624 180 515  71 378 434 309 260  65 564 306 173 213 481 619 278 524   4 383 231 265 465 244 402 433
  37 632 184 222 676  93  95 522 568  29 478 498 411 209 589  45 448 456 556 268   8 250  97 655 488 287
  83 540 183 138 401 530 312 471  50 610  38 120 290 158 560 403  52 263 570 142 641 412 333 539 542 420
 104 485 449 455 536 597 645  61 435 661 194 230 214 389 233 191 563  64  33 258 442  46 511 234 475 296
 580 339 219 388 674 241 238  57 367 546 334 343 381 330 502   6 128 552 277  13 379 336 450 395 223 503
 571 355 318 341 369 315 362 331 311 329 372 291 270  12 314 356 501 243 514 282 297 249 380 319 322 477
 599 320 307 423 321 370 426 147 464 451 669 323 392 469 281 409 668  26 374  23  68 327 454  78 248 164
 237 107 302 427 274 494 269 275 166 304 396 447 308 246 526 407 181 430 102 663 613 675 276 280 266 130
 592 594 548  28 457 310 595 139 131 239 611 299 404 386 633 346  48 629 490  77 507 298 208 160 196 431
 418 141 583 114  51  19 124 575 254 581 127 543 182 152  67 533 338 441 101 525 620 413 216 354 129 342
 351  87 555 532 229 224 134 202 648 397 170 193 607 432 459 584 162 472 631 232 187  15  25 151 639 483
 111 176 251 671 421 463 169 179 382 554 541  88  36  53 188 262 617 140 653 630 207 606 419 497 366 121
 591 295 649 654 199 100 394 272 518 155   7 557  10 247 437 150 375 549 416 436 406 390  17  34 566 377
 545 508 405  81 600 628 175  14 110 125 425 486 225 659  69 293  74 466 324 153 257 491 642 474 482  90
  59 462 415  11 337 228 601 200 264 252 116 468 523 602  62 345 443 440 635  84  44 422 487 622  49 528
 476 267  92 576 256  99  86 625 458 640 236 646 255 119 118 221 512 506 190 538 643  47 590 284 144 177
 240  72 335 479 373 157 348 588 652  22 473 598 148  30 398 292 662 212 587 352 368 156 537 145  18 559
 109 353 242 317 579 438 446 149 285 439 410 201 596 484 666 171 288 204  24 608  43 569 211 363 500 106

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00019e+07us (= 10001.9ms, 10.0019s)
Wall-clock time (full program): 1.00553e+07us (= 10055.3ms, 10.0553s)
Satisfaction error: 7
Number of search iterations: 3081
Number of local moves: 2636 (including on plateau: 2590)
Number of local minimum: 12 (including on plateau: 292)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 133 75 123 376 527 614 391 550 163 85 165 621 660 117 615 328 112 393 235 70 444 143 489 513 359 326 => the sum is 8627 rather than 8801
Problem in row 5: 210 424 603 480 56 357 385 493 667 505 305 2 551 562 5 137 387 89 198 414 565 567 316 9 361 215 => the sum is 8863 rather than 8801
Problem in row 8: 637 279 40 21 195 673 261 664 529 313 516 60 470 638 206 35 41 185 428 271 561 618 340 364 499 197 => the sum is 9041 rather than 8801
Problem in row 9: 657 624 180 515 71 378 434 309 260 65 564 306 173 213 481 619 278 524 4 383 231 265 465 244 402 433 => the sum is 9078 rather than 8801
Problem in row 17: 592 594 548 28 457 310 595 139 131 239 611 299 404 386 633 346 48 629 490 77 507 298 208 160 196 431 => the sum is 9356 rather than 8801
Problem in row 18: 418 141 583 114 51 19 124 575 254 581 127 543 182 152 67 533 338 441 101 525 620 413 216 354 129 342 => the sum is 7943 rather than 8801
Problem in row 23: 59 462 415 11 337 228 601 200 264 252 116 468 523 602 62 345 443 440 635 84 44 422 487 622 49 528 => the sum is 8699 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 230 598 348 539 309 212  93 197 111 465 589 239 318 113 365 660 585  19 386 524  32 415 500 526 274 154
 456 297 100  62 435 104 211 569 439 639 107 529 259 195 375 455 126 364 437 543 246 441 520  10 645 237
 306 522 606 596 286 280 478 485 640 493 664 573 106  51  43 193  65 217 633 675 327 603 444  45  98 563
 179  79 550 513 541 511 187 224 130 273 141 173 208 395 268 267 559 308 336 132 509 184 584 617 557   9
 290 629 576 590 408  20 331 553 587 463 418  30  71 562 213  70 214   7 266 575 338 540  80 351 220 399
 124 567 164 626  64 466 103 406 669 105 534 644 491 579 182 499 234  66 108 676 496 180  38 487 218  75
 549 374 110  74 317 650 360 238 523 219 117 475 479  48 537 518 544 240 571 172 192 658 339 101  46 350
 426 390 471 175 535 507 396 477 201 326 129 140 416 271 635  56   6 265 489 294 486 362 652 298 330  68
 643 464 417 304 424 595 578 160 367 272 468 207 438  28 457  52  83 411 400  16 431 251 161 653 252 269
 188 628 674 505 345  55 657 434  99 430 476  33  49  58 115 532 405 498  77 227 647 599  78 275 425 292
 582 517 277  22 189   2 619  89 560 144 210 614 480 586 612 427 202 508  90 450 321  47 191 555  15 519
 460   8 356 393 404 352 241 372 409 383 119 402 659 146 403 397 376 381 384  26 382 385 341 278 407 337
 155  76 285 310   3 166  13 422   5 139 488 577 346 349 388 358 663 637  23 368 601 506 293 433 646 551
 387 300 366 315 307 313 320 335 319 380 302 287 333 661 347 325 303 344 288 323 377 284 314 332 343 296
  50 198 248 151 638 121 428 312 236 514 328 454 495 205 114 283 295 666 538  72 469 604 209 229 414 530
 583 379 203 672 671 568 143  14  63 253 299 467 632 135  61 250  21 429 249 342 564  44 256 204 648 651
 620 527 123  40  18 449 607 622  81 125 510 436 228 392 410 233 440 561 194 254  87 482 136 334 262 630
  35 613 481 357 157 369 525 588 174 558 662 171 122 670 636 627 301  59  34 618 176 109 153 593 556  85
 515 452 159 169 462 245 572 474 546 127 243 483  54 473  25 196 600 215 170 316 597 225 625 255 150 453
 459  29  39 451 186 667 656 378 200 623 242 221 270 442 222  12 371 311 566  42  17 545 605 547 443 257
 264  60 458 413 206 142 145 133 446 162 355 542 634 445 592 611 359 361 149 624 148 281 420 261 502  88
 501  11 649 654 185 276 181 138 340 389  91 447 610 258 432 448 533 158 370 226 120 163 484 152 591 394
 177 156 521  97 412 608 401 190 616 565 118 167 668 492  86  84 621 497 291  73 419   4 548 655 528 421
 353 134  95 235  94 373  41 322 305  24 490  67  36 641 263 137 470 602 615 112 183 247 178  37 102 552
 216 594 494 147 631 461  92 642 232  57 570 354 231 324 516 580 260  96 665 609  82 279 116 329   1 223
  53 199  31 391 574 289 423  27 503 673 131  69 168 282 504 531 165 581 472 512 554 363 536 244 128 398

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00022e+07us (= 10002.2ms, 10.0022s)
Wall-clock time (full program): 1.00548e+07us (= 10054.8ms, 10.0548s)
Satisfaction error: 7
Number of search iterations: 3254
Number of local moves: 2661 (including on plateau: 2615)
Number of local minimum: 32 (including on plateau: 341)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 306 522 606 596 286 280 478 485 640 493 664 573 106 51 43 193 65 217 633 675 327 603 444 45 98 563 => the sum is 9992 rather than 8801
Problem in row 4: 179 79 550 513 541 511 187 224 130 273 141 173 208 395 268 267 559 308 336 132 509 184 584 617 557 9 => the sum is 8434 rather than 8801
Problem in row 11: 582 517 277 22 189 2 619 89 560 144 210 614 480 586 612 427 202 508 90 450 321 47 191 555 15 519 => the sum is 8828 rather than 8801
Problem in row 18: 35 613 481 357 157 369 525 588 174 558 662 171 122 670 636 627 301 59 34 618 176 109 153 593 556 85 => the sum is 9429 rather than 8801
Problem in row 23: 177 156 521 97 412 608 401 190 616 565 118 167 668 492 86 84 621 497 291 73 419 4 548 655 528 421 => the sum is 9415 rather than 8801
Problem in row 24: 353 134 95 235 94 373 41 322 305 24 490 67 36 641 263 137 470 602 615 112 183 247 178 37 102 552 => the sum is 6708 rather than 8801
Problem in diagonal 0: 230 297 606 513 408 466 360 477 367 430 210 402 346 661 114 250 440 59 170 42 148 163 548 37 1 398 => the sum is 8143 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 596 130  60 471 584 169 628 370 545 211  19 305  27 524  46 575 433 142 284 452 111  30 487 632 368 602
 541 499 439 470 317 103 264 427 646 230 591  79 113 174 132 314  85 587 534  22 616 156 134  98 649 581
 170 633 396 225  20 468 183 442  88 627 192 298 489 116 277 563 398 530  43 669   1 585 385 356 109 538
 615 171 227 608 261 571 152 249  80 474 281 375 138 306  12 507 148 108 557  59 546 579 652 431 158 536
 606 201  83  48  84 421 329 502 503  57 177 136 496 631 476 623 650 340 599 202 145 483  86  65 618 240
  14 634 561 578 548 580 164  82  41 532 235 659 122 102 495 449 244 160 184 228 437 593 218  63 353 525
 121 413  26 233 187 397 457 151 500 505 266  16 624 115 572 493  32  34 182 586 484 272 658 423 387 667
  25 104 357 494 553 531 355 351 518 539 195 185 582  51 588 378  52 620  33 552 458  96 465 199 448  72
 117 566   7  61 665 414 604 469 114 369 335 401 363   5 562 605  78 327 377 293 362 191 511 513 100 392
 482 456 384 176  95 613 515 124  53 173 323 673 403 409 506 304 324 360 144 274 379 270 450 460   8 443
  17 252 424 365 224 296  31 472 612 207 358 569 644 354  71 408 490 253 310 344  70 404 611 382 312 321
 516 657 391 412 400 367 159 451 418  42  24 504 205  97 350 326 671 653  39 213 292 263 107 395 560 289
 473 426 348 301 438 303 380 318 555 246 271 232 383 432 276 372 330 221 313 319 295 297 339 265 410 258
 290 254 346 341 345 193 374 343 110 434 674  89 251 245 477 300 181 393 565 347 359 444 337 417 316 376
 322 309 196 262 328 406 522 617  81 333 402 364 275 419 381 302 219 285 479 269 166 206 267 656 399 336
 425  87 278 519 445 256 388 407 220 440 640 508 501 386 248 101 268 352 143 287  37 242 299 510 231 583
 294 325 280 260 371 216 626 373 598 150 638 485  90 273 315 236 250 415 311 234 453  28 430 463 189 498
 574 492  58 332 639 668 551 564 282 212 168 338 131  38  21  40 226 576 642 542 279 648 197 239 204 140
 178 568 625 420  91 163 147 198  75 594 422 661 559 454 517 112 597   6 601 172 257  76  69 645 441 153
 349   9 595 521 462 106 118 461 255  66 247 475 660 603 614  11  99 447 528  92 533 416 135 554 435  10
   2 180 635 155  35 288 481 128 459 526 609   4 636 544 320 223 630 190  15 600 157 547 577  56 643 161
 428 540 549 537 146  54 389   3 592 308 331 455 651 589  62  50 523 165 411 647 203 436 125 123 466  18
 405 200 675 129 243  44  67 590 621 610 291  73 141 558 210 394 446 619 366 126 238 512 509  94 491 149
 429 637 105 194 283 514 120 361 550 286 654  55 217 209 127 215 641 307 488 543 629 214 529 133 139 222
 334  13 186 154 464 567 241 229 208 607  68 520  64 670 666 237 259 664 167  74 672 676  49 162 188 662
 478  45 570 535 573  93 556 119  77  23 390 342  36 497 480 663 527  47 486 655 622 137 175 467 179  29

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.32864e+06us (= 9328.64ms, 9.32864s)
Wall-clock time (full program): 9.38034e+06us (= 9380.34ms, 9.38034s)
Satisfaction error: 0
Number of search iterations: 3594
Number of local moves: 2959 (including on plateau: 2907)
Number of local minimum: 29 (including on plateau: 356)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 674  85 634  64 314 654 400 639 667  43 214 296 263 341 409 448  51 413  40 388  93 621 229  23 532 266
 237 556  59 101 260  61 310 291 126 342 575 659  31 488 216 643 169 592 501 309 377 279 329 523 479 288
 173  50 494 328 113 596 292 217 165 631   8 552 176 614  96 100 209 498 648 107 452 443 528 571 178 562
 414  84 496 194 545 543 511 442 540 259 411 622 318  41 187 199  91 633 425 103 212  88 577 557 248  76
 646 492 668 363 426  27 370 365 642 462  39 410  66 148 303 111 627 520  21 312 287 515 262 475 574 192
  75 250 190 141 355 473 112  35 472 604 155 554 182 641 128 337 585 572 567  99  82 559 177 395 638 423
 544  53 301 232 612 568 188 152 357 104 360 422 362 241 449  87 416 149 548 476 623 490 326  97 590  54
 264  25 636 602 444 275  95 459 441 506 191 352 505 271 147 353 582 253  81 595 437 591 172 201 143 180
  71 398 206  77 221 468 581 322 606 672 676  56 130 181 640 115 652 256  94 524 625 656 561 587 619 356
 202 290 447 420  92 670 405 233  73 331 508 273 661 439 466 251 429 407 240 159  89 432 134 438 502 210
  60 211 446 424  72  86 616 125 458 116  65 403 418 386 529 383 497 219 434 402 477 408 404 480 387 295
 397 166 390 319 412 369 372  47 379   3 382 371 396 338 389 393 351 358 401 380 368 349 346 385 392 348
  24 481 189 537 673 613 139 231 174 671 136 164 278 267 555 286 483 131 381  46 605 226  62 339 583 527
 347 384 330 512 280 320 345 289 350 367 336 281 617 334 359 340 133 335 321 364 297 302 294 332 308 324
 580 650 391 154 106 538  32 666 406 594 108 306 566  26   9 655 518 137 207 193 598 105 375 235 419 227
 325 628 163 579 284 394 244 653  83 135 658 632 285 428 185 366 220  12  29 399  98 450 530 626 170 225
 460 344 560 517 440 243  42 307 270  20 195 489 454 461 469 215 361 664 239 637  17 222 257 230 224 464
 586 374 534  55 542 150 467 144 129   2   4  74 547 132 299 573 246  10 157 478 607 118 624 430   7 453
 276 245  49 651 576 471 553 565   5 179 315 160  48 123 509 521 121 531 647 161 354 183 436 570 435 117
  15 675 373 657 495 433 127  80 311 549 451 120 563 184 277 493 421 457 378 258  52  11 603  68 140 610
 584 138 300 417  36  57 649 249 525 608 569 536 611 142 171 600  58 539 487  16 208 305  45  33 283 635
 282 564 109 200 223 205 204 546 261 445 431  69 114 665 298 427 465 122 470 551 491 456 589 124 304 186
 333 499  19 343  70  90 669 533 588 236 620 486 327 541 376 247  14 158 609 550 662 168  22 102  13 526
 203 151  63 162  30  18 119 234 196 500 252 242 175 272 482 618 145 265 558 660 218 197 663 474  79 269
 522 415 601 268 535 156 504 463 510 167 629 228  78 519 238   6 644 254 317 597 198 599 146 213  38 485
 507 593 153 484 645 323 455 514  67 255 513  44 630 578 615  34 313 316   1  37 274  28 110 293 516 503

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00021e+07us (= 10002.1ms, 10.0021s)
Wall-clock time (full program): 1.00543e+07us (= 10054.3ms, 10.0543s)
Satisfaction error: 6
Number of search iterations: 3731
Number of local moves: 3109 (including on plateau: 3061)
Number of local minimum: 26 (including on plateau: 377)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 414 84 496 194 545 543 511 442 540 259 411 622 318 41 187 199 91 633 425 103 212 88 577 557 248 76 => the sum is 8816 rather than 8801
Problem in row 5: 646 492 668 363 426 27 370 365 642 462 39 410 66 148 303 111 627 520 21 312 287 515 262 475 574 192 => the sum is 9323 rather than 8801
Problem in row 9: 71 398 206 77 221 468 581 322 606 672 676 56 130 181 640 115 652 256 94 524 625 656 561 587 619 356 => the sum is 10350 rather than 8801
Problem in row 18: 586 374 534 55 542 150 467 144 129 2 4 74 547 132 299 573 246 10 157 478 607 118 624 430 7 453 => the sum is 7742 rather than 8801
Problem in row 24: 203 151 63 162 30 18 119 234 196 500 252 242 175 272 482 618 145 265 558 660 218 197 663 474 79 269 => the sum is 7245 rather than 8801
Problem in row 25: 522 415 601 268 535 156 504 463 510 167 629 228 78 519 238 6 644 254 317 597 198 599 146 213 38 485 => the sum is 9330 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
  81 593 504 355  56 368 419 176 596 272 611 664 471 673 102 236 351 211 574  46 633 558 586 427  75 655
 187 289 284 450   1 173 626 583 208  43 662 511  74 354 212 160 287 214 559  96 539 345 274 643 636 391
 674 446 518 618 548 647 597 564 461 167   7 201 423 482 595 589 105 568 233 276 288 203 527 124 101 479
 197 319 151 439 185 610  73 494 266 443 209 262 556 414 533 606 598 510  70 535  71 491 565 384 490 616
 321  86  29 132 553 285 613 623 458 575 230 385  28 171 347 503  65 413 100 591 601 532 137 627 232 302
 546 343 378  60 200 516 534  83 394 440 650  61 210 126 397 291  53  38 189 550 529 249 506 278 580 600
 537 505 549 521 334 561 489 526 670  31 213 198 130  69 514  30 520 497 485 460  51 317 106 184 296   8
 473 118 269 542 401 653 571 456 340 629 149  82 237 123  36 552 117 306 464 658 162 445  47 226 104 641
 620 465 572 604 451 250 156 281  87 183  32 172 407 486 409  12 363 501 573 248 239 614 457  16 431 525
 373  50 178 434 264 524 202  17 145 215 523 447 472 538  63 219 420 400 161 297 412   5   6 113  88 234
 320 369 247 127  21 476   4 193 646 295   9 155 665 303 468 388 258 139 358  68 372 642 448 659  99 566
 411 146 109 157 294 672 300 298 245 617 165 477 195 453 543  66 158 361 406 159 362 469 403 639 350 346
 475 508 339 316 562 415 455 119 114 637 142  57 578 590 246 143 498 654 273 352 135 625  95  85 255 133
 261 324 392 342 335 312 547 353 338 341 322 323 330 374 304 360 293 292 332 314 279 344 328 389 357 315
 551 131 399 229 150 463  62 367 283 348 129 329 370 366 326  27 608 267 649 668 567 333 111 254 424 390
 199 676 218  34 223 290  52 634 570 144 265 181 175 554 238 286 528 640  24 666 470 164 364 438 615 153
  94 251 277 225 454 182 311 252 433  89 522 418 422 395 661 660 421 275 621 432 112 152 631 325  23 163
  54 576 222  78 499 404 206 408 216 444 428 349 270 227 512 622 260 240 603  49 502  79 500 242 607 204
  97 513  35 582 166  14 241 191  80 517 430 648 602 496 115 484 612 579 147  91 305 309  39 459 569 480
 426 205 530 545 436 452 168 493 148 667 536 138 467 221  45 365  37 140 417 134 628 337 663 169 154 280
 231 645 635 331 531 110 220 375 540  33 180 481 103 257 194 474 644 492  42 487 336 387 587 402 299 243
 652  11 584 190 379 188 462 136 383  92 196 581 125  67  18 170 371   3 121 217  20  59 179 192 544 177
 437 268 632  98 657  90 671 380 495 435 592 624  64 359 560 377  25 563 416 386 263 425 228 519 122 271
 244 307 116 555 120  48 301  22  10 382 507 478 442 605 619 541 594  44 441  15 488  77 282 398 656 509
 256  19 410 207 515  72 393 669 599 588 483   2 310  58  93 259 429 141 235 449  41  55 405 356 318 107
  84 638 224 630 466  26 128 108  76 174 609 577 675  40 651 381 186 313 308 557 396 585 327 253 376  13

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00033e+07us (= 10003.3ms, 10.0033s)
Wall-clock time (full program): 1.00558e+07us (= 10055.8ms, 10.0558s)
Satisfaction error: 12
Number of search iterations: 3384
Number of local moves: 2856 (including on plateau: 2815)
Number of local minimum: 19 (including on plateau: 355)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 81 593 504 355 56 368 419 176 596 272 611 664 471 673 102 236 351 211 574 46 633 558 586 427 75 655 => the sum is 10293 rather than 8801
Problem in row 3: 674 446 518 618 548 647 597 564 461 167 7 201 423 482 595 589 105 568 233 276 288 203 527 124 101 479 => the sum is 10441 rather than 8801
Problem in row 4: 197 319 151 439 185 610 73 494 266 443 209 262 556 414 533 606 598 510 70 535 71 491 565 384 490 616 => the sum is 10087 rather than 8801
Problem in row 5: 321 86 29 132 553 285 613 623 458 575 230 385 28 171 347 503 65 413 100 591 601 532 137 627 232 302 => the sum is 8939 rather than 8801
Problem in row 9: 620 465 572 604 451 250 156 281 87 183 32 172 407 486 409 12 363 501 573 248 239 614 457 16 431 525 => the sum is 9154 rather than 8801
Problem in row 10: 373 50 178 434 264 524 202 17 145 215 523 447 472 538 63 219 420 400 161 297 412 5 6 113 88 234 => the sum is 6800 rather than 8801
Problem in row 11: 320 369 247 127 21 476 4 193 646 295 9 155 665 303 468 388 258 139 358 68 372 642 448 659 99 566 => the sum is 8295 rather than 8801
Problem in row 21: 231 645 635 331 531 110 220 375 540 33 180 481 103 257 194 474 644 492 42 487 336 387 587 402 299 243 => the sum is 9259 rather than 8801
Problem in row 22: 652 11 584 190 379 188 462 136 383 92 196 581 125 67 18 170 371 3 121 217 20 59 179 192 544 177 => the sum is 6117 rather than 8801
Problem in row 23: 437 268 632 98 657 90 671 380 495 435 592 624 64 359 560 377 25 563 416 386 263 425 228 519 122 271 => the sum is 9957 rather than 8801
Problem in row 25: 256 19 410 207 515 72 393 669 599 588 483 2 310 58 93 259 429 141 235 449 41 55 405 356 318 107 => the sum is 7469 rather than 8801
Problem in diagonal 0: 81 289 518 439 553 516 489 456 87 215 9 477 578 374 326 286 421 240 147 134 336 59 228 398 318 13 => the sum is 7987 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 675 275 672 373 594 676 234 243 277  19 488  48 147 236  97  70 210 527 120 151 590  74 645 415 297 648
  83 655 461 497 511 117 526 309 163 516 651 537 103 256 170 435 385 175  29 571 113 567 118 198 638  17
 356 595 621 122 187 131 407 483 492 301 589 128  10 384 171 466 546 189 292 444  33 507 169 273 291 614
 612 359  84 241 479 323 611 453   5 150 665 525 564 541 593 560 406 558 609 285 535 542 587 458  66  42
  15 129 294 519 557 622 159 141 252 145 271 668  91 182 196 462 555 180 390 485 502 563  39 532 186 666
 398 139 266 185  60 517 173 274 303  45 472 310 229  18 657 584 276 489 400 193 212 505 592 649 550 305
 620 548 643 408 287 311  22  78  46 624 178   1   4 596 227  63  24   7 107 246 293 258 207 248 568 545
  77 300 269 413 623 314 534 457 528 389 115 553 208 487 135 148 474 578 477  94 425 152 437 446  26 142
 267  92  31 140 630  55 278 671 470 562 231 392 664  75 616  35 214 452 661 510 529 341 165  34 494 192
 296 254 501 544 263  49  36 416 434 460 195 156 575 580 481 144 424 414 515 603 197 345 143 618  62  96
 433 449 396 639  69 298 114 569  20  38 423 506 486 663 357 411 183 286 130   2 429 226 478 455 422 319
 419  44 376 495 333 387 369 610 338 288 154 367 402 383 155 388 642 363 224 272 636  61 378 112 206 399
 348 339 355 365 366 337 230 353 327 126 382 317 368 320 613 371 330 362 328 380 349  80 386 394 332 343
 350 321 326 282 354 318 370 281 358 279 295 381 443 336 652 361 304 342 329  87 312 513 325 313 289 280
 167 490 239 324 166 451 191  68 397 268 110 290 137 647 347 491 543 464 223  76 410 662 523 116 375 626
  90 177  16 579 393 251 412 604 184 496 283 102 617 249 316 284 162 520 260 299 588 598 377  86 360 498
 482 264 441 637 119  30  43 124 205 233 635 108 634 259 199 561 240 322  25 448 530 471 463 331 646 351
  47 631 105 306 253 442 670 632 493 581 480  54 469  88  37 659 503  52  11   3 660 417 427 250 504  27
 153 164  51 409 551 509 473 218 653 539 403 641 121 132  93 315 430 138 439 401 225 597 255 468 176 247
 215 475 136  12 127 633  81 158 194 625 133 669 174 203 200 123 157 238 615 602 456 605 235 585 577 573
 591 146 190 334 379 149 307 467 629 524 242 533 499 436 432 222 111  89 374 454  85 270 600 601  72  65
 445 521 582  13 650 428 391  59 217 228  40 179 426 372 583 570  53 431  73 606  58 101 476  67 440 160
 262 549 540  23 204 216 640  28 450 221 265 556 512 547 346 232  57 245 484 219 335 100  71 566 459 674
 658 500  99 438 257  79 644 554 125 395 420 106  95  50 619  64 656  98 565 518   6 181 536 168 552 418
 522  21 576  82 201 559 673 211 574 447 109 209 586 627 104 538 308 654 607 508 261   9   8  14  41 352
 220 364 531 421 188 599 213 340 667 302 572 465 237 134 405 244 608 628 514 344  32  56 161 404 172 202

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00529e+07us (= 10052.9ms, 10.0529s)
Satisfaction error: 5
Number of search iterations: 3315
Number of local moves: 2712 (including on plateau: 2664)
Number of local minimum: 26 (including on plateau: 322)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 612 359 84 241 479 323 611 453 5 150 665 525 564 541 593 560 406 558 609 285 535 542 587 458 66 42 => the sum is 10853 rather than 8801
Problem in row 7: 620 548 643 408 287 311 22 78 46 624 178 1 4 596 227 63 24 7 107 246 293 258 207 248 568 545 => the sum is 7159 rather than 8801
Problem in row 22: 445 521 582 13 650 428 391 59 217 228 40 179 426 372 583 570 53 431 73 606 58 101 476 67 440 160 => the sum is 8169 rather than 8801
Problem in row 26: 220 364 531 421 188 599 213 340 667 302 572 465 237 134 405 244 608 628 514 344 32 56 161 404 172 202 => the sum is 9023 rather than 8801
Problem in diagonal 1: 648 638 273 587 563 212 246 477 452 424 411 155 320 443 290 283 233 493 218 81 149 650 23 99 21 220 => the sum is 8609 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
  74 655 478  33 588 497  42 669  24 323 327 506 175  26 498 199  52 568 649 188 659 656 390 289 311 214
 590 169 634 103 654 454   4 440 268 206 504 465  71 596 145  25 275 448  40 180 644  76  63 545  18 374
 140 315 409 512 562  73 561 619 296 118 528 662 560 499 191 496 505 283 225 601  57 135  48  94 307   5
 466  31 665 144 376 133 449 447 223 611 418 441 164 584 425 629 168 294 302  22 272 209  39 410 243 636
 564 652 559 525  96 234   3 386  54 401   6  38 489 651 319 167 345 236 142 338 551 121 399 423 547 555
 632 373 136 422 162  55 661 623  16 600 183 475 336 569 618 159 621 587 260 668 366 532 468 305 501 481
 367 495 157 314 628 109 151 326 203  86 471 480 332  83 542 220 530 310 433 517 176  97 429 558 660 127
 130 437 503 189 486 455 614 208 602 100  75 565 306 230 263 174 139 293 192 556 637 459 229 155 457 347
 231   9 546  23 583 113 371  82 443 202 529 282 115 232 493 573 389 172 458 244 291 395 524 299 563 639
 198 605  17 264 415 438 101 257 238 645 593 237 128 515 138 510 196 329 187 516 248 258 239 535 460 534
 210 594 676 181 387 266 631 582 520 107 247 242 129 253 451 322 476  19 394  58 446 382 553  15 137 523
 434 474 290 674 362 278 450 259 270 361 453 339 301 226 195 252 184 222 539 349 241 309  77 657 274 331
 355 340 341 304 292 351 308 337 286 379 313 609 312 388 348 357 328 297 383 279 333 250 318 354 358 281
 111 585  72 177 108 273  44 325 570 647 479  61 672 384 643 544 170 567  45 436 124 607 500 194 416  47
 359 233  89 370 179 543 610 430  95 178 197 397 265 381 342  78 365 514 287 509 494 173 540 200 575 398
 413 156 603 116 346  32 185 417 625 531 402 105 615 235 572 280 642 599 186 256 470 262 277 641 163 120
 485 421 132 385 363 407 664 316 591  67 201  28 368 424 461  12 464 146 320 372 321 432 671  80 403 267
  29 224 143 240 217 408 356  49 427 537 538 158 442 548 488 378 472 566 675 182 152 439 396  91  68 578
 149 324 536 670   8 491 633  21 426 126  90 251  62   7  64 452 353 215  10 595  93 640 148 369 343 435
 613 219 330 473 125 377 406 484 391 521 404 218 522 161 205 122  53 271 482 666 456 428 392 412  43  27
 393   2 616 508 213 549 112 207 519 630 552  37 255  85  30 420 211 658 597 317 303 444 502 212 160 269
  50 350 334 276 527 620  92  13 580 646 462 431 400 153 612 650 557  79 414 134 581 165 245 608 249 604
 380  99 110 627  41 648 518  46  87  84 117 574  35 405 228 507 667  88 166 221 216 579 589 106 295 114
 617 487 285 598 490  11 364 131 526 298  70 335 571 624 190 411  51 261 463 147 141  14 606 445 511 154
 344  69  81 653   1 626 300 586 419 204 492 638 663 477  56 288  34 533 375  98  60 635 123 254 673 119
 467 483  59  20 592 360 171 541 102 193 150 227 513  65 284 576 554 246 577 352 469 104  36 550  66 622

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00524e+07us (= 10052.4ms, 10.0524s)
Satisfaction error: 9
Number of search iterations: 4326
Number of local moves: 3618 (including on plateau: 3575)
Number of local minimum: 28 (including on plateau: 436)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 74 655 478 33 588 497 42 669 24 323 327 506 175 26 498 199 52 568 649 188 659 656 390 289 311 214 => the sum is 9090 rather than 8801
Problem in row 2: 590 169 634 103 654 454 4 440 268 206 504 465 71 596 145 25 275 448 40 180 644 76 63 545 18 374 => the sum is 7991 rather than 8801
Problem in row 6: 632 373 136 422 162 55 661 623 16 600 183 475 336 569 618 159 621 587 260 668 366 532 468 305 501 481 => the sum is 10809 rather than 8801
Problem in row 16: 413 156 603 116 346 32 185 417 625 531 402 105 615 235 572 280 642 599 186 256 470 262 277 641 163 120 => the sum is 9249 rather than 8801
Problem in row 19: 149 324 536 670 8 491 633 21 426 126 90 251 62 7 64 452 353 215 10 595 93 640 148 369 343 435 => the sum is 7511 rather than 8801
Problem in row 22: 50 350 334 276 527 620 92 13 580 646 462 431 400 153 612 650 557 79 414 134 581 165 245 608 249 604 => the sum is 9832 rather than 8801
Problem in row 23: 380 99 110 627 41 648 518 46 87 84 117 574 35 405 228 507 667 88 166 221 216 579 589 106 295 114 => the sum is 7547 rather than 8801
Problem in row 26: 467 483 59 20 592 360 171 541 102 193 150 227 513 65 284 576 554 246 577 352 469 104 36 550 66 622 => the sum is 8379 rather than 8801
Problem in diagonal 1: 214 18 94 39 121 366 517 192 172 196 322 195 388 672 397 402 67 427 21 406 549 527 627 285 69 467 => the sum is 7750 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 676  32 448 485 379 433  12 183  27 220 615  64 623 312 580 651 245  13 471   8 453 275 658 636 272  30
 409 649 247 305  14 136 600 594 235 438  35 602 102 360  75  26 231  61 638 345 390 478 609   2 628 592
 266 149 622 112 204 117 323 412 168 616 115 490 518 461 210 372  43 292 283 363 182   4 285 258 517 144
 598 591 228  57  94 586 166 122 463 344 574 551 124 401 610 318  46 172  22 170  15 479 595 315 584 576
 179 331 633 302 548 330 395 265   6 215 620 626 107 226 230 163 424 521 177 542 286 396 343 407  10 519
 157 568 675 405 674 534 213 581 263 437  11 293 165  36 116 627 560  81 261 280 668 569  23 236 481 408
 126 537 105 634 321 446 326  79 186 557 513  25 607 118 565  18 216 533 347 129 173 277 196 288 662 175
 578 212 205 503 194 657 525 502  24 151  84 134 416  38 555 603 613 469  69 494 243 639  72  37 320 464
  16 234 362 637 415 339 505 429 466 597 131 483  66 121  59 262 656 629 276 467 202  28 500 249 611 229
 447 125 491 203 278 367 554 567 515 426 397 398 308 418 413  49 454 259  98 495 497  56 250 411 164 161
 400 156 543 109 538  54 154 541 389 643 428 501  50 256 248 383 624 155  39 449 532 425 423 338 225 198
 617 442 159 298 208 420 451 361 436 384  34 148 188 635 386 492 573 359 273 106 221 373   7 556 358 316
  51 388 419 365  62 550 632 434 382 269 364 370 138 381 357  73 319 337 352 583  47 244 431 465 439 349
 335 143 211 553  68   9 341 142  90 659 291  85 625 562 376 489  93 456 406 520 260 536 184 178 544 645
 114 327 253 296 375 310 162 195 342 223 378 282 402 663 317 561 268 307 566 369 655 618 355 141 242  80
 506 297 452 368  55 539 427 417 100 351 475 139 585 238 666 207 530 559 654  29 328 127 599  67  65  21
 653 631 509 526 470 606  95 493 392  76 255 588  86 217  78 404 209  88 385 650 455 350 325 577 353 558
 309 571  48  92 206 504 512 224 137 523 201 496 366 510 145 289 468 233 608 336  60 171 354 545 593 300
 487  33 572 200 237 108 257 614 670  53 303 190 450   3 252 197  91 587 191 281 531 596 432 482 477 507
 480 322 150 589 619 189 311 267 332 270 458 113  82  74 646 274 187 301 443 174 564 140 527 648 295 346
 227 486 474 430 524  83 294 287 652 473 516  77 329  41 393 528 511 313 476 160 508 672 123  20   5 199
  99 665 132 167 153 239  63 647 232  87 641 644 601 547  45 185 110 660  58 394 440  40 579 488 264 621
 459 133  89  70 399  97 169 120 563 324 664 444 472 529 435 403 314 380 540 605  71 135  42 590 333 421
 104 222 374 391 484 284 667  52 604   1 181 251 546 612 306 499 549 422 535 119 522 214 128 441 101 192
 290 377  44 673 642 193 348  19 552 130 246 146 669 460 498 570  96 462 219 103 387 514 457 279  17 410
 218 180 356  31 640 671 299 254 575 334 271 661 176 582 240 158 371 152 414 630 111 445 304 147 241 340

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00526e+07us (= 10052.6ms, 10.0526s)
Satisfaction error: 5
Number of search iterations: 3329
Number of local moves: 2778 (including on plateau: 2730)
Number of local minimum: 25 (including on plateau: 322)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 266 149 622 112 204 117 323 412 168 616 115 490 518 461 210 372 43 292 283 363 182 4 285 258 517 144 => the sum is 7526 rather than 8801
Problem in row 6: 157 568 675 405 674 534 213 581 263 437 11 293 165 36 116 627 560 81 261 280 668 569 23 236 481 408 => the sum is 9322 rather than 8801
Problem in row 7: 126 537 105 634 321 446 326 79 186 557 513 25 607 118 565 18 216 533 347 129 173 277 196 288 662 175 => the sum is 8159 rather than 8801
Problem in row 9: 16 234 362 637 415 339 505 429 466 597 131 483 66 121 59 262 656 629 276 467 202 28 500 249 611 229 => the sum is 8969 rather than 8801
Problem in row 17: 653 631 509 526 470 606 95 493 392 76 255 588 86 217 78 404 209 88 385 650 455 350 325 577 353 558 => the sum is 10029 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 589  42 239  59 474  22 594  95 277  58 159 641 616 452 551 638 660   1 355  46  97 644 654 658 162  18
 145 583 553 572 394 637 249 405 564 272 377 188 648 554 556 205 233 447 348 521  15 491 392 199  29 555
 620 136 250 415  13 128 273 610   9 547  39 113 120 259 506 619  19 441 166 371 661 599 497 569 400 421
 536 132 266 299 606 399 617 171 507 598 472  45 640  54 109 104 282 244 585 503  21  70 131 419 411 580
 289 449 602  57 520 206  53 241 183 214 279 208 336 570 270 150 465 395 533 575  61 416 397 488 651 193
 511 629 496 522 531 260  14 153 566 383 125 538  98 122 345 559  60  38 308 518 428 181  94 545 169 608
  34  66 390  40 258 571 453  36   7 528 471 280 490 186 478 149 523  12 609 274 519 107 448 211 593 184
 127 544 630 479  99  76 451  93 466 173 398 577 535  73 116 290 114 494 476 647 540 455 604 190   4 391
 649 320 115  82 412 414 581 634 429 438 335 477 607 410 285 108 423 567 126 219 368 370 413 587  90  50
 407 269 325 676 213 487 409 234 101 170 202 197  71 624 305 185 388 138 653 376 643 203 481 642 146 256
 245 216  69 645 133 310  63 512 187  80 403 248  25 525 155 439 613 573  91 446 445 342  47 195 615   6
 232 672 408 406 366 422 151 262 226 380 242 618  65 590 129 539 588 420  17 160 541 542 220 123 265 217
 354 349 384 353 378 367 326 361 313 374 333 387 309 221 337 340 386 144 363 356 293 338 347 385 343 360
 344 327 341 307 303 229 263 365 424 315 662 396 426 288 379 329 339 328 321 334 317 292 314 276 281 301
 264 300 306 117 331 596 330 351 304 322 316 324 319 323 509 311 294 194 657 295 275 291 346 623 268 235
 404 425  78 668 287   3 165 562 357 492 534 516 223 130  16 432 192 201  30  79 296 467 529  24 179 401
   5 605 675 212  62 475 227 670  48 514 231  85 119 473 558 433  92 557 286 468 157 595 364  56 652 182
 434 515 236 254 200 139 156 261 431 240 622 247 591 284 582 480 251 621 252  49 224 152 210 178 632 560
  44 457 228 207 204  35 665 484 592  32 110 137 456 237 417 501 546 671  28 246 450 636 225  74 659 460
 603  41 500  10 565 124 498 443  96 461 664  37  31 418 352 578 176 611 561 198 135   2  20 563 502 612
 549 510  68 568 600 373 191  84 663  75  89 147 230  67 437 112 633 362 462  43 576 532 493 402 435 100
 444 381 141 537  55 628 673 655 283 666 625 674 508 167  72   8 459  11  52 175 375 271 253 148  27 513
 118 140 543 626 499 298 550 143 579  88  33 574 597 302 177 238 121 586 369 458 489 215  87 189 297 485
 218 105 163 358 650 440 103 106 359 209 505 393 142 667 639 656  77 158 196 614 601 486 631 382 442 389
 482 134 483 164 584 527 222 627 552 526 464 318 267 257 470  26 517  83 530 161 102  81 174 495  86 469
 154 454 312 168  64 635 524 243 278 646 111 436 332 548  51 372 350 504 427 669 172  23 430 180 463 255

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00033e+07us (= 10003.3ms, 10.0033s)
Wall-clock time (full program): 1.00548e+07us (= 10054.8ms, 10.0548s)
Satisfaction error: 7
Number of search iterations: 3619
Number of local moves: 3010 (including on plateau: 2964)
Number of local minimum: 29 (including on plateau: 363)
Number of resets: 0
Number of restarts: 0

Problem in row 2: 145 583 553 572 394 637 249 405 564 272 377 188 648 554 556 205 233 447 348 521 15 491 392 199 29 555 => the sum is 10132 rather than 8801
Problem in row 7: 34 66 390 40 258 571 453 36 7 528 471 280 490 186 478 149 523 12 609 274 519 107 448 211 593 184 => the sum is 7917 rather than 8801
Problem in row 8: 127 544 630 479 99 76 451 93 466 173 398 577 535 73 116 290 114 494 476 647 540 455 604 190 4 391 => the sum is 9042 rather than 8801
Problem in row 9: 649 320 115 82 412 414 581 634 429 438 335 477 607 410 285 108 423 567 126 219 368 370 413 587 90 50 => the sum is 9509 rather than 8801
Problem in row 11: 245 216 69 645 133 310 63 512 187 80 403 248 25 525 155 439 613 573 91 446 445 342 47 195 615 6 => the sum is 7628 rather than 8801
Problem in row 16: 404 425 78 668 287 3 165 562 357 492 534 516 223 130 16 432 192 201 30 79 296 467 529 24 179 401 => the sum is 7690 rather than 8801
Problem in row 24: 218 105 163 358 650 440 103 106 359 209 505 393 142 667 639 656 77 158 196 614 601 486 631 382 442 389 => the sum is 9689 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 309 600 344 645 674 146 248 636 152 460 122  86 390 127 651 174 320 424  52 218 641 531  67 106 206 472
 653  92 340 504 649 639 463  55 118 150 556 640 179 255  66 199 584 277 400 298 364 580  83 130 498  29
 137 133 620  43  40 314 158  20 632 656 214 617 486  58 468 319 250 589 304 611 264 439 353 288 212 576
 208   8 501 604  36 192  56 401 287 616  64 398 406 423 526 462 503 185 491 447 153 292 464 631 619 204
 471 115 561 232 323 270 289 622 281 672 135  25 623 142 226 403 578 670  57  78 290 227 614 410 112 375
 102 518 395 528 517  44 205 431  35 322 377 549 124 499 488 642 244 129  19 141 435 618 434 333 585  87
 234 484 558 167 587 474 481 505 507 494  48 184  63 149  90 547 461  61 293 438  85 241 603 349  50 648
 451 303 193 267 610 383  11 456  13 583 555 502 163 476 666   4 116  62 384 422 625 326 510 228 432  60
 621 516 166 144 361 148 606 161 613 307 215  69 515 466 535 391 572 136  74 272  33  26 559  34 223 327
  77 104 675 396  10 418 590 103 238 415 482 443 660 455 151 428 509 483 328 579 276  93   6 552 329 409
 416 140 473 363 113  70 412 173 362  96 449 378 521 596 573 301  91 402 571 386 209 381 542 373 114 296
 261 676 414 268 339 582 548 588 162 283 453 352 581  37 101 105  17 111  14 553  80 664 659 346 219 388
 485 563 247 470  47 138 425 551 529 120 668 512 331   2 160 539 430 110 465 220 522  28 413 368 369  89
 593  76 200 172 239  59 575 399 543 121 479 665 295 302  16 635 131  88 637 359 436 198  94 646 525 318
 523 440 299 306 213 170 253 168 652   7 366 243 605 246 662 100 260 308 335 554  46 311 367 417 351 599
 557 210 394   3 211 511 380 109 337 236 448 607 280 626 341 252 315 591 592 371 201 191 108  49 427 454
 284 445 217 360 157 634 279 233 263 171 560 274 285 230 249 225 176 282 202 376 597 433 336 265 638 630
 355 254  39 286 426 356  38 216 586 475 240 256 459 520 348 387 393 159 442 155 469 601 128 259 345 609
 570 450  53  82 534 258 446 538 313 300 312  95 175 164  15 598 673 594 513 663  51 183 143 533 389 156
 374 189 187 421 354  81 644  84 492 229  68 221   9 408 404 196 537 190 612 271 615 392 269 500 524 530
 181 569 147 508 444 291 165 669 411  31 624 194 527 334 350 154 437 565 134 562 325 496 324  99  23 237
 317 385 564 566 273 493   1 321 310 574  54 169 420 546 407 661 123 567 370 117 357 107 382 231 347 139
  73 608 275 467 478 397 667 358  22 235  45 452 242 657 628 365 180 487 224  65 541 477  41 257  24 536
 195 419 262 245 332 595 177 441 251 126 294 495  97 203  98  79 197 497 506   5 489 655 550 372  72 544
 342 316 647 222 429 480 379 297  21 545 330 343  27 278  42 490 629 627 650 182 178 186 119 457 514  71
  12 188  30 532 405 658 305 266 671 577 643  32 338 602 540 145  75 207 132 458 519 125 633 568 654  18

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00467e+07us (= 10046.7ms, 10.0467s)
Satisfaction error: 5
Number of search iterations: 3238
Number of local moves: 2742 (including on plateau: 2694)
Number of local minimum: 22 (including on plateau: 298)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 208 8 501 604 36 192 56 401 287 616 64 398 406 423 526 462 503 185 491 447 153 292 464 631 619 204 => the sum is 9177 rather than 8801
Problem in row 9: 621 516 166 144 361 148 606 161 613 307 215 69 515 466 535 391 572 136 74 272 33 26 559 34 223 327 => the sum is 8090 rather than 8801
Problem in row 10: 77 104 675 396 10 418 590 103 238 415 482 443 660 455 151 428 509 483 328 579 276 93 6 552 329 409 => the sum is 9209 rather than 8801
Problem in row 24: 195 419 262 245 332 595 177 441 251 126 294 495 97 203 98 79 197 497 506 5 489 655 550 372 72 544 => the sum is 8196 rather than 8801
Problem in row 26: 12 188 30 532 405 658 305 266 671 577 643 32 338 602 540 145 75 207 132 458 519 125 633 568 654 18 => the sum is 9333 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 501 673 629  87 322 413 608 160 391 215 211 534  78 271 624 390 163 389 362 436 210  76 236  20 154 648
 583  60 192 469 111 492 311 175  94 376 668 115 664  91   3 460 481 605 560 268 538 114 251  86 625 409
 144 417 139 170 274 622 518  89 528  31 493 468 642   5 645 296  92  38 201 634 419 619 146 607 169 395
 110 286  81 570 616   8  49 620 558  95 582 126 404 521 663  63 306  74 143 584 148 284 572 475 453 410
 178 141 655 643 554 103  42 509  61  96 646  23 451 172 138 272 613  79 510 305 184 550 270 159 442 234
 304 358 165 599 517 559 131 576 586 566 106 208 179  16 511 524  99 212 316 429 514  44 639 276 174 473
 659 424 308 525 200 592 213 421  39   6  24 142 124 466 458 164 166 497 402 480 278 638 219 220 654 482
 573 329 180 196 462 471   9 487 225 577  10 253 470 628 454  58 513  51 494  50 600 490 477 155 507  82
  93 446 676 206 244 243 617 368  13 476 314 232  62 420 434  59 505 461 245 162 537  68 604 606 408 302
 285  47  32  22 535 222 591 589 328 441 456 547 418  64 363 415 457 610 657  73  56 529 379 128  27 530
   1 533 614 672 157 500 256 443 167  75 327  29 121 499 216 382 571 403 542 543 347  98 569  80 105 551
 392 349 204 378 464  17 365 650 661 632 407 279 561 186 372 280 626 455  54 360 263 203  53 113 158 319
 323 340 354 333 348 364 369 356 381 377 313 385 351 301 370 367 374 345 366 325 359 290  71 353 334 352
 338 342 307 317 350 331 341 355 324 375 294 330 292 282 326 312 336 335 283 318 298 337 361 675 303 339
 574 187 485 504 396 641 168 181 611 193  85 315 293 660 257 452  40 117   7 411 653 651 255 267 264 134
 433 254 238  30 297 321 532 265 300 173 261 118 508 199 414  77 132 310 393  15 406 467 439 183 221 398
 428 567 309 401 519  33 546 425 147 230 190 383 250  36 287 553 262 242 623 189 120 615 241 656 512  37
 603 249 596 394 670 556 447 275 227 594 237 426 273 631  46 195 666 488 258 649 621 386 101 399 520 202
 527 136 397 437 100 671 491 233 652 104 495 658 289 149 597 246 431 281  28 412 332 247 102 450 269  67
 151 544 228 145  83 171 135 669 486 523 231 580 581 531   4 555  57 562 218 593 108  18 522 459 423 224
 463 496   2 539 320 185 388 299 435 288 640 506  12 440 548 665  55 197  43  34 125 515 432 484  72 618
  90 153 565 647 130  97 498 291 223 630 552 188 112 568 123 371 609  84 590  69 472 137 357 549 109 587
 239 478 156  45  88 343 214 107 526 387 405 259 601 662  52 637 252 667 444 198  70 235 384 564 612 176
 229 277 209  25 474  21 595  48  65 129 602 588 503 260 161 578 502 636 430 122 489 177 627 248 266 540
 545  41 445 240 344 479 150  19 373 633 119 465 380 295 194 416  66 536 116 557 205 575 483 563 422 140
  35 674 635 207 226 346 217 191 400 579 133 644 182 448 541  14 427 127 516 585 449 438  11  26 598 152

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00026e+07us (= 10002.6ms, 10.0026s)
Wall-clock time (full program): 1.00554e+07us (= 10055.4ms, 10.0554s)
Satisfaction error: 5
Number of search iterations: 2991
Number of local moves: 2400 (including on plateau: 2352)
Number of local minimum: 34 (including on plateau: 279)
Number of resets: 0
Number of restarts: 0

Problem in row 5: 178 141 655 643 554 103 42 509 61 96 646 23 451 172 138 272 613 79 510 305 184 550 270 159 442 234 => the sum is 8030 rather than 8801
Problem in row 6: 304 358 165 599 517 559 131 576 586 566 106 208 179 16 511 524 99 212 316 429 514 44 639 276 174 473 => the sum is 9081 rather than 8801
Problem in row 16: 433 254 238 30 297 321 532 265 300 173 261 118 508 199 414 77 132 310 393 15 406 467 439 183 221 398 => the sum is 7384 rather than 8801
Problem in row 18: 603 249 596 394 670 556 447 275 227 594 237 426 273 631 46 195 666 488 258 649 621 386 101 399 520 202 => the sum is 10709 rather than 8801
Problem in diagonal 0: 501 60 139 570 554 559 213 487 13 441 327 279 351 282 257 77 262 488 28 593 125 137 384 248 422 152 => the sum is 7949 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 424 160 538 275 582 469 432 257  78  22  72 209 460 260  21 671  28 651 108 518 584 443 290 493 386 370
 335 155 618 454  70  53 489 319 402 527  31 114 477  37 245 439  42 459 637 394 514 431 147 430 619 363
 344 483 256 261 506 405 515 146 588  64 216 521 554 438 283 167 555 288 175 558 279  15 447 597   6 134
 136 528 369 585 193 400 103 246 445 312 282 599 129 119 202 217 653 126  93 190 423 413 577 652 499 310
 397 450 672 436 465 295 104 117 313   3 590  66   2 171 613 112  48 626 280 547 187 441  63 624 647 532
  74 298 494  14 360   9 541 667  61 180 389 107  86 425 632  25 168  36 586 153 509 596 481 634 196 166
 500 442 162 676  45 177 262  67 550 165 612 170  23 206 501 362 411 131 621 487 475 615 266 118 537 220
 292 336 448 230 646 488 654 302 399 482  29 352 390 560 130 178 251 428 410 148 622 248 486 127  41 124
 125 429 294 383 141 102 567 556 267 491 523 474 197  51 458 347 661  81 189 452 243 385  55 446 264 620
 156 343 142  56 144 666  83 468 412 542 472 525 658 329 273 109 414 553 181 249  57 253 533 497 303 377
 270 265  68 444 159 629 281 357 188 416 184 232 605 325 192 396 276 328 322 628  60 659 512   5 407 593
 627 674  16  82 426 496 595 642 258 285 316 263 291 570 387 128 492 433 516 105 278 305 121 318 169   8
 417 358 376 364 361 332 331 334 123 359 341 311 356 365 339 350 353 342 320 317 340 351 346 309 380 326
 510  44  80 466  43  88 208 419  11 623 139 418 366 393 578 616 617 462 609 301 591 308 354  69 480 371
  77 289 579 636 673 568 373 381 221  49 644 284 236 614  24 562 163 589 269 244 657  10 551 272 116 545
 604 476 437 571 508  98 670 479 408 143 314 655 490 662  13 639 330 213 306  12 204 237 574  94 536  87
 348 111 656 161 552 471  97 133 299 239 668 404 601  92 498 507 203 223 398 179 194 440 215 534  73 505
 242 368 388 110 611 231 250  27 229  95 145 218 367 504 600 200 543 137 587 382 392 403 519 277 274 427
 592 138 182 530 422 463   7  34 565 214 372 297 435 520 172 517 100 375 544 120 224 150 630 323 583 395
 675  89 286 115 420 321 207 598  75 391 199 638 529 464 401  30 641 557 101 219 345 338 176 569 113 304
  35 608 140 324 226 559 315 575 154 665 157 594 174 227 406 467 378 333 122 268 135  71 201 470 572 625
 548 222 225 307 132 152 495   1 539 573 421 610  47 287  76 649  50 606 409 602 540  90  32 164 173  17
 645 648 546  62 259 247 185 522 300 581  58  99  26 271 526 235 205 502 503 461 384 210  38 355 228 484
 158   4  54 561 566 415 349 478 607 456 513  84 186  65 660 455 564  85  20 664 453 255  19 240 379 511
 252 650 195 241  79  91 254 191 669 631 451 374 473 635 234  96 549  39 449 563  52 531 535  33 296 238
  18 233 580 457 212 576 434 485 640 293 663 183 643 211 337 327 106 198  46  40  59 603 633 151 524 149

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00433e+07us (= 10043.3ms, 10.0433s)
Satisfaction error: 10
Number of search iterations: 3385
Number of local moves: 2938 (including on plateau: 2895)
Number of local minimum: 17 (including on plateau: 324)
Number of resets: 0
Number of restarts: 0

Problem in row 6: 74 298 494 14 360 9 541 667 61 180 389 107 86 425 632 25 168 36 586 153 509 596 481 634 196 166 => the sum is 7887 rather than 8801
Problem in row 10: 156 343 142 56 144 666 83 468 412 542 472 525 658 329 273 109 414 553 181 249 57 253 533 497 303 377 => the sum is 8795 rather than 8801
Problem in row 14: 510 44 80 466 43 88 208 419 11 623 139 418 366 393 578 616 617 462 609 301 591 308 354 69 480 371 => the sum is 9164 rather than 8801
Problem in row 15: 77 289 579 636 673 568 373 381 221 49 644 284 236 614 24 562 163 589 269 244 657 10 551 272 116 545 => the sum is 9626 rather than 8801
Problem in row 16: 604 476 437 571 508 98 670 479 408 143 314 655 490 662 13 639 330 213 306 12 204 237 574 94 536 87 => the sum is 9760 rather than 8801
Problem in row 18: 242 368 388 110 611 231 250 27 229 95 145 218 367 504 600 200 543 137 587 382 392 403 519 277 274 427 => the sum is 8526 rather than 8801
Problem in row 19: 592 138 182 530 422 463 7 34 565 214 372 297 435 520 172 517 100 375 544 120 224 150 630 323 583 395 => the sum is 8904 rather than 8801
Problem in row 22: 548 222 225 307 132 152 495 1 539 573 421 610 47 287 76 649 50 606 409 602 540 90 32 164 173 17 => the sum is 7967 rather than 8801
Problem in row 23: 645 648 546 62 259 247 185 522 300 581 58 99 26 271 526 235 205 502 503 461 384 210 38 355 228 484 => the sum is 8580 rather than 8801
Problem in diagonal 0: 424 155 256 585 465 9 262 302 267 542 184 263 356 393 24 639 203 137 544 219 135 90 38 240 296 149 => the sum is 7177 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
  30  18  97 577 464 439 483 381 530 443 528  12 454 673 309  11 408 206 562  19 600 604 178 571 203   1
 139 105  93 466 607 477 421 237  58 459 493 463 584 403 162  52 150  43 373 266 367 499 227 572 591 494
 504 433 453 450 229 176  61 272  50 225  24 593 198 575 456 374 148 657 546 252 594 304  51 107 609 460
 196 300 565 263   3 320 437   2 268 145 630 155 440 569  45 183 488 217 387 115 664 465 650 446 179 669
 484 259  64 508 100 470  69  40 555 564 357 647  34 485 222 410 255 479 210 102 341 154 514 378 502 598
 111 411 472 161 559 104  44 137 448 223 278 503 426 144 384 585 302 294  62 666 469 152 543 642 292 580
 389 129 164 436 475  60 211 620 306 476 589 127 205 181 515 652 524 416 274 194  53 377 159 190 624 455
 417 224 195 118 551 188 398 256 260 149 458 333 603 525  48 146 665 507 257 338  54 283 653 617 120 438
 667 588 606  85  42  46 505 539 220 631 193 385 156 495 116 632 228 397 471 432  31   5 656 171 243 261
 212 623 513 668 376 291 527 605 625 663 312  10 492  66 671  38 119 428 236 518 634  98 254  26 281 125
 388 221 557 467 368  77 635 560 142 296 244  81 435 124 556 622  92 659 612 412  21  91 191 366 213 444
 334 258 265 654 290 523 248 134 586  95 160 371 365 349   7 616 380 500 184 332 363 247 369 339 301 531
 273 286 391 279 245 298 356 370 345 313 348 287 307 293 340 358 353 329 637 321 316 361 351 393 305 346
  83 422 386 670 121 123 330 282 482 187 574 147  74 311 516 610 646   6 627 132 314 299 308 394 405 352
 462 641 375 638 567 241 639 576 131 409 364 519 240 280 344 106 168 662 114 219  33 182 317 297  59 218
 512  76 323 246  56 651 511 427 372 414 533 208  37 109 509 382 536  20 501 498 552 457 238  28 540  22
 157 289  25 276 596 209 214 658 633 544 655 561 481 343 174 202 491 534  75  84 234 566  67 474 133 126
 626 615 232 122 399 597  99  17 613   4 233 486 554  49 328 335 672  68 390 165 401 621 520 226 319 110
 611 192 423 169 413 628  94 402 461 547 392 204  73 434 418 167 277 526 445 327 478 473 113  55 215 264
 230  88  80  87 138 128 189  82 419 429 199 197 336 242 270 573 522 235 590 537 325 442 420 250  96 510
 251 130 404 285 558 568 379 216 487 406  63 640 231 599 315 425 497 200 140 645 550 172  65  90  89 396
 506 674 649 112 275 538 295 644  14 151 400  36 553 117 532 143 141 135  23 583 362 548  27 496 661 186
 549  41 675 288 207 342 170  39 430  86 101 570 158 602 535 407 521 180 153 489 175 648 578 103 451 303
 324 517   8  71 441 581 629 326   9 350 480 676 643 447 359  57  32 595 163  35 271  72 452 587 490 542
  79 660 337 322 253 331 249 619 310  29 177 166 108 185 592 431 173 269 415 579  70 545 582 347 618 355
 267 601 449 383 468 395 608 360  47 563  16 424 614 201  78 284  13 239 354 541 529 136 318 636 262  15

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00003e+07us (= 10000.3ms, 10.0003s)
Wall-clock time (full program): 1.00546e+07us (= 10054.6ms, 10.0546s)
Satisfaction error: 6
Number of search iterations: 3137
Number of local moves: 2603 (including on plateau: 2557)
Number of local minimum: 17 (including on plateau: 320)
Number of resets: 0
Number of restarts: 0

Problem in row 6: 111 411 472 161 559 104 44 137 448 223 278 503 426 144 384 585 302 294 62 666 469 152 543 642 292 580 => the sum is 8992 rather than 8801
Problem in row 10: 212 623 513 668 376 291 527 605 625 663 312 10 492 66 671 38 119 428 236 518 634 98 254 26 281 125 => the sum is 9411 rather than 8801
Problem in row 11: 388 221 557 467 368 77 635 560 142 296 244 81 435 124 556 622 92 659 612 412 21 91 191 366 213 444 => the sum is 8874 rather than 8801
Problem in row 16: 512 76 323 246 56 651 511 427 372 414 533 208 37 109 509 382 536 20 501 498 552 457 238 28 540 22 => the sum is 8758 rather than 8801
Problem in row 20: 230 88 80 87 138 128 189 82 419 429 199 197 336 242 270 573 522 235 590 537 325 442 420 250 96 510 => the sum is 7614 rather than 8801
Problem in row 24: 324 517 8 71 441 581 629 326 9 350 480 676 643 447 359 57 32 595 163 35 271 72 452 587 490 542 => the sum is 9157 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 460 339 472 653  36 462  30  49  68 111  44 307 438 314 622  90 208  35 279 112 542 363 240 122 345  33
 627 570 633 492  17 104 393  31 160 629 127 107 558 281 669 446  47 588 163 389 293 546 189 452 264  26
 596 274 239 639 195 513 555 168 167  57 660  27 276   6 554 496 340 675 209 259 642 647 374 287 202 289
  51 530 505 121 661  29 312 608 509  10 562 408 654 269 342  66 151 267 603 481 424  55  18 364 511 290
 242 185 207 116 461 573 222 497  72 280 152 565 387 529 299 346 610  56 434 549 355 109 244 659 532 120
 420 320 625   4 304 135 649  13 400 149 302 311 227 247  89 663 341  58 469 528 273 394 523 651 229 477
 124 576 204  21 399  80 191 560 504 447 550  94 396 337 638 450  60 253 245 451 609  28 483 157 375 569
 336 179  88 412 495 228 213 147  63 407 643 125 566 435 464 334 582 423 220 433 173  42 198 538 378 258
 392 251 219 114 664 379  76  93 324 353  25 615 640 482  85 537 174 130  43 278  45 614 323 286 564  73
 303 329  81 263 568 527 502 150 226 176 553 547  20 595 143 591 260 262 668 134 214 571 210  62 230 616
 418 491 215 457 284 448 243 508 449 196 331 534 432 101 184  16 110 593 620  40  52 552 488 559  79 401
 309 231  59 241  34 365 357 522 601 330 166 105 272 631  91 102 578 575 479 463 326 319 503 266 516 360
 581 453 590 607 218 291  74 313 172 520 635 666  87 380 139 141 545 200 211 171 187 321 459 119 338 383
  39 356 328 295 236 519 377 381 474 305 316 349 347 257 332 297 368 391 333 361 359 254 362 344 410 411
 619  77  38 521 161 265 514 395 485 644  53 518 103 458 315 118 655   1 142 428 444 665 261  95 188 624
 526  41 471 637 413 155 367 372 128  71 386  23 186 524 587  37 572 277 282 194 352 224 422 599 597 358
 182  15 673 676  98  69 138 405 493 348 123 169 131 510 343 548 430 456 404 636 652 535 153 145 354 115
 238 146 574  64 512 275 476 232 623 621 369 252 425 181 525 249 192 470 310 585 561 137 487 126 403 283
 271 294 129 285 154 201 618 455 531 178 484 199 667 162 212 646 136 441 443 658  96 106 606 203   9 617
 308 612   2  82 670 541 475 626 419 674 466 577 216  24  83 234 398  99 648 233 390 206  12 322  75 409
 140 500 439 205 431 583 671 318 325  32 217 533 397 480 301 672 300 388 366 385 501 183  22   8 158 246
  54 406 557 193 539 600 580 454 288 586 177 507  11 237 156 376 268  86  14 235 190 498 515 632  50 592
 317   3 536 584 506 159 225 611 164 296 467 270   7 384 473  67 427 543  92 248 298 416 628 567 494  19
 544 465 221 662 255 499 117 170 223 490 132 437 165 440 414 436 445 594  97 292  65 486 598 517 630 133
  70 556  46  84 108 250 421 144 370 351 605 478 589 489 641 417 175 327 656 197 113 350 148 306 468 442
 634 602 650 373 382 551   5 579 563 540 256  78 604  48 100 426 429 613 371  61 645 180 335 415 402 657

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00023e+07us (= 10002.3ms, 10.0023s)
Wall-clock time (full program): 1.0054e+07us (= 10054ms, 10.054s)
Satisfaction error: 8
Number of search iterations: 3680
Number of local moves: 3067 (including on plateau: 3023)
Number of local minimum: 27 (including on plateau: 334)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 460 339 472 653 36 462 30 49 68 111 44 307 438 314 622 90 208 35 279 112 542 363 240 122 345 33 => the sum is 6774 rather than 8801
Problem in row 3: 596 274 239 639 195 513 555 168 167 57 660 27 276 6 554 496 340 675 209 259 642 647 374 287 202 289 => the sum is 9346 rather than 8801
Problem in row 8: 336 179 88 412 495 228 213 147 63 407 643 125 566 435 464 334 582 423 220 433 173 42 198 538 378 258 => the sum is 8380 rather than 8801
Problem in row 9: 392 251 219 114 664 379 76 93 324 353 25 615 640 482 85 537 174 130 43 278 45 614 323 286 564 73 => the sum is 7779 rather than 8801
Problem in row 15: 619 77 38 521 161 265 514 395 485 644 53 518 103 458 315 118 655 1 142 428 444 665 261 95 188 624 => the sum is 8787 rather than 8801
Problem in row 18: 238 146 574 64 512 275 476 232 623 621 369 252 425 181 525 249 192 470 310 585 561 137 487 126 403 283 => the sum is 9316 rather than 8801
Problem in row 24: 544 465 221 662 255 499 117 170 223 490 132 437 165 440 414 436 445 594 97 292 65 486 598 517 630 133 => the sum is 9527 rather than 8801
Problem in row 26: 634 602 650 373 382 551 5 579 563 540 256 78 604 48 100 426 429 613 371 61 645 180 335 415 402 657 => the sum is 10499 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 188 145  44 649 609 173  40 221 135 350 261 623 122 647 270 578 467 579 384 284 378 424  84 636  68 442
 372 251 159 376 547 355 186 371  60 624 532  43 474 194 183 388 518 613 505 608 306 319 243 128 229 217
 620 363 233 175 277 222 212 142 283 102 515 451 209  24 562 612 191 510 590 166 430 511 557 281 465  98
  30 614 160 535 172  77 473 622  97 334 153 314 569 285  13 475 249 654 660 546 131 420 501  53 468 509
 674 564 676 211 567 127  48 459 493   9 156 133 165 605 344 312 610 239 412 190 359 589 494 423 381 611
 248  90 447 411 427 527 666 403  49 480 563 548 268   7 287 529  93 391  31 640 151  71 115 513 638 208
 615 499   3 227 419  65 530  46 544 422 449 215  62 154 462 168 435 630 322  50 348 580 498 553  72 433
 136  63 584 492 214 315 113 485 596 542 668 181 536  99 517 200  25 487 533 234 431 210 663 100  16 361
 425 440 111 455 171 534 301 104  45 443 454 417 399 503 476  61 659 428 124 116 373  41 313 545 302 561
 230 163 296   1 669 193 377 123 670 587 581 484 471 524 157  38 456  80 224 250 633 481 129 439 491  54
 107  27 582  56 126 218 641 112 502 413  35 574  39 141 665 489 416 418 414 575 438 402 297 482 470 162
 576 150 184 600 466 406  73 488 507 158 616 164 205 441 148 149 523 516 195 469 240 504 280  11 139 593
 291 121 332 393 368 635 343 401 360 625 327 329 198 324 369 362 349 305 340 354 253 357   6 386 353 320
 365 525 342 331 321 311 325 338 303 346 310 383 317 356 307 337 352 351 328 326 347 367 275 295 335 308
  42 231 652 394   8 103 409 540  89 109  59  70 602 662 637 453 597 105 604  92 207 570 366 522 252 426
 260 675 290 658 269 257 264 238   4 282 519 299 646 293 300 333 267 336 278 228 555 241 500 279 286 244
 648 673  33  88 607  86 585 552 543 477 374 389  20 595 405   2 255  26 458 380 397 120 274 387 398  29
 382 664 472 219 134 591 203  15 429 246  32  82 598 445  96 185 541 213 528 204 256 421 448 594 235 568
 496  28 526 263  66   5 617 187 174 627  55 407  85  79  64 137 118 304 192 619  22 147 242 408 245 538
 520 490 176 330 404 672 486 671 566 232 653 201  34 370 599 272 178 138  76 339 117 114  75 385 225 478
 457  10 497 169  21 577 436 259 182 410 223 146 549 180 603 364  69 554 247 506 642 167 318 152 667 396
 101 130 626 551 220 632  95 550 573 537 483 395 606 463  58 236 177 196 631  47 661 621 262 106 432 199
 531 539 559  14 512 450 558 639 258  87 110 521 464  91 309 643 572 108 125  36 341  37 508 119 592  78
 140 266 358  19 298 446 565 461 629 197 155 560 460 437  12 288 375  52 400 657 289 206 179  83 618 651
 273 452 392 583 644 345  94  51 434  18 202 656 571 237 514 634  17 189  57 390 415 226 588 271 254 294
  74 628  67 601 265 479 161 323 276 144 316 216 132 645 444 556 292 379 143 495  81 655 586 650 170  23

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00531e+07us (= 10053.1ms, 10.0531s)
Satisfaction error: 4
Number of search iterations: 3888
Number of local moves: 3237 (including on plateau: 3188)
Number of local minimum: 28 (including on plateau: 401)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 30 614 160 535 172 77 473 622 97 334 153 314 569 285 13 475 249 654 660 546 131 420 501 53 468 509 => the sum is 9114 rather than 8801
Problem in row 5: 674 564 676 211 567 127 48 459 493 9 156 133 165 605 344 312 610 239 412 190 359 589 494 423 381 611 => the sum is 9851 rather than 8801
Problem in row 19: 496 28 526 263 66 5 617 187 174 627 55 407 85 79 64 137 118 304 192 619 22 147 242 408 245 538 => the sum is 6651 rather than 8801
Problem in row 22: 101 130 626 551 220 632 95 550 573 537 483 395 606 463 58 236 177 196 631 47 661 621 262 106 432 199 => the sum is 9588 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 675   1 244 306 478 254 547 290 184 195 202 125 191 618  14 251  35 403 559  93 661 386 186 651 594 658
 380 640 372 229  48  54 473 572 573 619 198 636 535  52  26 214 277 183 295 211 322 455 173 515 611 138
 238 255 583 669 219  69  63 305   9  92 428 278 167 175 226 528 151 542 645 469 398 133 427 596  94 566
 424 216  42 598 165 222 561  96  17 476  80 164 362 660 575 431 464 204 176 145 449 650 433  85 438 668
 643  53 274 389 589 144  10  91 261 472  64 470 630 526 486 480 407  51 179 404 312 560 538  32 440 296
   7 212 192 387 601 532 485 426 327 231 563 513  37 223 665  89 496 564 534 567 519  66 178 258  12 117
  98 461 511  29  59 579 516 609 286 390   2 200 514 436 106  39 557 489 502 510 155 578 265 354 284 272
 217 627 654 237 536 146 395 505 446 580 235  22 626  25  76 139  62 197 454 249 289 544 331 451 545 213
 617  40 171 112 172 142 328 126 342  38 491 600 340 499  77 479 662 263   4 130 629 150 159 571 652 555
 105 180 631 533 673 102 230 194 406 453 141 168 484 128 181  43 418 614 432 574  65 233 646 199 577 391
 448 417  44 220 435 599 423  58 405  56 401 383 392 307 227 409 540 490 378 203  24 437 606 396 239 264
 507  20 565  45  84 483 647 110 487 359 492 374 266 299 367 586  47 641  72  75 624 288 131 551 524 157
 410 358 335 399 337 336   5 377 334 373 341 360 357 356 332 319 352 365 353 355 381 318 351 347 346 304
 109 371 537 275 321 343 316 339 314 298 323 269 282 311 324 313 653 361 338 320 344 379 493 310 287 271
 570 664 193 330 177  73 113 429 539 225 143 333 247  41 297 622 639  61 439 350 462 442 393 149 553 317
 118 162 498 613 415 375 663 425  95 667 224  57 147 376 279 541 132 509 612  87 585 408 122 221 443  27
 602 672 291 482 588 467 120 413  36 242  21 670 592 527 161 384  88 248 326 591  46  90 124 497  79 444
 210 441 445 280 245 649 107 450 581 621 140 205 136 414 543 315 530 209 246 285 556 185 158  18 156 676
 520 394 256 137  15 273 292 207 608 163 584 243 189 633 634 637  86 430 196 329  23 325 421 232 270 382
 302 460 103 100 434 419 190 501 123 420 632 558  82 569 593 655 116 531 169 170  19  78 638 257 294 388
  16 521 447 525 457 135 262  71 412 250 309 620 368  83 595 119 293 364  11 494 153 616 465 546 369 300
 308 518  97 459 114 671 260   6 468 488 644 416 666 456 587 252 303 503 363 523 481 597 267 182 268 154
 234 452 607 111 549 259 495 656 508 301 370 474 554 208  70 568 174   3 659 283 402 236 101 253  68 206
 466 108 160 129 241 623 605 674 276 115 610 604 477 552 512  49 642  50  30 400 187  13 635 104 458  81
 517   8 152 625 648 348 628 349 188 529 657  28  33 228 385 121  74 471 281 562 475 134 345 615  34 366
  60 550 397 582 201 504  67 522 576 148 506  31 127  99 463 218 603  55 548 422 240 500 215 411 166 590

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00546e+07us (= 10054.6ms, 10.0546s)
Satisfaction error: 5
Number of search iterations: 3292
Number of local moves: 2736 (including on plateau: 2688)
Number of local minimum: 31 (including on plateau: 289)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 238 255 583 669 219 69 63 305 9 92 428 278 167 175 226 528 151 542 645 469 398 133 427 596 94 566 => the sum is 8325 rather than 8801
Problem in row 9: 617 40 171 112 172 142 328 126 342 38 491 600 340 499 77 479 662 263 4 130 629 150 159 571 652 555 => the sum is 8349 rather than 8801
Problem in row 19: 520 394 256 137 15 273 292 207 608 163 584 243 189 633 634 637 86 430 196 329 23 325 421 232 270 382 => the sum is 8479 rather than 8801
Problem in row 22: 308 518 97 459 114 671 260 6 468 488 644 416 666 456 587 252 303 503 363 523 481 597 267 182 268 154 => the sum is 10051 rather than 8801
Problem in diagonal 0: 675 640 583 598 589 532 516 505 342 453 401 374 357 311 297 541 88 209 196 170 153 597 101 104 34 590 => the sum is 9956 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 388  93  19 255 257 500 166 271  26  97 676 425 432 477 142  85 527 599 528  38 323 631 358 344 671 473
  64  24 438 186 467 460  52 301 520 249 243 214 240 605 370 406 551 644 630 253 657 621 258 162 117 534
  71  43 656 408 499 359 351  88 670 507 250 313 124 120 338 474 496 103 604 572 201  37 415 649 403  50
 145 669 559 342 526 154   6 184 312 137 409 267 665 666 515 251 187 590 127 212 471 600 149 410  28 220
 393 430 107 352  65 262 171 330 481 422 270 404 588 210 607 191 602 643  78  40   5 567 548 584 300 151
 264 606 225 598 428 502 434 546 619  60 193 290 199 260 540  54 557 148 276 263 122  92 183 563 232 547
 128  69 395  90 218 152 343 582 494 141  21 476 580 314 211 256 575 392 174 505 629 556 318  76 461 645
 247 512 615  15 617 565 272 367 235 498  22 601 457 510 458 625 209  49  42 478 158  62  51 493  67 576
 205 322 132 293  89 188 543 459 484 332 635 468 289 417 170 431   2 469 436   7 423 426 238 456 447 440
 479 472 530 568 517 268 632 259 134 464  81 180  80 421 133 273 164 424 455 446 111 653 489  99 242 227
 622 433  34 383 577 104 451 147 217 213 319 610 385 442  13 310 389 549 412  94 333 399 413 405 317 230
 366 136 672 531 102 329  53 150 636 316   1 175 155 628 206 637 394 363 655 587 387  96 663  68 382 113
 661 362 357 109 378 463  82 291 121 441 454 444 375 197 532 215 327 373 296 360 233 516 488 485  12 229
 335 603  63 429 379 525 345 437 414 596 650  70 633 340 131  36 130  74 144 331 541 308 495 462 320  10
 491 245 336 195 126 581 487 648 326  27 283 519 337 391 285 286 167 328  55 386 354 445 153 123 586 641
 583 265 202  14  83 118 490  84 334 558 192  73  61 492 390 662 654 261 200 274 618 381  56  25 608 529
 275 592 297 254 448 139 266 501 416 190 542 647 535  58 194 579 223 470  95 277 280  17  79 303 539 585
 521 524 466 673 309 570  75  48 282  32 674 667 503 219 538 597 486 651 401 203 593 181 347 356 105 396
 234 288 397 287 207 221 315 248 244 168 564 110 231 226 269 349 533 157 185 172 449 279 204 634 178 135
  31 143 216 574 504 246 562 514 377 664 189 552 182 594   8 511 465  46 400 372 177 222 368 208 307 369
 554 675 252 642 173 281 620 659 350 284 125 482 595  11  41 176 146 508 573 100 156 545 101 513 652  35
 578 239  86  66 550 609 536 623  91 626 668 114 161 355 658 228   9 302 364 646 108  44 292  39 169 640
 452  57 483 341 298 311 591 544 196 613 324 353  59  16 418 411 237 140 278 589 299 115 616 116 537 407
 384 163 566 443 561 112 376  23 612 374 639  30 435 179 569  77 348 160 304 497 346  87 614 236 371 295
 224 361 138 624 419 402 553  47 165 339 305 198  20 555 427 159 420  33 518 439 321 398 294 627 509 306
 106 475 560 129   4 380  29 450  45 453  72 119 480  98 638 522   3 325 571 660 506 523 611 365 241  18

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.00537e+07us (= 10053.7ms, 10.0537s)
Satisfaction error: 6
Number of search iterations: 3034
Number of local moves: 2602 (including on plateau: 2556)
Number of local minimum: 13 (including on plateau: 291)
Number of resets: 0
Number of restarts: 0

Problem in row 2: 64 24 438 186 467 460 52 301 520 249 243 214 240 605 370 406 551 644 630 253 657 621 258 162 117 534 => the sum is 9266 rather than 8801
Problem in row 16: 583 265 202 14 83 118 490 84 334 558 192 73 61 492 390 662 654 261 200 274 618 381 56 25 608 529 => the sum is 8207 rather than 8801
Problem in row 18: 521 524 466 673 309 570 75 48 282 32 674 667 503 219 538 597 486 651 401 203 593 181 347 356 105 396 => the sum is 10417 rather than 8801
Problem in row 19: 234 288 397 287 207 221 315 248 244 168 564 110 231 226 269 349 533 157 185 172 449 279 204 634 178 135 => the sum is 7284 rather than 8801
Problem in row 21: 554 675 252 642 173 281 620 659 350 284 125 482 595 11 41 176 146 508 573 100 156 545 101 513 652 35 => the sum is 9249 rather than 8801
Problem in row 26: 106 475 560 129 4 380 29 450 45 453 72 119 480 98 638 522 3 325 571 660 506 523 611 365 241 18 => the sum is 8383 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
  81 642 275 645 505 616 174 264 639 598 488 676 531 513 157  49 272 568  56 378  66 288  18 116 144  42
 153  85 326 208 243 543 239 290 360 351 224   4 518 445 519 617 169 658 367 187 408 231 672 442 127 415
 242 666   1 152 504 285 391 558 158 197 566 657 443 377 235 323 589 660 429  95 184   6 115  58 490 420
 105 548 219  51 181 669 528 259  47  43 249 614  30  52  71 436 649 300 182 462 496 149 170 521 467 131
 487 444 545   3  20  21 576 396 623 340 137 167 189  76 502 186 188 103 602 577 319 532 514 493 500 261
 511 670 339 321 175  79 465 512 233 524 128 257 202 601 203 164 510 101   5 449 183 495 207 509 397 561
 403 600 405 331 314  78 303 553 171  99 192 612 485 274 229 398 441 450 474 256 114 350 457 632  72 108
 507 549  27 541 234 674 102 254 297 491 525 237 282 635 584 412 246  86 517 613 468 637 159 344 438 539
 309 145  67 482 327 595   7 579 646 414 573 352  65  35 446 126 263 363 609  19 640 440 591  74 483 151
 109 281 477 110 622 515 582 214 580 317  77 597 206 218 222 556 283 265 497 563 123  94 333 330 161 469
  46  64  60 564 588 540 178  89  48 663 329 223 587 244 385 308 113 452 138 459 370 523 655 404 163 608
 132 201 537 435 322 386 173 501 644 411 176 165  13 498 380 342 401 125 316 503 423 217 353 302 439 406
 130  54 547 375 298  83 546 324 392 357 241 484 551 361 585 349 289 419 535 320  55 172 673 277 194 190
 522 226 603 538  73 286  70 621 240 124 335 629 301 464 381 160 653  41 624 294 550  61 180 142 204 479
 299  44 262 470 410 544 278 389 627 221 315 304 266 216 432 460 284 307 166 437 337 447 355 336 569  26
 661 343 338 143 527  38 409  96 213 506 270 425 407 247 418 416 536 394 112 348  15 451 586  88 426 388
 120 318 667 325 526 332 100 516 313 133 422 279 168 675 260  40 376 185 430 581 662  93 382  10 583 305
   9 296 364 421  39 341 312 211  57 358 643 529 117 458 659 428 356 433  22 448 280 533  91 578 200 618
 384 104 466 209 555 291 156 534 492 562 334 273 572 383  84 542  37 155 606 191 198 136 154 399 571 413
   8 596 489 665 650 295 668  50 292 199 633 463 599 193 162 565 574  34 139 106 267 610 371  92  45  36
 478 119 148 560 271 359 393  28 150  59  80  97 594 593 456 258 557 554 607  98 625  90 255 476 648 248
 508  25 134  63 475 225 634 227 147  17 620 232  29 379  32 434 122 268  75 347 520 494 140 354 220 369
 651 431 592 245  62 346 590 402 641 481 559  23 471 135 472 631 473 311 212 195 654 417 628 215 486 269
 619 362 604 179 638  11 424 236 374 454   2  16 530 177 196 205 230 611 238  12 111 461 368 647 287 626
 671 615 276 129 228 567 251 552 107 427 652 345 395  53 365  24 121 328 453 570 480 210  68 387  87 118
 656 373  33 636  14  82 252 146 310 455  31 141 250 499 366 372  69 630 390 293 253 664 306 575 400 605

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00025e+07us (= 10002.5ms, 10.0025s)
Wall-clock time (full program): 1.00548e+07us (= 10054.8ms, 10.0548s)
Satisfaction error: 6
Number of search iterations: 3165
Number of local moves: 2614 (including on plateau: 2568)
Number of local minimum: 34 (including on plateau: 327)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 105 548 219 51 181 669 528 259 47 43 249 614 30 52 71 436 649 300 182 462 496 149 170 521 467 131 => the sum is 7629 rather than 8801
Problem in row 8: 507 549 27 541 234 674 102 254 297 491 525 237 282 635 584 412 246 86 517 613 468 637 159 344 438 539 => the sum is 10398 rather than 8801
Problem in row 22: 508 25 134 63 475 225 634 227 147 17 620 232 29 379 32 434 122 268 75 347 520 494 140 354 220 369 => the sum is 7090 rather than 8801
Problem in row 23: 651 431 592 245 62 346 590 402 641 481 559 23 471 135 472 631 473 311 212 195 654 417 628 215 486 269 => the sum is 10592 rather than 8801
Problem in row 24: 619 362 604 179 638 11 424 236 374 454 2 16 530 177 196 205 230 611 238 12 111 461 368 647 287 626 => the sum is 8618 rather than 8801
Problem in row 25: 671 615 276 129 228 567 251 552 107 427 652 345 395 53 365 24 121 328 453 570 480 210 68 387 87 118 => the sum is 8479 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 644 204  55 444 633 642 668 672  15 451 143  99 237 163 313 213  98 372 105 245 260  96 532 484 412 601
 674 219 655 576  44 275 151 624 610 293  82 464  30 164  34 615 555 539  41  43   2 482 469 500 106 554
  78  28 119 654 436  47 518 425 587  77 583 307 605 309 424 514  90 506 228 354 121 570 256 311 328 326
 665 399  79 144 232 263 575 195 441 598 403  88 584  14 526 676 542 239  10 157 494 357  53 248 522 297
  19 391 295 215  35   8 266  29 567 607 440 243 120 170 586 557 540 581 312 521 663 127 305 264 409 531
  46 277 508 387 481  95  27 419 512  51 439 563 474 613 117 384 192 629 632 404  74 285 184 364 455 189
 452 410 286 396 222 255 176 643 432  32 499 217 538 616  40 188 519 125 416 292 267 480 304 507 427  62
  42 214 205 369   1 620 150 235 641 671 550 221 585 343 167 386  73 670 198  83 622 523 108 270 261 593
 196 623 113 327 180 324 194 265 223 182 241 577  64 111 564 529 478 178 341 640 604  23 449 370 528 477
 556 650 377 645 177 603 212 421 408   6 314 517 211 392  70 162 347 390 492 130   7 382 496 202 534 100
 402 429 458 460 502 491 565 450 472 218 225 107   5 675 647 345 109 618 140 397 250 371   9  67 233 156
 133 160 381 379 361 608 511 169 234 657 104 333 348 544 375 128 335 300 609 152 447 173 210 646 179 325
 197 257 510 271 356 321 319 394 359 360 306 308 330 246 362 253 413 249 418 310 445 417 453 395 201 351
 350  50 302 287 272 317 259 230 353 648 316 363 280 291 365  59 299 269 352 537 380 459 431 465 434 433
 373 483 114 501  26 289 276 509  18 488 589  81 322 578 331 186 284 513 486 349 134 561 175 344 135 656
 597 422 153  86 123 639 342  72 207 487 318 590 571  80  63 551 401 238 366 430 461 476 149  49 651 279
 407 142 467  25 579 166  31 244 336 569 161 498 466 437 599 174 337  37 183 536 626 574  68 637  94 171
 566 611 667 296 545 457 332 535 596 136 124 208 443  21 659 141 661 562 415 148 649 193 635  71 254 301
 216 406 247 323 282 426 145 504  89 664 131 530 226 582 132 346 227 543 652 588 281  57 385 568  52 199
 181 503 220 495 242 303 600 454 236 329 388 462 628 126 288  85 137 103 154 383 320 268 552 595 411 338
 339 591 612  22 572 636 252  17  48 278 533 485  66  91 580 118 625  61 191 423 470 294 367 414  56 660
 298 185 446 129 475 110 558 673 398  87   4 355 240 456 209 438  45  65 516 560 559 630 634  93 159 479
 547 428 389 617 627  11 553 400 442 158 206 224 262 273 448 614  75  13 274 393  69  38 541 489 594 116
 172 138 602 251 340 515 662   3 497 190 658 378 669 525 283 203 606 334 493  58  54 102 229 187 619  33
 420  76 165  39 405 368 101 122  60 548 524 471  24 546 527 315 147  36 139 468 168 573 549 146 592  84
 231 505 376 463 653  12 358  97  20  16 520 112 473 435  92 621 666 631 638 200 374 290 258 115 155 490

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00009e+07us (= 10000.9ms, 10.0009s)
Wall-clock time (full program): 1.00533e+07us (= 10053.3ms, 10.0533s)
Satisfaction error: 4
Number of search iterations: 3370
Number of local moves: 2794 (including on plateau: 2746)
Number of local minimum: 29 (including on plateau: 325)
Number of resets: 0
Number of restarts: 0

Problem in row 17: 407 142 467 25 579 166 31 244 336 569 161 498 466 437 599 174 337 37 183 536 626 574 68 637 94 171 => the sum is 8564 rather than 8801
Problem in row 18: 566 611 667 296 545 457 332 535 596 136 124 208 443 21 659 141 661 562 415 148 649 193 635 71 254 301 => the sum is 10226 rather than 8801
Problem in row 25: 420 76 165 39 405 368 101 122 60 548 524 471 24 546 527 315 147 36 139 468 168 573 549 146 592 84 => the sum is 7613 rather than 8801
Problem in diagonal 1: 601 106 311 53 127 74 292 198 178 347 345 375 246 280 81 318 569 596 504 600 636 475 617 602 76 231 => the sum is 8838 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 676 672 108  56 100 199  93 450 607 526 209 589 576 444 622  96  24 162 614  63 420  22  80 437 292 664
 189 650 138 550 206 549 382 536 339 158 665 562  12 235 651   8 523 534  92  72 211 164 510 414 585 332
 124 299 608 360  65  39 604 246  27   3 447 125 202 184  71 625 438 129 440 454 230  52 542 516 417   6
 601 600 593 305 204 555 187 618  74 175 105 201 155   1 136 439 579 583 225 161  57 582 566 362 151 586
 231 524  86   7 551 301 276 314 205 568 483 309 519 501 487  67 130 383 553 464 621 236  36 256 540 153
 300 481   9 342 330 515 667 494 212 278 317 627  54 499 598 556 169  53 114 474 387  16  62 260 492 495
 272 250 547  37 557   5  61 548 348 498 409 140 648 180 612 597 122 613  47 287 159 221 539 373 624 107
 102 457 183 631 427 488 283 497 195 426 619 463  70 213 491 249 113 296 496  78 101 646 168 172 507 430
 575 554 167  64 647 179  32 493 452 432  23 111  88 302 574  48  28 223 662 632  14 511 475 378 522 615
 119 220 268 660 310 468  34 173 584 451 210  84 616 587  98 470 471  25 116 630 567 544 215 270  94 517
 423 416 445 315 405 257 298 392 413  44 391 393 321 425 376 143 633 428 396 569  40 357 190 148 182 401
 389 372 403 157 359 356 368 363 367 207 408 327 418 381 123 374 377 395 388 399 333 340 411  59 358 369
 375 240 371 312 351 228 402 163 329 308 335 341 459 364 384 400 334 370 410 594 588 242  11 144 380 366
 338 336 313 355 344 385 345 337 331 349 304 347 642 316 319 306 326 328 318 323 295 325 280 353 266 320
 352 558 208  95 490  15 636 254 644  79 571 530 281 214 265 127 479   2 565 178 307 467 535 626  50 273
 294 422 286 606 237 670 291 118 322 181 233 142 200 477 262 279 634 303 297 573 245 227 635 406 218 243
 248  45 448 580 431 261 137 252 429 293 196 654 559 275 126 476  35 478 442 247 605 415 149 354 407 259
  68  26 288 222 198 386 533 174 239 671 109 404 435 666 171 346 324 234 505 253 462 229 577 486 277 518
 525  99 458  82 224 398 365 197 669 128 241 489 194 637 528 503 170 188 394 390 217 147 424 484 500 150
  41 513 469 570 675  77 506  29 563 649 603 455 251 456 453 661 628 264  90  66 436 617 433 186 504 379
 546 154 141 572  10 541 343 602 115 596  38 461 532 527   4 193 441 412  30  97 112 466 226  91 282 578
 545 232 290 560 131 610 419 133 103 529 145 132  73  51 152 599 274 509  42 645 620 480 659 285 514  69
 165 134 561  60 623  49 120 668 537 255 552 258 146 581 135 449 289 658 192 641 446 465  19 538 104 156
 629 267  87 564 350 176 591  31  21 311 595 397 663 117 460 216 121  81 191 185 655 106 609 592 502 284
 656 263 674 219  55 421 590 643 473  75  85  83 244 110 269  43 657 512 543 160 640 653  89 139  20 485
  18  17 652 520 521 673 238  76 203 611 508 177 443  58 434 531 482 638 639 166  33 271 361 472  13  46

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00023e+07us (= 10002.3ms, 10.0023s)
Wall-clock time (full program): 1.00546e+07us (= 10054.6ms, 10.0546s)
Satisfaction error: 4
Number of search iterations: 3176
Number of local moves: 2647 (including on plateau: 2598)
Number of local minimum: 22 (including on plateau: 325)
Number of resets: 0
Number of restarts: 0

Problem in row 2: 189 650 138 550 206 549 382 536 339 158 665 562 12 235 651 8 523 534 92 72 211 164 510 414 585 332 => the sum is 9267 rather than 8801
Problem in row 3: 124 299 608 360 65 39 604 246 27 3 447 125 202 184 71 625 438 129 440 454 230 52 542 516 417 6 => the sum is 7253 rather than 8801
Problem in row 20: 41 513 469 570 675 77 506 29 563 649 603 455 251 456 453 661 628 264 90 66 436 617 433 186 504 379 => the sum is 10574 rather than 8801
Problem in row 21: 546 154 141 572 10 541 343 602 115 596 38 461 532 527 4 193 441 412 30 97 112 466 226 91 282 578 => the sum is 8110 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 676 675 426 647  25 260 655 550 523 484   6 106 296 637 286 432 606 259  33  34  18  10  61   1 450 645
 191  57 101 165 471 313  72 279 650 202 232 517  60  85 604 234 496 182 587 543 371 402 486 649 635 217
 539 238 624 114 508 362 288 275 412 588 422 123 119 626 192  38 255  32 261 577  27 416  77 590 495 603
 180   4 636 595 302 201 156 164 221 540 108 551 143 544 493 211 526 529 135 248 501 546 573 198  68 428
 104 272 576 527 601 664 322 408 407 187  98 670 277 358 116 642 133 631 293 145  84 215 391 197  11 472
 118 454  97 395  69 549  45 126 173 278 190 174 658 224 632 580  30 270 466 365 519 368 644 473 458 446
 640 151 585  74 163  66 565 535 150 137 330 570 178  31 447 542 579 374 515 506 617  49 188 146  67 596
 398 571 194 319 196 528 244 437 154 634 621 257 208 120   5 499 657  42 479  26 661 162 206 522 441 220
 503 507  80 518 359 475 564 470 474 410 266  93 443  52 128 611  90 457 419 355 149 461 509 129 265  14
 610 168 582 434 431  82 390  41  53  22 121 628 132 538 425 660 449 430 436 381 433  20   8 575 317 435
 241 134 332 264 245 548 477 666 485  65 384 451 420 185 581 356 385 200  78 318 281  96 440 380 327 462
 387 592 237  39 445 158  46 124 627 480 600 195 557 498 369  19 144 584 605 142 389 295 131 623 404 111
 326 651 231 367 353 352 366 393 350 372 347 382 334 312 323 360 364 370 341 136 235 346 345 349 152 344
 333 297 314 336 300 320 335 310 620 354 303 316 497 363 396 324 305 315 298 283 328 338 271 325 291 329
  56  81 593 414  91 273  43 125 307 516 455 267 361 667 274 290 567 555 170 483 418 469 139 482 530 175
 521 219 423 586 159  35 520 652 109 464 348 285 612 161 589 284 400  79 209 421 205 559 269 659 373 556
 246 633 306 199 532  99 625 377 481  40 662 607 578  88  94 397 229 157 646 560  12 276  28 294 141 494
 102 280 511 613 641 599 212 222 228 672 337 172  70  89 240  13 117 343  37 505 568 673  73  63 262 263
 574 467 383 448 392 618 304 207 438  44 534 643 513 299 107 167  87  29 250 376 289 184 339 357 401 351
 115 214 379 558  62 460 147 616 282 213  58 204 386 130 378  83 619 476 525 656 230 602 193 512 112 591
 492 252 160 169 629 103  15 566 233 648 210 403  64 459 504 415 452 597 406 186 148 189 674 243 444 140
 405 413 258 321 138 417 671 153 105 183 439 453 375 563 663 176 309 247 545   9 609  48 547 242 465  47
 301 569 394  54 181 487 490 236 669 287  21  50 254 500   3 203 225 409 177 622 463 572 429 424 654 127
 216 342  55 218 614 442 427 340 552 639 561  95 514 562 251 155 110 531 113  92 249 292 533  76 331 491
 468 553 253  16 668 388 583  51  23  86 638 100 122 399  36 502 488 166 554 308 541 598 594 268 171 227
  59   7  71 411 226   2 239 478  75 256 510 489 630 311 665 608 179 537 223 524 456 615 653  24 536  17

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00003e+07us (= 10000.3ms, 10.0003s)
Wall-clock time (full program): 1.00525e+07us (= 10052.5ms, 10.0525s)
Satisfaction error: 2
Number of search iterations: 4206
Number of local moves: 3467 (including on plateau: 3416)
Number of local minimum: 44 (including on plateau: 406)
Number of resets: 0
Number of restarts: 0

Problem in row 16: 521 219 423 586 159 35 520 652 109 464 348 285 612 161 589 284 400 79 209 421 205 559 269 659 373 556 => the sum is 9697 rather than 8801
Problem in row 18: 102 280 511 613 641 599 212 222 228 672 337 172 70 89 240 13 117 343 37 505 568 673 73 63 262 263 => the sum is 7905 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 573  22 113 415 461 341 671 335  98 296  70 470 266 554 194 534 490 257 413  12 250  27 676 654 441 197
 492 227  63 312 636 579  23 667  15 201 486 423 512 660 630 162  34 646  91 207 118 209 540 326 263 279
 604 374 626  86 295 432 277 584 232 126 663 260 459  80  79  73 264  66 546  72 454 439 221 465 401 623
  30 131 563 293 222  58 672  48   1 504 252 174 301  62 480 270 154  68 210 558 325 114 619 169   7  10
 514 163 193 150 187 265 202  96 522 544 217 473 603 275  35 503 591 652 149 483 560 394 200 140 184 506
  26 481 535 111 620 547 463 156 132 608 428 251 205   8 398 403 176 594 621 109 133 452 611  28  50 655
 412 285 571 545 610 524 548 155 574 153 566  31 159 557 110  44 196 416  94 189 467 383 538  21 511 142
  32 104 160 536 517 633 175 282 670 446  57 622  93  38 564 105 120 165 585 320 614 206 469 245 437 606
 305 583 128 553 212  52  20 541 381  37 653 640  40 223 242 657 449 433 575 367 199 475   5 542 658 366
 529 236 384  18 286 157 537 639 419 407 244 526 226 190 455 405  76 148 438 281 173 543  25 411 421 627
 164 618  56  16 427 499  49 444 298 513 396 528 337 466 617 527 385 116   9 462 485  59 373 379 523  55
 350 353 378 589 376  99  14 345 429 393 390 231 358 431 410 331 645 181 348 377  33 276 365 375 364 360
 346 386 408 238 387 380 351 362 318 369 333 355 368 402 342 371 349 334 324  90 425 106 314 354 474 315
 327 306 389 329 269 359 322 308 356 319 340 307 313 288 317 344 323 284 347 651 339 370 332 304 328 330
 457 532 404 572  75 168 213  47 569 502 103 420  64  65 482 388  83 248 650 498 460 525 146 440 593  97
 261 311 272 675 254 303 300 239 241 278 321 302 240 287 237 479 451 494 247 259 497 656 280 297 352 268
 289 578 643 424 399 122 565 219 215 274 612 121 256 230 290 179  53 550 395 343 102 447 208 225 561 501
 267 510 112 665 493 576 172  88 496 556 478 158 119 151 666 599 382 243 507 108 273 136 515 581 143 255
 632 674 216 228 107 138 634 464 234 435 489 597 669 587 134 124 602 605 129 249 195 166  41 161 127 178
 609 443 336 520 182 647 204 262 406 144  77  71 214 445  11   3 271 582  45 601 491 616 180 631 258 552
 141 505  51  78 559 391 562 422 192 600 101 664 477 218 549 592 521 246 191 615 570 338 453 211 229 299
 135 203 516 495  87 586 607 220 596 130 171  39 577 418  84 291  85 198 310 624 662  60 309 139  82  67
  43  54 641  92 117   6 668 580 145 661 123  61 147 635 468 500 644 400 434 659 363 357 235 487 186  95
 568 426 283 316 183 484  13 185 649 100  81 294 519 409 414 233 472 417  29 125 152 628 567 177 629 448
 224 292 590 430 167 436 450 625 539  17 555 530 637 613  42  36 397   2 476  24  69 361 137 508  46 598
 471   4 170 115 673  19  89 488  74 188 595 253 642 509 551 648 588 456 638 518 392 458 442 531 533 372

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0002e+07us (= 10002ms, 10.002s)
Wall-clock time (full program): 1.00544e+07us (= 10054.4ms, 10.0544s)
Satisfaction error: 8
Number of search iterations: 4117
Number of local moves: 3478 (including on plateau: 3433)
Number of local minimum: 33 (including on plateau: 389)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 573 22 113 415 461 341 671 335 98 296 70 470 266 554 194 534 490 257 413 12 250 27 676 654 441 197 => the sum is 8830 rather than 8801
Problem in row 4: 30 131 563 293 222 58 672 48 1 504 252 174 301 62 480 270 154 68 210 558 325 114 619 169 7 10 => the sum is 6295 rather than 8801
Problem in row 9: 305 583 128 553 212 52 20 541 381 37 653 640 40 223 242 657 449 433 575 367 199 475 5 542 658 366 => the sum is 9336 rather than 8801
Problem in row 18: 267 510 112 665 493 576 172 88 496 556 478 158 119 151 666 599 382 243 507 108 273 136 515 581 143 255 => the sum is 9249 rather than 8801
Problem in row 19: 632 674 216 228 107 138 634 464 234 435 489 597 669 587 134 124 602 605 129 249 195 166 41 161 127 178 => the sum is 8815 rather than 8801
Problem in row 21: 141 505 51 78 559 391 562 422 192 600 101 664 477 218 549 592 521 246 191 615 570 338 453 211 229 299 => the sum is 9775 rather than 8801
Problem in row 22: 135 203 516 495 87 586 607 220 596 130 171 39 577 418 84 291 85 198 310 624 662 60 309 139 82 67 => the sum is 7691 rather than 8801
Problem in row 26: 471 4 170 115 673 19 89 488 74 188 595 253 642 509 551 648 588 456 638 518 392 458 442 531 533 372 => the sum is 10417 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 676 192 281  12 257  13 608 614 369 213 470 607 113 329 473 141 384 199 135 623 410 343 579 300 183 277
 596 645 452 237  31 303 414 523  98   2 224 197 377 243 374 568 547  83 348 424 309 501 461  43 315 486
 595 557 625 413 605 200 163 477 554 617 337 214 128 536  29 633 100 117 130  48 250 354 178 356 435 150
 145 112 550 606 479 422 306 121 144 528  35 474 142 169 105  54  30 433 567 630 533 226 575 489 386 540
 546 524 404   6 565 104 119 195 334 332 394  15 631 188 116 175  62 599 642 469 467 196 312 295 584 120
  87 212 314 137 165 364 628 580 675 342 238 327 278 612 246   8 551 587 357 532 366  23 126 494 382 170
  40  71 488 162 539 544 439   3 563 380 556 311 201  45 333 211 491 509 483 340 504 541 648  82 158 159
 101 223 457 273 586 543  73 502 529 190 637 198 245  58 604 661 203  81 485 202   5 149  74 594 660 468
 151  93 429 495 267 258 641 665 453 593  25 643 569  36  91 561 139 209 618  19  46 438 217 626 390 129
 321 484 232 432 419 227 418 161 274 409 381 285 360 242 425 512 471 464 421 138 230 371 403 426   1 294
 134 508 466 345 441  51 658 344 193  96 174 574  66 451  95 521 206 349  59 254  86 650 576 558 515 431
 355 615 316 205 465  16  20  65 538 148   4 359  33 437 463 204 588 279 331 287 542 450   7 164 185 622
 293 492 255 527 405 476 323 555 616 108 125  26 407 398 519 266 133  76 518 146  60  17 387 376 651 646
 525  84 549 373 155 379 339 597 229 510 249 218 548 265  55 436 292 613  53 657 428 408 507 647 458 395
 442 290 298 328 320 322 299 284 336 313 535 317 601 319 351 280 301 248 289 326 282 288 262 318 482 370
 194 674  94 634 153 393 526 283 297 324 307 455  79 662 531 272 462 472 310 261 191 263 228 186 264 286
 619 251 500 496  77 609 460 171 123 256 389 305 268  97 269 235 240 664 219 260 478 590  75 166 530 454
 459 591 216  85 231 362 157 173 375  47 534 420 620 644 399  14  61 335 537 456 302 353 177 236 445 572
 253  72  90  37  24 446 140 208 131 670 511  89 621 545 562 391 632 304 423 522 136 627 493 412 308 154
 434 207  68 649 639 636 341  44 220 160 581 663 296 560 640 416  42 215  50 168 603 244 444 570  64 378
 182 275 147 671 385 221 440 402 103  27 668 222 667 447 210 513 411 396   9 443 152 233 490  57 600 430
  21 372 673 566  92  11 270 655  22 487 585 291 347 124 367 346 368 271 350 592 388  99 638 180 361 325
 276 448  70  88  69 669 247 187 659 559  18 109 449 102 672 330 589 498 497 338 573 602 114 132 106 400
 506  34 107 365 259 181 156 406 564 514  67 383 517 666 118 610 654 635 234 176 652 115 553  39 241  49
 239 358 598 475 653 480  38 397 392 352 505 516 127 225 582 415 481  32 656  63 179 143 110 503  41  52
 611 417 122 184 520 571 578 189  10 624 252 583 111 401 172  28 363 499  80 427 629 577 167 552  56  78

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00022e+07us (= 10002.2ms, 10.0022s)
Wall-clock time (full program): 1.0054e+07us (= 10054ms, 10.054s)
Satisfaction error: 7
Number of search iterations: 3587
Number of local moves: 3008 (including on plateau: 2962)
Number of local minimum: 23 (including on plateau: 352)
Number of resets: 0
Number of restarts: 0

Problem in row 5: 546 524 404 6 565 104 119 195 334 332 394 15 631 188 116 175 62 599 642 469 467 196 312 295 584 120 => the sum is 8394 rather than 8801
Problem in row 12: 355 615 316 205 465 16 20 65 538 148 4 359 33 437 463 204 588 279 331 287 542 450 7 164 185 622 => the sum is 7698 rather than 8801
Problem in row 14: 525 84 549 373 155 379 339 597 229 510 249 218 548 265 55 436 292 613 53 657 428 408 507 647 458 395 => the sum is 9969 rather than 8801
Problem in row 20: 434 207 68 649 639 636 341 44 220 160 581 663 296 560 640 416 42 215 50 168 603 244 444 570 64 378 => the sum is 9332 rather than 8801
Problem in row 25: 239 358 598 475 653 480 38 397 392 352 505 516 127 225 582 415 481 32 656 63 179 143 110 503 41 52 => the sum is 8612 rather than 8801
Problem in column 18: 199 83 117 433 599 587 509 81 209 464 349 279 76 613 248 472 664 335 304 215 396 271 498 635 32 499 => the sum is 9167 rather than 8801
Problem in column 26: 277 486 150 540 120 170 159 468 129 294 431 622 646 395 370 286 454 572 154 378 430 325 400 49 52 78 => the sum is 8435 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 676 534 655 112  50 674 487 219  49 448 554 670 640  31  98 428 427  36 140 396 464 228 530 146 216 650
 329 164 517  43  27 224 666 394   1 280 111 498 187 480 327 520 225 389 123 615 467 499 481 318 473 443
 519 551 639 301 284  80 333 379 274 476 474 263 521 194   7  46 549  81 413 371  12 589 563 540 188 154
 184  83 557 583 456  37 133 220 362 559 593 178 536 572 539 501 307 512 598 373 457  14 190 193 207 240
  15 579 268 653 558   4 580 399 401  87 296 124 573 416 169 661  22 278 576  60 337 553 197 424  23 548
 144 468 490 232 204 547 570 596 309 196 609 663  75 513 463 254 159  86  85 438 538 246 138 316 454   8
 531 245 323 632 608 256 526 305 102 156 486 116  91 597 176 198 618 633 542 437 100 462  97  24 648 575
 649 505 567 407 292  95 636 290 172 167 334  26 669  69 300 417  89 235 460 671  73 226 541 560  99 252
 592 668  90 119 647 163 170 115 450 654 213 434 603  34 461 257 458 451 672  56  55 601  10 532 255  41
 420  58   3 423 452 359 425 110 447  13 414 442 445 126 412 433  54 392 642   9 436 440 441 535 426 444
 421 259  70 105 595 622  94 205  39 562 439 328 361 400 377 398 215 272 122 134 393 604 330 659 368 429
  44 405 408 397 350 355   2 403 395 378 391 409 364 390 338 411 387 372 354 352 370 346 384  53 360 383
 376 386 366 353 363 339 332 381 351 382 129 322 367 356 369 345 287 324 317 341 388 314 315 340 365 293
 302 347 610 556  77 577 234 418 306 492  67 276 331 348 657  51 620  17 182  21 217 511 491 510 446 137
 261 508 675 298 320 125 584 143 602 128 248 422 294 231 325 626 230 555 121 336 617 160 139 132 286 435
  47 279 200  25 380 500 264 599 651  74 313 410 145  45 645 253 267 227 244  82 566 644 449  19 624 142
 311 514 326 533 281 266 606  68 135 469 265 374 522 277 222  88 635  32 625 150 623 273 304 221 472 209
 619 571 120 181 108 236 343 478 251 455 569  66 282 157 564 162 537 242 260 288 289  30 275 528 605 585
 494  61 385 515 149 607 482 270 202 171  52 375  11 646 552  16 357 582 174 613 211 431 285 588 262 310
 466 349 525 151 502 612 201 527 430 641 203 470 295 269 189 208 614  59 503 471 214 303 158 153   5 283
 186 247 243 335  64 291 406 529 297 524 147 643  28 629 319 616 155 484 206 258 130 148 630 600 191 495
 237 161 165 561 238 136  40  63 664 321 453 543 488 550  35 565 506 611 141 180 652 117  57 223 516 578
 545 497 173 131 485 665 103 415 404 299 638 271 185 419 631 183 308 166 493 177 489 104 114 634  93 179
  76  33 106 477 509  20 239 660 546 621 667  48 101 229 192 568  79 628  62 637  42 312 594 241 591 523
 250 233 152 195 175 507 218 586 496  38 118  72 212 249  92 518 109 658 402 662 590  65 432 113  84 459
 107  96 168 483 627 504 127  29 465 210  18 358 475 574 342  78 587 479 344 673  71 581 656 199 544   6

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00004e+07us (= 10000.4ms, 10.0004s)
Wall-clock time (full program): 1.00525e+07us (= 10052.5ms, 10.0525s)
Satisfaction error: 5
Number of search iterations: 3634
Number of local moves: 3025 (including on plateau: 2977)
Number of local minimum: 21 (including on plateau: 382)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 676 534 655 112 50 674 487 219 49 448 554 670 640 31 98 428 427 36 140 396 464 228 530 146 216 650 => the sum is 9558 rather than 8801
Problem in row 4: 184 83 557 583 456 37 133 220 362 559 593 178 536 572 539 501 307 512 598 373 457 14 190 193 207 240 => the sum is 9184 rather than 8801
Problem in row 7: 531 245 323 632 608 256 526 305 102 156 486 116 91 597 176 198 618 633 542 437 100 462 97 24 648 575 => the sum is 9484 rather than 8801
Problem in row 16: 47 279 200 25 380 500 264 599 651 74 313 410 145 45 645 253 267 227 244 82 566 644 449 19 624 142 => the sum is 8094 rather than 8801
Problem in row 25: 250 233 152 195 175 507 218 586 496 38 118 72 212 249 92 518 109 658 402 662 590 65 432 113 84 459 => the sum is 7685 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 676 258 312 189 169 209 629 644  17 207  35 453 667 406 578   9  96 531 241  61 184  21 613 411 529 656
 608 642 391 647 366 137 199 545 167 563 163  60 446  82 458  83 311 276  41 128 603 274 417 179 390 625
 511 198 659 461 412  52 610  49 439 178   1 100 599 149 206 200 636 330 606 283 265 589  88 607 157 416
 470 166  86 585 150 113 437 168 372 535 301 582  79 256  47  72 565 643 466 211 441 289 556 443 244 524
  32 174 324 398 239 462 434 152 403   3 449 661  93 375 101 561 496 505  24 320 626 581 273 430 621  64
 188 566 281 300 194 204  74 296  68 431 670 624 503 247 552  26 419 444 658 551 517 176 180  27 104 501
 226 286 598 665 675 151 525 175 305 254 433 170 639 162 414 521 664  19  56 510  58 306 541  80 303  65
 516 543 528  66 114 671 405 499 550  51  87 187 586 427  29 507  92  89 469 455 237 364 527 165 492 145
 110 549  95 558  31 612  20 473 542 637 223  38 224 107 233 633 120 428  50 619 660 512 562 429 164 172
 575 186  22 494 459 477 242 600 560 440  43 192  39 106 592 663 456 504 173 143 498 181 253  15 436 452
  75 141  98 257 579 593 595 260 567 422 410 425 604 407 278 392 450 634 251  10  53   4 421 509 195 171
 358 193 393 132 605 488 342  84 357 346 329 360 343 328 118 672 183 359 339 117 344 472 314 387 248 590
 350 365 368 356 361 345 322 325 367 374 373 338 348 333 382 340 349 307 284 394 383 381 294  70 351 341
 379 331 313 334 353 337 354 318 280 352 347 299 371 316 297 279 397 355 662 335 317 388 363 310  36 378
 227 154 482 539 105 208 570  62 201 480 540 298 134 435   5 282 522 654 620 385 232 102 500 631 221 212
  85 537 112 327 319 487 548 271 413 252 266 302 460 293  76 326 572 246 295 574 641 250 225  46 323 555
 240 497  25 321 547 259 370 557 502 288 287 573 285 569 596 395 202 415 369 215 115 424  16 451  78 205
 196 362 648 197 506  71 255 399   6 304  37 483 601 386 235 147 576 220 144 464  77 646 228 640 577 396
 447 122 484 124 627 272   2 213 231 292 652 182 210 587 493  73 133  55 153 559 568 650 465 234 571 402
 332 219 139 474  30 653 156 445 315 594 468 618 155 614  69 159 218  57 463 138 432 479 442 108 623 401
 125  42 146 177 238 191 536 673  91 161 597  34 109 158 485 617  13 635 580 616 140 418  45 666 651 657
 655 490 467  48 136 267  94  12 622 668 609 518  23 553 523 135 230 491 564  97 245 126 111 519 471 127
 520  44 669 119 420 615 588 454   8 308 148 532 263 130 229 674 478 121 384 632 269 448  59 530  28 131
 222 457  81 611 438 380 116 377 628  90 602 475 214 400 584  18 264  99 309 290 513 291 476 495 103 268
 645 630 554 408 538 270 129 514 275  63 185  54 544 489 638 426 217 123  67 160 376  40 423 216 481 336
  33 649 526  14 190 277 249 236 515 508 546 243 262 486 583 591 142 261 533 534   7 389 409 203 404  11

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.49992e+06us (= 9499.92ms, 9.49992s)
Wall-clock time (full program): 9.55188e+06us (= 9551.88ms, 9.55188s)
Satisfaction error: 0
Number of search iterations: 4905
Number of local moves: 3939 (including on plateau: 3887)
Number of local minimum: 49 (including on plateau: 454)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 106  36 268 558 669 632 104 336 298 544  25  88  35 432 551 660 254 353  77 271 596 243 134 143 287 510
  69 550 498 451  72 258 614 281  73 352 583 576 601 564  58  83  24 331 489 567 357  30 180 162 634 344
 505 434 333 354 486 538 578 207 535 118  11 668 176 506 399 153 294 572 559  55 140  99  75 603 256 147
 181 226 421 305 129 577   9 602 365 265 515 501 426   5  19 274 391 219 215 457 171 358 592 463 676 439
  68 657  21 674  87 135 194 119 277 203 386 652 635 441 666 356 210 574 521 359   3 244 393 542 585 579
 438 234 610 270 670 100 131 374 425 108 526 172 532 229 227 112 225 664 516  45 250 533 137 641 409  95
 379 309 123 269 345 165 502 414 645 519 322   1 173 127  94 500 133 388 185 487 363 659 531 562 125 481
 206 582 126 233 492 561 622 130   2  50 446  97 616  65 482  64 394 545 629 289 216 367 593 406 350 586
 209 611  28 525 462  59 389 663 292 456 658 517 475 111 416 468  96 156 136  32  34 221 445 429 590 323
  10 442 410 212 440 536 182 514 565 241 224 175 539 553 465 495 415 149  13 609 306 262 653 223  89  79
 396  22 587 466 594 424 299  41 418 598 169  26 480 184  93 422 141 158 340  62 540 385 378 507 450 621
 619 407 483 431  17 373 672 595 661 319 148 361 412 370 547 633 198 279  66 251 330  16  15 362  76 160
 646 643  31 546  56  43 628 355  86  23 640 608 648 142  40 427 589 166 273  84 443 151 383 187 170 384
 174 193 335 266 490 332 311 327 377 315 312 308 339 257 347 278 638 295 320 334 671 301 293 325 317 346
 655 437 650  85 128 337 310 290 283  92 326 300  33 665 368 523 228 656 321 560 343 478 275 117  39 302
 318 167 549   6 405 403 220 449  54 392 242 248 639 291 625 276 404  98 651 470 303 261 246 267 520 297
 484  48 459 103 452 204 375  53 508 667 190 348 145 360 509 189 620 408 382 613  61 494  27 328 376 398
 121 473 239 390 263 413 453 231 191 644 461 428 371 232 654 235 155  63 479  51 381 460  37 213 636 527
 491  14 201 150 192 436 402 238 163 253 351 528 397 581 214 570  67   7 503 518 675  38 496 568 548 200
 417 249 280 205 464 624 380 455 458  46 178 471  74  82  12 342 599 497 329 372  91 493 584 286 164 649
 240 154 673 222 296   4 168 626 400 575 245 110 316 543 107 623 477 524 285 122 637 606 230  44 208 366
 186 387  71 237 474 115 512 541 161 537 530 195 183 448 499 259 556 196 313 469 647 472 454 114 188  57
 534 430 600  80 369 146  47 139 197 444 607 159 144 138 132 571 476 324 662 423 288 420 569 642 179  81
 555 157  90 615 116 563 272 488 618 307  52 105  70 627 264 217 566 124 120 630 513 304 604 202 573  49
 617 435 401 591 349 485   8 255 597 211 102 554 282 236 433  42 631 588 218 411 101 511 364  18 109 252
 177 504 314 557 284 338 419  78 152 522 552 605  60 612 580  29  20 467 199 260 341 395 113 447 247 529

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00028e+07us (= 10002.8ms, 10.0028s)
Wall-clock time (full program): 1.00459e+07us (= 10045.9ms, 10.0459s)
Satisfaction error: 6
Number of search iterations: 3224
Number of local moves: 2673 (including on plateau: 2626)
Number of local minimum: 30 (including on plateau: 310)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 106 36 268 558 669 632 104 336 298 544 25 88 35 432 551 660 254 353 77 271 596 243 134 143 287 510 => the sum is 8210 rather than 8801
Problem in row 5: 68 657 21 674 87 135 194 119 277 203 386 652 635 441 666 356 210 574 521 359 3 244 393 542 585 579 => the sum is 9581 rather than 8801
Problem in row 6: 438 234 610 270 670 100 131 374 425 108 526 172 532 229 227 112 225 664 516 45 250 533 137 641 409 95 => the sum is 8673 rather than 8801
Problem in row 8: 206 582 126 233 492 561 622 130 2 50 446 97 616 65 482 64 394 545 629 289 216 367 593 406 350 586 => the sum is 9149 rather than 8801
Problem in row 13: 646 643 31 546 56 43 628 355 86 23 640 608 648 142 40 427 589 166 273 84 443 151 383 187 170 384 => the sum is 8392 rather than 8801
Problem in diagonal 1: 510 634 603 592 244 250 487 629 156 415 422 547 142 339 300 242 667 191 238 380 4 474 80 90 435 177 => the sum is 9248 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 214 525 163 522   5 329 400 621 584 178 636 296 240 273 235 429 631 189 192 188 108 524 287 286 124 622
 556 652 533 122 553 534 418  49 653 649 143 454 224  86 103 520 175 213 353 272  64 410 574  46 406  39
 498 337  16  71 156 665 513 564  66 198 607 452  93 517  54 336 137 479 199  33 641 528 642 121 290 588
 275   2 115 551   8  18 548 645 417  30  29 539 664 446 250 323  89 494 531 350 111 481 536 493 430 426
 530 227 279 193  59 583 207  65 594 249 309  51 581 565 646  88 598  81 650 610 159 126 268 592  14 477
  38 238 662 374 573 661 196 542 107 552  42 116 577  25 635  80 500  73 442 257 509 589 110 408  84 411
  27 492 332 395 523 206  48  45 393 266 582 228 369 633 339  95 612 617 660 157 667 148 167   9 606 185
 585 390 527 658 670 288 210 201 382  22 468  61  28 147  94 125  96 619 158 241  17 602 439 655 563 555
 445 171 613 269 197 182  19 634 255  58 368  83 422 342 591  63 101 315 632 340 190 505 386 615 380 625
 120 223 460 150  72 444 450 491 293 292   7 200 334 187 488 566 414 259   1 603 327 415 239 464 675 627
 139 328 434 128 277 412  37 131  55 218 559 586 399 276 595 516 219 203 571 349 547  23 648 170 325 656
 149 473 640  10 229 138 258 609 510 483 166 659 194 104 264 244 384 394  24  68 248  31 176  36   6  62
 333 299 346 304 316 318 303 391 383 284 347 375 462 289 376 557 174 306 285 307 262 396 371 377 388 252
 433 458 321 282 305 265 331 301 322 397 236 457 312 302 436 403 373 428 311 319 424 372 354 366 281  12
  74 363 343 381 283 420 348 280  53 425 326 233 358 356 338 169 330 300 604 389 545 378 413 387 345 360
 314 629 134 202 503 599 630 263 133 274 623  91 341  77 456 507 162 639 496 404 359 211 114 676 335 638
 643 515  78 596 560 168 474  34 590 407 261 297  13 423 105 208 478 587 514 506 541 152  43 112 135 361
 102 438  60 666 401 191 614 487  47 141 351 489 579 243 518 608 529  52 352 140  90 427 364 146 570 294
 480 344  57  67 620 409 471 451  99 398 172 465 362 567 576 123 486 663  75  69 161 106 475 253 535 317
 357 136 476 485 432 469 554 242 644 467 117 234 231 181 226 593 186 657  32  76 543 165 183 448 490 177
 669  70 482 550 232 220 472 221 180 324 205 455 320 109 441 130 537 222  21 671 628 145  98 499 502  20
  26   4 251 459  41 298  82 365 367 546 654 501 463 616 385 578 164 155 402 626 271 435  40 204 267 437
  56 230 601 431 575  79 212 447 379 310 449 562 624 580 216 540 270 237 153 558 470 443 254 217 184 160
 532  35 313 118 416 209  87 512 308 618  11 647 154 538 119 225 142 484 151 508 544 247 497 605 521 260
 569 549 421 561 355 611 674  15 568 504 461  97 278 466 215 370 519   3 600  92 246 291 597 572 295 113
 637 673 144 256 440  85 245 195 419 511 672 173 179 453 100 405 495 132 392 668 129 651 526  44  50 127

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00018e+07us (= 10001.8ms, 10.0018s)
Wall-clock time (full program): 1.00442e+07us (= 10044.2ms, 10.0442s)
Satisfaction error: 8
Number of search iterations: 3588
Number of local moves: 3003 (including on plateau: 2958)
Number of local minimum: 22 (including on plateau: 336)
Number of resets: 0
Number of restarts: 0

Problem in row 12: 149 473 640 10 229 138 258 609 510 483 166 659 194 104 264 244 384 394 24 68 248 31 176 36 6 62 => the sum is 6559 rather than 8801
Problem in row 16: 314 629 134 202 503 599 630 263 133 274 623 91 341 77 456 507 162 639 496 404 359 211 114 676 335 638 => the sum is 9810 rather than 8801
Problem in row 18: 102 438 60 666 401 191 614 487 47 141 351 489 579 243 518 608 529 52 352 140 90 427 364 146 570 294 => the sum is 8899 rather than 8801
Problem in row 21: 669 70 482 550 232 220 472 221 180 324 205 455 320 109 441 130 537 222 21 671 628 145 98 499 502 20 => the sum is 8423 rather than 8801
Problem in row 22: 26 4 251 459 41 298 82 365 367 546 654 501 463 616 385 578 164 155 402 626 271 435 40 204 267 437 => the sum is 8637 rather than 8801
Problem in row 23: 56 230 601 431 575 79 212 447 379 310 449 562 624 580 216 540 270 237 153 558 470 443 254 217 184 160 => the sum is 9237 rather than 8801
Problem in row 25: 569 549 421 561 355 611 674 15 568 504 461 97 278 466 215 370 519 3 600 92 246 291 597 572 295 113 => the sum is 10042 rather than 8801
Problem in diagonal 1: 622 406 121 536 126 509 157 158 315 414 516 264 289 312 233 623 407 47 451 554 220 41 431 313 549 637 => the sum is 9251 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 323  56 213  60 543 613 241 455 667 601 596 663 443 197 665 510 623 296 162  64 586 591 185 190 651 228
 201 647  79 673 452 141 358  43 634 473 253 124 412 611  44 394 546  24 478 583  12 134 458 606 291 130
 542  62 604 209 168   1 447 545 116 616 603 407 171  51 397 592  63 635 572  55 547  29 466 307 117 479
 481 454 353 177  53 305 173 401  66 378 306 626 123  76 222 149 178 585  35 287 514 174 415 550 502 140
   2 554 328 245 584  80  25 590 137  46 362  59 103 437 605 334 578 460 342 475 456 410 290 396 309 594
 207  22 522 474 429 557 132 206 189 411  78 148 637  52 551 527 562 119  28 614 267 509 506 133 503 418
 280 255 641 579 666 147 107 352 304 191  14 610 675 269 426 195  26 560 389 580   6 175 548 232 331 243
 567 676 333 343 223  85 652 482 221 518 441 295 289 214 182 409  95  10 249 414 288 564 336 172 114 629
 313 142  48 235 555 383 662  70 428 617   7 587 500 504 530 311 420  54  86 272 263 180 602 438  17 577
 512 513 120 440 486 211 621 669 210  45 416 370  31 229 247 435 419 528 517 163 154 276 597 204 183 205
 619 350  47 348  94 200 566  83 152  58 487 537 499 226 495 467 128 656 434 661 299 104 354 404 424 109
 406 373 377 340 380 338 391 400 384 357 322 385  50 393  30 329 483 386 364 360 374 451 372 376 375   5
 367 170 575 160 476 620 101 337 523 398 236 515 108 448 399 638 282  40 326 361  75 110 239 461 390 446
 184 423   8 655  93 281 339 297 417 538 252 471 607  71 294 321 363 113 643 541 157 660 145 292 497 139
  84 165 674 405 231 136  15 135 534 531 636 347 632 286 257 271 436 421 356  32 571 330  21 526 234 535
 445 302  99  91 181 477 341 301 298 259 459 270  73  82 266 631 431 260 470  69 658 668 453 639 212 366
 246 219 227 563 484 275 449 144 608 279 194 314 649 344 237 553 202 273 556 225 268 539 196 233 274 250
 622 598 595 315 316 427 186 284 105 351 382 464 521 648 131 121 511 218 657 490  87 303  90 153 138  88
 199 158 519 403 627 624 150 468  65 368 516 224 264 565 570 217 293 589 215  34 369  42 192 112 126 349
 650 359 208 159 327 127 480 625 320 463  72 156 125 644 581 653  81 498 188 179 256  13  98 345 540 654
 381 422 532 633 285 143  20 258 491 433 167 261 129 106 642  77 392 618  36 254 388 203 230 525 646 529
 115 489 319 505 262 582 465  23 325 672 600 169 317 308 146  96 155 164 432 430 444 371 664 161 118 469
 122 549 442   4  67 240 536 462 568  18 573  74 242 574 238 450 198 365 413 176 457 588 300 558 310 277
  97 102 216 193 187 492 493 332 402 166 576 544 670 425 100  61 628  57 324 318 569 559 408  16 615 251
 501 630 283  68  39 671 355 561 599   3  33  89  37 508 395  41  49 387 520 612 248 346 609 265 640 312
 335 111 439 524 593 645 496 278  38  11 220  92 494 533 151  19 659 485   9 552 488 472  27 507 244 379

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.0053e+07us (= 10053ms, 10.053s)
Satisfaction error: 4
Number of search iterations: 3107
Number of local moves: 2557 (including on plateau: 2508)
Number of local minimum: 21 (including on plateau: 326)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 323 56 213 60 543 613 241 455 667 601 596 663 443 197 665 510 623 296 162 64 586 591 185 190 651 228 => the sum is 10422 rather than 8801
Problem in row 4: 481 454 353 177 53 305 173 401 66 378 306 626 123 76 222 149 178 585 35 287 514 174 415 550 502 140 => the sum is 7723 rather than 8801
Problem in row 19: 199 158 519 403 627 624 150 468 65 368 516 224 264 565 570 217 293 589 215 34 369 42 192 112 126 349 => the sum is 8258 rather than 8801
Problem in diagonal 1: 228 291 307 415 410 267 580 249 54 419 467 30 448 607 347 459 279 105 468 480 143 262 4 216 630 335 => the sum is 8500 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
  76 100  35 526 339 418 409 432 487 501 555 654 422  20 289 429  56 504 352 364 234 449 365 408 345  32
 443 156 141  65 477 220 414 584  30 515 201 271 560 116 348 370 358 456 561 482 529 351 450 597  28  78
 205 537 204 139 589 475 651 392 231 125 333 175 590 314 168 636 645 579  42 491 551 104 405   2  70 148
 259 604 109 131  96 340 660 535 479 672 621 481  79 447 576 171 548 215 129 293   4 176 127 420 155 474
  53 489 465 534 103 326 308  93  21 522 221 135 454 556 406 111 368 302 666 476 180 106 588 554 532 232
 357 245 464 275 140 460 416 306 258  73 513 472 319 110 112 620 575 318 274 462 163 372 503 118  77 265
 252 354 287 166 512 237 473 661 540 399 177 230  49 670 440 158 145 154 493 573 189 183 277 407 206 569
  12  94  88 599 424 628  62 655 282 547  68   1  86 497 674 516 673 226 208 663 284 224  58 442 502 288
 583 337 397 630 207 564 278 640 431   6 499 608  44 658 147 299  43 136 317 303 510  99 381 468  19 197
 574 676 642  27 227 369 541 170 563 113 458 249 267 268 530  48 298 656  17 587 404  39 214 107 595 162
 601 483 361 114  26  45 270 261 545 445 310 137 386 134 343 294 193 470 150 283 557 373 320 647 388 665
 506 241 444 550 334 187 390  90 527 495 296 219 511 169 264 434 384 212 151 256 412 344  31 401 375 578
 389 152 191 426 159  91 149 146 542 325 239 648 209 353 417 119 228 596 616 391 355 549 262  11 635 603
 543 452 105 631 632 585 132 363 332 305  16 188 453 366  81 210 398 160 254 184 347 427 400 301 613 323
  23 290 321 280 539  89 286 295 671 469 244 423 633 179  59 309 199 531 567 520 519 649 167 362  34 143
 594 586 223 376 165 559 153 607  40 478 172 525 138 514 644 329 419 615 242  95 240  33 459 250 260  85
 582  63 374 331 492 263  38  47 196 410 662 120 190 342 441 593 402 233 533 108 359 536 639 285 251 311
 324 257 229 377 297  82 623 253 571 266 591 316 269 356 382 507 380 247 202 403  92 313 518  71 238 637
  25 614 174 494 451   5 565  15   8 255 415 606 279 102 128 523 600 198 496 387 490  13 653 498 396 411
 236 609 669 117 123 341 471 421 577 627 605 379 521 173 394 436 243 371 217  18  64 466  46  66 467 144
  69 142 626 360 617 566 101 505 157 200 195 395 439 517 437   9  54  84 638  29 218 657 667 430 181 508
 367  72 428  55 634 121 330 413 455 185  24 433 611 273  10 186 528 544 248 572  57 643 480 246 438 448
 598 133  67 610 378 307 580 322 235  74  14 124  50 338 130 650  80 281 553 336 581 568 538 641 435 178
  22  98 646 485 291 349 122  41 315  61 619 659 383 618 500 558 484  37 327 216 300 225   7 629 463 346
 486 624 602 292 546 612 304 457 182 272 328 192 335  36 213 203 115  51 488  87 592 350 194 276 652 312
 622 393 509 211   3 562  75  97 126 461 425 161 524 675 668  83 385 625  60 222 570 552  52 164 446 664

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00525e+07us (= 10052.5ms, 10.0525s)
Satisfaction error: 2
Number of search iterations: 4696
Number of local moves: 3854 (including on plateau: 3803)
Number of local minimum: 33 (including on plateau: 469)
Number of resets: 0
Number of restarts: 0

Problem in row 6: 357 245 464 275 140 460 416 306 258 73 513 472 319 110 112 620 575 318 274 462 163 372 503 118 77 265 => the sum is 8267 rather than 8801
Problem in row 26: 622 393 509 211 3 562 75 97 126 461 425 161 524 675 668 83 385 625 60 222 570 552 52 164 446 664 => the sum is 9335 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 675 577 400 297 415 362 354  67 109 238  95 325 520 298 216 497 333 241 649 228 256 183 432 512  17 505
 155 209 114 584 174 337 173 598 665 142 486 664 171 215 413 478  12 160 111 491 551 385  35 545 610 323
 435  10 612 237 182 420 499 330  77 467 430 293 370 582 504 202 401 277 168 613  47 284 580 519 662 603
 254  90  92 581  68 661 339  21  36 595 639 464 321 645 300 479  63 387 358 436 560 496  26 201 421 268
  57 252 235 599 565 191 186 179 340 164 305 234 503 524 663 405 423 347 302 521 417 532 626  50 159  22
  42 121 411 511 508 522  39 345 535 470 367 591 568 222 194   8 441 378 344 538 198   4 578 205 507 154
  54 327 589  97 218  23 530 176 361 627  59 618  37 498 192 334 621 600 587  69 476 643  74 184 424 383
 632 223 537 438 104  81 304 472   1  66 543 544 616 262 122 219 258 221 594 657 489 169 666 322 200  61
 541 672 175  20 265 285 586 259 468 303 624 264 145 429 628 125 602 456  56 257 668 634 320 212 471 280
 572 123  99  14 346 126 403  80 427 481 597  13 461 558 203 443 655 404 294 431 195 579  75 399 231 592
 139 225 466  29 448 246 275 667 494 295 388 112 147 117 656 652 555 299 250   2 450 392 135 623 288 451
 377  34 349 414 373 390 669 398 309 372 374 396 637  25 651 329 308 518 365  65 204  71 332 351  82 408
 319 394 366 140 381 331 360 389 326 352 402 313  38 348 426 393 384 369 356 386 342 371 355 318 364 278
 428  96 650 242 289 670 170 236 517 550  79 119  62 380 206 105 158 490 566 306 162 188 353 659 604 516
 167 425 500 190  48 410 226  16 605  19 314  52 255 283 181   6 120  89 433 615 113 447 245 132  46 462
 263 336  32 515 569 248 455 422 138 575 189 338 533 343   5 279 547 124 315  53 495 625 317 528  49 282
 596 585 674 312 492 213 230 233 269 646 193 253  55 561  72 232 407 129 165 217 197 502 549 459 151 409
 118 633  98 376 463 161 553 525 214 501 654 116  86 611 107 570 474 227 266 583 391 143  88 571 261  11
 341 552 137 635 324 619 440 148 641  15 134 444 442 149 523 588 272  45 152 483  43  84  70 419 493 608
 130 249  76 673 224  78  28 614  40 509 556 449 513 554 243 531 631 108 196 110 648 146  93 335 445 622
 270 292 514 260 564 133 100 296 382 267 240 128 439 542 671 434 156 475 273 418  64 274 601 454 307 247
 562 480 286 153 676 557 526 642 207  60  41 488 101  27 359  58 115 527 453 546 163 106 559  51 576 482
 653 506 291  83 416 485 630 534 172 310 446 229 636  94 287 606 127 484 187  30  87 477 271  31 563 166
 465 437 177 529 638 452  85 540 567 131 458 141 539 220 397 548  18 144 457 363 487 607 536 239 150 157
 357 379 593 412  44 180 617 208 590 251 185 640 290 103 301 178 210 658 244 350 629  91 609 473  73 136
 199 574 328 460   7 620  24 406 311 395   3 573 316 211 281 102 510 644 660  33 469 368 276   9 647 375

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.0053e+07us (= 10053ms, 10.053s)
Satisfaction error: 5
Number of search iterations: 3609
Number of local moves: 3003 (including on plateau: 2954)
Number of local minimum: 25 (including on plateau: 382)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 435 10 612 237 182 420 499 330 77 467 430 293 370 582 504 202 401 277 168 613 47 284 580 519 662 603 => the sum is 9804 rather than 8801
Problem in row 9: 541 672 175 20 265 285 586 259 468 303 624 264 145 429 628 125 602 456 56 257 668 634 320 212 471 280 => the sum is 9745 rather than 8801
Problem in row 15: 167 425 500 190 48 410 226 16 605 19 314 52 255 283 181 6 120 89 433 615 113 447 245 132 46 462 => the sum is 6399 rather than 8801
Problem in row 16: 263 336 32 515 569 248 455 422 138 575 189 338 533 343 5 279 547 124 315 53 495 625 317 528 49 282 => the sum is 8575 rather than 8801
Problem in row 24: 465 437 177 529 638 452 85 540 567 131 458 141 539 220 397 548 18 144 457 363 487 607 536 239 150 157 => the sum is 9482 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 612 494 144 414 128  73 640 508 376  67  22 444 394 119 426 418 204 327 546 653 118 391 649 169  30 435
 465 652 502 516 478 326 663  42  11  90 374 427 527 639 504 517 506 130   8 251 624 607 408 314 341 477
 267 145 249 302 221 412 571  40 577 202 587 666 614  53 253 529 344 365 450 125 102 451 257 177 562 280
 407 186 315 129 457 228 642 440 498 338  44 108  78 390 369 579  26 522 411 168 660 334 282 654 140 396
   7 441 646  47 550 238 299 582 328 483 292 198 233 479 277 187 668 490 115 433 142  20 438 620 410 548
 261  68 432 657 104 531 347 380 111 117  15 545 138 429 448 613 199 557 615 563 673 176 570  59 188   5
 105 252 126 535 505 552 515 670 209 573 553 151 150  28 575 658 430  45 162 346 497 159  71 503 213 218
 312 203 297 626 672  91 324 389 164 116 393 171 487  23  41 200 543 648 217  96 196 153 600 507 656 676
 539  60 512  25 240 537  74 133 195 381 460 561 423 193 357  34 388 270 619 549 356 606 310 300 604  75
 644 532 459 375 155 301 453 618 384 197 137 208 655 383 286 230 226 424 231 258 488 107  38 633 152 227
 473 541 135 463 303 419 223  93 500 542 385 112 617 609 452 405 386  19  57 232  13 437  89 578 439 279
 593  81 234 547 635  48 454 566 141 538 332 476   6 237  76  61 643 189 367 397 462 266 136 421 574 321
 558 586  39 399 250 392  69 518 540 120 621 349 271 284 146 121  80 501 345 492 371 215 467 404 482 181
 378 331 354 283 335 337  66 350 366 348 306 285 565 340 307 364 263 362 298 316 330 559  65 320 308 665
 470 370 148 329 296 109 304 243 455 293 638 592 287 406 154 139 589 323 264 489 289 530 313 273 480  18
 182 616 472  64  36 591 436 417 262 190 555 281  32 569 194 288 173 622 536 605 551 363 590 442 359 290
 291 318 325 124 361   9  14  62 343  35 525   2 317 170 629 259 398 601 662  43 409  63 556   1 268 167
 212  56  85 184 402 567 278 294  33 636 183 387 509 524 602 631 425 445 630   3 611 205 254  27 265 353
 147 206 178 211 175 132 513 493 158 174 481 434 214 659 471 192  84 428 244 511 247 637 534 355 449 474
  12 351 368 269 255 377 595 207 179 554 580 520 222 241 667 395  50 216 610 400 576 322 475 163  54 143
 360 674  21 180 625 229 100 339  49 466 113 499 645 443 528 379 514  88 415 372 127 106 584 560  52 333
  70 403 568 671 274 373  77 239 599 634 245  58 420 110  46  10 491  99  83 627 236  17 260 486 224 447
 131 446 675 523 597 651 464 220 669 585 161  86 519  98 103 469  95 588  72  79 422 510  16 246 166 210
 134 598 603 225 122 581 156 275 647 664  24 623  37 336  97 458 608  29 191 401   4 382 319 276 485 526
 650  31 342 468  92 201 172 632 594 149 114 123 256 583 628 564 311  82 358 305  55 544 248 219 484 596
 521 160 572 235 533 496 352  51 413 309 661 495 185 456 165 101 157 431 295  87 242 641 272  94 416 461

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.00525e+07us (= 10052.5ms, 10.0525s)
Satisfaction error: 5
Number of search iterations: 3170
Number of local moves: 2643 (including on plateau: 2594)
Number of local minimum: 32 (including on plateau: 322)
Number of resets: 0
Number of restarts: 0

Problem in row 2: 465 652 502 516 478 326 663 42 11 90 374 427 527 639 504 517 506 130 8 251 624 607 408 314 341 477 => the sum is 10399 rather than 8801
Problem in row 5: 7 441 646 47 550 238 299 582 328 483 292 198 233 479 277 187 668 490 115 433 142 20 438 620 410 548 => the sum is 9171 rather than 8801
Problem in row 16: 182 616 472 64 36 591 436 417 262 190 555 281 32 569 194 288 173 622 536 605 551 363 590 442 359 290 => the sum is 9716 rather than 8801
Problem in row 17: 291 318 325 124 361 9 14 62 343 35 525 2 317 170 629 259 398 601 662 43 409 63 556 1 268 167 => the sum is 6952 rather than 8801
Problem in row 22: 70 403 568 671 274 373 77 239 599 634 245 58 420 110 46 10 491 99 83 627 236 17 260 486 224 447 => the sum is 7767 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 676 214 373 245 295 601 669 325 140 515 372 437 292 155 144  67  94 293 253 615 457 387 364  12 163 643
  30 650 642 208 488 250 248 228 574  29 634 189   7 482 550 638 255  16  40 213 658  44 498  26 645 559
 475 376 628 371 446 403 191 198 435 310 330  69 162 572 499 348  87 256 146 302 552 184 536 604 300  21
 608 167 133 588 511  73 114 450 406   2 666 141  32 664 305 605  25 569  96 546 454 382 600 466 103  95
 508 469 324 528 548  86 168 337 288 296 153  63 523  88 570 115 656 625 249 205  62 529 260 395 237 519
 390 509 158 342 264 506 627 381  27 639 399 360 531 322 477 201 407 345 582 427 514 560 366 329 277 622
 179 104 674 160 289 197 495 662 212 206 229 520 623 537  64 430  55  92 124 486 564 505   6 651 452 285
 307 182  10 613 321 336 540 533 341 269  76 595 620 297  46 465 110 532 485  35 170 629  45 535 460 334
 276 374 365 603 483  51 447 433 423 573   9 125  89 554 635   4 448 444 445  98  36 267 649 440  91 439
 242 129 581  54 672 117  93 271 670 455 502 233 315 275 480 202 432 598 426 314 467 319  48 150 562 194
 425 431 461 561  99 474 280  58 132   1 405  22 441  59 428 375 557 563 177 513 567  23 316 434 659 340
  13 354 393  17 388 541  20 180 424 370 385 414 389 352 356 357 400 173 397 309 673 367 422 361 377 369
 254 261 346 335 616 647 312 391  83 451 188 544 332 362 142 579 646 363 231 252 123 122 119 244 286 621
 619 274 470 270 116 675 652 247 487 313 149 350 351 130 200 484 398 323 418  85 358 339 154 278 379 282
 172 121 578 169 187 386 266 224 343 661 542 383 411 127 392 653 538  42 199 311 112 481 594 109 494 306
 539 591  56 290 204 584 556 218 596 185 262 273 663 409 287 291 227 265 303 472 443 496 257 222  74  38
  60 355 219 412 429 473 238 648 522 246 226 633 478  33 221 159 283 301 636 543  61 143 196 644 234 408
 442 611   8 136 223 566 489 118 259 171 207 668 236 458 575 317 137 216 589 436 210 304 510 299 152 464
 438 419 215 251  41 235 415 241 497 527 186 545 240 626  24 501 490 294 211 587  70  68 585 456 590  49
 217 525 462 410  15 359 164  80 145 165 583 394 193 463 612 258 606 555 353 138 491 526 156 580  31 320
 521 618 157 328 654 148 232 378 139 102 517 176   5  34 660 607 586 471 493 107 183 131 147 308 500 599
 175  72 420 624 111  81 384 492 396 284 449 190 476 571 368 151 281 135 225 655 602  47 641 161 263 547
 614 671 524 105 551 268 195 631  18 630  75 479 549 134 100 327 344  77 553 203  50 401  78 230 577 417
  53 220  14 416 453  57  11 421 640 326 610  82 174 209 120  52 192 665  90 239 558 298 459 108 333 106
 565  39 272 637  66 349 402 530 101 507 576 512  37 609 380  97 468  84 667 597  19 657 178 243  28 181
   3  65 318 128 331 338 593 126 503 568  71 404 632 279 166 518  79 504 413 113 347 592 617 516 534  43

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00016e+07us (= 10001.6ms, 10.0016s)
Wall-clock time (full program): 1.00539e+07us (= 10053.9ms, 10.0539s)
Satisfaction error: 4
Number of search iterations: 3831
Number of local moves: 3182 (including on plateau: 3133)
Number of local minimum: 30 (including on plateau: 367)
Number of resets: 0
Number of restarts: 0

Problem in row 6: 390 509 158 342 264 506 627 381 27 639 399 360 531 322 477 201 407 345 582 427 514 560 366 329 277 622 => the sum is 10562 rather than 8801
Problem in row 8: 307 182 10 613 321 336 540 533 341 269 76 595 620 297 46 465 110 532 485 35 170 629 45 535 460 334 => the sum is 8886 rather than 8801
Problem in row 13: 254 261 346 335 616 647 312 391 83 451 188 544 332 362 142 579 646 363 231 252 123 122 119 244 286 621 => the sum is 8850 rather than 8801
Problem in row 24: 53 220 14 416 453 57 11 421 640 326 610 82 174 209 120 52 192 665 90 239 558 298 459 108 333 106 => the sum is 6906 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 171 611 534  40 493 483 223 234 385 638 153 123 206 654  42  23 568 561 309 115 131 412 641 284 473  80
  26 444 176   9 526  31 196 117 571 108 670 501 583  66 275 609 236 538 416 472 168 466 112 375 462 648
 475 572 225 364 102 178 436 669  39 604 530   2 423 145  95 458 120 586  61 415 460 647 179 249 491 276
 360 477 474 581  17 160 251  85 216 485 380  38 139 479 481 250 219 425 365  51  75 612 639 413 628 343
 542 294 673  65 580 671 122 144 644 243 167 553  11  74 584 445 269 101 592 162  70 111 349 651 267 417
 173 591 195 616 469 536 354  99 265 393  57 467  81 367 337 403 661 221 439 211 346 341  16 209 567 387
 573 518 198 645 498 545 519  15 599 143 152 418 118 231  35   4 374 286 554 524 653 218  63 625  48 245
 292 438 495 328 372 388 280 480   8 260 264 273 437 511 133 339 401 197 494  49 116 502 590 557 113 484
 366 552  13 363 182 461 449 535 457 665 463 164 419 440 373 170 213 157 390 533 569 384 435 421 655 110
 468 402 253 396 614 200 262 499 510 442 575 232 321 548 405 453 448 399 134 135 293  29  82 496  47 158
 610 675 344 149 141 564 585 394 290  37 395 322 370 598 613 180  30  45 148 299 636 517 427 239  67 126
 446 229 214 528 646 151 426 298 391 230 541 576 512 242 353 268  79  69 266 183 582  58 408 505 166 434
 649 227 381 208 489 356 652 404 106 359 642 161 319 138 100  73 355 371 295 601 301 189 304 342 428 351
 331 335 624 340 303 318 368 332 382 263 323 316 313 310 289 527 282 315 326 338 291 345 297 348 279 306
 559  36 105 455 632 283 459 650 127  28 201 603 302  60 320 215 358 248 314 281 361 312 588 497 398 409
  96 163 129 471 317 597 241 617 433  41  64 523 192 389 549 238 454 631 204 246 674 244 659 212  93 324
 272  25 311 555  50  77 124 184 668 546 357 411 259 626 288 543 191 451 606 104 305 594 247 150 199 658
 508 190 406 194  18 386 562 296 181 369 240 578 643 287 660 507 482 205  43 185 119 574 217 261 531 159
 146  59 378  83 593  33 137 478 330 488  97 362 596 630 540 522   6   7 608 258 504 492 450   5 547 452
 186 432  62 233 202 529 147 174 506 210  22 664 662 544 487  10 537  98 656 676 193 103 277 551 226 414
 376 172 620 570   3 165 520  89 556 558 420 407 220 410 235 513 128 175  55 640 169 503 579 392 325   1
 156 132 633 672 140 607  19 600 155  87 228 224 476 142 516 666 566 560  52 486 207  86 130 107 615 539
  84  88 605 424 429 422  78 336 270 177 550  92 464 154 203 125 621 589 285 430  46 525  91 595 618 500
 623 300 447 222 254 329 663  76 627 350 470 634  44 307 252 637  54 521 333 657 465  94  20  68  27 327
 257 383  32 256 334  53 619 431  14 587 532  21 114  72 121 352 514 443 347 563 400 255 379 237  90 629
  56 456 274  34 397 278 109 565  71 490 308 136 577 377 515 271 635 602 509 187 667 188 622  12 441  24

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00012e+07us (= 10001.2ms, 10.0012s)
Wall-clock time (full program): 1.0053e+07us (= 10053ms, 10.053s)
Satisfaction error: 5
Number of search iterations: 4155
Number of local moves: 3391 (including on plateau: 3344)
Number of local minimum: 39 (including on plateau: 425)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 171 611 534 40 493 483 223 234 385 638 153 123 206 654 42 23 568 561 309 115 131 412 641 284 473 80 => the sum is 8587 rather than 8801
Problem in row 4: 360 477 474 581 17 160 251 85 216 485 380 38 139 479 481 250 219 425 365 51 75 612 639 413 628 343 => the sum is 8643 rather than 8801
Problem in row 9: 366 552 13 363 182 461 449 535 457 665 463 164 419 440 373 170 213 157 390 533 569 384 435 421 655 110 => the sum is 9939 rather than 8801
Problem in row 25: 257 383 32 256 334 53 619 431 14 587 532 21 114 72 121 352 514 443 347 563 400 255 379 237 90 629 => the sum is 8035 rather than 8801
Problem in diagonal 1: 80 462 249 639 111 346 524 494 157 448 180 353 138 313 603 64 546 181 478 147 165 140 424 447 383 56 => the sum is 8128 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 568 382 541 103 357 386 308 144 434 632 605 141  64 358 576  26  84 498  42 133 361 560 397 500 599   2
  72 120  52 108 326 570 432 393 213 627 672 529 207 674 559 556 160 332 551 215 113 140 537 105 281 257
  14 469 610 248 643 621 187  16 553 436   9 580 242  68 623 531 228 149 552 375 150 261  82 219 596 339
 663 200 118 614 431  74 534 416 511 425 243 164 477 364 547  20 296 581 157 192 180  50 635  43 372 494
 106  94 395 174 555   3 323  33  73 291 484 572 577 186 564 132 464 131 231  41 506 660 502 567 490 647
 379 628  88  22 641 561 278 515 536 260 195 368 130 517  91   7 516 602 244 109 284 193 298 565 247 527
   1 495 447 481 151 429 262 189 579 562  21 266 316  95 479 373 569  78 424 585 615 138 116 492 626  12
 504 179 651 136 128 101 320 183 440 159 587 185 508 134  69 659 181 468 542 475 470 289 466 637 509 170
 486  54 318 194 671 359  38 549  60 176 333 256 459 640  34 664 600 306  98 656 532 237 325 223 143 390
 595 249 100 524 454 352 317 122 240 252  40   4 630 271 274 645 283 319 462 483 334 412 625 525  35 254
  51 391 617 426 409 403 402  85  76 546 433 573 127  61 175 311 355 456 290 530 452 350 115 668 155 344
 613 353 331 428 206 201 399 227 301 111 314 216 321 282 202 383 293 661 330 315 410 348 519 463 205 369
 415 221 292 212 309 280 354 378 272 233 277 377 488 360 351 204 422 430 406 438 340 217 337 341 544 303
 471 363 335 245 407 246 285 222 327 220 497 435 313 302 445 356 265 342 370 229 234 449 371 268 417 387
 419 121  32 631  81 153 523 366 598  75 622 343 139 503 499 389 574 168 273 566 624  58 208  70 117 649
 404 604  27 225 616 338 636 629 526  97 255 437 646 264 198  25 365  55 166  48 554 310 135 658  24 590
  39 392 535 460 147 443 384 654  89 474 675   5 238 294 473 312 123 653 650  56 114  11 476 304 505 295
 398  86 408  44 125  92 521 126 152 482 307 592 465  10 184 571 305 297 427  19 423 439 401 322 444 563
 418 241  83 396 644 612 670 493 288 385 450  30 347 501 171 230 279  47 112 518 480 611 286 158 232 119
 253 619 603 197 145  80 102 287 414 634  31 607 421 275   8 380 522 608 381 405  66 550 258 448 676  49
  29 609 588 165  53 665  67 328 633 209 442 329 196 367 259 583 669 485 203 528 154 218 182  36 578 226
 346 276 642 652 107 110  46 146 648 235 362 487  71 586 451 169  18 177 458 514 539 601 142   6 455 557
 270 597 250 538 461 662 394 589  87  62 638 148 162 512 467 190 591  23 300 167  93  17 239 606  65 673
 457 446 299 513 507 491  13 543 411 540  77  28 478 161  99  45 453 558 420 594  63 618 510 211 251  15
 639 199 172 472 137 345 349 548 104  96 173 584 655 520 336 666  57 214 324 400 269 489 263 178  79 533
 191 413 267 593  90 224 657 620 236 582  59 545 124 496 667 374 129 163 388 210 441 575 376 188 156  37

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00527e+07us (= 10052.7ms, 10.0527s)
Satisfaction error: 5
Number of search iterations: 3018
Number of local moves: 2548 (including on plateau: 2501)
Number of local minimum: 17 (including on plateau: 322)
Number of resets: 0
Number of restarts: 0

Problem in row 8: 504 179 651 136 128 101 320 183 440 159 587 185 508 134 69 659 181 468 542 475 470 289 466 637 509 170 => the sum is 9150 rather than 8801
Problem in row 16: 404 604 27 225 616 338 636 629 526 97 255 437 646 264 198 25 365 55 166 48 554 310 135 658 24 590 => the sum is 8832 rather than 8801
Problem in row 18: 398 86 408 44 125 92 521 126 152 482 307 592 465 10 184 571 305 297 427 19 423 439 401 322 444 563 => the sum is 8203 rather than 8801
Problem in row 20: 253 619 603 197 145 80 102 287 414 634 31 607 421 275 8 380 522 608 381 405 66 550 258 448 676 49 => the sum is 9019 rather than 8801
Problem in diagonal 0: 568 120 610 614 555 561 262 183 60 252 433 216 488 302 499 25 123 297 112 405 154 601 239 211 79 37 => the sum is 8006 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 202 654 199 583 281 203 532 370 552 225  94 455 565  67  18 389 211 643 130 309 576 501 229 125 238  65
   6 100 367 633 599 206 371   3   9 140 391 525 659 458 640 173  50 172 628 358 620  80 255 675 642  41
 115  76  31 610 246  35 400 317 644  32 190 292 148 601 651 312 638 535 432 240 171 571 542 666   7 299
 243 112 110 519  83 327  77 592 249 244 473 387 478 356 655 510  93 617 174 522  17 378 649 546 208 182
 517 668 336 310 663 479 236 120 403  81 198 326  68 287  64  88 279 527 201 137 343 621  82 218 440 242
  92 381  15  44 470 390 234 593  98 466 340 603 541 278 315 215 534   1 169 481 374 265 450 425 521 506
 537 158 297 508 437 605 502 260 439 393  13 543 443 319 365 645 258 141 133 471 293 251 126 572  47  45
 149 511 624 464 467 189 530  52 564 350 452 147 230  60 280 670 364 384 375 435  55 472  42 540 233 162
 438 436 574 444 334  59  43 423 275 195 648 482 160 267 673 272 566 441 123 156  95 286 139 551 282 569
 448 285 153  19 409 271  58 581 329 579 412 322 480 124 408 164 366 397 634 300 335 476 228 209 468 346
 221 580 134 598 237 570  28 332 426 175 457  25 166 294 337 671 339 338 250 410 600 273 380   8 447 505
 618 150 604 146 635  66 369  61 404 485 145 568 647 341 361 132 531 119  30 495 507  49 167 254 295 622
 415 430 661 241 538 348 398 388 252 460 296 323 159 316 298 372 308 204 161 395 264 245 216 536 314 263
 377 504 657 558 513 490 625  56 231 368  87 554 321 379 269 109 187 333 494 259 224 330 360 185  29 302
 630 627 492 539 277 121 667  21  86 318  51 420  71 529 170 442 453  54 653 567 227 235 414  57 578 102
 555 152 128 213 424 191 612 650 179 652 359  84 223 646 407 157 493  46  79  34 328 589 594 290 183 533
 344 499 411 305   5 528 637 636 342 222 349 181 465  38 422  69 385 577  90 276 608  22 122 417 392 459
 127 103 629 136  91 588  73 454 357 253  12 556  48 586  27 488 193 434 402 284 676 474 585 129 547 549
 431  11  40 117 178 573 483  37 165  53 523 520 192 662 268 111 563 590 200 311 108 609 386 616 658 396
 419 632 428 135  74 607 194 362 142 418 526 413 232 288 363 623 101 239 613  26 429 475 500 217 639 615
 205  33 562  14 664 151 373 261 595 405 331 107 509  16 214 382 557 196 451 619 220 226 461 463 606 180
 184 401 672 303 353 591 163 289 168 516 304 355 626 433  24 582  85 274 669 325 561 559 406 352 207 462
 550 247 212 113 383 376 118 496 587 427 602 177   2 486 656 487  20 270 665 575 104 197 186  62 512 291
 324 641  89 445 345  96 514 354 503 155 611 144 489 416 518 106 560 544  78 105 351 256 553  10 138 456
 584  97  75 497  72 257 143 545 614 674 631 116 660  63 394 596 320 477 469 114 266  99 446 154  39 399
  70 313 301 307  23 484 421 548 188 515 306 176 219 491   4  36 347 248 498 597 449 262 283 524 131 210

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00013e+07us (= 10001.3ms, 10.0013s)
Wall-clock time (full program): 1.00531e+07us (= 10053.1ms, 10.0531s)
Satisfaction error: 7
Number of search iterations: 4121
Number of local moves: 3431 (including on plateau: 3386)
Number of local minimum: 26 (including on plateau: 429)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 202 654 199 583 281 203 532 370 552 225 94 455 565 67 18 389 211 643 130 309 576 501 229 125 238 65 => the sum is 8416 rather than 8801
Problem in row 5: 517 668 336 310 663 479 236 120 403 81 198 326 68 287 64 88 279 527 201 137 343 621 82 218 440 242 => the sum is 7934 rather than 8801
Problem in row 9: 438 436 574 444 334 59 43 423 275 195 648 482 160 267 673 272 566 441 123 156 95 286 139 551 282 569 => the sum is 8931 rather than 8801
Problem in row 20: 419 632 428 135 74 607 194 362 142 418 526 413 232 288 363 623 101 239 613 26 429 475 500 217 639 615 => the sum is 9710 rather than 8801
Problem in row 22: 184 401 672 303 353 591 163 289 168 516 304 355 626 433 24 582 85 274 669 325 561 559 406 352 207 462 => the sum is 9864 rather than 8801
Problem in row 26: 70 313 301 307 23 484 421 548 188 515 306 176 219 491 4 36 347 248 498 597 449 262 283 524 131 210 => the sum is 7951 rather than 8801
Problem in diagonal 0: 202 100 31 519 663 390 502 52 275 579 457 568 159 379 170 157 385 434 200 26 220 559 186 10 39 210 => the sum is 7472 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 675 644 457 434 277 643 574  28  53 268 221 103 628 624 131 424 157 344 282  17 318 512  65 256  16 650
 364  27 289 415 525  44 267 596 154 178 494  23 135 108 370 272 533 542 406 265 498 414 642 165 627 448
  80 610 603 152 167 199 242 430 224 426 144 222 472 382  56 377 638 302 429 393 238  29 484 524 455 523
 639  32 548 597 188 423 673 169 228 451 636 618 517 213  40 564 125 593  45  35 226 633 587 530 100 132
 583 286  68 560 557  48 365  89 386 134 383 336 300 604 240 666 475 141 109 247 239 441 185 459 345 555
 200 279 496 164 504 529 371 572 387  90 124 527 218  20 616 586  95 411 547 585  82  94 407 543 129 225
  60 580 672 546 128 625 652 630 116 276  34 515 568 133  59  88 367  72 119 497 248 372 481 150 205 608
 202 179 187 189 653 363  66 482 260 379 579 631 158 505 162  43 394   4 469 563 140 436 614 359 192 592
 291 181 273 470 606 101 428 427 252 249  47 143 245 458 573 244  13 576 578 216 374 566  49 376 656 409
 508   1 388  26 674 310 570 271  87 501  93 214 206 664 453  57 404 534 147 474  15 258 419  10 528 549
 176 556  75 186 146 559  69 486 562 495 487  46 385 223 246 400 565 298 438 155 408   5 209 595 571 460
 210 637 536 251 114  24 456 399 537 115 263 380  96 600 440  39 526 220 544 444 654  22 123 655 425  52
 369 381 373 392 321 350 330 354 361 360 341 395 331  98 332 355 327 306 319 284 339 362 351 343 349 378
 156 676 309 329 333 138 337 299 320 658 294 304 303 229 340 347 346 317 323 316 569 324 356 204 322 352
 301 305 296 292 275 261 315 314 513 553 287 308 313 584 307 290 241 288 262 602 416 334 250 269 297 328
 437 121 257  21 421 620  41  77 464 445 280 266  11 106 550 433 397 471 446 617 581 454 233 621 197 234
 264 552  42 368 476 510 180 110 645 182 466 104 325 520 478  86 230 203 634 669 173 183 521 120 541 219
 554  67 193 635 212 551 142 208 236 211  14 159 450  70 531 473  51 338 137 390 516 605 465 500 582 511
 112 342 599  92 499 540 648 170 613 483 207 661 389 270 145 480 130 647 254  62 432  63 539 102 237  85
 255 326 196  84 118 558 443 659 139 105 168 468 126 194 632 629 243 619 660 149 626 172 127 477 506  97
 462 662 358 488  78 509  31 449  19 357 420 489 161 312 545 601 190 184   7 166 151 567 274 492 122 422
 622  58 646 117  91  74 163 668 591 670 651 412 366 253 235 442 609 177 402 641 452 195   2  81  76 107
 640 398 518 113 611 417 413 111 667 461 607 278 418 439  55  38   9  18 281 136 435 463  79 405 590 201
  37 502  30 671 353  61 375 447 491 514 575 577 507 396 657 160 538  83 148   8 232 431 391  50 384 231
 598 335  99 615 401 191 479 285 493  25 467  33 561 311 410 175 535 623 227 348  36 649 665  12  54 174
   6  64 293 594  73 153 171  71   3 215 519 589 612 485 198 532 663 490 588 522 403 217 283 503 295 259

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00523e+07us (= 10052.3ms, 10.0523s)
Satisfaction error: 6
Number of search iterations: 3404
Number of local moves: 2832 (including on plateau: 2785)
Number of local minimum: 23 (including on plateau: 316)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 639 32 548 597 188 423 673 169 228 451 636 618 517 213 40 564 125 593 45 35 226 633 587 530 100 132 => the sum is 9542 rather than 8801
Problem in row 10: 508 1 388 26 674 310 570 271 87 501 93 214 206 664 453 57 404 534 147 474 15 258 419 10 528 549 => the sum is 8361 rather than 8801
Problem in row 12: 210 637 536 251 114 24 456 399 537 115 263 380 96 600 440 39 526 220 544 444 654 22 123 655 425 52 => the sum is 8762 rather than 8801
Problem in row 20: 255 326 196 84 118 558 443 659 139 105 168 468 126 194 632 629 243 619 660 149 626 172 127 477 506 97 => the sum is 8776 rather than 8801
Problem in row 21: 462 662 358 488 78 509 31 449 19 357 420 489 161 312 545 601 190 184 7 166 151 567 274 492 122 422 => the sum is 8516 rather than 8801
Problem in row 24: 37 502 30 671 353 61 375 447 491 514 575 577 507 396 657 160 538 83 148 8 232 431 391 50 384 231 => the sum is 8849 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 510 419  64 102 550 162  61 564 607 454 115 166 601 626 496  42 139 417 253  32 408 106 615 534 633 125
 517 578 535  88 213 525  25 471 378 558 546 352 551 495  55 188 194 190 519 147 105 392 459 429 199  92
  15 605 634 572  38 469 588 616  71  13  12 468 275 170 159 581  79 617 184 254 599 318 367 625 443  29
 313  10 176 420 328 371 460  86 301 606 145 457   4  66 330 499 395 675  21 555 165 108 543 433 111  80
  23 168 600 576 252 110 280 645 140 114 426 512 152 242 639 664 592 295 375  40  73 620 643 160  37 423
  52 522 483 413 385  26 489 404 303 149 308 453 109 618 121  94 331 298 637 397 405 646   6 101 526 621
 575 676 261 207 137 571 472 513 172 103  30 562 264 245 602 506 432 141 580 117 216 574 257 666 258 530
 144 118 138 487 451 672 537  43 474 566 529 192 191 446 500 356  75 437 388 127 596  46 409 203 334 342
 317 344 547 521 431  49 281 146 314 402  89 570 560 230 540 153 235 568 293 226  20 214 430 653 288 380
  60 249 185 655 514 628 200  56 197 113 277 364 131 290 587 638 608 329 100 629 422 418 260 354 503  34
 548 196 142 236 396  63 670 434 644 663 671  85  22  41 416 479 455 406 542 427  69 278   2 359 549   8
 365 394  11 379 390 585 407 122  31 613 339  44 358 579 229 421 636 325 661 269 381 384  53  48 291 486
 320 333 335 373 340 368 363 387 224 289 484 398 449 237 369 221 350   9 353 341 376 347 475 345 332 383
 440 316 557  24 346 326 523 552 348 389 594  91 659 377 424 195 362  35 458 189  59 673 360  33 304 167
 372 563 143 284 182 622 338 604 361 520 169 466 120   3 129  95   1 208 598 461 462 481 504  77 448 590
 251 302 502 175 262 283 565 220 411 648 243 665 241 276 296 315 501 492   5 508 217 212 612  54 327 218
 202 116 255 573 485 586 627 667 603 232 528 324 533 263  17 493 267 124 240 544 538 161 157  93 382  47
 619 609 584 244 201 223 126  97 247 215 351 119 595 123  98 239 179 148 452 473 656 509  45 436 464 652
 470 173 425 343 660 233 225 286  27 445 183 647 630  87 206 154  50 132 337 403 410 505 211 559 553 447
 171 435 650  99 322 494  83 279 669 311 158 246 136 467 307 393 662 310 319 349 227 178 156 545 204 631
 583  96 271 133 478 266  74 355  28 321 238 193 480 527 439 674 491 450 186  39 624 577 641 309  78 272
 490 477  16 323 163 177 187 231 554 164 593 614 234 649 668  67 210 657  72 174 515  84 128 248 524 582
 623 516 312 155 259  36 444 456 300  62 640 518 366 305 561 135  82 228  68 611 180 294 632 591 222 205
 465 130 415 273  51 412  76  14 651 134 250  90 274 442 209 610 539 265 306 654 511 507 399 374 414 336
 299 386  19 488 597  81 635 256 642 219 482   7 428 556 292  58 536 569 357 567 282  18 150 181 107 589
  57  70 541 658 370 463  65 297 104 498 401 198 438 441 112 531 400 476 497 268 285 151 287 391 270 532

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00004e+07us (= 10000.4ms, 10.0004s)
Wall-clock time (full program): 1.00518e+07us (= 10051.8ms, 10.0518s)
Satisfaction error: 6
Number of search iterations: 3038
Number of local moves: 2549 (including on plateau: 2502)
Number of local minimum: 20 (including on plateau: 266)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 313 10 176 420 328 371 460 86 301 606 145 457 4 66 330 499 395 675 21 555 165 108 543 433 111 80 => the sum is 7658 rather than 8801
Problem in row 6: 52 522 483 413 385 26 489 404 303 149 308 453 109 618 121 94 331 298 637 397 405 646 6 101 526 621 => the sum is 8897 rather than 8801
Problem in row 7: 575 676 261 207 137 571 472 513 172 103 30 562 264 245 602 506 432 141 580 117 216 574 257 666 258 530 => the sum is 9667 rather than 8801
Problem in row 17: 202 116 255 573 485 586 627 667 603 232 528 324 533 263 17 493 267 124 240 544 538 161 157 93 382 47 => the sum is 9057 rather than 8801
Problem in row 18: 619 609 584 244 201 223 126 97 247 215 351 119 595 123 98 239 179 148 452 473 656 509 45 436 464 652 => the sum is 8704 rather than 8801
Problem in row 21: 583 96 271 133 478 266 74 355 28 321 238 193 480 527 439 674 491 450 186 39 624 577 641 309 78 272 => the sum is 8823 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
  60 360 526  86 171 223 250 351 441 636 650 139 148 638 607 552 366 381  91 668 631 222 246  57 257  44
 557 541 282 364 588 580  98 571  49  70 461 430 606  51  74 453 160 151  99 446 144 398 240 667 194 527
 393 288 553 170   9 504 480 620 192 517 536 168 108  39 307 122 260 601 515 645 150 408 419 106 466 225
 444 111  29 674 511 259 538 164 125 412 635  72 423 614 605 672 653 117 342 389 379 489 560   7 119 100
 566   4 593  79  36 622  56  52 314 661 458 671 599 353  65 306 182 157 460 403 216 110 625 405 193 615
 388 669  28 579 673  32 391 495  33 129  13 508  63 474  82 525 329 539 376  71  47 320 582 368 532 555
 637  38 559 468 159  43 137 321 493 218  40 490 418 629 554 499 153 247  15 281 602 103 594 660 233 210
  85 540 183 166 644 663  88 174 109 180 255 659 382 105 230 627 185 234 374 488 289 456 416 561 121 641
 202 476 331  21 298 494 429 126 596 135  12 569 574 176 425  89 481 395 503 123 422 312  93 604 299 616
 386 142  96 116 640 315 670 643 301 196 547 175 138 204 173 529 187 584 200 427 253 654 454 245 275 251
  34 181 440 414 162 662 236 267  23   3 339 482  58 231  73 285 570 261 450 639 112 656 442 664 589 528
 297 279 367 365 241 274 675 439 273 264 404 390 401 371 305 178 543  66 377 208 220 406 252 467 399 340
 322 270 239 375 338 330 283 325 433 437 256 394 272 242 491 392 370 341 345 323 290 462 286 319 266 400
 347 346 472 326 409 356 118 497 287 292 311 302 500 238 343 276 363 362 513 280 268 358 477  95 387 278
 101 523 336 619 355 156 595 411 587 564  26 651 243 509 447 134 533 421 372 258 177  30 136 128 337 152
 348 316 424 452 158 254 344  64 328 505 465 248 184  41 333 449 516 385 413 369 295 410 296 361 463 380
 544 624 207 384 271  54 443  55  62 349 212  84  37 658 657  46 324 534 492  75 473 428 235 483 655 415
 143  35 642 104 420 576 197 102 434  67 537 352 277 592 213 318 600 469 556 132 633 249 221 484  31 417
 578 502 549 487 397  53 188 612 567 470   2 161 498  92 327 451 127 551 407  42 432 514  68 198 501  27
 163 308  61 186 172 646 575 154 522 145 479 226  11 577 583  48 609  69 332 165 565 666 455 309 269 506
  18 114 563  10  87 519 630 293 623 618 590 608 634 652 445 147  90 232   6 350 562 133 310  25 518  24
 471 548 303 383 572 431 199 265 610 304 621 141  94  76 237 438 435 485 215 676 373  59  19 359 263 224
 211 585 229 478 294 396 459 535 586 124 120 426 520 486 510 227  20 581  16 378 626  17 603  83 214  77
 464  22 507 665 357 205 107 155 354 475 130 149 649 550 335 113 617   1 558 219 169 262 524 291 402 521
 530 448 167 613 648  14 436 542 146 573 496 209 317   8 300 591  78   5 228 201 189 598 203 244 190 131
 512 531 115 217 191 140 179 568 313 457 206  97 647 195  80 334  50 632 546 545 284  81  45 611 628 597

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00012e+07us (= 10001.2ms, 10.0012s)
Wall-clock time (full program): 1.00532e+07us (= 10053.2ms, 10.0532s)
Satisfaction error: 4
Number of search iterations: 3774
Number of local moves: 3125 (including on plateau: 3077)
Number of local minimum: 32 (including on plateau: 349)
Number of resets: 0
Number of restarts: 0

Problem in row 4: 444 111 29 674 511 259 538 164 125 412 635 72 423 614 605 672 653 117 342 389 379 489 560 7 119 100 => the sum is 9443 rather than 8801
Problem in row 8: 85 540 183 166 644 663 88 174 109 180 255 659 382 105 230 627 185 234 374 488 289 456 416 561 121 641 => the sum is 8855 rather than 8801
Problem in row 25: 530 448 167 613 648 14 436 542 146 573 496 209 317 8 300 591 78 5 228 201 189 598 203 244 190 131 => the sum is 8105 rather than 8801
Problem in diagonal 1: 44 194 106 560 110 47 281 374 395 187 285 305 242 500 651 465 349 434 612 575 519 572 478 507 448 512 => the sum is 9752 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 346 558  62 486 628 417 670  28 416 667  89   3 385  12 575 494 204 130 639 537 288 161 612 139  99 156
 112 655 553 197   6 453 528 488 149 279  43 664   7 171 475 650 669 454 278  35 499  55 517 579 175 110
  29 122 520 132  21 189 246 563  80 507 523 473 516 240 580 378 559  92 372 562 649 337 115 597 260 311
 467  19 621 355 557 140 493 137 602  11 236 450 104 615 220 573 626  20 106 142 167 548 578  33 570 411
 587 307  70 576 394 152 128 652 107 127  44 383 256 547 168 496 431 103 390 630 154 551 441 145 552 410
 118 176  27 624 119 251 633 243 369  75 666 544 527 283  37 567  60 125 519  46 522 591 213 379 658 429
 371 430 439 164 511 135 491 141 665 589 131 502   2 397 228 178 555 540 510 521 273 637 166 489 595 610
 536 209 234 550 124 100 423 500 126 648 196 179 460 484 413 138 117 447  15 662 524 232 362 620 435  67
 464 462 241 483 437 277 451 446 479 401 382  24 108 458 457 466  56 364 144 474 518  31 133 421 409 215
 113 463 377 271  68  17 445 529 438 549 434 638  84 425 400 300 449 414 257 169 461  42 433 259 554 212
 353  93 162 611  76 565 207 442 208 412 254 389 448  87  73 661 509 343 426 159 420 392 233 407 399 472
 403 402 598   4 465 607 157 643 219 599 490 342 177 170 387   5 375 221 182 376 623 381  45 386 361 183
 646 368 363 356 366 398 370 373 404 352 365 571 289 360 341 333 350 329 102 281 348  85 299 374 326  52
 388 323 317 358 330 315 306 301 334 351 302 320 616 287 338 345 344 312 347 359 340 339 308 322 304 295
 327 303 314 284 298 316 305 319 318 270 324 309 313 335 258 294 262 428 672 274 325 605 250 275 310 513
 635 242 636  48 574 255  26  63 566 498 263  58 151  82 492 296  64  59  16 583 593  91  78  57  53 471
 545 676 217 673 501 634 657 248 186 143 534 181 584  38 216 515 290 153 470 349 391 436 395 367  18  34
 187 531 660 214 116 469 226 440 625 293 120 535 261 272 659 247  69 415 614 225 200 526  71 194 227 405
 581 487 456  96 497 195 218 280 582 201 644 418 444 506  32 231 244 406 211 533 538 656 165  10  65 105
 184 606 539 651 482  14  88 191 282 560 619 223 198 568  30 238 328 512 354 150 585 266 205 504 160 264
 297 525 203 185 193 569  72 237 252  50 543 267 485  95 432 134 210 561 452 476 123 478 640 645 136 541
 675 291  13 459 239 230 380 174  41 641 608  90 647 663 631  23 604 653 455 603  22  66 627 564 609 495
 172 114 594 129 674 642  74 668 249 253  77  54 586 600  83 393 422 629 357 235 111 202 265 180 654 384
  98 206 109 121  39 671 577  49 542 192 596 419 229 480 408 163 245 632 332  51   1 532 546 477 468 618
 158  86 321 331 514 505 590 222  81  97  94 148 588 427 276  61 146 173  25 268  47 292 503 190   8 508
   9 147 155 443 572 285  40 424 481  36 224 617 336 199 592 622 613 286 556 101  79 269 601 188 396 530

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00012e+07us (= 10001.2ms, 10.0012s)
Wall-clock time (full program): 1.00536e+07us (= 10053.6ms, 10.0536s)
Satisfaction error: 6
Number of search iterations: 3239
Number of local moves: 2691 (including on plateau: 2643)
Number of local minimum: 21 (including on plateau: 334)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 29 122 520 132 21 189 246 563 80 507 523 473 516 240 580 378 559 92 372 562 649 337 115 597 260 311 => the sum is 8973 rather than 8801
Problem in row 7: 371 430 439 164 511 135 491 141 665 589 131 502 2 397 228 178 555 540 510 521 273 637 166 489 595 610 => the sum is 10270 rather than 8801
Problem in row 16: 635 242 636 48 574 255 26 63 566 498 263 58 151 82 492 296 64 59 16 583 593 91 78 57 53 471 => the sum is 6950 rather than 8801
Problem in row 17: 545 676 217 673 501 634 657 248 186 143 534 181 584 38 216 515 290 153 470 349 391 436 395 367 18 34 => the sum is 9451 rather than 8801
Problem in row 22: 675 291 13 459 239 230 380 174 41 641 608 90 647 663 631 23 604 653 455 603 22 66 627 564 609 495 => the sum is 10503 rather than 8801
Problem in row 25: 158 86 321 331 514 505 590 222 81 97 94 148 588 427 276 61 146 173 25 268 47 292 503 190 8 508 => the sum is 6659 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 542 223 278 151 647  37 526 422  61  69 399 491 430 156  52 541  80 297 464 670  70 320 462 575 181 657
 436 653 339 125 558 501  12 555 259  71 485 375 508 287 299  24 328 433 201 537  17  68 384 630 123 593
 174 313 144 570 232 530 141  59 165 202 543 322 273 562 242 173 566 503 353 603 155 472 282 619 567  36
 111 152 334 522 350 465 510  33 641 160 204 254 272  41 133 457 528 463 568 209 357  14 572 556 425 470
 296 497 127 613 539 590 301 187 588 671  26 644 629 645 660 587 651 194 370 536 265 544 266 145 365 585
 578 519 618 363  79  83 640 136 460 596  16 662  90 288 520  53 389 189 534 129 532 196 411  73 102 545
  99 600 673 271 191 582  38 329  57 324  64 417 448 665 168 237 533 420 547 580 467 449   9 238  94  27
 138 213 617  21 315 397 249 390 317 561 295 496 203 338  67 614 607 110 476  35 659 538   4 169 386 586
 351 109 518 215 493 291 428 337  39 159 264 569  74 611 105 608 262 440 648 500 116 222  72 188 636 546
 289 438 177 456 432 373 104 192 415 423 441 112 549 515 166 487 431 257  25 401 632 360 409 277 382  58
 604 376 119 394 274 565 195 418  77 601 268 504  96  31 638 412 642 306 180 134 300 655 164   3 605 240
 652 406 437 366 402 227 362 148 364 405 358 400 348 341 434 388 380 396  81 304 447 377  98 143  54 483
 426 333  47 634  60 336 381 391 347 361 344 359 340 383 321 335 352 343 327 349 369 372 385 330 325 251
  75 312 421 225 310 103 574 624 514 331 478  49 332 153 525 502 342 654 260  23 499 167 146 598  32 552
 117 207 511 635  18 161 583 471 107  45  40 286 531 477  82 663 482 554 368 252 258 577 492 219 672 490
 193 147  48 413 279 281 459 661 354  87 256  84 132 609 392  62 122  13 646 513 379 245 250 293 205 615
 280 248 484 443 285 253 309 451 516 197 668 275 199 488 576 149 131 621  56 214 182 643 622  30 269 212
 633 676 241   1 475 114 674 206 175 446 551 255 424 210 606 247 176 186 468  65 218  93 550 303 244 564
 506 230 220 616 548 113 106 224 292 234 480 486 667  95 345 208 120 124 602   6 595 236 589 664 356 139
 675 610 246 435 408 479 229 628 620 658  86 140 573 154 474 150 184 584 495 427 599 445 290 540 498   2
 228 419 307 512 135  63 524 243 523 444 639 115 179 387 302 294  28  20 233 398 557  78 371 283 172 217
 461  97 355 270 481 458 623 305 450 535 162 198 627 263 407 170 439 553  29 318 276 625 126  10 378 185
 128 137 649  89 316 656 298 101 455 453 591 311 231 597 226 367  51 326 108 509 121 404 395 507 452 323
 505 319 216 190 374  11  85 521 393 563 626  91 489  34 410 414 527 157 469 454  44 637 308 579 118 267
 261   7 158  50  19 666   8 100 429 200 346 592 142  55 473  88 211  46 163 559 284  42 494 235 529  66
  43 560 517 221 581 466 442 669 183   5 171 314  15 416 178 571 239 612 130  76 403  22 650 594 631  92

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00022e+07us (= 10002.2ms, 10.0022s)
Wall-clock time (full program): 1.00529e+07us (= 10052.9ms, 10.0529s)
Satisfaction error: 7
Number of search iterations: 3346
Number of local moves: 2794 (including on plateau: 2748)
Number of local minimum: 26 (including on plateau: 340)
Number of resets: 0
Number of restarts: 0

Problem in row 5: 296 497 127 613 539 590 301 187 588 671 26 644 629 645 660 587 651 194 370 536 265 544 266 145 365 585 => the sum is 11521 rather than 8801
Problem in row 7: 99 600 673 271 191 582 38 329 57 324 64 417 448 665 168 237 533 420 547 580 467 449 9 238 94 27 => the sum is 8527 rather than 8801
Problem in row 15: 117 207 511 635 18 161 583 471 107 45 40 286 531 477 82 663 482 554 368 252 258 577 492 219 672 490 => the sum is 9298 rather than 8801
Problem in row 16: 193 147 48 413 279 281 459 661 354 87 256 84 132 609 392 62 122 13 646 513 379 245 250 293 205 615 => the sum is 7738 rather than 8801
Problem in row 20: 675 610 246 435 408 479 229 628 620 658 86 140 573 154 474 150 184 584 495 427 599 445 290 540 498 2 => the sum is 10629 rather than 8801
Problem in row 21: 228 419 307 512 135 63 524 243 523 444 639 115 179 387 302 294 28 20 233 398 557 78 371 283 172 217 => the sum is 7671 rather than 8801
Problem in row 25: 261 7 158 50 19 666 8 100 429 200 346 592 142 55 473 88 211 46 163 559 284 42 494 235 529 66 => the sum is 6223 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 604 363 241 349 207  14 617 113  10 457 120 449 458 475  79 347 193  60 452 599 141 645 659 331 183 635
 346 408 179 574 328  63 576 653 407 480 548  53 537 540 595 511 512 282 312 306 270 199  42  97 143 208
  12 134 130 618 494 294 516  17 217 546  15  87 570 424 198 586 611 344 172 368 402 503  75 213 639 616
 500 105  92  23 453 415 525 491 544 305 254 157 197 575 302 335 355 429 336 630 190 581 204  95  58 650
 250 379 154 591 518 606 104 596 341 138 535 502 133  81  65 176  61 657 187 529 447 479   8 522 299 443
 566  51 318 131  37 655 148 450 220 258 514 550 633 144 209  34 468 585 552 139 527 100 490 313 231 478
  85 577 676  96 264  31 354 248 377 125 373 485 108 523 298  21 508 339 493 178  94 205  56  88 218 168
   7 675 495 229 668 488 118  74 634 624 389 314 510 211 164  47 369 573  28 327 652 283 366 119 454 492
 539 648 303  86 289 579 654 330 206 155 214 151 152 381 251 460 200 370 660 553  46 592 400 431 106  45
 435 411 132  93 416 455 418 465  71  24 439 228 459 434 444 406 441 142 422 432 445 438  91 426 247 387
 348  48 153 671 234 293 637  52  90 664 210 446  73 614 103 536 195 463 403 392  68 249 663 531 462 203
 484 625 436 273   2 109 428 588 221 405 272 627 175 325 410 629  49  50 129 515 469  44 487 242 456 351
 343 448 580 572 227 528 636 672 563 350 393 382 360 372 496 380 212  80  29 425 561  55  76 376 533 173
 319 464 414 497 391 188 353 384 128 568  35 117 461   9 236 337 297 610 649  66 226 545 412 532 262 301
 333 340 413 216 472 290 257 300 562  36 471 322 253  99 244 309 239 541 311 584 321 342 291 569 509 177
 265 295 667 238 397 252 243 276 332 632 271 222 642 124 520 356 316 219 260 267 285 281 266 292 554 329
 170 245 543 628 261 201 419 521 646  98 317 383 371 127 501  89 640 477 189 140 386  84 160 608 362 542
 481 323 674 395 547 565 185 268 555 420 666 145 670 259 375 499   3 280 517 296 310 401 196 191 315 505
 486 194 437 162 274 334 166 161  43 589 524  72 224  38 474 665 597 101  69 345  18  40 593 564  70 352
 288 235   5 225 483 107 112 557 602  64 622 615 121 269 246 470 658 186 571 240 620 357 638  27 482   1
  13 398 115 558 601 467 286 359  26 174 651 111 287 409 623 378  11 560 612   6 605 621 358  19  77  39
 641  30 656 643 619  67 489 255 307 513  83 364 578 158 367 184 116 390 150 136 149 587 476 451 233 159
  25 215  57 167 114 673 163 182 284 181 559 661 590 421 326 237 404 192 609 466 147 146 534 506 338 417
 498 526 324 399  62 507  32 230 223 396  33 519  54 473 567 631 374 613 202 180 538  41 394 110 600 275
 137  82 442  59  78 232   4 433 594 320 171 256  16 647 430 156 423 123 385 662 607 556 263 644 530 551
 626 582 165 308 365 388 361 126 598 279 122 583 169 669 278  22 549 135 102  20 277 427 603 504 440 304

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00029e+07us (= 10002.9ms, 10.0029s)
Wall-clock time (full program): 1.00523e+07us (= 10052.3ms, 10.0523s)
Satisfaction error: 11
Number of search iterations: 3302
Number of local moves: 2774 (including on plateau: 2733)
Number of local minimum: 16 (including on plateau: 388)
Number of resets: 0
Number of restarts: 0

Problem in row 2: 346 408 179 574 328 63 576 653 407 480 548 53 537 540 595 511 512 282 312 306 270 199 42 97 143 208 => the sum is 9169 rather than 8801
Problem in row 7: 85 577 676 96 264 31 354 248 377 125 373 485 108 523 298 21 508 339 493 178 94 205 56 88 218 168 => the sum is 6988 rather than 8801
Problem in row 8: 7 675 495 229 668 488 118 74 634 624 389 314 510 211 164 47 369 573 28 327 652 283 366 119 454 492 => the sum is 9310 rather than 8801
Problem in row 13: 343 448 580 572 227 528 636 672 563 350 393 382 360 372 496 380 212 80 29 425 561 55 76 376 533 173 => the sum is 9822 rather than 8801
Problem in row 17: 170 245 543 628 261 201 419 521 646 98 317 383 371 127 501 89 640 477 189 140 386 84 160 608 362 542 => the sum is 9108 rather than 8801
Problem in row 18: 481 323 674 395 547 565 185 268 555 420 666 145 670 259 375 499 3 280 517 296 310 401 196 191 315 505 => the sum is 10041 rather than 8801
Problem in row 19: 486 194 437 162 274 334 166 161 43 589 524 72 224 38 474 665 597 101 69 345 18 40 593 564 70 352 => the sum is 7592 rather than 8801
Problem in row 21: 13 398 115 558 601 467 286 359 26 174 651 111 287 409 623 378 11 560 612 6 605 621 358 19 77 39 => the sum is 8364 rather than 8801
Problem in row 23: 25 215 57 167 114 673 163 182 284 181 559 661 590 421 326 237 404 192 609 466 147 146 534 506 338 417 => the sum is 8614 rather than 8801
Problem in row 26: 626 582 165 308 365 388 361 126 598 279 122 583 169 669 278 22 549 135 102 20 277 427 603 504 440 304 => the sum is 9002 rather than 8801
Problem in diagonal 0: 604 408 130 23 518 655 354 74 206 24 210 627 360 9 244 356 640 280 69 240 605 587 534 110 530 304 => the sum is 8701 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 462 317 110 195 675 230 530 139 644 552 585 671  16 565 524 557 509 502 280 202 622 217 113 469 291 149
 429 125 102 214 288 427 249 166 527 656 307 400  85 264 345 456 330 127 196 620 146 630 204  52 277 600
 137 287 608 213 498 381 133 347  78 148  54 168 128 602 437 415 485 471 154 580 129 553 583 597  64 551
 305 123 477 586 419 605  51  82 457 466 520 473 423 533 164 244 440 175  11 398 633  67 221 251 453 224
 326 511 517 668 395 259 189 664 180 550 173  33 486 554 240 508 385 157  19 355 416 657 177  75 271  36
 200 162 140  95 161 548 399 544 354 340 328 386 540 445 628 144 587 248 488 174 414 301 523 208 388  56
 560 421 205 452 239 303  24 609 618 304 119 434 567 165  97 316  76 211 190  40 650 501 449 593 199 459
 616 574 371 105  59 325 631 276 215 592  46 353 158 490 481 145  15 334 446 507  99  70 465 382 598 448
  87 610  73 310 261 117 285 514 543 648 460 218 636 169 661 662 212 390  77 109 418 336  84 318 402 201
 141 541 236 468  98 528 589  53 515  60 447 474 178 413 629 603 412  55 425 216 104 581 591 296   1 147
 522 411 558  28 183 367 519 163 410 476 426 270 503 181 143 152  88 642  35 226 220 182 647 658 311 480
 389 369 364 372 107 424 383 420 342 374 332 378  17 363 361 373 380 392 171 370 360 379 320 376 350 335
 207 252 607 284 624  27 283 324  86 188 673 308 568  32  72 590 483 634 492 599 351  68 537 120 206 186
 185 504 293  71 539 604 665 193  18 484 472 159 667 357 234  48  92 365 676  39 637 510  58 136 611 184
 595  43 464 260 461 467 319 576  63 487 222 289   4 482 295  50 391 407 573 512 496 132 417 338   7 451
 297 274 229 275 575 672 444 314 302 286 306 358 505 258 269 267 663 209 246 231 300 243 266 253 397 362
 489 227 428 337 601 160 150 645 542 219 626 138 255 406  13 134 241 401 521 101  91 299 646 470 639  22
 349  34 250 594 130 115 582 422 479 198 156 257 242  14 579 331 170 518 106 454 333 153 114 135 547 394
 649  89 516 506 405  42 627  93 273 233 352 321 623 632 377 491 247 294  47 263 546 529  94 238 497 660
 384 343  74 651  31 577 272 450 228 192 442 495 118 111 563 513   8  21 344 312 431 455 409 387  30 322
  80 538 432 142 348 187  41 167 569 669  37 655  45 659 100 278 245 549 615 499 176 438 441 619 223  49
 366 674 614  38 339 652 329 612  57 232 281 225 588  69  62  25 122 561 613 403 531 292 494   2  61 559
 341 131 179 526 256  44 124 309 670  90 555 210 315 443 572 155 475  26 653 535 327 393  83 237 570 621
  81 566  96 430 265 282 439 254  65   5 116 500 666 194 408 268 571 617 463 112   3 606 368 493 298 635
  20 596 545 356 203  23 478 436 191   6 640 525  10 279 151 433 536 323 556 654 359 197 235 564 532 108
 584  79 313 625 641 435  66  29 375 346 126 103 458 121 396 643 638 172 404 290   9  12 262 534 578 562

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00012e+07us (= 10001.2ms, 10.0012s)
Wall-clock time (full program): 1.00534e+07us (= 10053.4ms, 10.0534s)
Satisfaction error: 8
Number of search iterations: 3516
Number of local moves: 2934 (including on plateau: 2889)
Number of local minimum: 18 (including on plateau: 367)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 462 317 110 195 675 230 530 139 644 552 585 671 16 565 524 557 509 502 280 202 622 217 113 469 291 149 => the sum is 10126 rather than 8801
Problem in row 2: 429 125 102 214 288 427 249 166 527 656 307 400 85 264 345 456 330 127 196 620 146 630 204 52 277 600 => the sum is 8222 rather than 8801
Problem in row 18: 349 34 250 594 130 115 582 422 479 198 156 257 242 14 579 331 170 518 106 454 333 153 114 135 547 394 => the sum is 7656 rather than 8801
Problem in row 19: 649 89 516 506 405 42 627 93 273 233 352 321 623 632 377 491 247 294 47 263 546 529 94 238 497 660 => the sum is 9644 rather than 8801
Problem in row 20: 384 343 74 651 31 577 272 450 228 192 442 495 118 111 563 513 8 21 344 312 431 455 409 387 30 322 => the sum is 8163 rather than 8801
Problem in row 23: 341 131 179 526 256 44 124 309 670 90 555 210 315 443 572 155 475 26 653 535 327 393 83 237 570 621 => the sum is 8840 rather than 8801
Problem in row 25: 20 596 545 356 203 23 478 436 191 6 640 525 10 279 151 433 536 323 556 654 359 197 235 564 532 108 => the sum is 8956 rather than 8801
Problem in diagonal 0: 462 125 608 586 395 548 24 276 543 60 426 378 568 357 295 267 241 518 47 312 176 292 83 493 532 562 => the sum is 9174 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 426 487 236 654  99  67 242 630 569  48 264 431 591  86 448 538 360 635 299 105 118   8 536   1 279 644
 162 648 640 566 430 522 626 530 553 228 111 201 350 110 263 645  60 545 481 194 249 547 227 254 455 540
 284  66 141 398 461 255 412 268 297 474 660 359 489  79 423 377  43 209 583 618 212 191  19 620 400 463
 418 184 397 446 126 485 239 548  24 270 575 161  11 590 136 208 656 187 343 417 585 531 427 491 139 207
 546 300 220 321 554 606 259 364  42 177  83 586 637 231 382 520 109 257  63 235  90 490 511 422 169 627
  16 218 528 243  82 241 157 670 460 147 402 304 250  84 155 349 541 508 555 562 567 370 577 662   9 144
  36 486 523 509 260 172 152 176 495 587 499 432 516 477 251  32 173 158 135  54 468  18 374   7 574 325
 527 517 302 327 354 466 503  27 480 248 663 498 223  22 316 449 505  12 395  76  50 413  39 352 443 594
 274 549 558 501 252 571  87   2 441 288  29 533 408 379 331 361 153 434 420 568 131 197 634 117  69 514
 348 211 225 657 183  30 652 415 281 410 159 140 428 605  64 312 219 464  80 589  62 439  35 622 612 559
 462  53 168 103 454 195 452 188 174 643 308 192  46 224 647 315 572 405 256 565 659 160 181 453 424 502
 579 674  20  31 563 358 113 313 171 665 470 497 478 190 367 186 365   6 479  25 619 317 230 182 296 607
 393 380 403 319 372 341 371 330 357 336 362 295 373 356 334 369 337 353 384 345 333  91 338 258 347 324
 329 267 138 457  59 666 378 639  75 617 294 306 291 388 604 142 163 500 240 482 129 608 311 210 198 310
 544 275 309  15 335 344 265 303 521 346 409 280 286 293 387 642 289 320 399 655 278 282 351  89 283 301
  95 623 205 149 451 276 564 104 148 419 170  51 592 519 602 143 375 661 610  81 631  72 609 483  71  97
 385 214 675  78 383 414 429 638 287  73 221 133 668 437  34 614 328 603   3 107 386 305 475 298 368 245
 425  96 646 185 247 653  56 381 164 578 404 598  58 266 534 180 550 542  33 292 390 204 127 621 506  65
  14 366 151 438 671  21  40 145 450  88  41  10 556 616  98 539 467  94 560 342 206 469 340 504 515 636
 407 202 492 629 573 229  49 166 557 529 615 570 178 124 215 318 238 411 595 122 261 473 154 552  74  68
 471 633 326 119 156 599 401  57 667 391 532  47 237 669 582 376 262 175 537 134 115 216 307 488 101 203
 580 458 196  44 167  93 421 524 128 132 130 664 588 561 332 165 611 106 641 108 444 323 651  92 625  17
 244   5 285 672  37 290 673 442 394 271 596 624 193 518 526 226 436  52 116 273 494 233 112 543 150 396
 125  55 213 355 628 440 593 234 392  13 456 512  45 114 137 493 472 601  28 600 314 650 476 199 535 121
 465 389 658 222 632 406 435 123 597 339  26 100 189 447 200 217 513  38  70 576 551 581 253 102 649  23
 246 445 146 363 272  61 232 584  77 484 322 277 120 416 433  85   4 525 496 676 459 613 507 179 510 269

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.00526e+07us (= 10052.6ms, 10.0526s)
Satisfaction error: 3
Number of search iterations: 4104
Number of local moves: 3416 (including on plateau: 3366)
Number of local minimum: 24 (including on plateau: 412)
Number of resets: 0
Number of restarts: 0

Problem in row 2: 162 648 640 566 430 522 626 530 553 228 111 201 350 110 263 645 60 545 481 194 249 547 227 254 455 540 => the sum is 10137 rather than 8801
Problem in row 7: 36 486 523 509 260 172 152 176 495 587 499 432 516 477 251 32 173 158 135 54 468 18 374 7 574 325 => the sum is 7889 rather than 8801
Problem in row 19: 14 366 151 438 671 21 40 145 450 88 41 10 556 616 98 539 467 94 560 342 206 469 340 504 515 636 => the sum is 8377 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
  77 131 647  36 186 648 460 370 635 101 160 283 260 531 399 611 516  79 431 184 560  41  68 404 164  48
 182 506 193 214 642 144 191 430 504 628 539  55 429 201 549 662 202 512 525 231 222 409 155  11 433  32
 221 646 390 453 358 237  73 458 143 619  38 209  45  13 148 557 235 654 271  28 566 486 527 598 617 211
 620 643 500 116 196 543 276 151   2   8 630 372 384 489  85 612 252  51  86 128  81 603 668 639  72 594
 103  31 259 383 672  43 227 441 526 248 572 484 162 391 495  29 243 136 147 623 277 478 663 588 161 419
 455  23  84 507 627 442 262 179 165 562 568  49 314 667 610 523 204 434 225 398 233   7  95 150 533 485
 582 492 287 187  96 456 638 658 126   4 172 158 554 570  30 291 423 565 241 529 435 122 206   6 197 476
 127 228 279 546 424 175  27 266 556 563 415 550 629 604  61 156 656  35 469 110 641 113 555  56 508  52
 517 551 121  66 418 521 364 104 109 461 124 217 477 569 130 488 616 534 515 203 605 493  10 140 210 238
 673  78 583 198 438  76 436 625  57  17 166 666  25 475 640 465  71 522 274 373 473 139 432 360  88 451
 273 426 405 674 205  99  19  39 181 105 251 413  47 397 411 400 288 294 503 665 379 388 631 659 246 403
 421 192 159  15 171 382 389 548 626 602 376 290 377   3 226 378 387 366 239 346 396 401 367 386 365 393
 385 369 345 392 357 344 324 363 342 417 356 343 353 359 322 348 354 336 338 327 349 304 355 316  75 328
 337 303 301 362 289 361 339 660 333 300 352 334 315 325 323 347 329 320 331 297 296 350 317 299 341 340
 284 295 330 298 509 311 676 309 305 559 292 278 499 269 553 318 319 326 306 188 313 286 245 307 207 219
 452  24 448 669 574 213 644 584 501 505 255 481  18 368 115 108 652 645 596 118  33 117 253  59 332  37
 459 308 671  54 236 258 268 302 215 275  67 600 447 145 180 254 581 232  87 580 655 285 394 618 530 100
  69 152 371 538 190 578 141  93 244 125 462 540 408 256 510 597 402  42   1 229 407 621 587 482 599 157
 194 650 427  21 395  98 622 224 670 593 661  91 264 547 575 132 449 613 464 513 195 541 520 280 293 651
 261 519  82 518 450 247 535 636  16 321 153  83 457  12 440 410 112  34 542 595 470 601  97 624 412 174
 537 146  62 420  53 675 310  50 242  89 414 483 637 380 220 106 649 576 138 471 223 528 240 374 234 544
 577 496 107 609  26 494 514 154 445 176 487  40 502 443 664  70 134 189 272  20 133 406 129 545 561 608
 208 466 511 491 444 437 270 446 468 657 120 416   9  64 123 173 163 558 590 312  60 439 472 216 463 585
  94 536 114 263 351 183 591  74 571 168 524 632 425  65 375 230 498 149 422 474 497 185  90 257 579 454
 428  58 552 137  14 586  63 170 607 606 567 119 200 653 282 490  44 218 199 592 135 177 614 178 479 633
 265 532 573 634 480 250 142 467 212  92  80 615 564   5 335  46  22 381 589 267 167 281 111 249 102 169

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0001e+07us (= 10001ms, 10.001s)
Wall-clock time (full program): 1.00534e+07us (= 10053.4ms, 10.0534s)
Satisfaction error: 5
Number of search iterations: 4057
Number of local moves: 3298 (including on plateau: 3249)
Number of local minimum: 32 (including on plateau: 424)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 77 131 647 36 186 648 460 370 635 101 160 283 260 531 399 611 516 79 431 184 560 41 68 404 164 48 => the sum is 8030 rather than 8801
Problem in row 7: 582 492 287 187 96 456 638 658 126 4 172 158 554 570 30 291 423 565 241 529 435 122 206 6 197 476 => the sum is 8501 rather than 8801
Problem in row 19: 194 650 427 21 395 98 622 224 670 593 661 91 264 547 575 132 449 613 464 513 195 541 520 280 293 651 => the sum is 10683 rather than 8801
Problem in row 23: 208 466 511 491 444 437 270 446 468 657 120 416 9 64 123 173 163 558 590 312 60 439 472 216 463 585 => the sum is 9161 rather than 8801
Problem in row 26: 265 532 573 634 480 250 142 467 212 92 80 615 564 5 335 46 22 381 589 267 167 281 111 249 102 169 => the sum is 7630 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 674 623 252  35 288 366 400 365 237 102 321 414 600 608 224 654 422 601  20 529 353 451 241  98 503 421
 319 650 271  53 515 113 669 642 602   5 357 192 315 586 255  28 542 217   8  95 106 148 661 456 378 227
 306 120  46 571 401 536  72 129 145 283 142 648 292  96 189  33  42 172 530 452 367  16 380 461 208 496
 251  88 126 572 479 253 220  29 641 234 147 660 473  12  52 494 632 580 384 197  77 553   9 603 570 465
 610 405 523 164 318 128 483  39 101 584 210 559 486 666 471 141 183 426 130 250  38 437 431 369 136 513
 510 457 497 516 161 540 323 518 279 538   7 481 569 564 519 215 361   6 108 579 413 399 233 177 447 594
 539 158 226 124 364 652 500 198 668  66 433 551 157  34  22 565 190 127 477 659  31 273 531 525  82 649
 507 597 311 655 509 625  90 489 491 487 122 144  81 230  36 372 506 478  85   4 280 502 240 350 458 152
 123 675 247 640  54 196 221 310 445 614 443 228 109  44 180 577 256 417 449 609 524  78 505 205 638  14
 444 493 103 395 499 229 121 169 419 460 490 595 450 480 469 194 140  59 375  27  60 358 557 520 528 167
 619   1 428 115 333 432 637 151  65 470 427 154 393  32 394 514 174 385 626 232 418 146  64 568 631 392
 438 485 566 325 629 448 463 264 591  62 459 383 440 662 410 646 277 549 599 535  13 475 454 150  49  92
 381 387 199 388 143 376 171 382 339 330 320 293 346 441 334 368 178 370 359  89 617 351 373 337 558 371
 347 301 118 354  97 298 281 390 314 313 119 304 533 302 329 336 581 343 309 328 671 544 317 341 342 289
 307 257 434 464 508 324 262   3 267 287 537 326 295 338 615 340 312 294 266 282 593 296 286 322 332 254
 556 207 436 182 185 308 184 411 560 269 453 274 552 246  86 299 261  56 575 316 231  76 260 658 612 548
  17 212 474 618 588 238 137 563 272 663 291 225 276 526 403 248 209 416 195  30 670 236 596 222  51 425
  23 412 651 424  80 501 583 155  91 429 598 219 186 627 176 488 657 245 468 305 263 249  94 634 188  55
 214 512 406 521 116 561 377 484 349 492 300 132 204 396 613  45 606 216 203  79 592 173 545 175 187 303
 117 574 131 462 362 135 105 193 275 639 673 607  57 211 352 163 522 578 455 159 356 201 259 511 344 360
 374 534 633 239 107  21 206 656 179 181  61 404  70 423 258 138 335 667 582 554 110 620 622 156 139 532
 153  87 244 345 439  73 543 590 278 605 472 435  25 397 550 409  18 191 647 636 517  69 604  67 242 165
 265 166 541  84 562 111 587 290 547 149 546 446 223 125 672  83 442 628 402 467 527 611   2 133 134  58
 482 297 645 348 213 621 408 498 202 104  75  11 616 268 112 589 466  15  19 398  26 331 391  71 379 643
  63  10 243  37 284  40 644 218  24 200 630  68 389 327 504 476 415 495 430 635 585 555  47 285 624 573
 162  93  50 170 567 676 114 665 420 235 168  48 664 160 576 386  74 270 100 355 363 653  99 407  41  43

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00019e+07us (= 10001.9ms, 10.0019s)
Wall-clock time (full program): 1.00542e+07us (= 10054.2ms, 10.0542s)
Satisfaction error: 7
Number of search iterations: 3092
Number of local moves: 2631 (including on plateau: 2584)
Number of local minimum: 20 (including on plateau: 297)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 674 623 252 35 288 366 400 365 237 102 321 414 600 608 224 654 422 601 20 529 353 451 241 98 503 421 => the sum is 9802 rather than 8801
Problem in row 2: 319 650 271 53 515 113 669 642 602 5 357 192 315 586 255 28 542 217 8 95 106 148 661 456 378 227 => the sum is 8410 rather than 8801
Problem in row 3: 306 120 46 571 401 536 72 129 145 283 142 648 292 96 189 33 42 172 530 452 367 16 380 461 208 496 => the sum is 7133 rather than 8801
Problem in row 6: 510 457 497 516 161 540 323 518 279 538 7 481 569 564 519 215 361 6 108 579 413 399 233 177 447 594 => the sum is 10011 rather than 8801
Problem in row 12: 438 485 566 325 629 448 463 264 591 62 459 383 440 662 410 646 277 549 599 535 13 475 454 150 49 92 => the sum is 10464 rather than 8801
Problem in row 24: 482 297 645 348 213 621 408 498 202 104 75 11 616 268 112 589 466 15 19 398 26 331 391 71 379 643 => the sum is 8228 rather than 8801
Problem in row 26: 162 93 50 170 567 676 114 665 420 235 168 48 664 160 576 386 74 270 100 355 363 653 99 407 41 43 => the sum is 7559 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 237 198 534 218 513 104 446 230 675   5 397 182 137 660 400  78 248 157 625 311 601 579  55 491 413 307
 350 389 110 299 305 549 353 239 618 604  81 160 215 113 548 209 586 472  92 627 403 199 394 530  72 284
 175 146  96 572 303 421 216 641 465 116  67 324 143 493 274 665 651 668 484 663 106 325 269  74 386  58
 356 414 590 457 574 154   6 364 424 568 363 517 213 194 320 445 490 331 149 246  70 535  73 402  80 466
 471 565 241 536 166  47 477 190 223  66  27 541 657  13  24 652 119 500 606 365 426 114 669 503 593  10
 368  71 187 275 650 250 643  79 226 578 529 488 511 485 629 373 407  19 261  49 121 266  69 589 109 569
  84 235 385  43 257 377 594 564 537 442 583 221 142 482 628 184 518 120 522 126 220 469 206 131 567 164
 396 125 382 451 192 139  50 268 543 183 556 391 251 508 136   2 540 415 256 576 609  62 476 224 603 467
  87 201 562  52 545 433  65 592 270 263 277  77 532 279 189 429 582 210  21 673 577 171 630 375 203 506
   8 524 480 430 553 596  68 217 227 454 653  54 168  44   4 352  46 640 447 600 645 527 174 272 664 547
 496  56  34  91 489 343  36 538  14 440 595 539 481 437 172 287 178 314 408   1 291 670 621 505  98 667
 672 525 423 283 253 449 523 647 341  51 347 626 638 315 258 281 370 321 123  20 292  75 191  29  93 655
 302 130 351 452 329 301 141 290 316 448 103 380 310 304 597 366 453 633 662 359 355 409  57 195 212 346
 193 354 232   3 345  33 332 422 297 296 372 444 676 411 336 344  90 323 404 602 339 295 387 390 463 418
 196 674  83 357  60 398 148 388 456 661 379 392 105 326 509 181 607 260 417 399 349 150 401  85 360 460
 573 486 362 133 176 634 656 566 461 204 462 252  32  23 165  26 378 243 561  86 528 264 330 624 459 117
 613 514 384 288  12 298 361 140 542 479  53 521 228  63 242 416 162 381 580 475 159 464 599 575   7 245
 432 383 544 208 406 563  48  16 132 247 118 107 632 591 173 550 236 108 516 637 238 666 306 300 520 124
 282 229 455 588 546 312 584 468 585 156 177  11  31 470 507 153 276 478 280 554  37 552  41 502 376 151
 259 526 200 610 219  94 443 129 240 558 318 289 492 497 369 654  30  38 395 278 144 202 249 428 504 636
 458 419 163  89  28 512 623 255 179  18 262 619 494 185 495  88 635 510 267 197 434 441 338 340 317 435
 115  22 570 622 474   9 427 371 147 233 334 158 631 557 533 234 155 644  45 342 531 286 333 205 515 308
 436 648 127 612 393 658 405 605 128 431 671 410 374 294 145 180  15  76  82 225 138 328 487 111 611 211
 501  64 608 551 271 438 335 207  40 498 152 617 425 273 659 473 560 188 112 265  42  99 642 161 327 293
  95 649  59 244 620 134 499  17 614 571 309 420 186 615  39 598 102 313 319  25 587 483 519 348 214 222
 646 254 639 337 122 555 322 358 101 231 616  61  97 169 450 581 367 439 167 100 559 170 285 412  35 135

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00009e+07us (= 10000.9ms, 10.0009s)
Wall-clock time (full program): 1.00527e+07us (= 10052.7ms, 10.0527s)
Satisfaction error: 3
Number of search iterations: 4031
Number of local moves: 3282 (including on plateau: 3233)
Number of local minimum: 36 (including on plateau: 396)
Number of resets: 0
Number of restarts: 0

Problem in row 10: 8 524 480 430 553 596 68 217 227 454 653 54 168 44 4 352 46 640 447 600 645 527 174 272 664 547 => the sum is 9394 rather than 8801
Problem in row 26: 646 254 639 337 122 555 322 358 101 231 616 61 97 169 450 581 367 439 167 100 559 170 285 412 35 135 => the sum is 8208 rather than 8801
Problem in diagonal 0: 237 389 96 457 166 250 594 268 270 454 595 626 310 411 509 26 162 108 280 278 434 286 487 161 214 135 => the sum is 8203 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
  66 601 412 129 478 532 151 546   2 460 619 198 435 538 325  28 667 125 156 436 309 343 668 226 345   6
 491  35 359 582 389 496 231 572 255  45 511 167 573  52 593 633   7  99  58 247 562  50 240 518 574 462
   1 407  98 123  97  33  95 584  80 393 517 127 166 651  88   5 413 295 282 569 495 228 489 164 169  71
 641 258 666 214  11 150 617 217 592  10 154 356 136  17 471 504 539 520 230 293 515 194  92 179 553 672
 636  87 543 448 209 643 350 102 182 449 610 244  20 334 153  73 612 161 492 559 450 132 246 437 262 367
  74 381 355 585 269  56 482 466  83 648 510 477 415  70  14 205 104 605 128 534 172 480 600 599  64 425
 624 149 547 635 370 265  72 341 421 550  42 595 487 168 640 242 195 576 256 486  32  24 328 238 171 347
 236 243  38 211 406 554 311 143 110 223 333 611 137 414 503 505  94 321 175 461 440  31 604 590 479 628
 108  36 494 639 646 190 531 362 133  69 366  75 645 571  85 120 498 268 187 248 279 363 411 451 580 446
 183 254 409 105 591 568 615 147 270 528 185 319 497 606  81 315 298  60 656  61  21  93 516 558 598 267
 289 302 422 465 208 212 206 320 529 514 304 625 261 280 281 324 296 669 264  67 237 653 331 286 155 301
 564 588 292  77 647  55 144 330 294 658 203 266 249 577 283 525 427 322 548 439 189 216 452   4 408  44
 118 287 561 159 192 533 545   3 470 314 365 664 338 215 458 351 180 299 655 396 332 472  37 397 259 201
 225 327 310 297 382 392 317 364 353 445 442 375 260 379 303 307 403 335 390 313 371 340  13 323 419 416
 464  89 361 654 481 271 410 377 626 300 219 358 463 235 400 344 101 360 318  34 200 616 438  65 288 329
 524 575 109 197 587 204 629 112 642 443 402  68  22  29 661 673  25 581 383  91 130 526  90 199 277 622
  49 395 519  23  48 391  40 566 602 441 176 423 501 202 106 657 352 142 405 374 337 663  86 121 638 544
 578 326  53 434 278 621 305 372 148 570 632  62  19 484 126 523 138 555 630 649 113 565 131 336  18 135
 380 103 170 536 378 401 444 527 537 291 398 357 207 467 583  84 107 384 455 257  51 530 512 522  41  79
 188 456 540 122  43  30 426 162  82  76 447 181 348 627 114 650 475 488  27  96 607 373 245 659 674 665
 178 369  54 354 213 513 100 618 508 111 116 549 399  26 535 502 608 263 675 368 631 430 284 232 119  46
 251 346 485 432 493 252 229 193 163 117 165 385 227 218 634 476  63 499 468 594 469 551 115 196 290 490
 428 473 221 586 306 177 404  15 376 276 556 418 603 222 433 140 567 394 285 145  39 241 652 239 431 174
 596 563 173 184 210 457 620 671 506 500 474 509 589 507 521 220 670 316  78  16 644 134 387 662 272 483
 233 609 453 424 312 253 388 342 417 224   8 234 613 637 250   9 339 152  59 454 579 429 274 141 660 308
 676 542 157 186 557 552 139 349 420 146  47 158 191 275 160 386 623  12 541 614 597 124 560 459  57 273

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00527e+07us (= 10052.7ms, 10.0527s)
Satisfaction error: 2
Number of search iterations: 3551
Number of local moves: 2956 (including on plateau: 2906)
Number of local minimum: 28 (including on plateau: 304)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 1 407 98 123 97 33 95 584 80 393 517 127 166 651 88 5 413 295 282 569 495 228 489 164 169 71 => the sum is 6640 rather than 8801
Problem in row 24: 596 563 173 184 210 457 620 671 506 500 474 509 589 507 521 220 670 316 78 16 644 134 387 662 272 483 => the sum is 10962 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 550  69 511 526 298 549 503 618 207 116 519 255 174 670 660 364 192 350 460 527 510 131 346 490  97 211
  31  87 390 530 647 130 418 652  55 500 202 110  17 137 641 375 632 634  35 381 326 545  19 640 296 371
 121 184 630  76 521 263 160  16   6 566 484 547 615 603 607  59 614 167 425 329 141 464 617 126 194 266
 200 475 168 555 311 406 496 570 506 287 432 253  70  26 572 593 332 112 486 610  44 450 592 602 173 626
 565 658 552 219 102  86 415 671 106 461 136 424 259 596 229 164 546 581  23  64 242 611 218 636 129 108
 400 582 387 382 528 317 352 330  40 124 303 176 428 270 524 145 421  56 540 408  81 389 589 261 291 477
 269 518  30 627 178 152 170  79 109 410 238 185 497 260 144 650 442 153 482 538 576 325 417 357 501 494
 504 188 476 299 507  24 223 267 485 204 586 487 125 413 338 443  65 613 282 309  75 286 411 488 423 280
 100 414  96 453 666 297 597 251 515  33 241 533 393 483 435 466  78 608 193 628 264  15 653 370   1  18
  77 149 594 107 161 305 598  42 312 441  57 509 465  39 480  95 433 568 302 277 489 355  20  38 366  84
 385  11 333 445   5 358  36 353 380 513 397 395 564 104 139 454 674 474 625 101 616 119 407 234 579 154
 322 262 559 206 583 237 367 212 437 620  54 655 227 398 172 304 508 276 147 434 569  14 163 416  53 606
 290 232 221 651 403   2  72 396 534 544  88 285 258 359 404  25 591 520 224 133 659 573 243 134 412 548
 339 668 320 300 347 345 374 328 318 321 342 637 294 310 271 349 278  41 293 272 335 451 292 315 313 348
 409 498 128 155 633 478 427 399 279  67 215  21 289 118 183 609 273 469 567 499 372  47  58 522 605 481
 473 295 208 209 182 111 189 151 578 244 541 230 447 557 356 256 535 120 369 247 471 455 558 517 420  82
 146 378 422 436 225 440 532 590 123 143 631 235 373 148 127 254 217 654 169 563 612 438 239  63  90 553
 649 622  22 676 156 595 226 514 220 401 446   8 638  32 236  66 463 257 599 222  48 344 191 117 392 661
 203  45 645 113 337 426 646  98 201 228 669 495 114 388 537 529 231 301 462 197 444 580 205 159 180 368
 539 648 672  93 181 165 214 199 664 531  10 429 249 431   7 122 281 162  28 341 516 157 543 560 601 458
 336 363 331 233 319 604 245 468 384 343 283   9 306 523  61 663  91  43 542 644 103 196 472 252  52  71
 629 467  12 248 307 635  99 246 187  46 175 587 584  73 492 386  37 452 327 383 177 479 376 324 502 571
 171  34 284 575 213 459 179  83 562 588 493 362 554 643 314 138 140 186 657 115 377 391 105 405 457 316
 448 268 470 150  80 512 561 274 623 166 275  89 132  13 340 574 158 536  51 525  92 642 621 323 662 216
 585 491 198 135 334 240  29 600 351 639 360 675  62 656 505 288 379  49 439   4 354  94 361 449 456  68
  60 195 142 402 577 665 673 394 619 265 624 210 667 551  27 430 190 419  74  50 308 250  85   3 556 365

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00536e+07us (= 10053.6ms, 10.0536s)
Satisfaction error: 5
Number of search iterations: 3109
Number of local moves: 2585 (including on plateau: 2537)
Number of local minimum: 24 (including on plateau: 311)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 550 69 511 526 298 549 503 618 207 116 519 255 174 670 660 364 192 350 460 527 510 131 346 490 97 211 => the sum is 9903 rather than 8801
Problem in row 4: 200 475 168 555 311 406 496 570 506 287 432 253 70 26 572 593 332 112 486 610 44 450 592 602 173 626 => the sum is 9947 rather than 8801
Problem in row 10: 77 149 594 107 161 305 598 42 312 441 57 509 465 39 480 95 433 568 302 277 489 355 20 38 366 84 => the sum is 7363 rather than 8801
Problem in row 11: 385 11 333 445 5 358 36 353 380 513 397 395 564 104 139 454 674 474 625 101 616 119 407 234 579 154 => the sum is 8855 rather than 8801
Problem in row 21: 336 363 331 233 319 604 245 468 384 343 283 9 306 523 61 663 91 43 542 644 103 196 472 252 52 71 => the sum is 7937 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 303 118 375 675  54 111 338 472 525  30 410 657 618  58 281 173   3 129 541 126 425 405 387 561 370 656
 545 515 493 209 411 255 232 423 283 181 316 569 246 199 606 630 494 591  39  68  55 222 217 313 627  62
 570 358 402 506 463 432 607 137 595 381  38  98  26 371 171 194 340 408 518 349 245  10 239 510 509 324
 212 314 438 578  83 185  22 550 496 485 540  76 247  15 101 107 188 452 529 122 616 640 575 406 398 426
 499  25 162 164 508 503 554  64 335 120  24 109  19 507 420 461 660 559 448  56 102 603 676 470 482 271
 158  79 244   1 450 577 170 585 621 419 154 505 343  75 567 359 427 196 251  48 555 119 333 663 308 594
 435 484 487 260 337 535 512 520  65 282 504  21 533 440 478 513  32 230 152 382 176 468 586  20 151 198
  94  87 263 202 434 389 457 298 269  14 146 633 636 664 625 346 546 489 444 539  44  86 528  78 159 331
 306 523 204 161 617 357 430 653 467 250 441 219 474 548  82  23 475 471 374 442 492  67 401 207  36  81
 615 130 542  77 334   9 236 293 572 395 143 443 551 377 360 182 453 623  11 614  37 642 486   7 563 106
 218 502 184 372 538 415  93 488 327 605 197 451 568 412 264 418 288  33 396 290  46 355   5 483 459 394
 596 150 665  49 169 138 294  91 413 454 544 227   8 574 366 495 388 363 213 647 160 628  52 399 156 562
  42 177 646 320 500 669 133 252 115 289 229 436 407 339 556 134 167 524 373 367 116 191 543 671 384 221
 652 526 347 449 228 344  69 352 557 305 391 192 354 292  84 233 560 121 323 532 584 278 287 302  59 380
 275 301 328 329 456 299 673 249 284 369 295 280 312 253 342 599 297 397 658 179 511   6 326 113 598  72
 490 422  29 517 602 291 521 613 108  73 285 257 429 206  95 307  34 659 491 215 622 180 353 368 304 330
 238 626 201 163 256 641 356 672  16 214 670 241 174  53 462 566 203 248  31 579 362 643  96 350 210 530
 416 296 142 460  45 315  66 136 234 666 224 547 186 638 458  89 514 208  92 321 383 261 655 455 549 445
  61 604 592 319  88 100 611 128 351 189 220 629 123 132 273 582 610 376 193 365 501 632 141 225 240 516
 531 272 480 639 325  51 223 300 190 165 609 140 573 527 649 644 465 195 135 378 148 534 216  63 166 183
 390 674 364 139 266 144 446  99  47 558 168 254 392 580  28 318 311 336 661 403 576 231 262 593 114 447
 409 571 553 552 258 589 379  18  70 131 645 537 439 172 103   4  50 565 286 205 481 149 469 309 464 393
 279 274  41 124 536 404 650 433 385 473 477 276 127 268 631 522 145  85 601 400 414 153  90  60 341 612
 243 476  74 348 648  80 424 587 608 519 588 310 667 277  40 498 265  12 147  57 332 235 479 417 345 125
 211  71 117 624  17 651 270   2 200 600 431 104  27 187 662 361 619 421 635 620 581 466 157 175 155 437
  13 226 428 564 178 317  35 386 668 634 112 590 322 637  97  43 267 110 259 497 237 597 242 583 654 105

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.1316e+06us (= 8131.6ms, 8.1316s)
Wall-clock time (full program): 8.18347e+06us (= 8183.47ms, 8.18347s)
Satisfaction error: 0
Number of search iterations: 3649
Number of local moves: 3044 (including on plateau: 2992)
Number of local minimum: 31 (including on plateau: 352)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 676 378  97 501 615  90 370 106  87   4 523 619 400 209 466  99 592 544  17   3 638 137 167 212 594 657
 199 537 114 227 600 641 104 460 524  32  30 156 154 655 203 636  18 475 290 473 222 420 258 286 610 477
 316 589 513 321 176  27 202 277 159 542  73 162 493 528 274 558 303  81 541 198 585 538  89 599 571 664
 302 607 407 101 285 502 295 347 672 365 529 514 225 367 138 226 146 163 257 631  56 191 348  19 503 244
 637  54 143  88 217  67  23 533 168 110 576 602 219 608 656 588 504 402 472 317  74 364 408 157 224 590
  80 491 299 265 500 658 264 155 579 417 150 218  58 221 175 392 174  55 604 553 496 587 237 375 312 486
 439 673 527 675  39 429 520 462 331 515  84  42 575 125 215 505 280  22 151 540 471 135 334  72 512 128
  68 262 233 548 649 499 545 187 488 186 247 622 144  53 451  61 633 345 241 667 353 450 192 294 170 213
 322  91 645 161 112 256 642 211 448 412 639 415 456  37   6  24 555 434 455 107 249 530 605 205 238 546
 292 158 404 644 376 441 275  36 425 201 435 196 422 449 470 127 409 171 413 261 563  35 632 432 139 395
 521 494 674 240 383 228 223  76 287 374 510  33  79 129 433 414 260 282 666 532 373 397 535  49 517  92
 598 372 484 424 430  64 385 581 145 298 391 384 393 136 401  66 580 452 169 276 248 489  43 526 126 340
 318  95 344 361 583 349 369 358  65 326 360 333 319 339 306 335 336 337 329 341 342 561 352 315 377 351
 396 188 388 130 617 567   1 562 410 379 332 646 354 283 560 235  60 519 123 108 436 230  15 596 119 547
 442 330 251 281 346 307 663 418 272 459 304 310 284 474 323 313 357 270 153 578 297  29 389 259 324 368
 629 539 386 206 207 609 180 654   7 584 250 476 266 614 131 278 109  31 255 552 182 557 231 628 140 100
 431 166 142 234 116 582 630 311 625 463 190 279  44 522  93 447 550 195  70 246  21 653 643 509 573  12
 490 380  13 478 359  50 194 268 193 314 506 536 597 498 603 497 200 243 611 595 148 184 485 181  63 453
 325 390  11 220 309 468 483 172 626 445 124 252  62 141 565  71 416 623  82  51 291  38 427 650 635 423
 253 210 328  45 593 267 189  96 543 232 669  26 627 640  86 465 507 308 651 160 516 122 185 518 454 111
  10 214 601 271 566 152  41 668  16 670 438 147 300 481 467 405   5 511 648 327 165 164 464 403 366 301
 103 559 564 149 102 671 437 574  57 296 113  40 660 406 362 120 446 426 554 421  34 479 363 178 382 305
 355 444 461 572 293  98 525 134  52 616 239 179 551 269 482 613  47 570  28 289 356 288 569 105  75 591
 371 387  94 549 242 343 577 620 419 204 469 381  25 118 263 659 480  69 229 399 662 132 216 350 458  85
 208  78 183 492  77 428 487 197 647 236 606 568 508 245  48 133 173 621 398  59 612 457 531 443  46 320
  20 115 495 618   9   8 177 338 556 121  14 665 586 254 624 534 661 652 394 117 411 634  83 440 273   2

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00003e+07us (= 10000.3ms, 10.0003s)
Wall-clock time (full program): 1.00525e+07us (= 10052.5ms, 10.0525s)
Satisfaction error: 5
Number of search iterations: 3688
Number of local moves: 3028 (including on plateau: 2980)
Number of local minimum: 31 (including on plateau: 376)
Number of resets: 0
Number of restarts: 0

Problem in row 3: 316 589 513 321 176 27 202 277 159 542 73 162 493 528 274 558 303 81 541 198 585 538 89 599 571 664 => the sum is 9379 rather than 8801
Problem in row 4: 302 607 407 101 285 502 295 347 672 365 529 514 225 367 138 226 146 163 257 631 56 191 348 19 503 244 => the sum is 8440 rather than 8801
Problem in row 17: 431 166 142 234 116 582 630 311 625 463 190 279 44 522 93 447 550 195 70 246 21 653 643 509 573 12 => the sum is 8747 rather than 8801
Problem in row 18: 490 380 13 478 359 50 194 268 193 314 506 536 597 498 603 497 200 243 611 595 148 184 485 181 63 453 => the sum is 9139 rather than 8801
Problem in row 19: 325 390 11 220 309 468 483 172 626 445 124 252 62 141 565 71 416 623 82 51 291 38 427 650 635 423 => the sum is 8300 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
   4 518 256  48 224 422 127  26 325 254 430 357 387 415 464 496 548  97 646 118 656  17 264 569  69  31
 581 649 616 240 472 567 602 317 447 643 129  11 492 535 309 495 547 539 348 296 583 203 451  71 618  85
 144 663  46 128 614 585 238 165 314  68 640 624 192 484 546 216 249 242 658 153 456 120 252  20 653 331
 440 104 588  91 521 141 337 577 168 435  89 157 171 123 446 175 341 245  42 444 342 135 195 293 374 131
   3 550 524 247 106  93 453 186 494 504 158 507 595 211 284 565 209 159 582 662 552 281 266 432 557 654
 641 182 268 199 210 103 515 528 666 454 619 260 489 596 400  39 635 545  63 463 202  36 204  21  95 368
 243 381 145 493 445 475 180  54 154  80 621 598 169 637 512 124 425 631 176  27 319 423 554 480 426  29
 273 527 471 177 367 188 650 183  19 215  81 235 665 468 285  37 522   5 114 676 659 407 217 270 576 514
 639 394 149 437 206 311 605  30 261 544 343 479 371 660 452  55 330 205 152  56 234 448 505 119 246 570
 438 174  60 113  34 326  74 601  66 222 531  79 486 275  62 532 138 363 651 474 633 672 667 115 478 537
 652 263  51 457 443 491 543 290 418 401 277 458  77  84   2 615  78 553 414 671  98  28 125 499 673 140
 299 482 241 272 255 244 308 354 280 250 370 304 276 295 625 670 420 297 303 279 327 292 611 353 187 207
  15 409 661 562 587 586 150 166 559  70 282 143 388 259 305 294 376 126 626 232 227  83  64 627 487 517
 352  35 328 274 340 334 345 324 410 320 355 365 302 310 301 369 312 336 391 377 339 406 360 346 359 511
 218 225 362 568 390 385 316 257 389 347 383 500 358 306 413 100 196 396 364 191  53 417 366 428 442 431
 269  88 503 508 579 380 162 404 578 321 378 190  59 560 551 392 228 333 189 300 109 349 137 513 132 589
 449 287 356 590 485 237 555 379   1 538 200 403 620 181 412 148 107 429 212 105 599 628  32 167 265 416
 361 298  40 408 288 421 147 647 520 226 278 110 151 112 179 674 455 459  73 323 469 476 623 271 397 395
 101 384 350 193 307 617 542 594 262  12 525  90  16 502 584 613 607 117 460 393   6 465 351 178  44 488
 130 111 402 155 540 609 344 498  14 213 509 197  82 172 427 519 233 134 467 622 214 170  75 603 566  65
 436 556 597 657 156  72 108 329 516 116   7 645 638 136   8 332 405 634 267 593 573 561 424 239  38 139
 315 372 121 592 318 184  50  52  99 481 574 501 636 563 102 490  76 439  13  25 558 591 655 669  96 229
 541 194 497 510 668 629 289  92 648 575  22  18 461  24  58 163 477 549 322 571 146 313 526  87  86 335
 223 466 338  23 122 382 530 610 506 173 231 606  61 564 142  41 632 291 572 251 133 580 373 529 164 258
 434 253 612 473  67   9 198 604  45 664 161 523 248 286 533 462 208 644 536  49 220 230 283 483 375 201
 600 236 219 386  57  10 433 534 642 675 608 441 411  43 399 185  47  33 160 450  94 470 221 419 398 630

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00004e+07us (= 10000.4ms, 10.0004s)
Wall-clock time (full program): 1.00526e+07us (= 10052.6ms, 10.0526s)
Satisfaction error: 7
Number of search iterations: 3087
Number of local moves: 2551 (including on plateau: 2505)
Number of local minimum: 19 (including on plateau: 311)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 4 518 256 48 224 422 127 26 325 254 430 357 387 415 464 496 548 97 646 118 656 17 264 569 69 31 => the sum is 7768 rather than 8801
Problem in row 2: 581 649 616 240 472 567 602 317 447 643 129 11 492 535 309 495 547 539 348 296 583 203 451 71 618 85 => the sum is 10846 rather than 8801
Problem in row 4: 440 104 588 91 521 141 337 577 168 435 89 157 171 123 446 175 341 245 42 444 342 135 195 293 374 131 => the sum is 7105 rather than 8801
Problem in row 5: 3 550 524 247 106 93 453 186 494 504 158 507 595 211 284 565 209 159 582 662 552 281 266 432 557 654 => the sum is 9834 rather than 8801
Problem in row 20: 130 111 402 155 540 609 344 498 14 213 509 197 82 172 427 519 233 134 467 622 214 170 75 603 566 65 => the sum is 8071 rather than 8801
Problem in row 21: 436 556 597 657 156 72 108 329 516 116 7 645 638 136 8 332 405 634 267 593 573 561 424 239 38 139 => the sum is 9182 rather than 8801
Problem in diagonal 1: 31 618 20 195 281 202 27 114 205 138 615 625 259 302 500 378 538 520 594 344 72 318 510 338 253 600 => the sum is 8597 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
   2 635 503 423 179 103 471 284 571 672 115  46 536 233 669 188 198   8 537 401 325 156 313 347 265 621
  79 644 450 224  23 204 226 321 392   6 100  67 602 519 558  50 573 221 664 526 351 184 547 610  99 561
 412 400 614  88 385 131 404 499 510 502 625 451 555 148 101  48 175  53 218 333 317 596 500 152 141 443
  37  28 160 600 308 660 289 396 591 408  84 150 530  74 174 567 562  87  62 399 187 176 630 568 549 525
 262 532 485 415 593  97 402 378 662  98 114 403 310  13  59 247 312 461 132  80 556 491 553 376 426 344
 438 674 196 225  93 276 437 595  60 425 190 248  33 581 580 219 362 615 551 464   4 348 162 282 126 617
  68 232 125 474 369 237 531 516  83 355 236 575 182 469 414 667 119 381 251 523 153 488 447 107 411  64
 255 144 244 460 606 582 364 294 216 120 622 641 133  38 129 448 605 533 501 359 213 109 607 239 493 227
 579 454 675 281 108  89 230   9 473 343 456 542 597 389 515 110  16 457  56 435 372 202 139 647 252 375
 640 147 149 560 663 127 574 212 145 420 534  65 430 350 576  94 446  76 193 177 440 497 367 256 577  86
 246 541 449 387  77 648 137 296 398 405 377 671 159 432  30 619  36 588 151 309 339  90 121 301 490 504
 524 238  78 436 250 428  26  29 293  47  43 356 269 492 406 554  45 380 506 645 203 656 249 511 468 283
  15  52 384 478  44 291 498 441 286 229 586  81 570 353 518 338 659 657 584 206 180 421 210  57 395 268
 330 336 300 334 365 342 374 470 340 311 280 331 290 354 231 326 345 271 306 388 594 298 337 352 267 329
 319 299 285 277 272 323 324 297 349 318 304 307 314 328 676 292 279 346 322 266 587 273 234 327 305 578
 572 189 173 278 592 274  95 138 157 631 263 186 632 624 122 302 508 116 623 143 453 245 390 439 368 288
 668 397 609  54 465 424 638 429  21 522 458 482 172 544  91 618 207 566 373 529 106 462 228  25  24  18
 217 261 171  85 475 636 673 433 112  41 466 565 113 379  14 642 489 208 639  35 481 393 479  75 243 476
 169 463 427 670 128 136 407  20 637 651 665 320 480 170 358 505 222 303 195 155 211  32 650 613 197  17
 658 185 363 181 417 550 123 590 620 194 201 200 124 257 260 487 477 168 589 111  10 332 371 649 653  31
 386 223 315 540 552 259 538 241 242 521  66 166 666  42 167  96 409  72 383 634  69 626 199 564 394 431
 214 494 652 118 316 360 102 391 484 258 370 135  40 646 413 146 512 599  49 254 535 117  73 418 585 520
 483 598 563 154 496 455 275 445  22 165 543 287 442 410 295 452 270 434 419 104 191 517 105  27 140 509
 235  19 205 220 341 142 655  71 527 601 192 361 264 253 603 444 164 548 422 612 627  61 616 163 416  39
 611 546 215 661  55 514   3 467 528  51 545 557   1 134 209   7 628 158  63 583 643 559 240 604  58 161
 382  70  11 178 629 513   5 539  82 507 366 608 357 569 633 335 183 495  12 130 654 472  34  92 459 486

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.00527e+07us (= 10052.7ms, 10.0527s)
Satisfaction error: 4
Number of search iterations: 4109
Number of local moves: 3399 (including on plateau: 3350)
Number of local minimum: 28 (including on plateau: 394)
Number of resets: 0
Number of restarts: 0

Problem in row 7: 68 232 125 474 369 237 531 516 83 355 236 575 182 469 414 667 119 381 251 523 153 488 447 107 411 64 => the sum is 8477 rather than 8801
Problem in row 8: 255 144 244 460 606 582 364 294 216 120 622 641 133 38 129 448 605 533 501 359 213 109 607 239 493 227 => the sum is 9182 rather than 8801
Problem in row 12: 524 238 78 436 250 428 26 29 293 47 43 356 269 492 406 554 45 380 506 645 203 656 249 511 468 283 => the sum is 8415 rather than 8801
Problem in row 17: 668 397 609 54 465 424 638 429 21 522 458 482 172 544 91 618 207 566 373 529 106 462 228 25 24 18 => the sum is 9130 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 156 521 474 201 283 226 669 106 292 198 565  21 174 249  70 362 282 667 614 307 636 501 455 214  88 470
 209 151 531 190  83 287 651 234 612 129 354 483 674 297 281 654 488 309  64 492  28 672   3 232 169 524
 419 638 242  23 619 556 293  72  80  19 207 639 589 489  40 239 668 600 420 345  25 624 191 512  32 220
 245 427   5 274 490 485 123  94 587 563 620 500 469   8 112 324 171 252 125 558 179 371 577 175 611 456
 487 536 658 141  56   4 273 446 466  22 303 422 248 108 454 517 547 275 511 215 509 555 264 241 318 225
 127 394 388  93 340 102  39 147 583 495 601 453 665 606 196 551 314 462 460 103 110 258 385  46 397 486
  87 467 328 628 164 439 610 300 306 301 666 471  68 626 219 592 157 193 204 597 586  24  17 132 339 280
 623 491  45 260 218 432 510 160 227 142  59 566  44  51 538 224 290 296 493 391 660 430 437 553 461 200
  89 675 581 259 416 549 269 527 323 554 647  75 468 582 185 423 652  53 285  57 231  66 358  49 327 101
 152 335  58 659 494 526 499 355  95 593 100 640 299 294 401 253 295  76 334 641 481 604  99   1 390 602
 428 613 221 415 177 320 627 424 400 421 116 173 378 408 133 370   7 435 117 407 205 449 656  86 448 367
 246 364 465 379 514  63  36 475 543 630 332 673  15 441  62  41 635 372  60 211 425 202 172 496 569 380
 349 347 363 357 338 344 399 342 352 351 311 313 348 374 337 360 333 325 503  73 404 373 341 184 382 298
 478  34 568 585 272 402 356 353 243 316 167 520 369 346 617  92 598 212 199 578  29 244 542 317  54 310
 304 187 539 664 109 182 411 291 457  14 504 286 365 429 257 126 655 195 263 418 277 162 261 599 643 203
 502  42 473 609 445 594 498 644 387 436 482 163 111 254 368 472 216 396 180  47  91 302 336 516  82 155
 528 584 238 440 413 247 562 114  74 262 115 544 158 144 381 250 276 523 235 230 197 389 615 505 161 616
 251 229 383 459 670 414 134 605 213 608 525 135 145 181 366 662  78 637 663  71 178 270  85 653 176  10
 403  27  90 479 452 625 433 671 240 513 458   2  12 150 507 530  20 451 329 532 361  31 288 484 575 138
 279 322 137 143  18 120 384 618 463 573 128 206 629 447 444  67 289  55 377 398 596 657 603 443  13 392
 580 561  43 267 590 308 136 233 149 217  35 268 265 588 560 434 545 537 170 188 139 506  84 649  37 122
 645 228 676 529  79 650 159  50   9 186 331 168 519 571 166  33  52 508 576 622 559 113 567 417 497   6
 476 124 621 237  81 550  11 223 564 140 315 546 393  61 376 359 410  16 518  30 533 442 284 266 634 591
 319  26 326 118 579 192 104 464 375 534  48 350 552 153 648 105  97 572 574 412 278 183  69 661 540 522
 321 256 194 271 646  77 405 312 119 189 386  38 406 409 450 631 131 148 431 330 477 165 632 305 515 557
  98 222 154 121 255 107 210 541 642 395 426 146 438 535 633 130 595 236  96 548 607 208 480  65 343 570

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00002e+07us (= 10000.2ms, 10.0002s)
Wall-clock time (full program): 1.00538e+07us (= 10053.8ms, 10.0538s)
Satisfaction error: 4
Number of search iterations: 5507
Number of local moves: 4313 (including on plateau: 4263)
Number of local minimum: 66 (including on plateau: 550)
Number of resets: 0
Number of restarts: 0

Problem in row 10: 152 335 58 659 494 526 499 355 95 593 100 640 299 294 401 253 295 76 334 641 481 604 99 1 390 602 => the sum is 9276 rather than 8801
Problem in row 21: 580 561 43 267 590 308 136 233 149 217 35 268 265 588 560 434 545 537 170 188 139 506 84 649 37 122 => the sum is 8211 rather than 8801
Problem in row 22: 645 228 676 529 79 650 159 50 9 186 331 168 519 571 166 33 52 508 576 622 559 113 567 417 497 6 => the sum is 8916 rather than 8801
Problem in diagonal 1: 470 169 512 577 555 110 597 493 53 295 370 62 374 369 286 482 262 213 671 384 308 79 237 326 256 98 => the sum is 8608 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 676 113 650 421 130 398 647  51 496 251 409 148 262 666 663 234  93  14 564  84 540 125 152 287 147 580
 560 643 610 247 607 597 554 158 231  90 197  50 411 583 640  70 132 245 232  31  16 211 537 195 655 299
 501 598  85 494 236 264 164 581 154 191 108 489 126 188 530 271  32 215 491 520 486  60 611 604 146 656
 183 617 632 477 300  44 547  28 634 620  59 268 533 499 474 139 142   6 442 601 599 156 277 134 185 205
  53 434   3 637 558 233 619 592  29 222  38 260 276  68 460 212 348 286 609 596 173 593  52 638 383 429
 150 645 505 642 467 167 672  24 288 280 463 588  78  97 223 480 294 544 464 168 227 381 163 274 346 171
 303 579 224 181 144  71 495 416 136 563  35 124 115 594 244 506 193  83 129 615 513 543 556 455 418 566
  89 330 290 220 426 101   9 484 249 508 652 462 578 317  37 485 590 389 297 602 397 519 198 179 128 265
 628 281 466 269 636 241 504 394 465 176   7 623 357 186 182   5 458 430 131 433 549 149 166 557 436  72
 461 531 548 478 532 135 240  36 384 239 449 408  20 275 263 431 414 439 635 293  11 448 415  64 552 100
 259 151 447  82 237 311  79 228 413 399 618 454 425 190  34 221 382 646 534 529 568 453 298 347  61 435
 385 390 368 420 116 407 170 471 428 379 586 387 127 490 333 123 393 509 395  26 366 323 378 373 372  86
 351 316 310 377 339 364 332 321 376  87 324 365 352 367 355 337 344 410 331 304 370 362 361 343 328 375
 349 302 334 371 308 320 319 272 342 295 360 369 338 326 309 353 359 363 318 350 510 312 327 356 325 314
 622 405 313 561 172  45 498 665 545 473 322  47 613  25 341 216 267 459 354 391  88 282  62 423 479 133
 335 253 307  58  39 507 329 315 538 661 358 551 345  27 539 403 102 291 440 654 243 252 238 503 230 283
 502 229 161  19 214 475  12 574 386 192 526 137 107 246 217 546 250 419 443  46 653 664 497 575 630  81
 235 417 208 141 673 438 441 273 218 203 523 424 213 644 481 119 122 225 279 196 406  23 603 412 396 488
 446 209 140 614 392 621 284 482  49   8 437 278 641 674 456 451 511 159 194 270  69 422 432   1 157 404
 155 445 468 187  54 667 177 199 612 541 105 669 200 600 305 178 266 169 110 204 400 184 658 160 472 616
 518   4 292 402  95 527 118 648 114 536 111  76 476 559 106 528 180 521 165 470 145 301  22 626 515 582
  94 285 380 595 573 555 577 569  96 562 572 219   2 109  13 289 659 585 517 112 210 175 576 248  57 336
 627  99 584  80 374  92 201  75 662 657  56 189 500  43 625 550 522  73  18 542 143 589 138 255 591 516
  91 450 120  63 651 452 492 257 608 104 493  48 483 242 668 675 649 660  21 631  33 444 256  15  74 121
 162  10 258 469 487 202  67 117 306  40 388 535 553 261 226 639 587 606  17 103 457 624 401 207 565 514
  66  65  98 296  41 567 254 571  42 524 605 633 670 525  77 340 512  55 671  30 629 206 427 570 153 174

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0001e+07us (= 10001ms, 10.001s)
Wall-clock time (full program): 1.0053e+07us (= 10053ms, 10.053s)
Satisfaction error: 2
Number of search iterations: 3979
Number of local moves: 3254 (including on plateau: 3203)
Number of local minimum: 39 (including on plateau: 356)
Number of resets: 0
Number of restarts: 0

Problem in row 21: 518 4 292 402 95 527 118 648 114 536 111 76 476 559 106 528 180 521 165 470 145 301 22 626 515 582 => the sum is 8637 rather than 8801
Problem in row 22: 94 285 380 595 573 555 577 569 96 562 572 219 2 109 13 289 659 585 517 112 210 175 576 248 57 336 => the sum is 8965 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 674 192 649 575 475 151 119 162  43  65 641 117 647 167 544 185 353  77  36 408 367 494 321 355 340 644
 267 178 219 169 507  23 587  45 531 565 666  14 527 497 539 230 458  18 585 484 126 496 406 152 183 329
 464 405 330 100  54 623  62 632 135 550 216 241 139 612 431 218 624 592 526 272  15 115 150 605  70 620
 240 456 492  57 673   9 490 112 671 634 374 177 184 306 105 608 451  96  64  74 400 180 577 170 667 534
 110 111 231  47 309 582 211 563 478 472 566 442 207 543 114 157 197 590 489  49 394 553  66 379 525 416
  48 631 164 435 336 658  94 626 640 144  42 276   3 121 344  98 518 210 165 425 522 616 280 535 259 611
 254 248 556  58 366 287 572 140 395  87 516  67 191  73 602 486 204 263 473 517 588 554 629 253 222 200
 584 422 449 113 232  72 533 509 393 131 186 597 407 220  90 107 600  34 627 268 625 132 453 560 236 221
 540 510 331 519 304 203 217 515 278 122  17 145 227 462 335 317 244 439 271 125  24 467 506 538 599 546
 402 595 504 264 480  38 229   4  83 461 487 645 561 274 606   1 417 499 551 410 161  95 447  53 396 138
 381 205  85 593  63 286 643 455 578 520 470 514 387  60 414 389  61 320 411 479 239 134 124 656 501  76
  41 181 363 392 429 376  46 368 383 346 401 415 377 384 372 325 362 397 328 348 365 361 404 350 318 369
 421 630 201 454 250 555 463 413 133 426 130 508 315 360 352 444 370 299 120 503 270 423  44 190  68 459
 307 345 338 619 324 314 323 420 302 357 308 349 246 255 541 351 327 333 141 358 295 313 301 334 412 288
 651 316 460 213   6 500 214 375 312 603 618 233 437 284 482 265 438 129 247 109 483 319 243 511  78 275
 311 103 552 364 523 285 399 175 488 163 297 128 548 443 337 102  20 571 391 558 576 224  22  84 568 569
 226 607 386 652 260 223 672 292 300 273 252 609 628  21 537 465  82 326 398  93 583 173 174 347 116 106
 256 676  59 196 245  75  31 419 289 238 378  92 153 637 137 661 193 446 290 580 199 657 650 215 536 493
 209 476 591 498 385 172 294 469 158 468 433 567 182 502  10  19 208 225 261 293 445 166 564  88 258 617
 653 108  28 322 277 545  12 118 257 249  56 189 452 532  13 642 662 382 659 621  80 450 187 491 614 202
 156 557 668 448 646 154 427   5  37 237  50 663  71 594 104 269 570 664 195  79 296 648 143 212 474 434
 574 146 424 194 136 622 495 242 147 669  89 310 654 660 586 279 101 171  55 549 343 339 547 432  30   7
  33 418  32  52 441 485 127 356 635 332 524 505  97 440  29 529 573 530  40 206 409 188 403 633 303 481
 675 160  51 610  91 457 359 589 388 354 282  99 665 159 390 579 291 471 615  16 512 155 281   2 542   8
  26  86 613 380 430 436 601 142 598  69 198 528 262 168 148 513 466 638 521 341 179 373 283 428 251 123
 298  39  25 477 559 670 581 655 149 266 604 371 234  27 639 562  11  81 342 636 305 176 596 228 235  35

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.0048e+07us (= 10048ms, 10.048s)
Satisfaction error: 2
Number of search iterations: 3783
Number of local moves: 3161 (including on plateau: 3110)
Number of local minimum: 31 (including on plateau: 363)
Number of resets: 0
Number of restarts: 0

Problem in row 11: 381 205 85 593 63 286 643 455 578 520 470 514 387 60 414 389 61 320 411 479 239 134 124 656 501 76 => the sum is 9044 rather than 8801
Problem in row 19: 209 476 591 498 385 172 294 469 158 468 433 567 182 502 10 19 208 225 261 293 445 166 564 88 258 617 => the sum is 8558 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 606 133 354 654  13 480 612 303 245 324 235 564 195 282 522  66 650 412 352 173  97 164 470 168 469 258
 149 239 141 336 250 623 495  32 456 556 437 312 540 627 589 406 413 278 496   4 204 274   3 207 138 596
 153 189 139 501 427   9  33 538 107 646 652 431 457  21 655 276  14 124 571 605 635 156 345 672 147 298
 214 394 583 177 319 161 487 429 315 610 109 499 584 608   1 213 488 104 597 658 257 240  87 557  29  81
  27 434 185 554 136 566 651 489 647 131 585  42 212  24 560 673 302 364  17 127 404 186 369 524 248 344
 171 664  52 535 405 226 142 251 587 513 525 123 175 349 216 322  20 475 573 454 151 372  51 521 444 484
 506 275 103  53 594  88 116  41 113 546 105 152 545 115 217 407 183 537  65 227 498 617 648 494 367 674
 645 518 368 339 503 408 416 296 114 219 178 670  84 662  10 581 424 392 241 196 237  61 669 112 238 220
 321 527 593 358 265  91 294 631 206 316 172 398 607 202 590 450  44 215 179 231 507 504  95 568 338  99
 385  63  86 197 307 158 477 209 254 263 174 286 665 242 350 111 676 438 511 534   7 639 191 490 474 614
 176 271 531 464 553 439 181 357 281  85 382 472 279 500 144   2 510 328 291 343 160 288 375 380 588 421
 205 146 482 526  69 363  75 283 493  22 101 190 570 326 379 600 188 448 595 552 285 530 555 289 481  48
 293 313 436 256 542 371 476 414 198 268 193 440 287 267 425 376 460 361 387 249 290 396 320 201 305 277
 365 409 399 417 273 374 310 430 108 386 649 284 269 301 295 393 355 157 402 377 342 390 335 211 169 401
 351 341 233 167 180 308 397 366 626 453 528 442 323  39 370 563 297  37 353 348 419 410 391 329 473  57
 121 106 449 644 360 586 134 117 252  31 550 224 418 403 446 395 637 628 210  49 378   8 483  18 668 486
 317 337 243 154 543 441  50  19  83 325 126 629 272 533 663 549 330 516  74 468 561  72 163  54 640  25
 314  68 246 100 602 223 192 509 423 497 625  77 572 200 362 432 150 422 578 236 433 225 383  23 332 491
 462 624 621 244 318  62 327 443 641 532 609 548  59 547  55 333  16  71 580  73 118 638 159  76 230 415
 260 539 373 187 411  80 300 567 102 577 455 400 340  67 576 642 551 458  35  64 603 618 452  46  40  58
 536 122 137 199 451 389 611 388 630 208 445  78 143 334 135 255 140 148 466 505 299 203 306 634 435 604
 660 266 666 381  89 592 591 120 619  96 129 569 598  90 346 247  11 356  43 270 130 565 465 384  47 471
 463 234 259 512 128 616 261 574  94 426 253 671   5 420 125 182 659  98 309 218 675 221 601 222 311 264
 155 575 562 194 428 492  93 622  34 559  60  15 520 514  79   6 636 529 292 661 502  12 162 517  38 544
 615 667  82 582  36 170 467 228 632  28  45 166  56 620 232  92 515 262 280 523 579 359 165 657 633 110
 331 347 478  70 599 485 613 145 541 184 479 119  26 508 459 229 132 643 304 656  30 653 558 447 519 461

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.00532e+07us (= 10053.2ms, 10.0532s)
Satisfaction error: 4
Number of search iterations: 3421
Number of local moves: 2789 (including on plateau: 2740)
Number of local minimum: 26 (including on plateau: 362)
Number of resets: 0
Number of restarts: 0

Problem in row 7: 506 275 103 53 594 88 116 41 113 546 105 152 545 115 217 407 183 537 65 227 498 617 648 494 367 674 => the sum is 8286 rather than 8801
Problem in row 17: 317 337 243 154 543 441 50 19 83 325 126 629 272 533 663 549 330 516 74 468 561 72 163 54 640 25 => the sum is 8187 rather than 8801
Problem in row 18: 314 68 246 100 602 223 192 509 423 497 625 77 572 200 362 432 150 422 578 236 433 225 383 23 332 491 => the sum is 8715 rather than 8801
Problem in row 26: 331 347 478 70 599 485 613 145 541 184 479 119 26 508 459 229 132 643 304 656 30 653 558 447 519 461 => the sum is 10016 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 257 562 166  22 252 597  91  47  38  10  85 308  28 464 126 155 275 199 141 201 300 656  19 330 573 393
 233 209 322 543 672  64 128 180 553 262 217 620 563 549 145 136  53 265 456 574  29 442 631 303 625  27
 273 260 671 545 626 644 224 138 410 614 147 160 584 114  93  35 119  92 420 485 587 122  78 592 575 193
 264 511 637 602  74 182 524   8 170 123  24 504  70 514 623 432 542 541 125 212 546 168 538 133 235 499
 104 619 101 258  86 670 434 171 622 353 339 413 436 616 665 462  99 638 213 621 287 578 567 530 525 577
 338 134 380 444  25 471 461 601  18 312  87 607 117 435 343 356 552 443 371  49 516 392   6 334 376 633
 248 576 243 401 405 143 520 547 158  34 232 503 381  79 295 441 643 266 608 492   7  51 412 447 489 379
 586 113 183 221 159 427 641 599 100 519 669 130 561 595 365 388 150 177 605   2  69 663 515 391 551  90
 428 488 500 467 469 452 236 468  84  15 517 523 423 284 458  43 440 475 278 398 629  73 286 132 196  39
 472 298 406 216 484 208 242 451 460  63 294   1 433  52 580 582 394 429 399 220 422 470 407 439 139 240
 121 528 389 424 487 555 581  41 290 367 536 585  62 223 531 421 660 350 291 129 187 107 148 197  31 560
 417 416  75 360 372 377 364 648 383 346 425 359 370 319 282  11 361  89 409 336 301 355 335 337 357 397
  44 366 572  54 203 307 331 292 157 219 473 285 518 491 521 189 241 103 540 251 655 612 288 185 645 259
 606 387 566 115 124  58 149 402 593  71  88 246 329 438 267 507 483 583  36 362 474 302 465 453  97 600
 675 676 146 304 344 313 283 164 603 459 358 317 293 548 204 630 363 112  13 227 316 347 325 498 271  12
 153 296 369 654 534 239 192 237 215 320 309 341 640 156 276 349 565 478 559 108 311 297 247 140 502 314
 533 254  30 310 646 634 526 652 245 277 494 165 206 151 431 657 229 659 486 390 466  37 509 318 430 403
 408  65 476 218  94 269 437 234 176 532 628 479 207 642 415 191 195 175  26 632 250 135 647 527 368 375
 661 154 589 627 352 186 611 106 321 558  72 172 455 214 457  16 261 496 327 446 179 280 167 571 178 345
 190  45  83 480 404 144 198 564 332 639 636 414  81  42 613 579   3 396 202 326 537 568 211 535 184 395
 173 495   4 142  98 169  66 274 556 666 522 305 615 333  23 557 550 596 188 658 162 118 163  48 116 450
 590 127 306 506 137 385 111 512 635 604 120 354 255 662   9 426 342 378 228 544 510 351  50 244 263 152
 382 230 256 105 591 508 617 315 328 384 174 594 272 102 569 323 598 268  67  59 445 205 539  60 588 222
 493 650 194  76 279 463 324 668  14 109 570  56 664 289 200 609  55 481 649 249  46 400 477 225  32 529
 131  61 513  33 653 226 505 386 667 497 374  20 161 449  57 238 418  17 554 348  80 454 270 181  82 299
  21 281 624 674 231 110   5  96 673 448 411 340  77  40 253  68 210  95 610 482 490 618 501 651 373 419

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00023e+07us (= 10002.3ms, 10.0023s)
Wall-clock time (full program): 1.00556e+07us (= 10055.6ms, 10.0556s)
Satisfaction error: 7
Number of search iterations: 3128
Number of local moves: 2621 (including on plateau: 2576)
Number of local minimum: 27 (including on plateau: 303)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 257 562 166 22 252 597 91 47 38 10 85 308 28 464 126 155 275 199 141 201 300 656 19 330 573 393 => the sum is 6295 rather than 8801
Problem in row 5: 104 619 101 258 86 670 434 171 622 353 339 413 436 616 665 462 99 638 213 621 287 578 567 530 525 577 => the sum is 10984 rather than 8801
Problem in row 7: 248 576 243 401 405 143 520 547 158 34 232 503 381 79 295 441 643 266 608 492 7 51 412 447 489 379 => the sum is 9000 rather than 8801
Problem in row 8: 586 113 183 221 159 427 641 599 100 519 669 130 561 595 365 388 150 177 605 2 69 663 515 391 551 90 => the sum is 9469 rather than 8801
Problem in row 17: 533 254 30 310 646 634 526 652 245 277 494 165 206 151 431 657 229 659 486 390 466 37 509 318 430 403 => the sum is 10138 rather than 8801
Problem in row 21: 173 495 4 142 98 169 66 274 556 666 522 305 615 333 23 557 550 596 188 658 162 118 163 48 116 450 => the sum is 8047 rather than 8801
Problem in row 25: 131 61 513 33 653 226 505 386 667 497 374 20 161 449 57 238 418 17 554 348 80 454 270 181 82 299 => the sum is 7674 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 452 551  89 672 206  84 485 559 670  26 667 528 150 243 112 462  15  75  91 120 466 608 298 272 264 636
 421 228 373 173  40 353 456  98 494 241 126 620 602 169 634 425 204 319 584 301 195 392  50 635 638  30
 499 212 294 430 560 386 478 180 571 381 123 165 515 338 235 287 624 400 200 248 201 143 352 486 215 278
 522 168 151  96 260 637  92 238  51 383 397 598 221 255 356  65 197 172 628 115 633 646 587 666  74 593
 585 114 510 572 537 671 351 261 547 468  48 148 183 656  78 553  41 258 170 447 592 570 160 192  37  52
 237 653 210 504  32 479 280  34   9 254 274  14 217 337 497 488 565 545 611 211 549 501 368 525 268 139
 600 135  76  33 364  93 429 127 251  88 576 502 519 529 198  85 107 489 454 506  46 374  59 375 640 578
  23 282 567 239 626 609 326 130 147 110 467 604  95 561 438  28 663 450  13  29 535 445 411 141 389 473
 490 474 181 216 449 288 249 487 491 471  61 149 214 138 104 566 652 442 229 605  39 305 297 119 440 645
 505 552 543 100 329 193   4  86 496 196 533 269 129 595 436 388 407 371   8 583 414 413 564 231  24 432
  73  68 199 433 603 530 668 194 612 641  35 156 365 175 508 427 289  58 435 233 140 266 531 534 446 182
 256 310 188 390 136 184 391 639 396 563 377 380 146 606 318 629 219 393 417 523 240   6 361 102 401 230
 399  27 424 410 225 350 395 470  43 408 372 366 354 331 332 359 363 339 387 346 313 315 335 455 367 316
 357 307 344 320 362 306 292 262 286 342 378 369 317 347 325 327 276 615 328 295 343 500 281 273 340 309
 285 673 647 155 291 554  56 314 152 575 312 311 527 334 539 324 476 483 226   3 348 234 321  10 579  72
 511 513 398  18 621   1 654 105 257 341 275 415 465  11  20 290 208 191 186 189  54 232 420 355  67 649
 246 444 247 618  57 495 308 524 469 222 144 655 582 632 580 669 630 664 111 642 244  69 121 302 507 577
 627 437 574 271 651 205 573 384 227 623 475 224 643   2 162 252 385  94  80 419 253  55 625 153 187 220
 174  77 402 428  53  44 493 250 644 154 422 484 426 406 660 132 661 464 674 185 122 509  97 423 284 133
  99 498 613 617 209 333 178 594 124  42 176 481 137 113 607 218  49 163 610 520 659  21 518 418 614 190
 202 376 591  19 514 118 213 526 167  22  25  66 492 441 412 482 177 267 568 555 263 179 648 550 546 382
 134  87 304 650 142 581 279 538 394 665 503  16 358 460   7 109 443  63 125 166 512 562 477 349 541 336
 434 360 540  47 459 103  17 675 416 158 622  31 101 457 480 588  70 597 451 404 589 293 296 157 409  12
 116  79 108 569 616 259 544 405 453 516 265 242 299 159 270 207  81 548  60 657  62 596 458 330 283 619
 448 590  83 521 223 403 245 557 131 379 631 472 662 461 171  71 323  64 599  36 558 439   5  90  38 601
 106 586 145 300 236 542 345 164 303 532 517 536  82  45 322 370 676 277 556 463 431 128 161 658 203 117

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00009e+07us (= 10000.9ms, 10.0009s)
Wall-clock time (full program): 1.00528e+07us (= 10052.8ms, 10.0528s)
Satisfaction error: 4
Number of search iterations: 3229
Number of local moves: 2719 (including on plateau: 2669)
Number of local minimum: 27 (including on plateau: 282)
Number of resets: 0
Number of restarts: 0

Problem in row 7: 600 135 76 33 364 93 429 127 251 88 576 502 519 529 198 85 107 489 454 506 46 374 59 375 640 578 => the sum is 8233 rather than 8801
Problem in row 16: 511 513 398 18 621 1 654 105 257 341 275 415 465 11 20 290 208 191 186 189 54 232 420 355 67 649 => the sum is 7446 rather than 8801
Problem in row 17: 246 444 247 618 57 495 308 524 469 222 144 655 582 632 580 669 630 664 111 642 244 69 121 302 507 577 => the sum is 10759 rather than 8801
Problem in row 23: 434 360 540 47 459 103 17 675 416 158 622 31 101 457 480 588 70 597 451 404 589 293 296 157 409 12 => the sum is 8766 rather than 8801
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 136 local moves
Selected variables are frozen for: 0 local moves
68 variables are reset when 136 variables are frozen
Do a restart each time 676 resets are performed
############
Solution:
 473 252 124 203  61  22 624 376 382 623 166 606 448 427 305 480 556  79 430 602 634 233 263 232 276 159
 134 579 492 576 488 168 573 649 575 531 167 663 563 173 133 508 193 422 566 250 587  83 215 594 615 479
  84 327 564 163 360 645 272   4  70 636 314 144 526 570 626   7 180 261 503 466 202 498 320  97 342 620
 363  99 115  52 172 647 671 297 182 197 639 253 248 231 470 529 332 130 331 238 548 635 569 315 119 419
 581 301 200  57 102 246 424 308 583 598 637  80 278 135 344  13 651 534 149 614 216 329 181 471 228 541
 449 392 265 670 241 324 436 446 208  28 504 472  51 572  10 206  73 325 137 220 346 440  19 658  18 190
 245 118 675 270 557 527 519 375 366 542 540 224 412 612 565 653 507  31  30 553 558 227 627  76 195 642
 610  96 273 676 413 199 106 571 648  39 323 585 616 283 213 142  45 437 229  69 387 431 374 393  34 609
 630 596  87  92 352 416 148  15 211 334 275 611 544 123 486 666 370 578  66 538 450 209  25 539 141 299
 405  21 243 543 461 295 257  65  50 318  41 398 654  38 661 338 434 284 421 452 251 377 464 364 441 525
  48 674 160 214 417 410 404 259 429 605  93 290 112 664   9 418 184 150 282 423  94 672 454 530 420 386
  71 408 399 378 444 394 204 362 368 348 396 223 384 356 389 350 373 385 379 341 345 445 319  53 381 306
  95 128 186 618 174  37  36 442  43 271  47 621  60 146 129 312 496 632  14 528 608 247 266 262 537 210
 100 439 192 660 617 372 601 515 189 143  58 487 322 453 577  11 330 354 336  85 138  55 646 506 294 321
 225 433 147 291 643 465 400 628 604 358 438 237   3 512 432 104  27 260 560 255 289 254  81 513 516 126
 595 152 588 281 236 591 511  64 460 153 326  88 619 221  82 279   6 110 631 667 522 309 495  26 409 380
 668 443 510 536 196 317  67 205 447  46 296  35 201 367 468 428 207 655 467 111  49 391 462 240 532 457
 109 288 474   8 157 517 535 499 489  44 313  68 162 285  24 505 407 397  32 249 403 310 388 131 485 120
 156 155  23 264 589 549  98 194 222 482 491 567 161 662 337 183 493 497 656 154  56 500 335 140 607 230
 340 478 456 359 302 509 187 175 234 426 490 365 351 458 218 552 198 103 127 353 316 349 523 139 219 574
 659 239 383 481  29  40 274 268 665 304 593 559 371 178 235 121 533 597 136 547  75 550   5 551 217 191
 176 545 641 125  62  91 514 328 355 555 483 177 158 638 307  63 640  20 644 298 435  78 502 406 101 459
 554  89 361 451 521 287 122 613 524 170 333 277 484 107 411 267 114 293 116 343 520 165 590 463 657  77
 212 402 395 347 242  90 600 369 185 475   1  17 117 105 311 586 592 546 494 401 652 425 188 633 179  33
 258 629 562  72 673 584 164 603 226 501 269 622 357  16 390 625 280 244 650  42  12 113 339 169 256 145
 561 518 286 414 292  59  54 171  86  74 568 132 599 469 669 455 580 477 415   2 108 476 151 300 582 303

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00024e+07us (= 10002.4ms, 10.0024s)
Wall-clock time (full program): 1.00547e+07us (= 10054.7ms, 10.0547s)
Satisfaction error: 8
Number of search iterations: 3158
Number of local moves: 2648 (including on plateau: 2603)
Number of local minimum: 29 (including on plateau: 327)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 473 252 124 203 61 22 624 376 382 623 166 606 448 427 305 480 556 79 430 602 634 233 263 232 276 159 => the sum is 9036 rather than 8801
Problem in row 2: 134 579 492 576 488 168 573 649 575 531 167 663 563 173 133 508 193 422 566 250 587 83 215 594 615 479 => the sum is 10976 rather than 8801
Problem in row 6: 449 392 265 670 241 324 436 446 208 28 504 472 51 572 10 206 73 325 137 220 346 440 19 658 18 190 => the sum is 7700 rather than 8801
Problem in row 7: 245 118 675 270 557 527 519 375 366 542 540 224 412 612 565 653 507 31 30 553 558 227 627 76 195 642 => the sum is 10646 rather than 8801
Problem in row 13: 95 128 186 618 174 37 36 442 43 271 47 621 60 146 129 312 496 632 14 528 608 247 266 262 537 210 => the sum is 7145 rather than 8801
Problem in row 18: 109 288 474 8 157 517 535 499 489 44 313 68 162 285 24 505 407 397 32 249 403 310 388 131 485 120 => the sum is 7399 rather than 8801
Problem in row 23: 554 89 361 451 521 287 122 613 524 170 333 277 484 107 411 267 114 293 116 343 520 165 590 463 657 77 => the sum is 8909 rather than 8801
Problem in row 24: 212 402 395 347 242 90 600 369 185 475 1 17 117 105 311 586 592 546 494 401 652 425 188 633 179 33 => the sum is 8597 rather than 8801
