@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 618 663 191 665 466 354 479 494 474  60 337  36 706 198  91  70 282 516  35 430 401 597 585 262 205  44 596
 294  21 128 720 295 664 669 659 359  90  22 121  96  64 694 662  19  72 716 714 155 101 610 691 587 617  15
 699  88 133 622 280 154 639 350 701  26  83 719 646 666 333 378 264  34 190 472 273  20 375 446 693  14 557
 144 661 104 629 284 234 167 164 348 316 582 216 180 530 638 703 192 404 432  89 203 451 486 351 272 425 650
 678  32 598 527 633  46 285   5 457 717 723 160 232  85 109 368 671 641 174 339 227  24 640 148 215 529 592
 150 123 106 611 186 389 245 692 248 535  52 124 113 649 705 388 178 552 130 644  87 682 695 676 266 175 454
 554 482 163 426 439 218 729 595 707 261 182 249 223 322 151 586 107 675  10  99 247   8 470 313 341 697 601
 715 141 433 599 424 202 243 168 256 700 713 159  57 684 634 267 712 157 183 361 136 225 394 442  29 169 652
 211  43 240 445 197 577 532 724 656 194 252 314 455 609 539 228 188 281 728 210 166 250 311 603 242 226 434
 206 271  23 483 306 533 329 605 509  27 369 384 235 291 209 296 177  63 453 358 199 709 674 623 450 495 578
 299 152 204 490 722 214 367 681 238 522 513 364 320 518 420 289  37 413 572 260 253  55 484 626 161 332 349
 607 660 371 411 189 556 613   6 670 395 132 220 488  77 300   1   7 704 677 615 414 207 288  42 503 485 217
 276 120 338 440 193 399 323 298 365 258 270 540 564 461 335 303 317 487 727 362 321 374 208 416 221 286 653
 405 201 460 667 327 319 344 407  62 402 493 360 334 259 383 244 302 465 265 312 315 331 702 419 409 287 381
 277 246 400 254 184 233 507 417 698 391 517 269 353 392 422 390 547 257 236 385  86 647 396 718  66  98 469
 309 519 373 146 508 372 386 196  80 478 654 452 410 477 352 423 119 471 114 428 538 418 468 173 379 537  75
 308 531 628 387 293 377 502 143 448 325 153 357 382 139 342 441 528  53 491 421 589 355  39 172 456 558 437
 305 268 444 181  25  49 427 366 548 567 584 476 632 274 711  11 462 725  47 297 561 563 283   3 429 380 237
  65 512 436 292 501 575 330 176 187 347 224 581 231 721 346 447 489 406  16 580 525 398 307 255 524 328  56
 560 559 376 110 443 504 200 616 555 631  28 449 523  81 343 514 112 459 511  61 541 336 171 229 549 310  84
 510 520 683  17 179 668 162 279 122 170 621 492 412  69  40 604 566  30 526 588 397 619 345 534  79 496 127
  92 590 602  12 685  58 129  67 117 499 222 481 290 690 213 624 606 544 100 515 326 438 648 158 403 673  73
 463 134 608 105 370 579 568   2 137 551 574 356   9 521 230 408 569 612 630 140 500 115  13 431 562 393 275
  68 546 506 318 498  41 165 340  74 301  59 550 553 131 708 643 565 263 571 251 627 591  38 142  48 570 688
 473 625  76  31 147 710  33 573 156 241 239 679 658 593  95  54 655 304 363 696 642   4  71 542 614 536  45
  94 458 637  82 505 195 464 212 545 726 657 636 645 219 415  78 687 149 278 102 543 686 103 116 480  50  93
 475 689 594 185 576 635  18 620 138 125 600 111 108 135  97 435 497 118 680 126 583 651  51 324 672 145 467

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.39622e+06us (= 8396.22ms, 8.39622s)
Wall-clock time (full program): 8.44184e+06us (= 8441.84ms, 8.44184s)
Satisfaction error: 0
Number of search iterations: 3818
Number of local moves: 1372 (including on plateau: 577)
Number of local minimum: 334 (including on plateau: 75)
Number of resets: 2
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 695 109 100 273 240  25 110 145  64 656  74 557 716  62 679 602 270  47 600 136 652 720 688 394 117 475 649
 532 120 728   2   1  43 589 207 399 707 433  32 726 614  52 670  37 182 581 393 400 514 128  38 605 479 643
 594  70 343 711  26  30 521 195  22 496  51  21 193 138 606 619 257 722 674 185 694 661 530 597 223 558 118
 682  86 687 359 636 289 237 654 162 105  77  58 255 378 700 348 140 123 537 130 489 141 566 719 139 610 548
 698  96 173  69 693  71 111 411 599 190 102 131 671 714 667 327 210  89 669 199 363  83 395 196 672 677 579
 650 167 483  81 129 725 153 680 279 459  60 253 186 624 149 723 211 333 666 124 380 360 501 668 235 396 180
 655 313 585 236 414 216 197  33 350 684  23 533 137  55 283 317   6 184 508 648 727 724 696 381  45 692 213
 539 160 706 152 625  79 549 119 306 218 263 243 164 702 403  88  94 121 689 323 504 729 509 553 281 555 181
 564  31 513 245  24 678 126 651 709 527 697 220 192 584 133 276 206 214 371 174 699 106 554 248 194 345 574
 582 571 304 277 458 203 274 314 288 347 286  61 189 543 155 146 444 715 365 640 547 721 256 108 275 588 198
 250 390 166 387 294 200 413 462 718 204 267 436 296 187 272 239 717 209 446 402 285 351 493 312 326 705 428
 492 455 328 386 481 346 233 217 178 228 495 372 506  66 415 460 290 284 474 686 170 376 562 260 298 221 576
 280 287 349 238 321 708 634 335 332 302 299 339 311 520 498 370  20 467 511 232 488 175 202 412 334 373 518
  15 451  87 681 645 502 259 429 559 340 465 408 546 265 316 252  12 264 367 337 229 357 421 463 388 341 456
 142 127 226 374 484 308 637 362 329 366 500 419 293 608 208 487 368 425 307 303 310 450 300 354 319 505 344
 439 441 331 231 568 491 383 401 305 470 466 353 426 234 356 526 457  14  97 404 665 249 673 358 431  40  46
 262 325 675 318 435 342 352 515  11 271 338 384 201 389 422 485 570 497 292 442 478 219 148 168 617 379 320
 246 486 627 528 663 355 375 268 615 125 635 407 443  34 540  63 494 104  41 437 183 406 261 473 490 241 315
 107 567 258 449  90 472 420 468 150 147 544 638 592  13 336 552 440 659 541 482  98  27 159 603 469 122 452
 278 519  84 385 266 224 609  28  16 536 622 613 517 522 590  75 430 461 578 633  91  42  92 499 621  48 476
  73 397 135 620  78 453  65 503 601 115 409 587 423 560 418 454 432 575  18 626 297 565 191 416 623 171  50
 295 618 410 525 144 382 158 103 424 657 611 438 644 161 364 163 534 176 324 330 143 477 247 165 683 169 510
  76 524 512 712 205 563 507 573 647 542 629 630 101 251 417  67 595 550  35 591  93  39 398  54 230 309   5
 593 653 516 269 523 639 156   8 391 377 607 154 434 448  99 561 569 471   3 369 244  29 577   4 447 179 535
  53 660  56 598 658 583 545 529   7  59 254 710 445 114  49 596 664 662  17 291  82 572  85 612 157 405 392
  19 646   9  36 642 701 691 641 690 632 580 242 116 538 427 212 685 676  10 113 222 282  72 172 556  57 188
  44 586 464 713 112 227 551 604 704  95  68 616 132 531 301 177 703 631 134 225 322 480 151 628  80 215 361

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.44645e+06us (= 7446.45ms, 7.44645s)
Wall-clock time (full program): 7.48772e+06us (= 7487.72ms, 7.48772s)
Satisfaction error: 0
Number of search iterations: 2520
Number of local moves: 944 (including on plateau: 308)
Number of local minimum: 208 (including on plateau: 39)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  54 120  88 523  55 639 698 251 668 277  34 721 683  14 680 638 607 611 159  23 172 652 137  98 226 615 412
 712 610 217 297  41  39  64  72 623 655 223 689 670  71 695 590 663 696 133 552 614  13 154   7  89   4 662
  58 672   8  85  28 690 646 430 594 631   2 637 191  20 536 492 580 620  36 548 151 516 275 105  81 587 636
 658  15   5 570  16 612 585 422  87 657  56 632 547  63 588 681 600 643  11 352 557  19  33 198 123 666 459
 647 626  12 556  21 529 642 142 227 561 200 592 517 339 554 542 477 562  68 464  77  17 279  59 143 559 443
 531  45 595 109 150  26 496 110 596 664   1 568 598 483 603 602 553 549  95  51 564 356  22  99  91 613 685
 682 569 490  43 220 604   6 112 504  18  97 533 579 551 435 450 593 515 116 451   3  38  67 583 535 521 540
 576 295 572  42 318 618 488  10 574 530  94 436 541  27 454 476 520 479 258  30 128 558 134 406 148 633 510
 527 544  32 101 326 526 571 100 232 403 194 468 560 466 301 502 563 524 289 180 218 495  48 589 389 441 266
 424 415 506 500 292 577 534 437 433 493 202 402 414 503 497 518 230  46 239 126  83 125 240 498 455 487 179
 458 539 427 489 379 486 385 350 405 478 102 457 439 448 408 221 460 501 107   9 507 229 195 315 407 550 104
 482 513 417 181 167 485 380  29 376 434 346 311 387 445 374 471 565 327 426 244 241 431 269 393 481 329 351
 359 224 364 462 330 382 371 491 336 316 416 341 345 377 282 357 332 378 397 394 381 366 446 362 317 361 368
 461 512 400 310 342 257 156 383 320 396 420 348 404 294 480 423 321 309 334 372 410 388 325 429 413 305 343
 308 465 447 340 398 363 263 691 201 314 298 304 375 338 442 365 307 360 367 273 700 319 390 254 250 271 452
 335 333 354 274 509 456 288 528 421 347 386 395 324 243 322 453 369 370 411 278 284 188 440 567 409 303 268
 428 328 259 438 546 425 235 723 302 353 722 209 267 205 331 234 627 349 473 432 248 276 418 190 215 147 475
 170 296 687 231 575 286 140 725 511 679 300 391 287 272 255 401 262 399 306 219 246 261 474 281 291 249 661
 193 625 463 283 519 323 236 581 260 256 586 211 192 280 373 165 290 173 609 706 384 313 651 247 499 253 184
 183 582 270 699 508 210 204 532 619 213 566 225 216 222 233 285 212 208 355 617 182 199 688 674 573 166 214
 158 161 337 673 538 175 656 677 264 124 667 242 252 177 207 169 237 144 716 358 444 629 684 163 621 196 186
 136 228 649  78 608  62 152 605 537 114 678 153  31 686 168  92 141 245 713 628 293 676 708 555 505 176 238
 312  76 641 591 344 705 118 635 299 174 584 160 139 545 185 178 115  80 525 135 669 659 522 693 164 138 469
 171 119 714 467 650 108 645 113 131 203 715 149 157 616 145 155  35  93 707 711 543 189 601 701 717 103 197
  40 162 702  75 630 146 127 578 130  47 624  69 606 724 187 132  25 449 599 265 597 644 470 660 419 704  44
  65 729 117 728 653  73  66  49  84 494 694  90  74 726  70  57  61  96 697 718 675 634 514 622 640 392  37
 727  52  82 710 692  53 703  79 121  24 648 122  60 720  50 206 111 129 709 719 484 665 671 106 654  86 472

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00033e+07us (= 10003.3ms, 10.0033s)
Wall-clock time (full program): 1.00446e+07us (= 10044.6ms, 10.0446s)
Satisfaction error: 2
Number of search iterations: 2895
Number of local moves: 1072 (including on plateau: 511)
Number of local minimum: 243 (including on plateau: 59)
Number of resets: 1
Number of restarts: 0

Problem in column 17: 607 663 580 600 477 553 593 520 563 230 460 565 332 321 307 369 627 262 290 212 237 141 115 35 25 61 111 => the sum is 9856 rather than 9855
Problem in column 24: 98 7 105 198 59 99 583 406 589 498 315 393 362 429 254 567 190 281 247 674 163 555 693 701 660 622 106 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 632 692  51 704 175  70  63  71 694  68 636 303  72  61 562  78 724 261 468 639 597 657 693  30  40  88 726
 711 640  55 696 100 722 111 105  90 225  64  39 691  48 688 212 474 556 648 147  65 619 461 663  81 381 563
 207 134 375 705 534 127 727 101 216  38 671  19 598  31 408 728 608 192 189 700 554 452  75  54 713 135 564
 108 163 202 645 165  49  44 462 725 510  43 274 203 126 266  84 699 414 682 567 664 516 707 723 114 255 445
 720 706 719 374 438 169  95 145 185 470 171 143 248 199 633 647 246 662 228 109 178 643 625 164  66 158 714
 115 606 229 600 587 366 729 124 718 129 235 141 154 214 687 113 448 686 709 595 221 721 250  67  91 180 140
 123 712 193 592 601 293 406 125 459 116 176 146 177 281 518 665 187 382 174 490 710 697 641 217 363 267 144
 204 501 330 551 337 213  98 654 170 520  58 681 341 312 282 131 327 444 717 307 247 629 716 112 329 138 506
 157 371 179 396 173 153 304 133 689 373 558 222 680 268 675 392 338 492 328 241 674 651 536 196 130 335 211
 376 455 351 503 167 305 402 491 294 703 242 301 251 132 482 458 324 535 200 653 223 553 306 369 168 326 285
 435 243 339 530 708 660 344 350 238 320 236 295 289 269 309 239 434 612 249 486 361 460 209 197 504 156 383
 385 234 206 617 365 218 297 367 265 205 151 405 245 259 256 253 291 599 449 511 296 393 715 273 519 583 498
 263 378 495 364 384 379 422 270 362 278 331 420 432 417 370 466 257 480 215 423 231 421 447 399 343 346 262
 280 264 489 433 398 195 368 316 456 349 355 418 258 388 292 319 481 275 224 517 254 389 390 372 478 561 336
 334 528 333 172 284 395 283 342 440 380 513 436 401 317 424 345 411 298 560 360 302 359 233 356 415 287 347
 386 427  82 159 428 514 416 476 450 525 323 425 394 499 354 353  17 442 475 397 484 299  32 419 352 451 276
 453 277 300 161  59 512 523 325 463 400 522 485 464  37 260 593 443 357 409 314 348 155  26 615 540 201 613
 479 286 524 240 549 538 332 544   5 149 290 505 596 493 431 494  12  22 555 148 557  53 118 637 321 547 430
 469 310 500 232 315 437 515 603 137 271 545 318 412 496 194 507 578 237   8  99 574 166 183 627 591 429 102
  89 575 467 160 526 139 107  62 527 537 550 586 410 702 230 403 546  86 446   4 457  83 552 572 497 465  77
 508  23 548 186 542 559 529 624 568 509 483 543 413 577 128 407 539 227 531 182  18 120 191 119  76 569 136
 521  79 573 190 541  28 439 630 252  45 533 602  87 679 581 471 576 188  96   2 622 208 590 104 616 358 244
 605 142 621 152  10 565 607 634 488  73 487 666  20 426  29 502  50 226 571 594 272 150  21 618 635 644  47
 181 614 532 340  97 626 311  60 103 672 473 678 589 566 472 638  35  34 652 308 198  36  69 210  41 661 659
 477 387  13   7 695 690 667 588 585 656  15 122 669 677  80 121  42 184   1 391 117 313 404 642 670 609  33
 628  16 579  52 631 322  93 649  56 650 610 676 655 683 219  74 110 279  57   3 620  85 377 454 580  24 673
   9  92 570  94  46 611 623 604 220 684 584   6 106 698  25 162 658 685  14 668  11  27 288 646 582 701 441

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 5.71104e+06us (= 5711.04ms, 5.71104s)
Wall-clock time (full program): 5.75229e+06us (= 5752.29ms, 5.75229s)
Satisfaction error: 0
Number of search iterations: 1826
Number of local moves: 891 (including on plateau: 473)
Number of local minimum: 124 (including on plateau: 49)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 573 645 610  15 710 147 110   6 664  50 244 212 679 606  31 690  12 697  60 667  56 706 665 235 666  92   7
  29 714  13 700 629 208 676 194 688 127 131  21   9 632  38 672  27 627 227 635  81 663 673 275 707 415  44
 254 557 708 647 603 250 684 649 511  75 281 587   8 134  30 575 622 691  69 519 198 582 125 231 142  74  49
 184  11 594 696 222 572  42 633 643  57 170 586 613 596 117 570   2 533  94 307 135 646 505 340 650 185 152
  32 461 608 619  67 612 678 555 655 611  16 512 536  28 215 653 338 628 233 543 120 534  17 180  14 165 225
 119 106 569 492 581   4 624 623 723  24  58 531 579 201 121 616 504 614 245 560  83   3 522 458 529 190 175
  89 494 547 588 607  22  19 485 530 567 133 648 502  53  88 548 524 526 538 413  20 677 550  26 523  48  91
 116 130 542 591   5  82 518 289 497 583 199 462 593 495 124 463 521 404 228   1 470 598 537 576 425 214 192
 202 488 515 408 487 546 416 346  70 585 101 544 605 140 322 257 471 443 314 442 105 525 539  96 496 197 195
 137 277 674 615 631  36 669 479  34 397  18 513 532 249 453 445 625  46 293 498  40 431 459 111 503 310 380
 251  52 414 382 490 489 373 418 554 460 118 510 508  97 181 484 675 467 109 486 499 381 477 169 393  61 357
  39 452  10 403 483 405 376 423 424 334 266 379 517 435 407 478 398 450 370 356 276 315 383 353 371 316 436
 438 457 389  37 344 516 476 429 299 454 279 465 160 343 155 417 303 439 455 375 391 411 333 359 385 318 428
 365 243 422 464 364 366 374 549 361 324 392 401 327 412 456 242 332 350 341 336 396 238 268 237 466 480 349
 432 448 284 297 295 355 419 345 410 369 506 354 451 321 317 384 394 352 285 301 426 326 304 368 292 390 430
 348 300 360 421 339 313 189 232 335 305 399 434 362 269 721 475 258 312 565 662 271 363 320 252 256 469 325
 358 306 205 342 402 139 265 226 447 229 639 213 724 283 378 262 159 577 559 290 367 319 311 595 331 599 330
 474 509 377 144 288 683 296 217 372 234 659 302 187 291 286 351 287  93 568 193 298 294 347 716 240 552 597
 651 158 267 263 104 693 210 102 261 270 481 328 440 260 609 209 309 221 551 183 695 395 722 540 128 541 264
 660 132 219 216 200 671 179 718 247 162 420 246  73 501 535 280 138 239 561 621 652 236 241 204 253 634 617
 564 153 167 191 156 686 687 580 273 230 589 207 278 441 323 148 211 136 620 218 701 176 203 507  90 682 638
 493 168 248 272 224 437 112 220 145 704 590 206  99 387 601  87 715  71 409 274 563  51 166 604 719 654 636
 630 468  33 141 644 151 528 154 113 164 626  64  86 472 703  62 618 259 602 186 642 129 308 640 173 685 574
 520 527 177 709 171 692 114 146 122 680 514 188  41 705 728  72  78 174 143  54 657 656 196 727  59 449 556
 668 446 161 100 578 150 103  45 107 725 658  47 711 600 566 157 163  85 661  95 558  98 553 282 444 400 694
 500 726 699  25 123  68 126 712 255 702 698 178 172 681 713 182 689 337  35 149 584  23  65 388  55 329 641
 729 427  43  77 108 562 592  80 115 433 670 717  63 223 637  76 482  84 720 491 571  79  66 386 545 406 473

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00014e+07us (= 10001.4ms, 10.0014s)
Wall-clock time (full program): 1.00429e+07us (= 10042.9ms, 10.0429s)
Satisfaction error: 2
Number of search iterations: 4749
Number of local moves: 1548 (including on plateau: 730)
Number of local minimum: 452 (including on plateau: 100)
Number of resets: 2
Number of restarts: 0

Problem in row 6: 119 106 569 492 581 4 624 623 723 24 58 531 579 201 121 616 504 614 245 560 83 3 522 458 529 190 175 => the sum is 9854 rather than 9855
Problem in row 7: 89 494 547 588 607 22 19 485 530 567 133 648 502 53 88 548 524 526 538 413 20 677 550 26 523 48 91 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 540   1 287 690 700  65 226 699 211 584  30 671 225 180 622 585 444 119 484 114  16  91 656 683 151 385 396
  67  29 650 716 174 672 546 357 647 230 692 675  43  19 488   8  27  32 123 698 272 703 607 640 659  71  10
  93 192   6 630 177 645 255 597 661 494 301 689  79 602 594 297 637 445 547 579  97 576 208  73 321  46  14
   5  50 186 141 164 599  64 574 651  76 595 670 109 554 714 197 588 135 458 635 693 290 500 695 425  80   7
 530  83 149 680 200 350 172 697 516 166 355 556  94 196  33 570 658  47 441 387 173 417 568 561 592  25 639
 480 214 365 493 153 643 144  17 553  36 368 573 256  98 642 542 539 185  74 591 156 460 593 507 605 102 466
 113  37 621 463 367 587 133 504  63  15 315 563  56  39 586 544 543 193  24 688 364 446 495 717 345 723 311
 249  96 611 632 273 603 360 131 578 179 526 240 199 100 477 388 402 562 361   4 244 525 613 519 498  45 440
 247 589 352 413 330 513 411 483 108 111 481 465 727 457 485 322 292 534  44 464 169 713  13 207 253 294 378
 203  55 667 472   2 567 165 400 452 403 437 517 325  41 328 479 265 552 549 533 161 353 510 241 572 259 347
 439 105 532 468 363 181 293 130 582 478 418 559 268 521 409 324 407 234 152 427 274 373 512 223 489 218 476
 436 283 299 257 502 212 450 497 359 369 426 195 384 405 379 541 262 134 374 451 280 447 456 399 380 288 390
 333 508 438 397 386 401  11 302 491 665 346 461 146 443 382 577 220 312 319 536 503 189 254 415   9 381 430
 337 343 435 432 419 209 362 654 408 538 496 308 470 705  35 348 270 459  95  61   3 267 263 720 215 423 580
 467 475 335 371 487 286 310 398 673 318 232 314 448 210 251  31 332 524 296 303 657 462 183 358 433 422 279
 235 652 421 474 655 410 471 250 305 354 424 356 342 490 366 351 163 236 338 329  92 298 284 313 376 428 442
 505 590 260 393 721  62 229 339 289 596 278 222 300 316 277 261 449 317 344 204 515 392 529 219 326 664 258
 233 663 614 171 548 377 340 282 269  22 414 320 501 531 323 275 336 383  34 295 691 370 454 309  78 610 412
 558 429 129 194 666 669 453 341 372  89 455 206  88 555 239 349 167 245 715 624 566 103 139 116 154 609 625
 506 629 307 168 674  75 686 217  20 550 142 128 711 719 617 228 331 620 201 598 600  58  72 115 121 571 191
 601 612 281 224 522 202  87 118 125 648 482 184 615 334 565 227 150  69 712 175 623 182 231 722 213 708 243
 252 681 148 216 327 391 528 523 537 706 264 187 641 285 126 162  57 684 631  86 581 696 271  81 198 511  85
 608 687 242 104 143 237 473 147 122 431 170  59 644 616 404 248 157 677 702  84 389 694 420 101 136 492 668
 535 178 112 304  42 106 729 406  70 569 205 375 190 545 155 583 520 276 434 221 704  90 160 707 649 724 266
 564 633 679 246 514  60 604 701 137  48 638 107 682  28  23 726 626 527 138  77 117  21 728  26 509  18 678
  66 395 676  52 158 634 725  40  38 469 127 145 685 291 159 560 394 636 660 551 416 557 124  68 662  49 518
 653 646  53  54 188  99 628  51 618 710 238 110 627 575 176 132 619 718 606 140 499  82  12 120 486 709 306

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00005e+07us (= 10000.5ms, 10.0005s)
Wall-clock time (full program): 1.00412e+07us (= 10041.2ms, 10.0412s)
Satisfaction error: 2
Number of search iterations: 3387
Number of local moves: 1048 (including on plateau: 326)
Number of local minimum: 325 (including on plateau: 49)
Number of resets: 2
Number of restarts: 0

Problem in column 10: 584 230 494 76 166 36 15 179 111 403 478 369 665 538 318 354 596 22 89 550 648 706 431 569 48 469 710 => the sum is 9854 rather than 9855
Problem in column 19: 484 123 547 458 441 74 24 361 44 549 152 374 319 95 296 338 344 34 715 201 712 631 702 434 138 660 606 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  51 509 409  31  82 374 728 415 452 180 407  20  52 458  54  75  70 714 721 717 705 552 472 153 653  77 724
 672 619 535  33 609 457 238 560 515 124 272  39 119 485 603 241  34 680  56  41 642 671  57 708 703 104  37
  68 504 706  64 635  92  45 675 466  74 585 103  76 649 673 665  63 101  32 710 647 591  73 677 702  66 113
  36 624 726 698  79  94 125 491 663  91 610  61  86 681 510  65 207 678 643  90  18 506 393 662 615 102 301
 190 648 656 152 631 258 147 571 727 154 548 280 149 522 431 127 392 204 100 239 231 408 719 289 666 157 259
 105 563 443 716  43 687 177 699 723 337 436 317  84 694 215 559 167 217  89 234 707 531 159 158 499  93 203
 160 688 376 141  26  99 660 676 191 197 679 145 488 659 613  46 213 725 278 214 718 588 187 205 627 185  71
 137 582 579 713 670 247 206 435 173 172 593 291 251 633 543 483 296 274 244 298 178 526 134 179 630 186 202
 468 575 611  81 596 193 461 265 270 224 652 281 517 576 514 330 110 168 188 268 228 490 496 286 645 144 218
 448 691 276 262 248 294 112 254 312 729 287 460 108 344 405  98 240 709 195 132 237 628 523 686 532 138 507
 226 487 300 130 715 722 236  88 269 266 414 309 302 442 181 314 449 263 720 282 310 554 632 313 441 165 325
 704 534 304 264 261 305 139 184 303 469 233 394 417 328 391 267 306 390 216 697 493 692 319 235 447 279 284
 308 577 331 311 340 283 212 508 513 362 255 292 161 356 201 471 711 369 416 327 225 321 277 293 194 529 712
 370 246 354 290 486 451 295 385 273 249 341 359 542 380 446 400 326 320 500 440 252 285 358 412 338 423 334
 323 209 253 361 351 367 462 243 424 470 476 336 373 410   9 395 307 357 538 429 406 353 427 578 386 229 383
 489  11 511 360  62 556 384 539 463 387 242 288 333 453 365 345 426 260 459 364 342 324 389 346 256 497 404
 640 297 418 349 335  21 480 388 377 257 343 174 413 422 592 299 118 437 434 512 366 122 432 350 396 438 445
 495 196  95 439 590 467 399 208 318  67 220 516 401 419 142 527 502   1 622 464 505 189 315 492 322 565 379
 316 232 221 567 368 555 498 136 382 473 114 494 411 162 121 484 455 528 402  15 381  50 658 551 170 550 561
 566 211  72 581 595 164 597 166  40 572 219 650 521   3 200 621 547 600 482 430 477 143   4 339  78 580 398
 503  28 421 674 433 568  27 133 151 530 123 625 444  25 155 425 456 605 626 570  29 176 607 454   7 685 375
 352 210 564 481 183  60 520 541 562 546  13 363 584  16  58  97 518 587 537 371 553 378  30 639   6 608 478
 606  87 222 654 192  48 536 163 230 428 450 612 397 135 617 479 616 117 156 614  85 140 372 545 107 629 618
 109  83  17 332 623 573 586  44 111 644 198 638 669  10 403 657 544 129 474 594 501  55 549   2 175 602 533
 525  47 271 637 598 524 250 227 120 601 169 667 655 245  38 646 519 150 636 620  12 128 661 182  49 664  14
 641 355  53  59  80 696 651 690 604 683 701 558 668 329 693 199 574 146  69  35   8 106  23 116  96 465 557
 347  42 131 475  24 700 684 171 223 569 275 583 634  19 682 540 689 126  22 148 599 348 589   5 115 695 420

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0002e+07us (= 10002ms, 10.002s)
Wall-clock time (full program): 1.00432e+07us (= 10043.2ms, 10.0432s)
Satisfaction error: 2
Number of search iterations: 2602
Number of local moves: 1123 (including on plateau: 447)
Number of local minimum: 194 (including on plateau: 64)
Number of resets: 1
Number of restarts: 0

Problem in row 2: 672 619 535 33 609 457 238 560 515 124 272 39 119 485 603 241 34 680 56 41 642 671 57 708 703 104 37 => the sum is 9854 rather than 9855
Problem in row 20: 566 211 72 581 595 164 597 166 40 572 219 650 521 3 200 621 547 600 482 430 477 143 4 339 78 580 398 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 683 652  63  52  58  75 725 529 101 146 200 728 551 123 118  64 478  71 708 621  83  46 720 265 581 690 724
 718 214  67 426 175  35 726  84  57 546 465 100 672 359  79  48 643 640 632 639  65 122 602 281  50 681 729
 698 620 721 121  74 106 727 145 211 140 203 565 495 618 220  51 596  44 623 535  29  90 634 714  54 564 257
 205 612 110 713 127 459 395 129 156 209 571 604 167 487  26  60 706 190 696 376 113 166 642 717  56 553 610
 472 297 679 138 547 135 178  59 182 710  97 638 685 629 355 197 116 131 707 715 290  38 352 473 719 173 143
 723 712 119 153  95 574 141 181 379 475 157  99 595 507 161 159 711 492 289 225 114 703 567 606 107 158 653
 375 699 150 309 670 597 227 170 692 644 126 155 263 673 230 236 169 272 630 223 137 165 599 559  89 198 598
 151 288 139 276 525 147 210 701 716 313 669 247 684 705 104 233 246 134 542 722 105 283 616 430 162 317 191
 667 274 261 160 128 482 217 245 142 611 262 186 589 645 543 271 292 224 687 185 187 176 594 593 418 350 466
 221 522 390 259 273 674 439 193 201 456 249 688 339 215 267 277 431 243 244 695 189 326 428 689 287 311 349
 362 278 354 314 516 286 207 164 347 310 381 702 432 308 316 302 562 213 591 208 664 330 454 303 410 168 373
 280 258 295 248 496 657 586 420 358 251 298 506 250 328 300 389 332 294 331 434 391 340 382 345 406 342 338
 421 405 199 369 392 519 234 291 637 584 270 351 279 403 304 409 268 348 299 322 427 371 444 365 269 312 363
 323 449 284 413 393 324 136 384 417 419 399 282 301 408 237 411 446 266 609 235 315 500 356 494 242 445 367
 296 343 321 429 305 357 253 334 385 374 470 394 366 490 412 558 378 346 386 497 401 325 353  39 260 463 320
 115 493 560 447 422 364 380 521 485 318 474 502 443 329 501   7 402 254  24 388 306 484 184 183 440 360 469
 486 462 479 442 383 109 377 372 467 448 499 368 450 438 498 489 188 400 361 511 451 337  18 120 517   5 179
 423 464 453 518 404 293 327  70 515 336 424 202 457  40 536 387 533  42   6 458 436 544 344 206 333 548 556
 397 476 513 531 163 480 514 603 335 576 437  23  55  37 241 416 488 678  20 172 505 545 124  96 504 585 341
 264 396 471 572 541  66 537  15 483  72  91 477  76 256 592 460 528 568 414   1 407 608 239 232 557 491 441
 552 144  85 461   4 523 319 566 628 569 573 425 255  92 530 577 433 601  88 570 212 481 111   3 509  10 534
   9  25 590 520 619 503 582 512 415 222 435  14 149 252 615 693 549 555 226 538 648 524 192 218 125 112  13
 624  33 614 583  22 655 580 550 228  32 617 130 452 103 636 633 216 527  82  86 665  73 508 398  80 641  87
 117  78 635  34 651 625 658 627  36 108  98 275 539 579 659 680  12 455 285 171 671 650  17 219 677  68 231
 152 554  62  16 588 133  41 666 540 238 563 526 195 605 132 575  28 532 180  31 694 691  27 647 700 229 510
  19  77 663 675 662 307  94 656  81 600 196 660  47 177 682 587  43 626 174  93 704 697 154  53 649 468  11
 102  30 578 676 622 370  45 668 661 148 631   8  69  49 561 686  61 709  21 204 646 240 194 607 654 613   2

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0001e+07us (= 10001ms, 10.001s)
Wall-clock time (full program): 1.0042e+07us (= 10042ms, 10.042s)
Satisfaction error: 2
Number of search iterations: 2879
Number of local moves: 940 (including on plateau: 416)
Number of local minimum: 226 (including on plateau: 48)
Number of resets: 1
Number of restarts: 0

Problem in row 8: 151 288 139 276 525 147 210 701 716 313 669 247 684 705 104 233 246 134 542 722 105 283 616 430 162 317 191 => the sum is 9856 rather than 9855
Problem in row 17: 486 462 479 442 383 109 377 372 467 448 499 368 450 438 498 489 188 400 361 511 451 337 18 120 517 5 179 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  59 675  43 474 617 523 665 405  12 603  77 278 591 211  11 664 660 691 673 661 165  88  56  66 226 620  41
 209 139  98 688 532 686 666 648 252  91 132 244 276 202  29 615  40 610 677 586 685 325 614 149 156   9 497
 113   4  15 708 237 632 618 699 200 285 215 259 183 312  69 144 411 719  21 629 562   8 670 671 663 136 672
  61  20 458  32  83 654 439 560 128 198 594  64 537 644 501 167  72 127 557 569 684 639 415 605 186 572 289
  70  75 404 706 512 574 536 717  92 138 102 185 195 528 682  73 460 526 547 657 111 707   1 199 568   6 484
 420 228 487 283 658   5 469 656 120  62 396 607 389 689 311 192  42 247 622 651 542   7 546  10 619 450 147
 208 216 653 604 515 461  53 581  65 545  22  25 525 413 257 683  28 514  86 508 488  80 626 522 502 164 511
 197 264 555 299  26 466 507  79 119 503 214 495  60 142 182  74 624 519 489 588 482 251 494 676 529 602 419
 145 391 595 172 513 398 378 592 667 295 220 621 554 122 137 108 304 492 564 326 498 288 517 476  16  33 433
 335  85  30 499 625 556 540 584 234 647 205 468 409 287  84  44 696 521 422 567 107 379 456 368  55 174 478
 541 245  57 445 441 509 401 530 154 565 194 479 423 190 387 286 159 453 459  31 375 477 716 464  51 386 437
 274 434 187 221 442 384 446 271 173 544 429 449 385 553 189 490 680 324 361 327 496 313 203  49 374 436 421
 246 399 465 467 100 168 365 293 320  63 510 435 412 403 443 486 333 505 425 338 328 254 623 597 193 428 256
 332 303 339 485 430 377 146 395 447 362 273 366 258 418 452 282 356 504 370 480 279 367 448 369 373 280 364
 550 600 388 440 382 342 306 231 357 355 340 270 397 596 693 227 329 577 406 330 309 116 307 380 260  46 321
 218 589 372 363 383 393 723 305 543 455 230 725 297 506 213 438 427 359 346  47 348 121 390 349 290 103 322
 710 416 599 300 627 296 269  35 315 248 268 294 371 222 548 649 394 170 224 229 301 337 347 240 351 524 571
 539 634 408 162 319 238 381 645 718 354 310  68 291 538 628 298 323 392 175 344 232 343 316 261 281 424 233
 527 616 551 331 563 284 358 152   2 212 598 579 407 242 239 608 126 249  37 662  17 518 115 314 655 552 341
 659 500 353 223 275 255 180 177 580 235 352 516 207 585 609 210 612 302 491 250 263 272  94 178 694 217 566
 587 631 153 114 720  19 166 158 601 124 692 219 265 606 630 262 697 241  99 376 726 473  90 709 112 201 184
 129  82  96 134  71 318 483 196 668 650 611 292 163  24 578 534 140 169 531 475 637 444 561 698 400 463 308
 481  81 613 131   3 690 125  58 704 641 635 472 715 700 678 414 161 104 148  78 266 703 402  14  95 426 317
 638 640 350 417 105 206 267 157 431 130 432 143 171 471 277 727 642 135 160  18  76 558  13 722 728 721 520
 712 535 674 336 109 118 179 345 582 150 681 188 711 176 204 593 646 123 101  38 236 559 636  45 454 583 141
 181 643 687 724 457 253 155 334 669 705 533 462  87  27 191 117 360 243 151  54  67 679 106 701 451 729  89
 714 410 225  97 110  50  34  52 702 695 590 652 576  48 633 470 133  39 713  36 575 549  93  23 573 570 493

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.38353e+06us (= 9383.53ms, 9.38353s)
Wall-clock time (full program): 9.4328e+06us (= 9432.8ms, 9.4328s)
Satisfaction error: 0
Number of search iterations: 2618
Number of local moves: 835 (including on plateau: 350)
Number of local minimum: 220 (including on plateau: 33)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 100 659  66 239 565 710 140 361  19 159 701  77 675 623  71 666 180 671 699 717  32 627 153  27 272 638   8
 640  38 137 653 719  34  56 305  37 271 668 109 677 519 672 718  52 689 679 705  14 221  29 498 564   4 146
 583 597  16 686 591 518  23 579   9  54 614 131 524 685 243 706  42 720  11 708 114 130 145 156 282 624 364
 630 496 411 242 637 644  28  15  24 557 465  65 631 538  50 683 485 587 610 576 402  69 121  49  86 664  90
 573  22 625 607  20 493 209 649  70  55 615 220 652 697  45 618 286 570 574 505 119 195 225 489 125 492 105
   7 651 593 559 633   6 117   1 141 539 681 169 709 499 497 602  72 646 609 632  64  26 186 303 113 622 178
 531 475 588  51 693 528 358   2   3  83 495  98 601 484 490 467 222 567  57 561 268 259  18 596 206 515 639
 580 491 657 521 450 569 277  13 550 554 451  97 448 566 542 530 171  17 571  10 183 284  33 439 190 500 161
 548 551 334  92 128 335  36 397 604 412  35 553 478 442 275 469 430 674 512 533  48 540 172 436 168 337 316
 455 398 525 333 494 253 298   5 555 428 481 278 466 526 676 511 279  62 507 613 208 435 217  39  41 454 318
 612 556 424 434 474 479 295 399 472 501 529 276 459 572 482 256 112 423 473 575  76  21 108  74 142 543  88
 440 269 457 516  12 374 255 468 360 280 359 379 313 363 415 403 443 441 488 320 487 331 296 309 226 532 319
 503 377 343 463 578 306 205 510 506 344 304 400 382 329 249 281 301 307 302 181 354 437 471 287 321 404 410
 477 378 586 405 392 429 483 260 291 188 370 371 293 315 235 381 292 421 452 194 413 257 558 345 417 388 264
 245 254 476 230 419 365 283 545 336 396 356 456 372 426 237 386 427 265 665 373 300 387 431 438 185 308 294
 273 348 350 432 408 470 394 290 407 462 332 401 460 390 368 406 328 340 228 244 353 310 650 267 357 240 347
 227 322 147 202 314 311 502 213 393 670 447 418 323 218 384 289 416 376 177 263 464 617 299 383 584 223 673
 367 326 385 420 581 252 486 241 144 585 342 563 207 224 184 120 620 509 165 134 389 544 341 375 513 204 634
 246 139 198 124 262 327 549 626 694 175 409 258 317 231 338 210 541 157 233 166 695 658 433 362 628 196 684
 395 132 266 297 164 251 654 682 352 152 214 643  94 380 713  99 250 229 158 461 517 608 598 160 546 219 621
 366 595 346 330 324 444 369 200 150 199 236 722 189 191 211 285 425 349 667 163 453 577 312 611 728 143 270
 111 135 212 288  93 696 523 325 534 647 232 723 115 187 690  68 238 215  96 162 552 729 707 446 445  67 619
  30 136 138 274 508 174 703 351 606 687 103 568  60 234 170 355 642 106 148 197 724 655 711 201 700 216 458
  59 167 589 688 247 176 669 535 721 599 101 182 173  43 662  87 522 193  85 149 635  73 691 725 514 179 391
 116 712 678 422  25  82 692 645 594  75 129 536  95  63 715  46 636 110 560 151 702 203 660 616 339 126 127
  78 547 261 155  44 102 590 656 603 629 133 562  81  31 123 122 727 107  89  58 648 414 592 704 714 480 605
 663  84  47 192  80 527 661 582 680 154  53 600  61  79 118  91 716 104  40 504 641 248 698 520 449 537 726

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00016e+07us (= 10001.6ms, 10.0016s)
Wall-clock time (full program): 1.00571e+07us (= 10057.1ms, 10.0571s)
Satisfaction error: 2
Number of search iterations: 2608
Number of local moves: 948 (including on plateau: 368)
Number of local minimum: 224 (including on plateau: 45)
Number of resets: 1
Number of restarts: 0

Problem in row 2: 640 38 137 653 719 34 56 305 37 271 668 109 677 519 672 718 52 689 679 705 14 221 29 498 564 4 146 => the sum is 9854 rather than 9855
Problem in row 19: 246 139 198 124 262 327 549 626 694 175 409 258 317 231 338 210 541 157 233 166 695 658 433 362 628 196 684 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 531 143 130 435  31 453  74 615 119 113 558 333 425 165 697  28 617 584 195 640 137 709  67 711 643 619  83
 611 438 151 110  80 540  33 580 646 106 618 452 496  68 606 334 122  19 552 300 422 515 459 587 100 359 551
  32 393 679 129 219 671 217 383  63 593 652 626 150  73 692  90 175 305  44 585 627 388 183 605 145 523 613
 610 109 538 728 572 193 642 111 155 693 342 270 210  75 312  20 560  34 128 716 279 698  65 410 180 608 597
 648 238 125 141 724 168 566 681  82 121 534  79  57 156 669 719 667 212 561 179 589 174 687  96 134 670 178
 639 226 146 120 209 713 460 726  66 147  94 173 201 581 601 225 660 170 105 429 457 722 252 650 154 364 565
 666 654 200 139 717 346 465 612 204 127 304 103 192 211 488 159 715 250  93 721 536 214 177 471 234 161 696
 624 307 294 439  84  98 148 479 262 249 621 645 292 242 498  86  13 502 264 510 244 625 365 569 227 655 513
 424  37 375 184 243 182 236 431 718 401 355 325  97 481 241 318 616  15 727 412 588 207 426 573 348 437 458
 614 133 181 308 299 271 190 477 101 704 664 283 261 356 349 117 620 690 102 676 478 284 335 256 303 564 239
 324 221 311 432 275 556 701 547 428 229  64 126 208 336 253 370 291 396 673 360 609 330 277 463 381 224 470
 169 340 326 353 222 196   8 590 345  10 386 472 218 672 329 707 369 385 288 320 464 550 255 516 447 232 686
 416 499 578 328 399 280 390 338 247 266 706 366 489 233 265 272 421 267 354 454  53 343 440 411 351 223 466
 273 107 235 473 337 278 455 445 417 427 276 371 379 347 450 216 543 332 268 700 394 567 373 323 374 306 189
 407  50 313 376 350 402 395 321 380 527 517 545  60 406  51 259 339 675 582 382 469 392  91  26 456 563 521
 362 468 132 309 397 281 482 166 254 449 525 206 476 549 514 319  69 474 368 357 546 363 668 314 286  88 433
 405 483 228 512 389 723 443 205 317 269 507 384 310 485 203 702 415 436 409  23  58 237 553 282 194 486 197
 434 720 501 519 302 296 493 172 287 188 568 408 331 506 257 520 484  40 297 377 140 641 528 230 316  85 215
 400 699 391 487 535 509 248 404  61 633 295 263 562 500 322 542   2 344  52  43 327 213 378 149 576 548 372
 158 301 635  27 524 497 579 164 596 511   3 446 544 658 251 644  47 475 418  76  92 403 503 533 575  24 171
  81 518 622 442 491 604 444 186 691 274 198 187 603 467 574 636 398 637 124  42  38  14 430 191 367 480 116
  62 600 710 703  54  16 260  55 714 532 136 662 529 461 289 554  95 504 298 678  56  49 583 240 647 245 123
 420  89 653 526 530 462 559 112 577 451  59 108 508 571 144  21 725 632 682 163 153 246 142 352 663  22 285
 258  46 630 414 522   1 413 114 677 708  17 631 494 448  25  35  70 135 685 361 341 586 712 138 661 629 104
 167 683   6  87  48 570 293 638 689 557 176  12 541  29  41 649 118 684 694 160 623  18 659 591 490  77 555
   5 665 131 595 695 387 220  72 729  78 185 674 628 680 315 657 199 651 290  39 537 358 202 157 599  71  36
 115 688 634 539 607 162 441 231  30 492 495 705 594  99 419 656 505   7 602 152 598   9  45  11   4 592 423

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.17747e+06us (= 8177.47ms, 8.17747s)
Wall-clock time (full program): 8.23202e+06us (= 8232.02ms, 8.23202s)
Satisfaction error: 0
Number of search iterations: 2015
Number of local moves: 921 (including on plateau: 334)
Number of local minimum: 152 (including on plateau: 39)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 719 637 172 480 667  59 112 716  56  75 557  37  30 717 729 111 121   9 564  39 510 317  89 723 487 643 479
 718 728 113  69 556  60 133 516  93  18 562 696 632 352 688  23 108 361  58  47  15 594 200 488 664 724 639
 143 726 715  98 710 671  64 129 243 164 553 701 677 192 115 141 720  79  44 395 278 665 524 185 248  72 603
 226 548  54 712 687 161  84  92 424 523 500 707 398 491  82 119 697 522 565  62  87 560 609 155 649  80  61
  83 231 662  70 372 321  34  88 199 139 612 644 493 446 166 150 672 544 700 101  96 597 713 174 658 179 711
  67 295 628 134 550 208 163 127 540 105 569 651 682 241 212 265 702 689 140 205 120 708 425 302 703 116 308
 239 131 281 245 453 171 635 230 725 535 259 660 476 266 204 162 157 100 704 273 270 623 515 261 650 221 409
  99 153 156 262 591 198 124 681 641 292 647 159 592 253 189 242 247 699  94 722 128 527 494 255 727 306 376
 224 561 118 109 714 590 106 173 217 555 673 197 315 653 284 655 238 123 114 232 268 611 283 304 633 271 634
 213 233 178 318 454 601 394 251 625 721 517 286 332 274 495 346 298 393 244 240 170 588 310 148 279 684 263
 142 405 252 325 402 605 709 229 327 450 573 422 418 619 257 345 338 158 180 207 366 583 291 331 183 435 303
 323 264 256 290 458 349 313 289 312 219 282 705 433 365 294 299 260 513 357 333 359 675 383 519 191 429 385
 328 322 392 305 417 353 396 316 411 324 330 379 250 567 571 296 387 216 354 471 375 377 269 444 360 297 348
 432 237 285 465 499 336 408 344 301 423 373 234 486 351 410 355 320 358 596 371 267 329 462 258 293 416 246
 222 541 341 378 309 339 307 370 368 340 421 369 436 276 367 428  19 381 403 363 356 335 504 386 448 406 442
 404 441 459 512 272 401 275 343 160 508 518 287  66 431 502 196 470  52 362 389 481 382 146 419 505 532 342
 334 482 438 461 209 514 485 399  71 210 347 427 456   8 437 280 415 466 455 593 350 202   3 430 449 489 445
 420 413 391 549 254 426 506 520  40 412 364 374 147 194 326 472 477  31 468 531 530  86 135 584 496 235 475
 397  73 384 469 236 138 526 602 390 126  63 478 314 337 407 614 400 542   1 559 575  16 558 490 169 534 457
 473 579 380 543 225 223 692  11 319 538 186 460  76 154 507 600 617 447 547  35 443  57 576 545  42 529  51
 483 498 434 492  12 201 463 642 598 167 220 563 511  25 630 388 581 467 533 451   6 211 103 631 414  36  95
 666  50 638 439 193 616 503  21 175 176 181 187   7 608 577 464 452  78 497 440 572   4 585 537  65 570 554
 589 125 659 686  91  53 214 218 525 474  41  38 227 501 568 599  55 586 509 693 629  45 206 646 182 615  81
  43 536 195   5  90 311 656 528 670 539  97  24 566 574 587 604 132 652  27 551 669 177 621  49 144 678 130
 606 521  28 691 117 620 690 680 661 645 107  14  85 300 104 610 145 640 622 228 694 215  20 552   2  68 190
 626  48 578  74  29 654 165 683 580 582 151 110 648 627 137 607 203 613 685 618 546 249 168  22  26 277 149
 636  77 668 674 288 676 698 657 184 595 152  46 102  33  10 484 624 136  32 706 695 122 663  17 188  13 679

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00009e+07us (= 10000.9ms, 10.0009s)
Wall-clock time (full program): 1.00425e+07us (= 10042.5ms, 10.0425s)
Satisfaction error: 2
Number of search iterations: 3795
Number of local moves: 1229 (including on plateau: 574)
Number of local minimum: 316 (including on plateau: 67)
Number of resets: 2
Number of restarts: 0

Problem in row 8: 99 153 156 262 591 198 124 681 641 292 647 159 592 253 189 242 247 699 94 722 128 527 494 255 727 306 376 => the sum is 9854 rather than 9855
Problem in row 18: 420 413 391 549 254 426 506 520 40 412 364 374 147 194 326 472 477 31 468 531 530 86 135 584 496 235 475 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  65 283 636  38 120 633 140 305 682 657 687 688 151 143 123 449 618 631 620  10 632 370 122  16 686 341   9
 205  93  72  68 649 517 669 679 315 528 602 564 273 279 292 178 590 585 676  20  13 159 240  94 693 300 502
 347 668 114 630 647 697 641 699 600 665 643 200 166  30 503  34 627 409 336  41 578 180  81  22  47  44 206
  57 626 524  75 601 713 662 677  55 644 254 603 201 593  21 214 638 153  37 271   3 661 610  53  40 332 537
 256 608 588 658  39  29 552 384 385 415 559  56 172 522 570  52 571 230 526 108 624 115  58 604 666 389 119
 548 645 376 589 138  33 581 616 531 469 545 353  90 596 421 111 487 613  54  17  28  62 455 551 493 198 255
 539 606  73 501 511 574 133 595 104 680 298   4 445 586 497 231   2 563 470 667 400  11 282 513 237 129 204
 549  35 512 398 141 566 518   8 575 553 438 521 670  31 459 491  78  59 562 535  49 583 247 296 489 150 342
 568 337 460 690 366 592 185  48 164  23 102 484 260 587 316  42 425 598 541 407 431 401 291 378 371 265 523
 168 186 399 386 565 481 405 128 413 369 432 510 411 278 534 264 419 572 554  27 423 321 299 434 496 310  71
 167 173 561 515 617 498 183 410 105 525 448 428 219 482 542 236  63 368 414 471 516  19 388 594 451  26 436
 712 463   7 380 348 406 361 458 486 441  14 450 394 420 272 124 591 403 402 430 519 387 426 382   1 220 358
 319 392 393 433 461 294 447 246 468  12 320 354 383   6 416 306 474 711 340 435 508 397 289 477 333 355 286
 443 346  36 372 363   5 357 318 584 326 456 356 622 303 373 284  96 721 349 725 404 313 239 375 467 543  79
 642 195 556 259 364 422 301 424 285 466 417 444  24 209 723 648 483 330 317 454 275 412 145 155 250 311 344
 381 345 276  64 352 241 238 322 232 703 396 629 527 268 218 476 343 261 199 329 374 681 245 479 446 492 338
 161 262 314 243 331 362 263 659 213 457 694 308 217 221 367 530 709 334 281 582  15 257 107 266 635 494 573
 312 339 704 625 377 277 293 533 728  91 228 269 621 442 211 325 197  18 462 177 226 488 550 127 297 520 418
 132 304 149  25 324 202 258 187 715  51  86 147 698 191 505 609 628 674 722 216 242 634 707 121 227 504 597
 116 607 390 160 395 249 267 576 274 193 207 244 702 514 429 335 165  70 480 408 287 671 499 146 328 465 678
 130 196 701 117  85 288 654 152 567 181 224 175 717 184 182 529 208 174 696 546 727 689 379 615  61 509 169
 472  50 452 547 225 708 557  82 162 192 157 295 307 194 623 651  95 718 176 640 327 540 663  77  76 309 560
 710 189 223 233 614 599 222 536 135 103 605 290 234 569 171 495 210  43  87  80 646 134 716 506 440 700 365
 391 695 215 706 270 252  89  46  83 555 203  98 464 672 139 478 248 156 280 580 190 507 637 485 684 188 544
 705 235 323 427 101  84  92 500 113 142 112 577 118 683 125 619  66  69 110 692 691 154 437 720 726 579 655
 660 538 126 656 714  45 639 136 229 163 558 144 158 673  99 612 351  32  97 302 653 359 490 650 106 453 212
 100 439 675  60 137  88 148 131 652 251 170 664 611 179 724 532 473 360  67 685  74 350 253 719 109 729 475

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.38267e+06us (= 8382.67ms, 8.38267s)
Wall-clock time (full program): 8.42611e+06us (= 8426.11ms, 8.42611s)
Satisfaction error: 0
Number of search iterations: 2633
Number of local moves: 778 (including on plateau: 243)
Number of local minimum: 216 (including on plateau: 31)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 248 622  25 637  51 150 619 642 676 128 725 488  60  97  72 180 509  33 174 542 531 641  56 677  81 662 529
 651 405  69 301 727 590 699 703 723 117 305  71  29 135 190 102 125  28 312 643 186 665 145  34 729 560 611
 476 430 712 283  75 131  79 112 313  91 645 136 705 670 230 525 137 157 232  95 724 415 578 514 474 207 709
 579 506 176 343 153 141 184 633 183 130 710 223 562 680 121 433  89  13 521 434 644 668 177 259  57 510 726
 512 575 715 114 352 151  54 613 618 387 140 159 470 134  96 168 262 707 339 149 107 515 722 666 116 322 692
 564 682 155 152 233 719 189 487 146 629 605  68 610  83  93 222 630  55  24 600  39 414 654 653  65 495 589
 593 335  38 221 204  74 659 721 429 485 181 306 504 106 720 192 638 711 574 657  42  40 196   9 126 608 486
 465 717 298  77 197 169 239 368 162 501 242 143 360 416 138 226 667 634 527 548 342 530 167 685 292 517 228
 383 290 220 275 213 409 271 173 669 303 203 379 302 193 170 367 498 656 728 704 371 493 182 319 329 503 252
 376 199 286 373 324 260 439 185  87 706 507 110 609 437 205 278 714 469 393 216 308 396 649 664 229 129 307
 410 671  20 246  11 354 606  98 255 391 265 276 261 108 268 241 713 490 565 362 595 555 537 179 696 326 356
 374 289 237 266 523 421 202 269 556 359 426 388 320 330 340 450 577 597 280 257 279 497 219 441 403 345 210
 428 331 652 258 400 287 334 315 215 361 214 317 208 274 505 480 411 561 156 496 296 444 247 422 464 442 337
 375 160 172 318 718 103 607 592 378 321 370 413 346 353 535 316 206 299 475  80 449 395 281 460 401 494 238
  92 481 285 282 399 448 294 397 425 602 163 372 333 364 293 291 323 462 617 398 350 385 511 154 344 452 338
 418 394 369 477 436  45 357 250 417 432  50 390 443 438  67 532 435 384 386 466 454 288 447  94 459 580 347
 382   8 427 404 516 693 440 408 381 166 272 351 123 524 513 365 708 389 104 200 482 225 499 412 348 218 297
 596 424 534 453  21 455 650  99 467 446 541 451 235 419 253 500 231 468 209 310  17  82 336 554 327 251 526
 314  41 423 520 445 660 479 591 325 547 588 582 187 545 587 113  85 539 124 569 463 227  23 536  14  58 270
 178 566 568 358 563 573 132   1 603   6 458 518 264 484 557 546  44 127  22 158 572 120 623 601 583 139 491
 472 646 538 195   7 551 311 148 522 483  70 471 407 533 550 519 188 420  46  47  64 661 502 489 621  62 332
  10 508 549 640 558  88 201 100 244 147 567 614 175 553 636 544 559  31 673 115  66 263 620 639  26 624 105
 109 165 528 594  49 478 628 698 627 101  73 647 585 473 249  59 118 674 616 576 456 309  19 161 655  86 122
 256 211 679 363 648 570 457 604  37 598   2 672 144 431 543 702 392 236 615  90 663 224 380   3 254  63  18
  84   4  15 689 635 599  61  48  12 690 355 584 687  43 571 492 212 240 366 632 688 295 164   5 402 701 581
 133 119 625 716 700  53  52 194 349 267 626 694 681 691 658 684 111 171 191 234 631  30 243  27 675 284  16
 377  76 540 300 697 683 612 406  36 461 552  32 245 341 695 328 273 304 586 277  35  78 678 198 686 217 142

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00009e+07us (= 10000.9ms, 10.0009s)
Wall-clock time (full program): 1.00425e+07us (= 10042.5ms, 10.0425s)
Satisfaction error: 2
Number of search iterations: 3847
Number of local moves: 1224 (including on plateau: 464)
Number of local minimum: 341 (including on plateau: 56)
Number of resets: 2
Number of restarts: 0

Problem in column 21: 531 186 724 644 107 39 42 342 371 308 595 279 296 449 350 454 482 17 463 572 64 66 456 663 688 631 35 => the sum is 9854 rather than 9855
Problem in column 25: 81 729 474 57 116 65 126 292 329 229 696 403 464 401 344 459 348 327 14 583 621 26 655 254 402 675 686 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 729 207 434 528 513  99 586 467 694 588 141  65 393  75   5 597  72 537  33  17  48 336 687 194 571 669 570
   1 693 108 410 690 135 696  50 674 562 208  69   3 153   9 164 647 556 698 702 418 720  12 151 677  16 633
 205 482 461 572  98 616 284 587 651 692 416  41  43  58 169 103  74 220 629 503 493 356 634  93 632 174 569
 168 529 382 600 678  27 671 525 107 435 114 130  73 146 252  52 381 619 566 401 627 152 166 725 721 124 484
 159 615 691 601 728  51 180 428 126 610 195 191 115 262   8 590 242 713 188 697 243 143 524 573 479  61 442
 519 145 604 526  90 266 580 516 258 657 271 139 275 119 196  30  91 636 589 650 198 701 387 147 552 214 499
 134 624 209 469 249 178 689 673 179 309 149 267  35 575 265 219 277 626 660 695 375 222 127 523 304 230 593
 355 301 216 530 233 121 583 470 388 710 289 165 184 486 210 200 181 520 531 684 707 268  89  68 577 172 617
 171 228 718 314 245 306 250 148 658 704 274 212 129 420  45 177 351 379 413 682 719 715 221 652 150 368 206
 480 241 254 522 550 211 371 100 158 662 218 557 286 485 246 326 251 708 193 457 350 199 217 325 685 330 473
 338 120 110 547 699 332 315 318 276 342 672 359 278 426 302 321 240 354 257 496 353 384 335 487 352 705 137
 621  42 259 581 320 329 226 293 349 362 227 323 299 630 269 333 256 432 288 724 313 295 447 290 722 260 365
 280 438 441 312  80 451 238 317 296 453 456 635 358 414 638 343 363 405 308 263 372 123 415 204 502 255 495
 244 344 298 374 305 380 192 422 536  39 157 464 225 433 369 498 421 648 223 346 327 395 303 642 285 409 576
 287 412 458 385 403 236 357 396  64 377 714 125 656 723 140 391  71  59 291 364 390 340 360 337 112 727 680
 316 504 477 378 376 443 423 341 373 339 452 189 248 455 279 136 331 345 471 399 264 663 497 407 292  18 439
 554 553 425 328 494 436 565 449 507 282  14 402 511 215 490  96 190 367 281 187 102 595 270 444 283 518 297
 430 468 334 400 476 392 406 261 310  88 478 555 641 161 488 411  54  38 429 235 609 646 397 459 128 538  23
 508 540 417 167  92 539 154 173 133 224 666 500 463 113 446 717 450 440 386 203 122 398 561 273 234 404 532
 558 460 521   7  86 506 454  87  83 567 348 560 551  56 603 481 563 437 541 370  57 501 568 559  40 109 182
 445 427 307 237 117 596 686 548 419 155 726 564 483 462 544  47 543  28 431 229 175 156 160 475 300 394 201
 361 592 104 424 510  13 118 582 594  63 613 509 618 322 639 661 527  79  46 294 670  62 505 232  20 665  32
 640 545 622  11 213 584 534 514 623 106 472 676 578  60 659 319 533   4 247   2 608 101  19  97 448 591  49
 105 163   6 272 466 631  78  44 599 185 655 347 491 679 644 675 712 324  82  85 116 643 585  10 231 716 311
 389  29  15  26 515 668  36 512  81  77 607 611 620 579 628 625 614  66  67  25 549 664 574 186 408 546 138
 492 131 602 202  94 606  21 144 688 183 253 517 654 667 700 637 711 239 542  34 176  53 598 649  55  37 170
 366  22 383 132 535 703 162 489  31  84  70 683 645 681 612 706 709  76 465 111 474  24 197 653  95 605 142

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00023e+07us (= 10002.3ms, 10.0023s)
Wall-clock time (full program): 1.0044e+07us (= 10044ms, 10.044s)
Satisfaction error: 2
Number of search iterations: 3134
Number of local moves: 1012 (including on plateau: 292)
Number of local minimum: 293 (including on plateau: 52)
Number of resets: 2
Number of restarts: 0

Problem in column 3: 434 108 461 382 691 604 209 216 718 254 110 259 441 298 458 477 425 334 417 521 307 104 622 6 15 602 383 => the sum is 9856 rather than 9855
Problem in column 8: 467 50 587 525 428 516 673 470 148 100 318 293 317 422 396 341 449 261 173 87 548 582 514 44 512 144 489 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 725  39 695 598 490 662 669 612 105 649  29  31  38  61  53 242 640 114 613  85  66 441 660 724 605 136  73
 117 716 610 482 473  48 126 464 501 691 107  41  69  65  26 683 591  71 643 186 127  92 720 675  96 729 706
  87  97 658 622 670 109 375 554 711 574 110  45  74 685  47 258 693 158 680  37  40  28 701 534 694 101 513
  35 180 455 723 514  89 100 690 225 621  70 710 192 134 347 183 577 228 653 230 449  77 719 408 579  34 633
  67  72 607 614 561 221 220 656 415 715 193 129 169 131 111 124 703 112 665 588 705 224 469 503 256 120 505
  52 179 197 682 495 615  23 530 500 728 190  81 142 713 151 198 717 270 146  25 727 726 205 491 189 209 674
 249 354 552 553 483 210 689 517  14 135 314  86  79  50 282 199 262 403 560 264 714 269 687 582 688  63 597
 227 353 367 218 632 619 106 604 639 132 692 252 144 223 170 165 139 659 128 721 188  57 243 596 609 254 718
 232 331 344 528 708 272 133 541 466 145  33 566 138 288 293 207 319 722 628 204 290 351 539 666 178 115 618
 668  80 213 328 303 594 276 445 215 187 251 246 273  78 335 531 538 324 571 333 350 241 510 447 295 686 537
 217 361 679 484 286 267 366 450 437 368 277 414 355 200 435 298 196 446 255 149 418 377 378 512 211 321 698
 306 297 156 330 301 342 392 676 388 371 257 329 452 535 487 300 326 268 308 421 275 423 389 457 474 436 159
 404 261 281 702 476 307 465 160 673 401 363 381 448 219 259 400 309 285 425 238 320 383 407 376 430 237 245
 174 412 356 332 203 431 589 327 409 492 433 488 348 458 365 479 312 477 302 393 292 315 260 201 263 385 359
 349 519 373 456 413 357 453 253 336 420  76  13 248 419 234 278 467 648 470 317 387 529 417 271 398 322 432
 427 463 559 379 343 497 318 280 341 346 460 299 405 352 422 337 382  83 384 239 358 202 443 212 380 533 411
 525 642  93 416 235 316 399 175 162 394 284 478 345 313 602 620  42 386 424 578 551 459 372 340 369 289  46
 406 428 130 176  91 461 550 294 296 429 426 339 555 362 334 567 485  60 305 523 471 402 440 265 123 499 438
 397 390 641 153  90 502 548 141 338 444 629 544 521 681 516 125 493 481  36 468  55 233 172 279 163 504 311
 391 647 439  27 167 395 462   1 104 325 506 454 573 526 545 520 543 581 507   6 370 627 323 250  15 374 177
 524 565 508  32  10 486 584  75  56 122 547 661 700 480 575 606 150 569 137 451   7 568 157  64 442 671 108
 646 599 489 116 226  21 672 231 274  18 630 600 558 113 592 515 148 222 509 608 542  54 161 194 396 540 181
 557 475 283 171  22 494 562 143  58   5 657 564 472 587 663 595 410 576   4 626 291 645 182  51  30 496 236
 532 518 140 434  43 168 625 214 247 586 580 650 603 624 631 118  99 511 244 527 593 556  16 266   9 166 155
 585 147   8 185 677  49  88 522 563 195 498 229 623 654 667 651  95 572  82 310 119 699  44  84 709 636 164
 652 184   2 103 583 611   3 206 678 154 536 655 697 240  17 637  98 617  24 644 601 590  68 216 616 364  59
 304 546  20  11 360 712  62  94 704 208 707 570 634 664 696  19 121  12 152 684 549 287 173 191 638 635 102

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 4.3422e+06us (= 4342.2ms, 4.3422s)
Wall-clock time (full program): 4.38436e+06us (= 4384.36ms, 4.38436s)
Satisfaction error: 0
Number of search iterations: 932
Number of local moves: 650 (including on plateau: 187)
Number of local minimum: 35 (including on plateau: 20)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
   4 715 277 621 385 176 141 644 640 682  95 678 677 154 219 106 589 660  42 681  48 629 369  10   2  76 535
 481   5 299 613 665 655 107 152 545 720  77 615 625 118 286 573  63 648   8 623 147 199 723 639 119  30 120
 556 578 196 675 611 254  24 650 579 606 115 594  12  47 192 630  81 666 187 669 265  40 664  13 335 597  19
 587 577 272 688 608 207  15 585 300 601  80 654 728 658 312 226 132 534  86 512 117 595 580  46  17   3 135
 604  57 278 460   6 143 102 563 647 568  64 500 315 586 109 612 470 634 635 525  92 537 166 491  67 520 104
 575 477 271 674  65   9  71 667 583 624  73 466 628 551 270 404 509  83 609 605 209   1 204 555  31 544  97
 539 507  41 673 517  90 172 469 524 516  91 633 620 163  49 530 519 614 521 638  85  32 103 546  82 455 126
 284 565 214 549 464 105 523 146 504 672  93 355 692 379 170 388 526 581 570  27 230 431 302 394 111 510  70
 472 473 244 518 411 468 220 485 584 393  96 232 599 497 110 484  34 495 461 475 445 113  22 514 242 492 276
 398 522  16 559 582  45 330 558 462 222 191 541 557 540 443 459  50  69 471 502 442 346 157 420 178 567 228
 401 479 213 489 399 211 486 476 269 508 124 416 457 408 474 494 429  72 490 348 148 467 137 333 227 463 437
 361 487 264 344 258 438 453 450 451 308 332 336 415 428 384 456 340 386 447   7 506 538  26 289 371 358 422
 452 380  53 239 331 441 488 434 566 413 237 542 424 560 327 432 313 458 341 320 159 378  94 324 403 396 350
 342 374 550 381 268 391 480 290 252 279 245 283 395 554 383 292 253 314 221 351 426 561 375 440 359 478 318
 444 713 716 231 425 229 311 337 402 373 339 370 482 266 260 382 376 203 321 171 195 354 345 397 529 356 328
 326 303 711  66 183 295 310 235 329 287 499 532 304 262 435 641 366 439 418 365 282 360 483 246 593 247 338
 261 263 661 419 722 392 349 155 364 503 430 307 285 238 400 189 224 352 406 343 493 317 454 274 427 347 280
 250 296 671 251 718 233 536 656 552 130 706 368 177 293 223 193 377 309 180 357 305 151 405 179 637 281 421
 249 186 212 297 149 236 323 412 721 205 619 139 607 267 498 298 325 108 301 216 372 319 574 709 616 275 622
 316 627 433 112 131 513 256 710  60  43 712 158 294 234 553 241 592 206 218 702 543 184 569 322 465 134 527
 448 353 407 210 129 670 719 140  36 217 691 175 174 273 714 686 436 168 122 197 705 173 596 259 363 145 649
 121 202 390 201 138 729 651 167  59 643 727 194 123 162 598  21 423 668 133 150 617 680 410 144 531 248 725
 334  54 717  75 685 694 533 215 161  61 659 243  39  18 700 128 240 417 225 257 571 632 626 169 646 208 548
 690 181 652 200 188 642 515 160  79  89 726 291  74 156 198  78 501 190 696 588 547 591 610 127 693  87 306
 182 101 679  11  33 387 645  35  88  99 564 153  56 697 603 724 707  98 389 142 699 136 409 636 414 657 511
 116 255  51 114 684 602 590  20  84  25 698  52  58 663 449 165 362  37 653  29 576 562 288 676 689 695 662
  62 125 367 185 100 600 505  44  14  68 572  28  38 683 496  23 618 446 704  55 631 528 164 703 708 687 701

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00003e+07us (= 10000.3ms, 10.0003s)
Wall-clock time (full program): 1.00424e+07us (= 10042.4ms, 10.0424s)
Satisfaction error: 2
Number of search iterations: 3398
Number of local moves: 1059 (including on plateau: 391)
Number of local minimum: 313 (including on plateau: 49)
Number of resets: 2
Number of restarts: 0

Problem in column 22: 629 199 40 595 537 1 32 431 113 346 467 538 378 561 354 360 317 151 319 184 173 680 632 591 136 562 528 => the sum is 9854 rather than 9855
Problem in column 26: 76 30 597 3 520 544 455 510 492 567 463 358 396 478 356 247 347 281 275 134 145 248 208 87 657 695 687 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  50 599 322  65 691  43 453 627 101 210  82 112 718 704  78  60 597 606 727  90 594 684 611 679  38 199 115
  91 713 172 686 700  53 174 660 483  95 124 708 563 664  36 366 344 581  73 100 615 640 131 541 155 126 261
 136 430 722 158 260 153 550 596 616 229 308  92 104 630  44 149 644 697 626 580 354 670 134 192  77 165 539
  51 177 402 716 678 196 421 717 663 117  57 118 397 715  32 202 726 668 259  58 701 498 143 714  42 258 129
 119 666  98  81 502  48 649 719 672 193 448 406 577 478 237 476 234 690 150 111 439 142 568 181 121 130 720
 222 182 168 201 646 677 612 709 667 145 159  49 146 250  61 682 377 582 197 164 647 724 295 287 270 566 170
  64 511 176 301 515 474 695 516 680 139  84 268 673 561  52 523 464 553  79  88 712 256 217 565 271 220 198
 364 543 122 282  87  96 277 721 233 291 407 395 263 160 180 662 710 641 490 725 602 419 183 269 272  99 362
 327 246 564 132 624 482 266 461 486 221 312 475 355 204 248 178 591 361 729 102 669 169 325 311  45 244 728
 358 623 645 231 323 290 658 228 215 705 307 500 251 157 236 583 526 592 466 285 328 148 240 247 213 216 284
 339 252 302 280 329 386 306 175 235 238 711 593 195 378 392 408 367 492 401 340 707 317 674 278 274 393  93
 127 135 324 334 357 253 460 472 294 232 313 351 343 214 356 706 436 546 653 470 330 342 723 379 224 171 310
 390 321 299 352 370 289 659 360 292 243 426 418 375 281 429 276 267 489 435 332 315 559 338 440 264 387 249
 365 257 265 353 293 333 209 410 384 496 427 416 374 372 389 528 185 288 383 316 433 394 314 381 409 434 446
 348 380 452 305 484 341 368 391 363 417 412 262  37 373 337 300 471 346 456  28 241 527 349 414 451 495 507
 493 428 425 491 286 424  97 385 223 529 225 309 336 538 586   4 400 467 190 359 463 532 326 345 167 477 350
 442 154 405 245 449 505 226 431 545 422  34 212 501 399 445 140 573 227 487 608 438 465 239 318 462 459  24
 403  85 443 605 376 651  54 335 444   1 415 184 319 423 411 173 304  76 455 590 166 571 420 396 578 447 530
 473 404 506 588 219 497 106 141   3 556 454 297 555  89 480 512  39 283 320 388 298 575 524 147 610 188 604
 437 138 509 536 499 457  35  26 584 242 303 296 513 520 569 531 432 151 458  15 179 186  29 655 567 371 617
 681 207  59 629 108 598 369 162  20 601 620  86 398 468 589 103  22 116 504 703  30 548 533  16 637 494 554
 570 109 574 639  67 133 619 110 137 469 552 632 537 481 613 156  17  12 382 688  83  40 479  94 510 631 521
 517 275 560 441 595 544 514  80  18 685 558 618 120  72 621 279 522   2 105 519  47 218  25  55 687 636 542
 534  62 557  27 206 614  46 144 648 518 652 254 551 540 503 230 125  19 200 635 211   7 585   8 661 676 642
 656 689 189  33 114 508 562  75 187 603 572 665   9 107 549 622 208 152  68 671 128 191 413 547 579 692  66
 698 576 525 535  71 607 347  41 657 625 638 485  11  14 683 331 161  13 488 194  69  10 450 694 628  31 273
 600 693  70 609   6 203 123 163   5 633 255 654 634  63 699 675 113 205  74 696  56  23 587 702 643 650  21

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00016e+07us (= 10001.6ms, 10.0016s)
Wall-clock time (full program): 1.00429e+07us (= 10042.9ms, 10.0429s)
Satisfaction error: 2
Number of search iterations: 3103
Number of local moves: 1201 (including on plateau: 503)
Number of local minimum: 293 (including on plateau: 56)
Number of resets: 1
Number of restarts: 0

Problem in row 14: 365 257 265 353 293 333 209 410 384 496 427 416 374 372 389 528 185 288 383 316 433 394 314 381 409 434 446 => the sum is 9854 rather than 9855
Problem in row 19: 473 404 506 588 219 497 106 141 3 556 454 297 555 89 480 512 39 283 320 388 298 575 524 147 610 188 604 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 421 664 598 611 681  62  91 729 548 597 635  31 564 100  15 282 301 138  97  90 687 728 131  71 529  13 441
 375 419 105 685 656 619 119 720 146 586  84 117 680  99 128  32 540 600  53 579  34 384  58 647 545 706 139
 167 571  65 667 583 711 676 271 422 335  41  73 456 697  56  74 686  82 142  52 546 698 148 115 727 584 210
 109 572 176 724 660 112 387 669 196 574  98  59 699 187  88 113 362 544  79 108  69 659 477 715 690  77 652
  57 640 181 703 397  21  51 186 701 694  45 178 621  78 244 722 530 557 303 265 587  68 578 127 605 576 140
 670 475 130 590 643 472  85 116 120 593 279 107 305 274 206 595 620 716 726 207 145 531  81 126 657 209 177
  63 684 132 515 613 163 714 238 721 483 250 268 228 180 169 203 623 651 248 101 304 294 219 218 420 693 460
 190 527 197 549 263 339 358 691 309 318  38 476 679 321 221 273 524 251 650 704  36 258 252 247 506 406 272
 255 494 288 466 646 191 607 495 692 378 325 173 550 202 158 296 612 330 588 264 317 241 184 208 473 136 286
 307 525 183 471 538 257 253 308 153 363 361 133 340 231 337 240 555 629 106 371 666 306 365 269 630 562 396
 382 580 431 383 507 293 182 302 254 372 459 364 391 232 285 266 345 281 332 164 707 270 368 316 447 700 242
 320 533 261 374 352 170 560 312 658 313 287 485 192 513 377 341 551 351 381 185 523 175 278 137 532 299 395
 289 311 347 329 424 348 326 408 290 410 314 267 501 452 413 323 386 343 446 338 398 499 449 152 470 379 243
 388 510 389 357 298 189 346 404 370 474 427 315 394 354 367 350 400 349 280 467 324 355 430 262 437 300 319
 469 156 568 399 401 129 478 511 407 193 451 336  25 464 360 435 256 402 488 373 484 380 328 359 161 433 409
 291 259 411 443 199 448 418 517 462 229 141 682 366 334 415 227 369 412 295 503 213 490 276  95 277 592 491
  24 292 500 212 536 188 174 542 434 223 333 482 589 425 463 310 428 214 638 275 468 522 547 450 162 226 198
 543 429 432 239 224 534 390 104 518 211 537 236 283 458 376 528  66 496 235 454 642 172 502 465 200  83 498
 519 123 599 168 225 541 331 392  35 134 655 577 481 480 493 554 118 487  75 215 591 417 405 426 151 504 159
 414 114 440 234  92 453 565 322 615 249 509 479 121 514 416 521 157 581 539  42 220 327 385 457 204 284 601
 497  27 455  16 124 438  10  94 618 626 563 492 171 520 708 423  93 516   4 631 604 512 689 695 155  28 147
 717 205 403  39  64   7 489 442 526 559 201 445 535 585 556 569 110  76 582 608 558 111   6 561 160 166 575
 553 125 677  40 230 702 645 356  96  47 661 486  86 668 627  18 297  50 718 616  12 149  14 675 436 233 637
 625 154 508 245  48 633 246 603  30 636 617 712 216 674 552 673 165   1  19 606  60 602 609  49  44  67 461
 614 102   8  89  55 641   5  20   3  46 683 573 144  72 710 632 628 260 725 688   2 610 719 678  61 439 648
 567 342 709  70 179 570 653  80  26 195 222 644 103  87 444 150 122 344 393 596 649  54 634 663 143 594 622
  29  22 662 237 217 624 696  23 505  17 639 665 135 654 671 705  11 194 713 353   9  43 723 672  33 566  37

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00436e+07us (= 10043.6ms, 10.0436s)
Satisfaction error: 2
Number of search iterations: 2949
Number of local moves: 995 (including on plateau: 384)
Number of local minimum: 242 (including on plateau: 51)
Number of resets: 1
Number of restarts: 0

Problem in row 21: 497 27 455 16 124 438 10 94 618 626 563 492 171 520 708 423 93 516 4 631 604 512 689 695 155 28 147 => the sum is 9856 rather than 9855
Problem in row 23: 553 125 677 40 230 702 645 356 96 47 661 486 86 668 627 18 297 50 718 616 12 149 14 675 436 233 637 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  21  27 695  10 661   8 215 690  16 671 201  37 723 701 563 705 298 567 663 112  93 404 419 714 549  60  32
 568 188 670 153 600 155 646 697 628   1  46  59 662 680  43 413 578 664 648  14  19 630  36 613  11 159 274
 713 132  18 202 164  31 653 692 612   5 102  63 694 627  55 621 693 687 696 127  82 555 524 640 103 139 225
 596  54 669   2 720 135 635 142 222 688 409  62 679 639 273 528 624 576 656  15  70 446 158 525  56 150 126
 519 238 559 174  58  45 326 652 480 644 312 165 619 677  75 593 121 658 110 125  76 667 615 464 444  65 374
 463  77 566 364 647   4 623 483 521  50 233 124 691 506 161 368 682 517 401 561 200  13 610 595  89 232  74
 604 128 453 205 558 507   7 673 588 543  98 138 556 259 113 445  33 430 478 314  26 548 546 502 533 186 384
 584 190 520  39 418 466 400 313  28 505  12 421 428 530  83 553 565 570 477 181 211 582 394 534 605 168  78
 512 131  71 347 562 440 514 518 465 509 348 436 396 475  96 366   3 303   6 557 439 490 353 547 564 240 167
  20 180 616 243 460 508  72 429 579 522 442 592 535 580 487 537 269  99 221 484 266 251 379 488 270 144 182
 333 256 575 166 163 242  29 470 494 651 462 213 414 432 422 218 481  23 523 319 474 572 454 406 424 264 375
 479 234 489 355 472 376 267 527 420 149 169 459 354 467 589 268 162 486 342 496 469 254 438 408 237 172 317
 327 196 382 177 417 473 304 493 541 278 492 362 285 392 471 427 571 395 250 399 247 423 357 309 206 389 292
 458 289 310 220 426 373 299 306 411 491 262 443 307 265 378 407 294 410 191 510 359 109 457 550 434 412 485
 329 456 403 500 397 388 360 393 235 372 536 398 405 416 370 336 334 437 339 361 271 381 171 367 346 291 263
 425 449 402 281 363 305 607 287 383 341 295 244 133 195 340 594 642 275 497 203 385 300 217 386 316 448 542
 331 338 297 461 322 284 296 358 328 365 601 344 452 450 212 301 433 325 119 631 482 258 356 261 324 718 208
 391 511 156 545 147 614 626 282 330 513 597 390 230 227 387 320 194 532 415 223 371 253 293 197 179 501 431
 214 554 666 349 198 343 187 246 709 207 678 585 277 226 598 143 345 219 689 369 668  95 290 111 105 498 286
 288 551 106 587 239 352 129 302 255 216 710 311 321 231 455 224 499 441 249 602 676 152  73 257 495 544 590
 248 719 189 515 315 641 715 140 279  41 272  94  85 107 606  61 685 674 283 229 323 708 252 170 173 698 633
 157 665 332 686 151 318 351 100 134 260 516 724 184 193 617 210 337 175  64 308 573 451 703 350 245 603 447
  66 531  92 574 538 657 681 204 236 192  91 618 123 108 599 276  17  40 503 228 526 145 711  44 712 706 637
 650 702  53 726 160 620 141  88 114 684 716 636 185  80 183  38 609  97  67 632 699  90  86 115 625 476 583
 148 659 435 608  81 241 116 137 727 209 629 722  25 120 707 136  22  47 729 660 560 380 178 104 611 335 529
  34 728  30 645 539 675  87 176  51  48 591 634  24 154 504  42  84   9 117 552 704 649 655 146 577 717 683
 377 672 101 721  79 654 569  57  69 700  35 581  68 118 468 725 280 199 122 643 586  49 130  52 622 540 638

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00004e+07us (= 10000.4ms, 10.0004s)
Wall-clock time (full program): 1.00416e+07us (= 10041.6ms, 10.0416s)
Satisfaction error: 2
Number of search iterations: 2908
Number of local moves: 817 (including on plateau: 280)
Number of local minimum: 264 (including on plateau: 33)
Number of resets: 1
Number of restarts: 0

Problem in row 14: 458 289 310 220 426 373 299 306 411 491 262 443 307 265 378 407 294 410 191 510 359 109 457 550 434 412 485 => the sum is 9856 rather than 9855
Problem in row 22: 157 665 332 686 151 318 351 100 134 260 516 724 184 193 617 210 337 175 64 308 573 451 703 350 245 603 447 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 349 598  74 645 559  37  52 102 432  65 390 695 420 500  73 686 344  34 708 655 715 129 122  80 623 180 588
 667 258 144 617 115 563 163 593 178  22 587 166 711 709 577 719  68 133 662 130 689 108  33 104 463 120 556
  77 570 682 418 153 155 221 702 397  35 531 447 710 488 648 516 123  56 705  72 159  43  78  79 727 555 508
  67 573 128 722 164  66 220 720 254 161 668 562 197 712  46 693 140 136 685 631 279 561  40 199 589  95 547
 154 401 652 675 259  38 181 665 429  88 291 604 671 278 243 666 389 158 212 101 550  50 141 629 580 192 558
  63 520 157 649  92 723 186 117 215 152 628 198 195 566 263  89 670 461 621 595 684 721 185 168 217 244 476
  70 411 293 677 204  93  90 210 415  36 703 480 342 692 190 657  54 584 542 380 643 272 131 283 622 172 609
 135 252 137 512 241 124 176 532 713  85 398 716 114 724 650 320 229 216 200 697 225 121 205 673 729 132 599
 160 540 201 227 253 127 286 235 271 230 578 681 367 435 683 187 322 366 535 726 572 257 338 295 618 169 196
 328 537 282 625 119  59 333 270 441 249 456 636 175 331 238 393 310  20 459 603 687 191 312 383 482 264 672
 377 725 207 525 233 284 315 248 664 138 414 348 183 474 289 358 426 387 302 707 306 171 297 280 624 262 311
 208 373 355 281 325 361 226 268 538 409 412 688 384 423 298 301 354 287 728 211 242 419 321 402 472 303 266
 392 313 203 179 434 336 324 381 430 427 340 237 457 394 405 274 359 659 290 487 552 337 347 256 308 502 232
 327 250 395 346 294 460 273 173 323 428 548 462 213 231 557 541 363 478 442 292 174 343 416 369 444 345 368
 276 300 269 468 317 330 518 329 440 455 501 362 360 492 376 417 285 378 277 403 438 240 316 413 247 314 334
 450 149 521 375 307 528 491 341  19 509 351 388 356 318 391 477 365 448 261 275 319 396 385 421  86 453 475
 544  30 407  83 526 364 445 379  99 449 484 400 495 265 350 510 404 188 107 267 410 496 641 551  64 489 408
 507 100 439 339 514 353 576 424  14 574 371 465 513 219 425 374 471  11 370  23 156 437 386 575 452 565 202
 583 103 372 245 581 469 490 522  55 422 222  94 560 527  21 549 539 304 658 517  97 554 406 382 125 446  12
 613  29 497 116 485 529 610 111 515 579 109   1 399  45 458 332 493 470 112 553 326 698 464 431 309 564   7
 646 467 536 118 543 134  84 592  26 615 193 498 601 113 494  15 614 504 534  69 148 546 634 466  60 443 162
 571 473 524  31 616 640 454 680 523 582 184 105 503  57  17  98 590 299   6 228 436  13 635 606 214 600 170
 481 654 596 234  48 656 530 633 663 545  61  42  58 260 533  62  41 644  44 151  81 638 486 676 479 433 126
 669 143 505  18 511 632 612 506 146 605 218   5 637 142 251 145 607 691  91 451  39 704 585  96 194 627  25
 647 189 678 167 694 608 620  87 335 660  76  51  16 106 611  28 626 568  75 352 602 110 519 223  47 661 499
 483 651   4 357 569 619 700   3 690 696 139 236 165  49 182 239 642 701  82 255 177 594 718 591   9   8 296
  10 246 597 206 699 567 679  32 630 639   2 288  53 305 586 209  27 674 147  24 150 706 714 224  71 717 653

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00432e+07us (= 10043.2ms, 10.0432s)
Satisfaction error: 2
Number of search iterations: 3087
Number of local moves: 1076 (including on plateau: 636)
Number of local minimum: 243 (including on plateau: 79)
Number of resets: 1
Number of restarts: 0

Problem in column 1: 349 667 77 67 154 63 70 135 160 328 377 208 392 327 276 450 544 507 583 613 646 571 481 669 647 483 10 => the sum is 9854 rather than 9855
Problem in column 21: 715 689 159 279 550 684 643 225 572 687 306 242 552 174 438 319 410 156 97 326 148 436 81 39 602 177 150 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 645 362  81 143 611 600  48 690  52 425  14 705 477  41 719 196 391 117 307  35 694 211 240 724 546 120 661
  95 647  56  32 641 586  38 625 188  44  77 286 178  37 650 200 651  80 713  51 681 532 191 618 703 686 569
 160 642 692  15 620 656 135 122 721 359 112  84 627  72 583  55 712 103 617  75 455 527  83 670 424  68 466
 490 687  53 405 598 632  16 612 129 109  86  39 472 603 728 453 402  40 100 152 727 503 136 345 677 174 487
 702 126 179 189 282 714 140 720 162  82 170 725 125 102 523 107  34 542  58 516 707 717 699 591 676 242  25
 709 484 118 695 437 276 124 706  94 123 106 222 575 515 262 624 547 204 208  92 693 543  89 585 587 150  87
 195 507 157 318 493 228 295 146 281 355 110 250 682 621 557 599 659  60 291 194 673 229  54 519 570 121 691
 133 698 172 304 662 258 636 609 206 245 354  50 138 414 524 132 685 145 119 192 708 689 300 198 540 166 578
 271 270 104 137 510 584 716 726 252  46 237 209 468 451 254 697 545 203 273 317 412 341 311 233 664 216 408
 220 669 168 378 239 432 322 223 380 723 344 292 246 390 289 303 275 679 381 343 463 268 358 323 446 331 370
 221 297 385 430 326 582 232 321 251 218 481 729 352 684 447 285 328 288 217 346 496 156 368 308 445 158 504
 559 277 310 263 722 337 715 256 521 306 324 360 415 548 371 264 244 154 142 231 314 255 396 312 478 342 439
 259 272 238 567 301 266 302 374 298 305 387 404 704 280 161 333 410 675 315 327 287 293 278 219 500 718 382
 335 361 234 230 470 329 227 319 403 514 476 459 389 384 393 356 365 339 383 421 248 407 442 418 290 364 299
 426 577 320 422 375 429 279 449 294 261 316 485  74 274 448 336 330 464 351 357 325 114 572 350 334 482 411
 435 369 434 444 460 177 379 443 604 169 498 416 506 366 452  45 392 427 376 529 225 215 181 479 309 428  97
 492 340 573 457 348 373 397 265 377 526 296 184 480 243 388 205  99 372 474 538 249 461 438 417 394 399  70
 406 536 367  21 433 353 419 544 349  31 338 386 508 400 431 164 193  43 554 499 283 602 458 183 401 486 467
 552  17 494 465 236 440 475 574  26 513 247 549 501 284 165 469 436 502  47 646 199 556 441 409  66 517  29
 595 185 420 462 187  79 537 190 607 643 509 560   1  20 530 633 235 148 525  42 116 649 535 130 139 660 518
  69  28 593 626 212 413 207  23 592 576 590 564 115 541  76 553  63 628 616 648 144  19 638 450 105 497 269
 597  57 711 423  93 610 563   3 561 639 613 108   5 363  78 483 253 652 678 674  33 111 565  90  96 539 257
  67 202 558 637 224  18 571 141 555 657 605 398 511 267 180 454 134 562 634 589 167   4 665  49  30 629 347
  71 186 473  10 113 176 550 471 640 163 622 260 147 580 533 491 213 551  24 680 173 579 489 700 210 619 131
 175 512 671 606 155  11 623  85 667 596 653 594 495 226  65 395 522 488 566 666  61  88  73 520 153 127  62
 644 456 663 608   6 197 668 182  64 696 635 528 505 534  27 710 149 701 672  12 171 128 201   7  59   2 630
 332  91 631 568 101  98 241  36 581 531 655   9 159 615  22 313 588 688 214 683 151 658 654   8  13 614 601

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.00418e+07us (= 10041.8ms, 10.0418s)
Satisfaction error: 2
Number of search iterations: 3594
Number of local moves: 1130 (including on plateau: 447)
Number of local minimum: 275 (including on plateau: 43)
Number of resets: 2
Number of restarts: 0

Problem in column 6: 600 586 656 632 714 276 228 258 584 432 582 337 266 329 429 177 373 353 440 79 413 610 18 176 11 197 98 => the sum is 9854 rather than 9855
Problem in column 15: 719 650 583 728 523 262 557 524 254 289 447 371 161 393 448 452 388 431 165 530 76 78 180 533 65 27 22 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  34 430 726 669 492 539 573  32  58 729 117 719 600 382 348 108 515 112 608 504  83 490 524 126  31 210  96
 155  28 135 564 630 505 614 151  89 707 656 398 167 132 667  86 111  20 603 583 724 582 708 100  15 715  10
  59 607 705  68 684 663 376 104  13 609 660 102 652 722 718  27 565  40 689 179 194 118 484 412 240 156   9
 164 624 463 723 685 621 162 305 184 679 485 188 560 185 640 289 147  55 725 113 134  60 602 541 313 171  37
  61 562  79 659 680 432 556 225 119 254 697 491  90 304 644 595 172  44 606  76 294  88 672 536 109 523 287
 266 668  69 604 124 710 221 592  36 459 701 636 154 247 571  22 677  67 711 224  49 103 537 727 168 297 215
 202 347 123 579 307 588 675 548 456 177 709 129 270  46 642 234 258 143 533 180 195 161 661 646 181 508 357
 236 480  85 696 122 605 627 618 251 267 120 340 704 136 345 530 670 153 713 223 255 222 187 625 257 260 128
 449 575 282 203 248 327 712 464 196 702 278 693 213 125 572 239 227 163 229 629 170 293 438 568 193 391 276
 244 610 204 110 615 374 703 133  18 315 157 619 686 273 493 249 662 721 217 130 200 316 183 716 338 261 308
 336 283 367 285 262 468 299 298 720 178 681 325 365 339 197 513 198 397 322 542 351 274 310 381 411 352 401
 361 368 330 281 238 385 420 554 253 140 280 332 706 206 324 714 264 329 335 671 364 369 241 474 371 302 243
 323 212 354 372 121 475 272 363 317 728 219 303 326 399 461 632 446 426 237 252 334 423 387 311 429 353 380
 403 186 377 409 389 400 301 518 421 211 355 314 269 360 507 295 402 341 422 407 419 265 263 416 545 218 442
 435 406 214 379 544 250 427  54 370 439 337 242 300 290 418 268 437 522 220 344 320 373 413 388 428 623 414
 567 312 199  50 460  98 328 228 525 362 453 105 350 431 465 444 477 410 415 466 319 131 457 434 498 476 395
 279 246 494 488 417 359 470 259   3 691 306 569 479 486 462 331 443 358 390 346 384 296  19 148 321 478 333
 445 540 309 349 467 433 503 516 576 137 455 392 383 528 342 471  21 408 396  66 356 450 152  84 500   6 570
 366 458  63 547 232 393  77 566 451 482 487 288 447 650 230  95  47 527 145  74 472 517  81 436 581 633 510
 405 271 483 496  73 176  64 502 580  11 452 448 555 546 173 216 531 638  93 543 620 499  26  48 682  70 654
 521 231 645  12 473 256  35 574 514 441 495 596 440 657  51 519 501 563  14 209   1 594  53 191 454 277 538
 561 138 425  45 549 291 192 101 394 578 375 532   4 553 107 534  87 611 142 386 584  33 589 424 626 318 676
 634  25 649 165 166 245 127 559 695 114  62 139  78 506 205 598  80 613 208 481 577 557 469  52 683 552 616
 551 169   7  92 631 175  94 591 666 226  56  17 141 160  57 520 586 694  99 182 593 692 526 404 699 529 698
 511 150 717 284  30  39 149  72 690  23  82 587 674 585 116 647 106 601 189 700 590 655 286 159 146 509 558
 639 637 678 635 174   5 535 378 617  38 115 144  41 599  71 190 597 664  97 687 651 641  75 233  24   2 688
 648 292 673  91  42  43 343 550 643 158  65 207 201   8  29 489 628 235 497 658 622 653 512 275 612 665  16

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 4.70166e+06us (= 4701.66ms, 4.70166s)
Wall-clock time (full program): 4.75896e+06us (= 4758.96ms, 4.75896s)
Satisfaction error: 0
Number of search iterations: 890
Number of local moves: 466 (including on plateau: 168)
Number of local minimum: 61 (including on plateau: 13)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 257  39 620 664 383  60 691  41 669  36 128 203 723 693 593 616  98 202 565  87 197  88 728 152  44 583 695
 496 157 690  49  64   4 658 673 578 212 109 146 150 271 149 596 158 586 692 566 710  55 727 700  38  92 529
 600 625 438 306  86 182 140 396 647 180   2 619 712  80 148 550 154 473 707 187 503  34 147 618 705 280 336
 124 168 111 701 196  67 696 122 530 572 145 709 359 263 175 540  68 641 622 656 370 290 545 392 183  59 551
 244  63  33 678 635 118 711 567  83  16  89  90 526 255 680 114 524 510 494 697 440 416 703  25 481 245 418
 699 228 125 237  91 681 278 165 471 239 293 169 170  99 113 407 323 694 729 133 634 546 467 715  43 683 424
 537  57 141 279  58 454 720 439 655  75 112 137 311 717 327 659 388 236  66 410 571 266 613 607 219 597 204
 682  97 267  81 398 283 581   3 483 217 199 172 259 186 231 602 668 191 654 636 241 215 684 570 679 213 363
 642 184 350  65 295 409 298 470 506 161 258 663  62 272 205 505 661 688 446 627 192 256 210 334 220 288 588
 386 208 115 120 324 185 163 230 650 704 301 389 644 347 218 574 320 265 672 286 580 117 139 456 247 628 587
 713 302 249 314 330 698 221 630 490 321 577 367 200 341 253 542 264 242 234 331 308 294 343 569 262 102 357
 338 387 223 355 645 297 285 313 482 225 714 670 296 254 201 177 275 339 491 300 235 373 329 559 252 449 391
 378 369  29 119 319 721 181 525 455 190 269 556 214 287 448 648 132 351 702 502 195 417 394 365 472 233 384
 474 304 379 193 459 325 445 361  52 477 328 495 382  26 318 426 434 429 450 436 651 282 393 465 108 344 419
 432 380 414 724 346 401  84 312 305 299 368 354 517 444 349 527 575 243 232  17 362 292 422 281 497 352 326
 310 554 127 498 488 395  21 413 226 623 372  13 536 662 375 207 229 415 261 579 485 521 273 342 479   9 442
 457 561 443 519 381 123 277 358 227 568 547 544 412  10 385  12 178 268 420 403  77 402 501 617 435 460 270
  45 399 531 499 411 406 371 558 487  53 476   8 480 423 523 428 601 364 135 437 138  73 563 166 532 433 315
 155 307 671 718 463 534 335 468 309 430 458 427 725 171 332  69  40 533  42  72 657 464  71 251 528 520 105
 356 404 500 466 511 400 131 453 469 552 538 611  54 584 514 360 515  93  32  35 376 652  28 173 475 289 284
 110 451 719 518 492 397 507 142 206 606 462  31 486 716 605 240 405 677 107  50 144 504 516 151 246 143 224
  15 633 390 333 621   1 676 557 573 238 366 153 353 509 604 194 316 188 104 421 595 549  23 522 624  37 260
 106 560 513 608 303 317 576   6  56 322 541 101 553 708 100  24 562 116 250 461  94 687 176 508 726 590 291
 209 592 706  48 340 603  46 489  85 535 591 337  18 548 543 121 564 159  76 667 539 643 484   7 164 248 493
 637 646 377 638 441 640 722 447   5 665 408 612  61 276 345 103 162 156 431  11 134 585  82  14 452 675 130
 274 582 478  74 126 555  22  78 129 653 615 685  20 666 512 425 631 629  30 626  79 174 198 136 674 689  95
 179 598 216  51 649 599  19 639  27 686 589 594 632  47 609 189 610 167 211 222 348 660  96 160  70 614 374

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.00465e+07us (= 10046.5ms, 10.0465s)
Satisfaction error: 2
Number of search iterations: 4337
Number of local moves: 1161 (including on plateau: 434)
Number of local minimum: 426 (including on plateau: 42)
Number of resets: 2
Number of restarts: 0

Problem in row 6: 699 228 125 237 91 681 278 165 471 239 293 169 170 99 113 407 323 694 729 133 634 546 467 715 43 683 424 => the sum is 9856 rather than 9855
Problem in row 11: 713 302 249 314 330 698 221 630 490 321 577 367 200 341 253 542 264 242 234 331 308 294 343 569 262 102 357 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  11  48  13 694 725 517  54 431 654  94 722  82   7 608  25 729  31  90 108 591 716 615 629 531  34 393 703
 625 689  38 638 569  65 148 700 610  81 705 522 409 412  98 355 232 245 372 109 130 149  43 695  86 702 428
 564 468 715 706 669  56 685 220 298 170 132 124 455 690  92 131 168  88 724 113 603  69  45 658 117 581 514
 182 679 173 721 696 153 515 419 274  59 152 650 698 675 231 101  71  74 717 104 136 666 107 415  73 483 631
 633 222  67 146 301 105 652 521 711 111 656 535 407 692 100 116  95 709 145  37 195 127 728 682 191 442 529
 544 205 238 229 720 688 297 447 713 175 237 391 498 691 123 272 121 624 178 142 180 369 165 567  58 640 343
 708 110  66  99 436 156 712 204 561 199 465 342 604 718 198 112 626 398 183 155 719 187 169 227 194 648 659
 578 225 249 335 617 120 241 550 208 265 259 299 551 439 396 150 678 125 147 701 189 664 333 174 162 570 630
 639 341 214 164 416 285 309 643 606  96 254 450 430 699 352 246 210 487 332 242 128 154 270 562 159 619 548
 303 243 267 354 673  70 339 215 388 373 235 577 649 224 193 239 228 668 207 268 160 651 284 723 325 378 621
 364 346 212 714 451 300 306 627 139 351 291 662 644 262 359 365 618 590 122 263 337 177 321 244 185 329 276
 334 382 256 221 438 190 389 248 311 727 287 573 395 326 350 726 401 710 234 315 345 271 314 218 217 397 280
 380 328 269 424 417 693 279 707 370 340 266 426 236 288 347 318 319 308 437 375 323 377 312 386 289 278 363
 336 277 418 115 429 457 357 384 444 322 240 362 400 331 411 368 307 454 511 213 358 367 302 385 459 440 408
 458 505 360 404 158 394 366 472 330 422 324 161 392 313 283 292 525 338 485 316 435 502 226  97 414 477 406
 290 486 420 427 255 453  51 381 387 353 305   1 379 443 494 348 448 264 361 537 490 405 402 304 527 383 261
 530 258 433 445 250 421 399 503 167 403 478 134  41 434 423 463  35 524 476 467 516 410 462 470 501  93 119
 509 506 512 413 275 542 540  60 294  50 584  44 157 499 296 497 492 317 482 491 473 425 489 206 449 118 135
 441  17 496 475 273 549 588  84  18 293 580 376 192  79 541 534 543  77 556 481 507 510 374 559 469  47 196
  33 546 605 460 200 471 545   8 593 526 493  64  21  39 568 579  36  83 474  19 620 563 614 500 635 488  72
 523 479 596 466 144 566 344  80 186 585 558 163  87 197 587 464 452 456 504 671  63  24 583 171 560  26 320
 223 536 533 461 103  30  68 140  78 520 390 532 371 151 484 565 211 233 528 508 572 252 637 538 632 356 203
 166 599 642  57 349 589 613 553 495 653  22 172 114  75 552 446 623 554 595 513 641  28  16  32 547 133  76
 184 594 677   6  15 598  62 539 582 645   9 586 181 202 480 704 575 260 179 684   5 247 628 295 636  29 253
 106 657 680  10 143 612 282 327  55 687 602 519 281  53 600  40 611 622  49 219 201 557 670 137 574 310 251
 188  20  23 667  91 129 138 176 126 681 597 676 601  85 663  61 592 555 102 660 141 571 686  27 697 286 616
   3  89 683   4  42 646 576 216 257 674  12 432 655 230 609 634 607   2 647 661 672 518  46  52 665 209  14

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 4.04486e+06us (= 4044.86ms, 4.04486s)
Wall-clock time (full program): 4.08762e+06us (= 4087.62ms, 4.08762s)
Satisfaction error: 0
Number of search iterations: 1022
Number of local moves: 612 (including on plateau: 232)
Number of local minimum: 58 (including on plateau: 28)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 712 144 572 683 577 595 582 207 548 537 145 136 721  39 364  46  93 177 156 204 453  53  86 608 635  54 728
 695 482 652 709 612 448 629  42 716 530  33  48  37  79  70  51  88 543 575  68 717 509  87 551  58 725 101
 141 130 212 495 646 639 689 106 722 558  47  92 613  75 614  43  62 110 707  69 457 132 657 628 711 188 312
 490 594 718 713 554 477 625  49 170 198 140 150 720  73  63  94 160 404  89 168 159 179 704 714  97 668 685
 580 277 666 631 555 606 320  60 304 698 222 348  32 147 174  83 167  65 138 169 694 201 710 658 651 599 100
 124 650 473 519 726 727 302  99 690 596 369 288  96 164 122  74  67  61 129 336 687 397 605 581 529 262 182
 285 158 125 706 568 195 464 128 632  81 297 238 264 109 319 428 644 126 672 135 674 339 211 597 620 216 624
 570 133 723 536 622 681 630 715 328 250 105 523 153 379 149 301  95 190 254  77 610  80 565 480 244 278 184
 340 255 172 552 615 213 719 306 452 345 434 282 289 231 245 151 243 228 680 209 299 224 673 584 252 259 603
 385 152 693 486 660 321 602 200 469 223 199 218 316 501 173 395 353 669 171 246 192 303 368 485 366 241 468
 276 118 233 550 424 305 472 371 578 590 372 180 373 181 308 315 729 355 234 267 232 342 562 724 261 298 205
 463 403 654 445 446 583 525 257 455 377 422 119 280 194 611 591 220 227 229 354 191 374 376 402 265 108 284
 346 300 102 391 148 260 383 465 367 334 381 341 400 323 458 325 388 415 356 481 505 322 418 483 459 438 266
 359 360 313 247 433 293 279 337 409 500 429 563 420 273 215 324 351 417 333 357 193 506 440 311 349 317 527
 365 447 387 504 393 405 327 390 338 494 370 248 240 410 275 225 307 451 362 258 263 534 235 421 436 426 343
 419 491 413 196 309 449 330 503 439 427 471  34 435 347 113 496 292 498 423 437 389 256 510 197 290 295 396
 352 281 546 107 269 274  21 249 412 586 178 518 380 331 454 675 431 663 189 398 478 508 344  44 564 127 476
 382  23 401 155 283 461  31 618 314 272 329 358 607 528 488 567 208 268 291 350 502 467 253 123 499 544 533
 511 571  59 134 115 210 442 392  26  72 585 441 384 542 545 414 549 143 444 640 221 521 332 104 470 475 514
 466 520 430 117 432 111 203 600  50   6 406 517 547 462 484 507 296 497 378 601 139 516 386 154 186 450 394
 310 656  76 162 131 219 230 702 474 535 487 531 522 637 187  22 541 251 524 492 416 579 460  18 185 493  15
  56 512 318 142 157  10 183 513 121 116 539 526 589 557 645 616 574 648 561 226 146  40  82 237 634 515 592
 489 688 326 176   1 175 236 202 165 287 696 647  66 560 636 691 653 532 621 556   9  11  14  98  84 677 559
 479 682  25   5  55  57 217 705  64 270 294 664 700 665 407 627 626  29  35 701  52 678 161 335  91 588 643
  90  19   7  78  41 662 137 619 206 593 609 569 642 679 399 587 623 638  30 671 538 553   2 271  28 540  24
 166 112 103 408  38 443 163 659 286 363 604 573  13 661 670 566 684 617 598 686 214 576 375  20 242   3  12
   4 697 456   8  45  36 114 361 120  17 692 703  16 708 667 641 411 633 676 699 425 655 239  27 649  71  85

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00012e+07us (= 10001.2ms, 10.0012s)
Wall-clock time (full program): 1.00428e+07us (= 10042.8ms, 10.0428s)
Satisfaction error: 2
Number of search iterations: 3462
Number of local moves: 1184 (including on plateau: 365)
Number of local minimum: 307 (including on plateau: 52)
Number of resets: 2
Number of restarts: 0

Problem in row 15: 365 447 387 504 393 405 327 390 338 494 370 248 240 410 275 225 307 451 362 258 263 534 235 421 436 426 343 => the sum is 9854 rather than 9855
Problem in row 19: 511 571 59 134 115 210 442 392 26 72 585 441 384 542 545 414 549 143 444 640 221 521 332 104 470 475 514 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  60  25 163 684 181 182 571 616 645 694 137 700  72 259 687 670 254 519 109 701  92 171  91 574 677  21 300
  36 538  77 195 159 619 692 635 719  49 235 350  68  84 648 642 292 196 674 660 103 597  30 247 583  29 698
  16 628 717 599 309 105 209 658 612 145  31 634 678  23 618 248 223 120 584 655  44 605 122 532 663  45  32
 357 685 461  13  93 101 568 649 353 614 200 370 126 117 638 207 219 204 622 662 498 539 177  86 626  41 629
 702 233   9 454  11  76 671 531 620 667 139 699 610 483 581 464 186   5 500 149 124 630   3 572 188  34 514
 585 672   1 525 197  57 561 688  15 201 130 588 427 587 490 346 113 562 491 541  17  12 222 560 570  90 607
 535  83 505 365 289 573  20 627 564  99 100 586 563  78 511 189  73  19 661 617   2 486 217 602 594 351 546
 615 482 147 297 291 487 447   7 521  89 165 497 507  97 569 414  56 471 438   4 553 596 433 478 516 261 417
 415 468 272 485  39  35 527 495 199 504  27 448 598 383 470  54 114 173 604 480 401 522 472 395 536 174 565
 547  50 274 295  63 406 528 576 510  10 260 318 534 479 549  59 184 651 493 456  47 608 440 340 606 293 279
 372 467 446 402 373 481  22 501 354 545 331 183 496 356 393 494 509 308 425 410 337   8  24 355 396 540 327
 411  65 185  75 382 457 435 579 492 503 342 432 285 653 387  96 226 488 420 419 428 443 466 421 442 268  55
 332 405   6 253 379 423 437  14 489 408 352 533 526 368 412 391 320 404 397 409 358 345 506 319 469 262 338
 364 458 363 450 264 294 375 302 316 208 341 459 403 696 407 280 323 431 322 426 377 306 452 339 198 386 315
 593 376 241 119 390 465 463 304 283 349 451 398 449 161 455 429 336 424 413  67 394 453 333 477 252 399 381
 307 255 636 656 657 237 359 422 360 334 555  74 317 249 238 625 239 389 314 216 476 430 234 266 344 475 191
 245 303 362 296 474 388 257 290 544 711 277 221 312 286 311 439 520 242 228 347 682 530 380 550  88 416 156
 232 142 508 513 676 384 328 112 265 128 499 227 162 693 330 710 644 691 158 385 229 392 371 129 240 329 378
 213 313 224 589 321 287 301 271 473 444 609 273 299 366  95 647 460 203 727 335 269 250 557 152 324 675 178
 166 256 288 258 631 282 179 115 212 326 707 284 251 686 270 325 697 160 193 673 654 180 418 728 275 436 205
 168 169 603 278 646 714 718 146 172 157 374  85 131 343 246 601 263 136 153 134 726 102 591 621 639 695 244
 218 689 652 132 400 721 170  52 133 708 703 361 107 281  61 298 632 167  70 220 712 724 558 106  82 722 176
 151 434 502 524 679 138 202 305 108 641 515 211 276 243 187 369 590 669 512  37 231 556 110 121 190 664 690
 127 681 537 680 709 668 523  38  26 214 633 210 155 215  87 230 567 713  64 613 600  81 666 118 144 445 111
 715 206 441  98 150 552  58  42 623 367 637  79 716 548 154 267 592 665 123  48 611  46 659 135  80 518 725
 650 310 706  43 575 164  40 705 104 116 551 582 595 543  33 236 643 141  66  51 348  18 640 484  62 720 729
 723 462 529 577 517 559 194 175 143 624 554  53 192 578  28 125 580 704  94 140 542 225 683 148  71 566  69

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 3.53466e+06us (= 3534.66ms, 3.53466s)
Wall-clock time (full program): 3.57655e+06us (= 3576.55ms, 3.57655s)
Satisfaction error: 0
Number of search iterations: 971
Number of local moves: 583 (including on plateau: 186)
Number of local minimum: 54 (including on plateau: 21)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 316 682 157 128 698  36  56 643 676 257 595 695 101  37 628 404  24 377 672 654 293 660 129  40 567   6 324
  70 155 109 152 386 403 462 588  72 624 122 631 138 680 217 320 705 646 414 464 684 619  17 720  14  27 416
  29 312  84 593 633  82 511 107 331 321 569 714  39 702 102 297  44 666 623  93 656 659 195 658  89 663  83
  95 480  76 519 605 115 542 106 586 150 667 531  33 712 621  50 644 589 254 227 252 616 233  43  21 668 420
 219 583  78 130 136 592 610  11 618 141 710 505 143 625 197 432  97 585 600 144 609 601  12 606 159 178 534
  54 608 204 111 175 467 528 498 614 340 673 398 580 421 191  57  53 530   1 620 596  10  34 675 425 495 497
 133 639 161 300  48 594 311 434 572 357 474 402 547 563 629  16 582 333   9  55 591 545  42 504 570  20 424
 193 500 160 164 470 560 493   4 523 222 515 263 579 577 259  35 554 598  41 174 665 527 163 437 622   7 550
 205 482 171 126 463 210  49 423 170  69 562 339 640 553 382 139 546 449  94 401 475 612 278 537 489 435 556
 271 578 533 485 549 559 169 516 410 486 541 203 575 679  15 439  13 363   3  75 181 427 255 413 483 418 216
 718 452 224 487 151 100 186 211 503 472 391 436 276 409 258 397 471  31 638 313 479 548 296 173  63 636 536
 282  65 120 246 406 514 267 456 372 291 535 677 395 512 314 426 459 440 226 525 603  47 201 280 450 367 379
 344 441 697 264 162 447 223 626 389 412  90 244 295 292 419 359 355 366 411 376 400 383 356 431 347 399 327
 338 552 539 388 429 438  28 430 481 717 269 458 322 285 270 454 351 298 286 214 232 381 240 365 354 374 362
 707 506 208 325 396 529 274 260 309 634 364 315 288 385 289 213 234 455 238 405 299 473 393 268 317 428 343
 466 335 415 349 371 250 571 375 332 630 281 350 645   2 329 700 305 230 220 346 307 353 526 284 287  32 564
 384  23 520 336 444 172 200 323 690 689 543 304 649 701 277 242 283 352 319 394 225 167 453 248 247 237 433
 602 294 721 469 249 476 243 251  88 696 392 558 182 330 279 275 262 576 468 189 337  18 604 177 301 565 253
 212 218 265 722 568 207 555 360 310 445 302 417 118 484 532 507 657  60 408 509  98 477 551 235 510  62  66
 635 334 465 671 641 308 215 448   5 241 328 221 198 117 681 121 627 318 709  61 490 168 584 202 192 647 228
 245 206 617 693 184 180 729 273 306 176 188 517 185 231 518 574 209 158 194 342 711 153 728 378 655 239 266
 494 272 499  38  58 119 664 691  30 544 113 103 723  99 708 704 148 114 683 488 166 387 341 256 607 345 461
 540 142 566 492 719 669 496 451 196  73 125  96 154 112 229 422 725 373 590 501 127  74 726 370 557 190 140
 573 147 642 358  85 348 261   8 694 508  81  86 110 135 703 446 674  71 513 715 187 165 615  45 727 597 361
 522 146 661 686 613 699 156 123 380  79  52 290 687  67 134 538  87 713 326 653 116 648 670 108  26 611  64
 502 599 521 145 124 650 688 587 179 149 137  22 692  68 183 651 443  59 199 457  51  46 581 678 369 685 390
 706 104 442 478  92 131 368 652  19 132 236  80 561  77 491 637 303 105 716 460  25  91 632 724 407 524 662

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.00418e+07us (= 10041.8ms, 10.0418s)
Satisfaction error: 1
Number of search iterations: 3163
Number of local moves: 967 (including on plateau: 308)
Number of local minimum: 261 (including on plateau: 39)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 1: 324 27 89 43 12 10 591 174 94 363 471 426 419 285 288 350 543 696 310 448 729 119 719 358 661 599 706 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 727  51  49 140  95 627 586 384 122 726 451  40  57  76 646 708 583 102 512 670  99 141  92  87 692 668 724
 622 658 117 729  98 101 115 536  66 131 557 180 411 159 488 116 564 120 600 716 547 577 193 635  85 666  68
 718 701 702 189  53  45 182 517  69 109 190 688 427  79 508 725 483 111 571 723 450 146 576 642 107  89  55
 690 469 172 161 123 129 493 661  96 165 651  60 475 145 657 124 171 393 569 714 721 133 467 616 125 612  63
 164 665 158 167 712 238 454 585 151 481 685  27 214 650 538 227  65  58 413 505 678 231 579 199 262 575 174
 633  56 341 355 261 715 428 675 229  39 639 187 485 195 235  91 201  80 660 319 705 628 183 592 154 626 143
 213 209 200 113  93  97 441 643 707  90 656 119 673 230 637 245 215 476 698 543 285 274 555 105 286 695 357
 216 186 130 185 169 228 549 659 232 220 212 257 292 170 175 710 304 489 514 632 709 346 700 654 397 266 254
 236 181 197 139 217 196 713 277 638 260 667 316 711 335 682 126 194 671 644 524 298 226 405 369 423  74 136
 207 322 321 301 303 295 722 443 198 299 625 284 619 276 325 218 259 365 563 558 683 265 273 250 278 289 314
 728 270  73 580 272 364 525 308 247 300 394 191 636 142 618 375 337 540 380 578 246 281 693 234 132 251 160
 203 359 652 242 241 268 353 271 704 310 267 402 288 279 256 640 370 498 456 317 339 358 386 444 324 379 249
 282 468 414 342 522 417 438 338 466 244 148 500 323 406 343 206 442 422 433 233 376 366 263 472 354 320 318
 400 340 350 418 401 349 448 306 408 388 283 495 309 291 368 378 425 486 347 222  75 328 513 482 391 352 302
 147 334 297 566 360 371 237 409 253 532 421 239 492 332 296  59 452 403 502 392 458 430 449 382 374 361 307
 294 541 336 429 387 327 255 351 477 590 416 603 312  11 313 367 110 412 439 395 478   3 385 356 399 480 389
 390 499 550 589 605 446  82 205 348 420 362 473  42 471 437 396 381  50 258 223  46 419 287 435 561 497 383
 573 474 426 509 453 528 184 410 424 149 552 331  77 373 103 507 494  52 330 221 521 459  71 440 407 372 415
 463 377 153  19 535 404 269 479 556 534 465 315  34 464 531 436  44 503   5  16 461 554 462 565 447 202 562
 457 516 434 611 544 431 168 179 344 568  33 491  54 523  78 527 530 248 156  22 121 515 510 572 519 208 496
 567   1 526 539 520 546  10 445 432 548  94 511 305 602 537 506 533 225  14 243  13 598  43 275 596   6 620
 490 487 621 560 630   9 112 144 601 604 100 398 264 641 188 648  17 178  64 470 594 127 545 211 606 542   4
  41 455 608 610 326 629 290 219  35 706 152 504 613 551 280  23 664 345 135  83 210 484 118  31 584 588 570
 138 615 699 106 647 599 311  86 581 624  70 363 204 597  28 674  15 684  81 176 333 669 157  26 631  62 679
  12  18  21 553  32 662 574  29 609  36 518 649 614 501 104 593 653 687 134  47 173 681 645 582   2   7 719
  67   8 691  48 559 114 587 224 696 694  84 529 252 676  24  38 686 634 240  20 108 591 150 162 689 607 677
 177 595 617 655 697 720 329  72 166  88 163 703 672 680 460 192 663 623 137 293 128  25 155  37  30  61 717

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00018e+07us (= 10001.8ms, 10.0018s)
Wall-clock time (full program): 1.00446e+07us (= 10044.6ms, 10.0446s)
Satisfaction error: 2
Number of search iterations: 3002
Number of local moves: 904 (including on plateau: 357)
Number of local minimum: 236 (including on plateau: 38)
Number of resets: 1
Number of restarts: 0

Problem in row 13: 282 468 414 342 522 417 438 338 466 244 148 500 323 406 343 206 442 422 433 233 376 366 263 472 354 320 318 => the sum is 9856 rather than 9855
Problem in row 23: 41 455 608 610 326 629 290 219 35 706 152 504 613 551 280 23 664 345 135 83 210 484 118 31 584 588 570 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
   6 325  99 631  67 671 595  49 651 212 215 678  31 693  69 190 600  62 666 606 105 477 614 551  90 555 347
 602  13 659  30 223 603 697  55 695 208 683 116 147 563 134  50 675 170 689 648  16 687 448 387 473   3 181
 673 354   2 621  51 157 313 126 548 564 497 384  33 662 588 622  34 149 684 610 222 571  40 643  64  28 615
  81  96 552 530 119 535 605 569 620 238 583  63 485 462  46 501 682  37 669 616  88 594 565  12 430  45  32
 257  75 373 590 262 279 604 142 688  18 287 611 553 634 197  76 624 254  19 574 545 319   7 464 573 349 481
 409 204 645 468  74 414 654 318 672  61 537 301 578 567  48 166 549 137 450 427  21   8  23 474 513 581 556
 674 399 488 456  22 609  58 131 397  73 206 267 649 484  78  42 476 302 558 480 372 597 533 173 465 228 638
 260 515  11 561 266 517 538 102 370 518 562 572 636 626 101  71 522 416  98  24 203 441 521 141 431 580 252
 455  80 679   9 129 120 529 493   4 503 627 625 300 461 148 167 390 217  38 460 342 449 642 577 498 426 487
 124 331 298 557  84 442 599 236 494   1   5 500 470 393 495 210 509 400 243 454 547 434 451 185 528 467 398
 195 541 418 644 261 368 205 172 412 429 436 410 186 458 362 202 109 694 315 391 534 191 388 482 423 224 405
 381 526 527 415 214 392 234 469  59  15  10 386 402 289 668 524 356 389 189 320 408 437 209 618 478 516 424
 343 725 471 235  92 369 428 357 586 447 193 421 277 198 366 690 483 505 422 332 371 382 376 394 121 251  20
 242 512 294 290 722 361 466 364 360 326 337 146 367 439 592 352 299 491 532 113 269 179 278 407 463 395 259
 324 383 475 156 499 272 365 355 311 438 329 453 385  53 703 543 358 297 246 346 286 323 445 123 457 351 579
 396 663 489  66 681 241  14 350 122 584 333 378 676 293 226 377 433 506 519 245 305 136 413 374 404 292 339
 665 276 117 304 629 188 135 716 322 582  43 635 338 219 237 435 336 443 420 271 344 310 479 348 353 375 335
 633 596 403  68 566 282 159 239 110 700 726 425 250 155 560 196 177 514 444 280  47 230 341 306 504 316 628
 229 363 111 317 640 309 291 211 589 686 607 164 417 285 630 559 132 546 274 240 655 314 328 330 283 114 231
 411 585 288 379 544 619 171 728 253 492 327 531 218 225 169 174 232 100 472 719 486 677 138 296 150 227 244
 525 539 715 145  54 130 720 256 536 617 273 312 255 162 653 699 176 163 125 200 570 248 221 194 199 657 511
 650 233  91 275 701 710 258 656  44 127 321  94 704 263 490 380  95 459 270 401 718 708 160 340 192 268 247
 168 542 213  85 721 265 295 220  35 216 601 281 151 139 264 334 175 598 523 115 576 554 658 568 165 713 680
 187 201 664 692 641 613 153 707 249  83 112 182  57 724 510 161 144 612 152 128 104  72 667 712  86 702 540
 691  29 717 118 647 108 591 632  25 723  60 183 705 180 406 698  56 446 359 154 593  93 143 623 706 133  36
 184 670  17 502 639 178  82 652 496 419 637  52 520  70 608 709 587 508  27  41 696 284 661 107  77 345  87
  89  79  39 711 307 103  97 550 207 575 308 685  65 158 507 727 646 440 452 660 432 140 106  26 729 714 303

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00014e+07us (= 10001.4ms, 10.0014s)
Wall-clock time (full program): 1.00426e+07us (= 10042.6ms, 10.0426s)
Satisfaction error: 2
Number of search iterations: 3489
Number of local moves: 1141 (including on plateau: 507)
Number of local minimum: 278 (including on plateau: 62)
Number of resets: 1
Number of restarts: 0

Problem in column 1: 6 602 673 81 257 409 674 260 455 124 195 381 343 242 324 396 665 633 229 411 525 650 168 187 691 184 89 => the sum is 9854 rather than 9855
Problem in column 7: 595 697 313 605 604 654 58 538 529 599 205 234 428 466 365 14 135 159 291 171 720 258 295 153 591 82 97 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 353 703  83  82 674 617  71 548  35 491  72 714 624 165 656  22 444 655 147  62  58 194 600  60 657 716 352
  70 718  47 160 604 688 191 607  34 663  28 717 654  65 715 634 174 192 111  79 582 697 722  67 519  80  37
 303 625 725 127 695 593  57 583  46 626 117  64 681  90 701 217 535 244 175 114 116 134 527  49 469 540 702
  88 267  54 328 676 682 110 684 101 708  48  36 152 547 616 672 727 142 178 445 150 243 602 710 247 163 479
  38 293 221 577 392 700 113 597 363 550 136 170 106  92 680 313 643 232 190  75 140 576 721 598 692 155 492
 652 169 162 292 591  81 336 713 280 691 164  94 109 474 145 687 588 521 108 157 719 720 383  45 696 102 176
 203 159 614 206 611 699 581 633 149 332 103 449 609 156 257 669 278 255 235 343 133 146 571 138 458 227 641
 413 197 144 161 618 590 129 500 181 179 153 338 172  52 141 299 683 572 400 401 310 608 565 168 512 640 729
 151 368 301 126 584 282 188 186 706 673 511 675 325 122 373 177 613 399 580 201 288 154 433 360 275 185 619
 372 321 323 424 504 261 228 265  99 573 193 685 195 183 395 196 658 726 260 302 256 215 553 222 273 502 671
 266 294 219 347 549 211 121 497 204 367 724 605 314 205 398 233 470 472 240 711 344 214 447 187 298 385 533
 480 359 210 245 465 182 630 358 376 319 291 563 405 199 603 467 289 356 345 403 226 346 377 354 379 259 369
 412 281 431 389 507 342 329 411 300 269 436 595 290 659 341 425 339 331 234 406 236 322 381 371 296 128 394
 258 305 277 435 387 375 506 230 430 404 384 390 286 459 349 408 268 417 283 466 320 551 382 402 396 274 213
 355 362 334 421 241 242 499 456 523 522 284 249 443 493 237 416 427 446 115 223 285 428 348 357 423 361 365
  55 448 326 503 297 537 380 308 525 545 422 407 495 350 239 437 311 531 463 254 324 212 124 510 238 248 366
 534 560 272 528 276 515 453 251 393 208 312 330 218 415 391 270 439 262  26 468 471 418 295 202 333 426 589
 306 220 457  27 250 490 501 567 173 556 442 476 575 315 318 304 309 119 529 327 452 434 120 451 374 579 184
 557 432 409  87 130 594 464  91 508 410 484 317 287 516 561 505  78 100 438 481 420 370 263 635 167 544   7
 559 520 524 536  30 488 620  77 541 104 478 189 623 378 585 587  68 636 461   8 454 487 118 606  76  59  43
 482 252 615 539 246  50 132 180 621 105 648  25 460 386 455 578  16 337 622 518  19 538 429 639 216 440 307
 546 679 462 649  63  17 586 610 698 135 558 351 596 562 137  42  96   4 552 530 509  12  85 388  84 564 340
 689  29 670 677  15  93 225  31 628  97 653 489   2 483 253 419 229 629 667 513 570 517 224  61 271 514 207
 473  13 599  18 335 143 574 279 209  20 543   1 477 709  89 166 650  51 485 554 661 569  86 414 646 694 397
 532 712 723 664  66  21 526  74 678 139 627 441 668 450  98  39 200  40 662 665 494  32 112 592  23 568   9
 705  14  41 660  44 131 704  95 690 158 316 475  56 693  53 566 198 542 707 651 632 645 123 631 171   6 148
   3 555 612 647   5 231 601  24 364  11 728  10  33 637  69 107 125 644 642 498 686  73 264 638 666 496 486

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00019e+07us (= 10001.9ms, 10.0019s)
Wall-clock time (full program): 1.00438e+07us (= 10043.8ms, 10.0438s)
Satisfaction error: 1
Number of search iterations: 2890
Number of local moves: 1096 (including on plateau: 458)
Number of local minimum: 236 (including on plateau: 57)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 1: 352 80 469 710 721 720 133 401 580 726 470 467 341 459 443 407 312 556 508 77 132 17 15 18 723 14 3 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 116 650 633 293  24 666 704 566 549 691  82 713  64  78 698  47  84 139  33  29  45 587 478 703 682  68 433
 547 162 715 685 495 270 436  54 363  56 141 669 634 508 175 457  71 721  19  39 540 584 226 112 716 326 134
 172 593 717  90  80 573 506 629 397 528 660 675 155 670 193 611 220 287 181  21  69  92 706 150 710 143  27
 509  67 595 357 169 695 677 718 518 269  79 709 151 209 692 174  66 128  65 207 206  70 399 723 712 638  53
 173 177 334 188 722 480 613 471 720 711 507 477 688 109 476 166 224  52 569 163  50 144 656 222   5 696  62
 635 231 446 312 124 426 581 652 672 643  89 161 167 702 154  86  96 111 104 653 403 542  94 168 676 719 208
 553 245 538 105 432 515  42 663 616 228 493 305 192 243 681 451 256  87 211 261 659  97 582 145  32 725 498
 126 214 602 615 117 589 427 450 520 221 254 571 336 215 118  58 285 160 223 726 671 227 714 232 641 251 292
 727 701 724 278 212 578 559 640 350 337   8 159 257 341 182  91 333 621 466 274 406 121 235 295 558 345  57
 533 309 449 198 108 468 562 136 127 541 129 422 651 456 260 339 213 570 371 385 389 273 425 366 462 513 200
 700 428 484 434 380 474 318 481 225 252 419 102 348 342 314 264 392 618 184 316 229 303 452 387 514 349 146
 530 502 271 286 247 237 279 294 313 442 488 400 253 384 304 420 372 511 248 598 317 444 277 263 537 236 402
 435 266 469 290 382 459 665 156 585 322 346 388 310 307 527 597 265 332 302 241 393 306 386 373  23 378 352
 458 438 291 319 268 521 315 395 487 359 284 311 210  26 424 301 365 418 414 340 185 619 354 490 324 391 548
 276 335  93 381 246 377 574 283 355 505 439 370 298 325 415 379 453  55 297 289 329 416 552 281 684 504 344
 699 491 240 320 412 383 347 407 421 729 431 413 486 244  49 361 369 360 519 627 465 411 133 137 107 171 123
 401 262 152 475 470 106 430 308 410 178 445 632 328 367 376 485 572 296 364 374 489 272 288 405 323 165 482
  51 496 183 512 464   2 202 624 147 142 455  40 423 409 510 390 596 267 461 608 258 594 356 460 110 563 532
 494 394 234 561 343  85 164 103 282 330 467 586 536 550 362 577 170 331 551 249 358 479  25 556  20 525 523
  44 628 140  34 649  36 130 321 131  48 497 503 588 408 440 526 623 662 204 375 590 534 606 501 203 299 135
 233 545  12 617 564 517 259 148  74 447 195 153 499  38 637 620 639 636 217 565   3 441 119 483 186 560 448
 612 351 187 622 398  16  73  37 190  59 516 473  17 555 557 648 655 579 697 197 327 472  60 529  30 454 544
 101  31 630 583  18  88  75 149 216 199 680 396 239 607  14 554 605 443 609 524 543  61 689 546 531 120 604
 122 658  98   4 591 437 132 113 522 693 368  35 580 338  63 644 678   6 610 539 600 614 180  10 500  46 674
 275  77 242  72 567  99 568 230 205 218 654 100 664 115 576 138 492 690 535 683 125 194 429 646 404 196 661
  95   1  76 599 668 601 176 626 417 679  22  83 189 667 645 191 114 694 728 219 575 250 179 657   7  11 686
 238 603 300 625 705 157  41 201  43  28 707   9 592 642  13 280 647  81 673 353 631 708 255  15 158 463 687

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.61417e+06us (= 9614.17ms, 9.61417s)
Wall-clock time (full program): 9.65645e+06us (= 9656.45ms, 9.65645s)
Satisfaction error: 0
Number of search iterations: 3042
Number of local moves: 1042 (including on plateau: 372)
Number of local minimum: 256 (including on plateau: 48)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 709 719 629  55  37  92 411 729 459 488 162 501 602 101 246 551 119  80 280  67  69  50 536  45 702 728 688
  84 694 610  65 596  43 614 726 595 122  24 708 711 121  32 716  31 135 628  99 155 129 125 692  94 713 593
  59 568 722 556  39  49 435 128 707 705  66 712 492 495  90 273 217 723 225 111  47  48 662 143 725 368 490
 718 498 573 693 174  42 426 187 608 656 152 425 565 380  77 183 144 167 633 606  86  93 141 704 139 100 685
 108 636 699 195 701  96 698 188 214 654 160 637 660 231  38 591 279 506  95  81 201  89 585 193  76 681 563
 150 572 603 179  97 710 567 538 289 684 221 535 675 145  40 655 251 172 673  34 569 721 105 247 115  82 226
 290 205 570 676 250 220 720 107 687 496 242 668 153 510 215 667  68 134 267 630 432 727  73 240 223 104 281
  20 270 430 137 164 387 159 375 278 644 298 598 321 689 294 382 504 264 180 678 507 724 198 227 262 287 578
 136 601 706 203 190 322 245 102 503 589 206 714 695 500 370 274 324 110 664 248 625 252 208 291 272 268 237
 126 542 494 442 222 365 717 146 269 351 253 344 266 649 317 192 697 672 293 389 509 228 212 282 356 288 234
 440 485 427 417 386 392 163 255 271 686 249 347 169 574 364 369 404 336 441 306 405 186 519 301 300 353 310
 657 467 400 373 304 327 312 379 345 670 329 395 229 335 384 409 415 194 677 173 366 243 259 284 330 314 285
 390 457 339 424 715 474 342 296 381 328 394 176 341 360 337 224 444 450 352 374 165 362 332 303 297 355 443
 691 475 346 283 393 436 233 445 383 399 320 448 196 334 311 460 154 638 292 241 477 254 265 433 431 340 177
 367 428 260 358 462 518 308 218 372 157 469 543 408 343 275 376 447 127 211 413 451 276 533 439 323 396 377
 295 131 219 453 497 256 354 410 210  10 613  46 309 239 527 489 318 456 480 531 316 419 458 544 429 363 483
 118 416 313 420 414 466 455 348 319 238 307 385 406 299 481 471  72  17 422 407 554 434 397 579 403 512 202
 325 244 315 402 529 530 539 452 468  23 472 401 302  70 577  27 117 586 592 361  21 487 590 446 286 532 161
 552 185 116 350 584 438  36 549  13 197 511 331 641  57 659   8 478 583  85 454 230 371 486 523 421 482 515
 643 207 132 605 690 423  58  53  14 182 623  64 109 213 449 534 564 333  15 508 398 588 522 562 555 612 199
 151 184 209 626 357 545  91 634 338 133 463 258 106  78 412 648 470   2 576 525 120 516 520 631 465 650 147
 528  87  35 513 514 166 168 561 682  75 703 204  26 548 493 473 502 607  63 559 566  16 175 632 326 484 149
 547 200 103 617   6 666 114 499 148  41 158  51 130 600 437  25 378 665 391 587 464 604  56 651 491 599 627
 645 112   4   5  44 461 558 537  62 349 540  54  83 647 611 622 521 235 553 257 609 646 597  11 557  18 517
 479  29 359 624 156 232 261 669 541 189 696 113 580 178 505  33 679 418 191 550 615 652 621 388  60   9  28
 620 305 171   3 663 560 594  88  19 619 524 123  98 683 653 142 640 674 546 140 635 124  22  52 575   1 581
   7 138  71 181 671 639 277 236 680 170 700  74 582 476 661  61 618 571  30 526 263 616 658  12 642 216  79

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 5.41985e+06us (= 5419.85ms, 5.41985s)
Wall-clock time (full program): 5.46167e+06us (= 5461.67ms, 5.46167s)
Satisfaction error: 0
Number of search iterations: 1263
Number of local moves: 735 (including on plateau: 323)
Number of local minimum: 75 (including on plateau: 27)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
   7   1 624 501  23 637 685 619  42 699  86 705  68 639  70 104 565 633   6 667 443 660 617 488  63  65 138
 632 195 640  52  53 300 678 167 310 673 187 674 695 184 297 108 600 661 603 102 533 641  25 658  78   9 100
 566  46   4 148   2 663 583 691  38 675 636 518 700 439 159  44 646 462  39  62 642 643 587 125  41 579 117
 537  13  10  12 112 480 704 509 207  34 644 647 608 512 560 146 677 286 591 601 686  55  84  20 303 688 129
 612  50 570 609 351 648  47 656  17 411 257  33 278 662  77   5 223 559 592 614 681 485   8 634  31 631 114
  88 164 666 558  74   3  56 586 163 490  32 407 555 538  58  19 245 562 611 459 664 571 541 589 504 563  89
 503 135 506 477 109 457  98 491  83 493  75 670 669 507  15 210 221 451 473 552  27 542 546 635 478 235 197
 548 103 567 463 198 272 638  59 224 545 185 645 116 412 142 119 215 486 313  24 505 487 456 547 447 610 528
 549 293 448  45 162 621 529 543 413 465 539 526 551 124  11 414  60 409  81 500  61 590 156 613 497 476 179
 470  49 420 513 178 499 400 446 314 131 283 495 260  95 206 524 153 573 525 306 498 472 577 475 532 424  37
 536 266 471 540 240 511  80 417 387 449  16 391 468 502 402 336 304 381 301  57 130 291 290 514 461 594 520
 237 217 299 388 572 366 396 364 296 325 338 496 340 445 428 430 406 271 418 438 270 269 452 379 334 434 247
 410 372 253 326 285 450 318 375 383 350 425 453 133 423 322 441 377 404 328 494 323 295 440 393 343 392 347
 373 319 405 585 265 395 419 141 382 384 386 249 357 355 333 361 280 362 354 426 302 444 365 358 431 370 454
 315 415 264 312 376 530 252 337 389 469 244 233 327 367 429 597 380 352 229 721 341 287 348 483 321 192 346
 455 422 356 399 394 155 276 316 421 248 289 332 517 718 556 228 342 298 284 150 436 464 427 390 432 308 242
 143 574 243 238 557 317 344 273 484 479 330 311 694 183 345 267 715 331 254 309 460 274 305 416 292 250 467
 324 535 259 320 433 232 671 281 534 201 234 205 523 230 360 550 458 607 378 154 398 218 279 258 353 339 521
 199 713 268 251 544 294 169 335 725 227 371 307 508 706 598 118 668 225 654 165 166 369 170 262 128 241 474
  73 575 219 385 623 246 359 729 492 151 679 111 282 442 522 616 368  67 139 692 435 277  30 145 226 288 684
 212 527 211 191 568 231 714 349 564 553 122 171 374 173 659 655 516 186 168 220 722 275 200 236 657 193 208
 209 582 189 157 466 710 175 137 605 255 672  90 580 620 680 690 401 182 363  66  97 723 149  72 176 126 683
 724 687 140 630 720 121 256  99 569 261 689 132  29 204 202 576 628 123 727 196 180  69 716 190 329 127 531
 177 615 397 703 588 602  91 160 134  64 188 701  48  87 581 618  22 101 144 651 115 161 665 222 599 702 719
 152 682  21  96 626  35 239 489 649 136 717 203  51 147 652 578 158 627 604  40 510 214 676  85 726  92 650
  76 712 696 263 629  54 584 181 408 515 606  79  18 113 595 403  14 174 194 708 110  36 653 107 519 711 697
 728 593 709 693 707  26  94 105 622 172 625  71 106  28 596 698 213  82 482 481 120  43  93 561 554 216 437

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00014e+07us (= 10001.4ms, 10.0014s)
Wall-clock time (full program): 1.00435e+07us (= 10043.5ms, 10.0435s)
Satisfaction error: 2
Number of search iterations: 2758
Number of local moves: 1130 (including on plateau: 446)
Number of local minimum: 225 (including on plateau: 68)
Number of resets: 1
Number of restarts: 0

Problem in row 8: 548 103 567 463 198 272 638 59 224 545 185 645 116 412 142 119 215 486 313 24 505 487 456 547 447 610 528 => the sum is 9854 rather than 9855
Problem in row 15: 315 415 264 312 376 530 252 337 389 469 244 233 327 367 429 597 380 352 229 721 341 287 348 483 321 192 346 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 464 578  61 606  29  70 230 613  79 582 488 231 677  32 627 688 600  92 436  93  24  42 581 687 515 708  22
 524 726  47 555  49  30 497 632 154 141 354  27 720  57 599  68 680 174 648 223  53  46 695 705 607 160 684
 593 148 691 721  72  88 143 723 619  96 707 144 503  66 572  31 254  41 584  63  99 130 727  54 718 595 673
 265 123  48 722  23  71 685 728 119 164  33 430 569 106 710  86 517 150 714 208 189 127 666 719 563 504 616
 670 117 712 558 681 156 245 522 409 108 145 210 520 112 402  59 717 233 661 534 217 203  82 142 573 171 696
 183 527 175 168 196 715 412 622 159 105 151 629 713 249 551 173 510 194 703 216 204  73 608 157 678 596 188
 469 588 146 556 536  90 587 692 114 201  91 349 499 324 392 225 110 155 621 289 308 625 267 111 671 603 236
 571 199 246 300  89 125 220 386 198 307 134 690 620 221 641 374 325 297 490 682 205 218 630 131 227 672 657
 574 247 243 234 140 278 250 611 700 184 286 511 579 228 640 113 689 348 724 153 185 259 316 235 654 287 187
 172 407 266 166 182 273 693 567 262 660 257 675 508 258 623 433 260 226 456 244 272 248 373 177 261 624 312
 658 381 281 170 209 284 331 442 389 471 709 702 309 213 509 410 271 149 276 314 443 263 211 238 241 711 270
 240 333 139 415 318 167 288 414 200 445 729 214 237 371 664 366 486 375 305 367 434 268 302 667 322 437 352
 399 215 298 342 388 725 304 448 332 321 383 401 346 350 239 385 361 328 477 395 280 335 379 368 347 291 418
 311 480 417 224 421 398 461 526 330 253 334 295 275 474 363 387 274 400 353 252 344 405 329 320 376 380 473
 411 359 468 483 323  78 416 301 369 306 315 186 382 351  85 372 232 397 454 425 439 598 384 423 466 356 476
 403 299 377 427 452 580 355 191 135 390 365 532 343 404 202 128 440 462 176 345 487 568 426 339 317 158 554
 282 393 364 396 424 378 525 222 360 391 444 161 408 463 362 290  11 530  10 413 557 484 279 394 472 502 340
 482 549 594 419 460 505 435 277 422  45 544  26 479 432 406 429 256   5   2 453 428 496 478 303 485   7 438
 152 583 457 560 559 577  13 103 547 491  28  64  77 495 132 420 475 518 138 458 605 341 370 562  55 523 552
 548 481 451  51 617 566 585 100 446 489  98 192   6 553  67 546 591 528 163   4 638 663 507 531 207  94 133
 494 550 447 121 519 431  38 319  74 513 631 181  52 539 195 441 541 646 178 512 310 601 493 264 564 120  81
  87 107 500  97 450 455 498  39 533 467 679 136 251 459 293 516 521 542 229 492 618 126  76 565 292 193 634
 109 609 653 124 628 586 147  14 296 514   3 699  34 604 197 545  16 449 294 644 637 615 470 506  62 115 285
  40 116  50 706 180 570 643 102 561 642 698 612 190 656 179 597  18 683 219 129 540 659  60 465  65 357 118
 336  37 537 590 669 662 283   8 697 326 313 655 162 589  80 543 650 645 255 665 626 137  44  95  25 104 122
 206 165 686  43 592 639  36  84 716 633 242 327 338 647  56 529  15 652  20 668 704 674  83 676  75  12 337
 212 538 501 101 649 358 535 169 635 610 694 576  58 602  69 701  35 636 269 614   9 651  19  21  17 575   1

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.0751e+06us (= 6075.1ms, 6.0751s)
Wall-clock time (full program): 6.11691e+06us (= 6116.91ms, 6.11691s)
Satisfaction error: 0
Number of search iterations: 1617
Number of local moves: 648 (including on plateau: 252)
Number of local minimum: 112 (including on plateau: 22)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 699 688 722 103  39 717 146  67 373 634 714 118 720  49 691 567  33 102  59 619 105 682 246 703  60  75 124
  93 557 161 707  36 556 708 178 147 550  89  50 700  74 709  61 167 156 107 686 624  99 713 659 502 633 133
  79 115  78 719 471 610 663 651 333 512 724  85 726  95 128 715 213 121  98 137 457 203 607 166 209 519 421
  56 693 113 716 574 528 126  97 511 494 705 182 695  23 274 183 656 493 450 174 173  28 562 575  73  51 650
 616 645  83 216 698 630 214 179 605 495 727  82 729 104 669 117 572 259 413 134 122 249 569 144 212 218 154
  71 702 159 287 136 554 679 195 600 199 255  68 631 127 583  41 158 472 478  91 526 672 582 697 204 548 140
 139 230 534 160 649 638 197 101 710 641 215  70 272 225 130 109 541 201 636 261 685 417 725 599 171 351 248
 376 281 150 202 116 589 411 529 647 628 131 177 244 164 138 226 311 694 667 712 184 172 559 573 119 706 149
 277 675 245 192 299 323 250 588 591 594 365 355 728 319 229 168 375 187 205 132 668 210 723 422 194 489  52
 181 254 295 530 632 233 223 625 674 692 198 236 243 314 211 185 143 701 348 271 680 283 222 364 273 217 627
 169 297 129 292 658 345 393 240 585 270 547 242 232 289 444 306 718 336 241 253 310 207 290 309 328 704 721
 405 221 316 337 325 558 175 681 629 343 324 335 268 189 378 234 440 338 275 285 368 296 497 200 291 696 451
 307 265 332 339 320 269 327 711 125 363 441 326 500 452 404 394 340 384 383 231 280 279 432 428 480 358 385
 542 186 284 227 235 206 264 561 224 517 346 322 353 501 294 374 331 458 535 446 386 380 391 317 429 453 293
 371 359 424 334 416 532 407 262 366 313 344 479 330 420 398  40 239 449 301 454 401 402 369 388 288 256 513
 438 347 431 370 423 329 455 381  13 437 342 492 392 302 473 427  57 518 112 286 298 565 341 515 251 397 463
 409 238 193 361 460 308 190 436 468 470 466 390 488 521 419 447  96 357 114 484 276 461 435 482 536 304  46
 389 382 657 586 491 395 503 403 350  29 462 456 415 476   1 408  87  25  53 483  58 568 258 496 587 425 412
 448 396 410 475 418 399 540 426   8  44 465 654 367 507 379 499 123 464  19 524 459 504 400  86 439 354  48
  90 549 490 580 546  45 506  18  10  27 474 595 219 481 643 516 601  66 637  17 510 604 145 539 469  72 406
 520  47 498 508  26 188   4 300 433  22 312 545 170 584 531 613 514 598 196 553 434 315  64 303 577 533 467
 670  32 551 537 305  21 443 525 111 176 142 523 155 564 579 655 266 220 683 538 477   6 260 148 661 165 442
 593 552 676  65 356  94 151 445 282 509  54 596  37 560 505 614 247 623 640  81 318 352   2  84 615 228 576
 581 543 660 618 106 152 430 321   9 263 120 606  34 620   3 673 644 566 578  15 522 622 108  24 612 414  11
 639  14  77 252 377 157 602 555 267 110 642 617  42 609   5  20 677 626 665 653 162 603 191 544  38 141 570
 690 487 597  80 180 387 362 349 257 163  43 592  12 608  16 652 671  69 278 648 237 646  76  35 571 485 664
   7 100 590  62 563  92 486  31 527 360 208 662 153 678 621 611 635 372 684 687 135  30  88  55 666  63 689

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00009e+07us (= 10000.9ms, 10.0009s)
Wall-clock time (full program): 1.00422e+07us (= 10042.2ms, 10.0422s)
Satisfaction error: 1
Number of search iterations: 3293
Number of local moves: 1226 (including on plateau: 540)
Number of local minimum: 331 (including on plateau: 58)
Number of resets: 2
Number of restarts: 0

Problem in diagonal 0: 699 557 78 716 698 554 197 529 591 692 547 335 500 501 398 427 96 25 19 17 434 6 2 24 38 485 689 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 528 645 166  99 638 574 394 605 715 223 168 441 155 564   5 244 273 714 566 668 208 171  97 687  42 242  23
 526 392  22  87 695 688 703 587  27 400 389 435 177 413 671 332 176 717 364 478  11 707  34 180 148   7 489
 678 612 210  13  44 639 656 650 315  53 562 644 225 697   2 135  67 220 465 497  57 680  46 685  59 302 642
 205 538  35 534 450 586 654 617 641  63 646 623 203  25 165 660 105 583 625  74 572 499  92  18 114 331 197
 559 599 417 100  16 122 624 540 254 187  60 573 119 585 548 237 157 365 311 622   8 563 448 303 429 447 662
 664 589 184 337  19   3 637 604 294  66 456 541 500 274 457 164 143 593 636 495 544   9  56 718  54 530 288
 416 216 126 570 504 125 553 565 461  49 307 554 626 567 542 107  89 380 607 138  33 584  71 621 420  55 569
 507 486  15 151 137 299 515 271 468 546 150 418 181 393 439 480 471 479 614 130 149 146 312 491 523 475 609
 596 576 354 597 518 549 113 519 272  36 108 460 103 484 648  40  94 445 200 454 316 577 118 506 163 498 511
  41 580 613 402 443 160 345 595  93  51 535 666 372 556 537  98 145 185 550 510 167  20 175 503 483 411 619
 280  64 112 494 508 700 227 295  14 451   1 102 381 199 557 669 640 436 726 458 198 634 361 432 431 134 351
 463 427 487 560 473 552 348  24 144 335   6 320 350 395 531 264 293 421 464 387 275 547 111 430 440 438 370
 306 485 284 310 425 496 287 378 407 243 514 466  48 651 513 358 360 366 270 336 257 375 238 342 423 399 318
 373 592 675 266 349 529 235 173 419 172 183 493 409 442 128 699 279  21 192 598 265 469 428 408 601 246 211
 346 582 278 229 156 374 248 401 352 290 297 313 341 344 406 670 424 255 691 321 379 269 647 296 326 343 277
 502 219 308 390 186 259 141 382 384 397 267 652 325 386 437 323 209 470 286 317 459 285 571 262 314 728 396
 212  88 673 236 347 283 298 422 517 588 362 340 414 359 201 367 558 330 405 268 659 329 727 252 322 261  37
 253 324 234 115 723 291 129 263 472 490 327 444 251 174 338 353 363 591 453 403 661 328 477 376 245 159 618
 304 217 309 206 204 131 224 383 724 606 630  76 170 357 258 561 684 226 674 256 578 446 658 182 388 215 188
 158 247 232 355 281 195 292 545 629 653 415 452 231 509 191 154 615 276 120 716 462 222 410 218 512 516 249
  10 250 426 356 300 385 713 104 434 709 575 339 657 139 241 533 692  50 178 179   4  84 527 213 594 627 536
 142 233 679 720 202 334 289  96 706 505  47 221 581 551 214 260 729 228  30 194 371 655 467 543 162 305 391
 568 116 611 694 696  85 117 110 476 649 616  70 719  73 602 555 686  72  29 193 539 189  83 161 482 632  32
  95 140 525 712 702  77  62 136  61 481 521  58 633 522  80 369 207 710 123 474 705 239 620 690 152 693  68
 672 240 663 109 127 698 412  12  75 643 301  28 398  26 101 665 524 169  43 455 635  91 722 230 711 701 404
 132 333 725 681 133 600  31 488 124 449 704  81 603 153 433 368 590 501 147 196 676 106 682  69 689  82  79
 319  65 492 532 579 121 608  90 377 520 708  45 683  17 610 190 282  52  86  38 667 631 677  39 628  78 721

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.1197e+06us (= 9119.7ms, 9.1197s)
Wall-clock time (full program): 9.16184e+06us (= 9161.84ms, 9.16184s)
Satisfaction error: 0
Number of search iterations: 2391
Number of local moves: 866 (including on plateau: 291)
Number of local minimum: 170 (including on plateau: 32)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  69 286 301  91 625 640  71  14 150 678 716 352 720  12 633 159  76 660 371 272   5  21 658 662 687 253 673
 644 648 469  25 642 711 219 153   3  16 718  51 197  17 695 670 117 612  41 571   4 454 181 669 623  38 667
 680 283  40 631 697  53  66  30  10 668 457 653 302 151 664  87 575 614 174 350  80 635 641 200 354 512 248
 626  96  90 182 558 706  46 145  34 691 700  26 602 147 534  15 548 435 603 510 142 471 541   1 661 605 140
  44 271  43 258  45 611  79  93 533  19 535 572 712 688 609 124  54 677 629 274 562 567  73 610 566 542  65
 505 230 637 310 607  98  47  63   6 557 694 528 594 624 184  39 167 588 509 158 606  48 564 583 544 364   2
 444   9  11 585 464 501  31 303 543 659 587  32 521 622 241 100  57 388 154 405  64 529 496 430 540 519 620
 574 106 431 244 615 546 263 162 555 552 514 549 584 508 537  85  60 191 120   8 576 495 497  18 522 494  49
 418 240 590 402 556 599 139 414 205  61 338  52 577 448 415 306 433 468 504 133 386 428 395 439 463 387  59
  33  27 450 425 484 538 264 391 379 160 335 475 518 532 400 459 323   7 382 105 592 452 481 466 515 268 393
 404 256 422 563 443  20 134 479 476 536 210 465 526 421 502 467 451  55 480 132 446 440 326 442 445  35 279
 499 539 383 437 357  82 118 294 426 152 455 473 155 398 424 462 336 239 423 376 409 438 406 483 524 360 207
 456 344 384 249 340 267 214 358 472 309 419 482 477 329 330 403 349 470 304 179 380  84 491 233 412 547 573
 369 337 396 490 397 381 269 318 489 411 378 331 361 300 417 399 284 319 545 291 223 434 315 332 321 389 359
 374 314 506 413 322 390 586 254 366 311 348 276 523 410 347 527 229 498 666 370 204 280 295 298 324 199 225
 305 636 373 553 367 224 351 290 287 362 293 683 655 429 343 486 278 260 226 613 251 289 165 372 296 255 213
 308 461 257 578 243 171 492 493 178 327 634 392 333 227 632 218 645 242 265 591 113 339 317 394 228 449 328
 365 674 185 261 192 356 717 416 246 616 164 177 346 138 320 129 288 725 334 621 408 266 307 206 203 530 665
 297 503 216 368 190 123 639 441 363 531 259  95 209 231 262 600 676 189 726 570 136 222 270 215 713 654 157
 252 618 377 619 355 156 597 684 485 221 172 299 168 212 187 247 275 141 520 681 671 312 236 277 195 208 690
 316 708 714 232  62 166 703 719 342 436 119 130 176 353 121 685 693 525 198 513 707 285 194 146 234  86 292
 102 582 220 170 126 701 604 663 650 202 325 122 193 175 201 581 698 217 500 589 627 375 235 188  72  81 656
 183 516 643 112  99 186 675 608 598 238 144 148  97 237 580 722 211 341 149 385 638 108 724 313  70 579 551
 163 682 447 705 596 125 601 672 704 273 128 721  23  75 169 593 507 173  83 101 245 143 282 401 104 628 511
 652 432 103 723 131 617 649 180 559 135 110 474 196 727  37 137 550 420 161 554 116 647 565 281 127  94 478
  74  29 488 115 250 460 630 657 107  42  67 728  68 729  58 595 458 345  78 453 568 686  89 709  24 702 646
 699  28 679 114  92 427 651 561 689 692  36 569  22 715  13 560 517  56 710  50 696 407 111 487  88  77 109

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0001e+07us (= 10001ms, 10.001s)
Wall-clock time (full program): 1.00492e+07us (= 10049.2ms, 10.0492s)
Satisfaction error: 2
Number of search iterations: 2659
Number of local moves: 955 (including on plateau: 436)
Number of local minimum: 212 (including on plateau: 55)
Number of resets: 1
Number of restarts: 0

Problem in row 6: 505 230 637 310 607 98 47 63 6 557 694 528 594 624 184 39 167 588 509 158 606 48 564 583 544 364 2 => the sum is 9856 rather than 9855
Problem in row 10: 33 27 450 425 484 538 264 391 379 160 335 475 518 532 400 459 323 7 382 105 592 452 481 466 515 268 393 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 678 682 634  71 664  65 662 595 310  16 378 530 584  11 151  18 713 197  74  46 306  45 541 633 625 113 513
  28 718 705  61 568  50  44 712 565  31 117 647 576 714 131  33  91 112 430 105 692  77 728 727 643 444 106
 623 577 729 711 443 124 502 612 426  98  73 700 611 101  43  30  58 686 132 436 488  32 200 721 521  59 119
 546 585 582 723 629 126  63  55 679 460 411 211 190  53 143  82 630 638  89 273 142 127 717 707 621 147 226
 527 542 617 123 698 103 154 675 683 212 171  93 177 115 149 556 676 668 137  96 139 196 672 680 659 172 165
 622 688 572  81 463 722  88 129 187 138 710 104 715  60  97  76 663 508 188 179 245 706 369 225 468 694 158
 203 554 674 218 624 240 204  87 614 631 724 291 610 209  56 233 529 427 726 169 246 156 214 276 503 189 248
 697 618 522 155 702 136 241 709 569 167 719  79 652 191 130 210 598 403 219 627 180  95 122 249 538 174 153
 699 472 478 239 653 234 648 192 716 301 375 290 261 256 207 202 405 473 514 272 217 205 121 312 601 352 160
 228 258 506 224 708 185 605 279 181 725 532 396 324 237 274 388 250 704 251 247 575 333 186 287 479 227 266
 354 356 469 259 603 281 311 594 231 321 341 293 299 422 452 320 363 277 346 286 278 608 412 244 620 260 255
 701 271 447 382 471 326 655 566 242 243 269 720 263 257 195 317 262 342 208 351 285 322 222 303 604 267 364
 368 339 525 289 343 280 372 399 384 283 441 357 385 353 459 376 406 223 330 327 213 519 325 270 437 448 404
 367 265 373 402 230 348 377 416 390 381 318 344 350 387 393 429 398 400 507 319 386 254 340 394 328 397 362
 193 419 176 418 302 360 470 432 451 395 415 446 407 462 305 408 366 297 331 358 308 501 337 284 216 453 345
 304 421 238 336 349 391 282 474 420 467 494 264 292 309 493 201 476 164 499 442 332 497 380 314 229 370 417
 392 316  26 490 232 477 456 413 465 583  25 315 461 449 550 425 183 438 135 424 533 450 410 423 307   2 475
 401  52 298 560 253 517  36 495  57  78 110 268 589 458 580 359 509 175 496 534 434 526 489 365 329 516 371
 347 235 288 464 236 454 487 466 102 355  86 661 515  99 492 482 524 134  48 457 435 555 383 433  92 480 545
 150 120 170 500 152 562 414 335 166  70 581 520 590 484 531 485 528 215 540  24 379  85 547 535  23 563 586
  14  69 296 616 159 544 361 518   9 275 118 613  42 606 510 639 440  83 523 596  35 579 564 428 148 512 558
  90 157  39 649  21 561  10 486 144 559 409 338 163 646 491 619  80 593 439 168 548 313 505 684 162 498 483
 109  72  84 578   7 670 481  29 445 536 323  34  67 666 591 504 295 600 537 571 552 636   8 100 198 588 574
 374 602 107  19 140 657 557  27 539 645 178  62 114 687 455 592  68 116 656 587 553 543  54  20 182 640 681
  75  40  47 628 141 597 573   3  64 609 252   1  41 626 644 567 199 549 658 695 685 111 642 220  22 551 615
 334  38 125 654  13 651 641 145 184 677 650 671  66 703 660 637  37 300 173 696   4 691 146  15 206  49 689
 431 389 128   5  51 194 161  12 632 599 635 607 511 294 673 667 108 133 669 570 665 693 221   6  94 690  17

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.93319e+06us (= 6933.19ms, 6.93319s)
Wall-clock time (full program): 6.9813e+06us (= 6981.3ms, 6.9813s)
Satisfaction error: 0
Number of search iterations: 1582
Number of local moves: 819 (including on plateau: 278)
Number of local minimum: 94 (including on plateau: 30)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 699 588 661 378 102 565 650 729  93  27  17  38  19 675 705 647 186  20 501  76 422 551  69 144 146 451 696
 122 308 704 629 339 710 169   6 334 483 698  92 117 237 140 557 197 124 725 320 726 639  39 561 627 162  90
  31 538 552  25 603 594 632 638 130 636 240 517  84 716 228 211 154  30 159 646  18 611 715 574 433  95  45
  23 101 703 470 167 318 642 129 706 626  91  21 472 727 708  80 262  58 671 586 261 373 381 426 677 128  48
 112 199 617  13 695 193 724 536 115 100  99 707 209 196 488 542 254  98 496 165 672 179 440 519 492 631 364
 633 227 553  63 445 728 514 149 260 135 148 176 224 587 229 717 208 207 180 589 616 643  33 653 175 578 185
 676 265 127  52 206 273 361 398 105  16 313 504 238 272 711 655 570 286 110 700 606 516 142 177 720 598 258
 709 138 582  70  24 407 645 266 406 173 253 673 192 290 217 540  83 683 305 479 189 592 389 620 220 528 182
 143 174 714 368  85  67 447 200 181 640 293 610 195 282 340 304 109 723 613 637 658 523 624 221 204 222 278
 233 131 667 203 263 270 584 120 271 697 155 172 133 289 623 522 388 657 693  15 267 302 269 294 669 719 249
 241 432 412 427 399 328 466 285 331 513 367 250 337 288 277 503 356 283 326 325 230 684 438 428 508 219 202
 680 404 477 352 160 358 568 418 372 350 405 307 279 226 255 580 247 268 178 530  42 718 236 413 281 365 386
 464 395 533 132 275 363 444 296 257 411 421 292 605 321 194 343 298 487 641 316 474 191 264 390 214 239 595
 248 417 400 409 436 468 550 332 346 145 410 215 256 435 287 425 342 232 482 416 548 424 341 244 314 348 385
 569 423 489 391 284 371 297  54 529 327 469 280 396 347  49 429 511 402 170 392 384 612 366 473 382 183 276
 383 362 622 554 497 360 113 431 329 295 463 532 344 309 539 333 394 462  89 357  88 455 252  41 491 306 454
 126 481 353 291 312 443 456 393 415 439 437 322 453 380 336 299 147 319 515 448 310 225 512 563  97 323 460
 495 419 201 369 493 702 223 556  51 300 572 351  40 486  72 301 509 665 303 166 571 246 485 212 403 158 506
  96 490  74 543 379 349 188 484  36 274 498 187 524 345 397 502 210 507 499 335 525 376 534 317 354 494 338
 446 475 114 370  73 434 190  12 541 134 625 139 664 600 505  79 585 651 521  64 213 152 526 205 555 420 562
 184 713  29 234 576 547   4 387 591 461 476 136 686 520  68 103 660 161   7 457 121  37 694 119 564 619 701
 621 662  46 518 654  50  26 408 527 414 141 163 471 150 441 118 590 377 649 452 480  14 450 243 123 567 500
 579 478  65 566 104 459  82 545 682  43 596 630 575 685  59 315 245 607 168 251  81 355 546 609 151 374   5
  66  78  77 549 458 198 465  57 670 656 235 577 674  94 712 467 359 330 106 593 652  35 449 125 537  32 604
 531 599   9 648 628  22 171 614 558 259 688 615 560 153  55   8 691  11 442 156  10 242 583  61 401 559 581
  86  47   3 510 601  62 157 690 644 666 689 668 678 108 602 164 692 634 231 324  28  53  34 679 116   2 687
 659 311  71 721 597 216  87 722 375 635  56 681 430 137 618 111 608 573  75  60 663 107  44 544   1 535 218

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.97616e+06us (= 6976.16ms, 6.97616s)
Wall-clock time (full program): 7.01766e+06us (= 7017.66ms, 7.01766s)
Satisfaction error: 0
Number of search iterations: 2096
Number of local moves: 1120 (including on plateau: 431)
Number of local minimum: 180 (including on plateau: 47)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 445 726 721 713 635 709 106 552  80 532  72  55  73 667  44 592 515 574  57 337  43 716  39  58 114 617  63
 631 340 624 655 671  65 461 566 513  15  84  41 200  17  47 605 493 600 588 678  88 606  46 357  56 611 197
  64  99 719 116 686  97 423 710 725 642  76  54  79 107  49 701 670 392 694 491  51 561 300 148 654 476  71
  85 129 542 632 421 673 104 122 722 558 554 564 141 626 143 419 657 538 569 155 110  91  92 679 290 113 126
 100 638 546 147 473 125  52 541 664 429 121 645 579 156 587  83 652 621 131 704  94  33 677 151 557 179 170
  96 360 496 166 689 204 662 194 680 703 261 207 130 209 145 692 628 669 135 499 118  13 607 181 577 199 335
 320 190 720  27 653  95 711 157 547 596 139 235 146 193 159 432 661 195 230 594 723 705 154 250 644 210 169
 219 174  23 189 556 212 584 724 718 342 222 240 214 220 676 351 625 265 150 728 229 510 178 162 511 586 247
 213 505 255 244 604 322 186 182 418 591 702 248 246 257 228 620 494 697 363 405 378 171 176 242 595 205 308
 501 348 489   2 467 502 333 651 528 539 243  50 298 238 165 434 325 682 262 253 233 289 259 375 559 453 377
 269 382 226 282 504 321 567 271 137 562 549 309 277 387 582 234 468 331 208 570 296 303 367 286 714 221 232
 252 327 315 291 384 278 666 227 353 490 316 310 279 293 287 416 699 326 339 283 518   9 601 330 598 383 285
 295 231 260 355 427 365 568 403 371 439 674 317 385 328  18  75 281 352 386 637 241 636 319 354 422 307 409
 202 609 613 691 425 284  32 407 396 338 373 359 299  16 364 406 256 294 347 389 446 216 368 380 597 369 379
 356 401   6 668 349 503 374 376 140 440 362 306 366 345 372 395 323 399 341  62 447 466 506 450 128 593 381
 444 264 400 475 183 398 460 263 258 276 433 698 414 729 361 173  14 201 431 102 410 438 455 391 472 437 275
 430 482 358 477 177 274 449 420 346 329 443 393 249 428 665 123 343 454 488 479 318 478 404 459  31  26 332
 426 481  59 441   8 442 411  98 288   5 456 413 302 717 458 514 435 138 520 112 602 509 521 497 153 452 397
 531 470 462 507 402 474  69 523 313 133 280 206 464 457 527 168  25 483 415  38 545 516 469 585   1 266 526
 484 534 436 500 218 495 522  68  37 164 544 572 508 536 498 273 292 524 465  24 530  53 555 492 251 175 105
 512   7  87 463 167 608 700 142 519  67 712 144 618  66 124 537 132  77 560 191 239 659 640 553 185 603 543
 627 576 550 575 117 172 103 163  29  10 267 706 525 581 623 311  11  12 533 217 535 480 583 551 180 245 573
 629 599 184 563 486 580  93 394  36 160 412 301 619 109 388  89 134 203 630 270 612 658   4 578 196 312 616
  45 649  86  21  78 615 237 684 149 198 350 650 417 610 641 304 152  70 647 314 565 487 370  20 223 634 639
 695 211  28  90  34 344 485  74 158 297 390 424 622 643 687 236 215  82  81 548 663  35 646 672 336 451 708
 660 120  61  48  19 590 192 268  42 529 693 681 715 272 683 224 254 136  60 656 633  30 111 614 696 161 707
 324   3 589 517  22 108 305 675 688 471 127 727 690 648 334 448 101 540 225 119 188 187 408  40 115 571 685

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.69227e+06us (= 7692.27ms, 7.69227s)
Wall-clock time (full program): 7.73372e+06us (= 7733.72ms, 7.73372s)
Satisfaction error: 0
Number of search iterations: 2671
Number of local moves: 1161 (including on plateau: 442)
Number of local minimum: 189 (including on plateau: 45)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 113 692 678 658  45  62 685  84 151 702  93  37 704  76   7  33 719 442  49 559 706 558 635 117 547 646  57
  78  23 642 677  42 131 557 611 705 148 100 686 716  74  94 656 690 120 597 644 153 471  56  17 641 458  68
  72  97 485 684  61 158  79 109 476 440 107  19 722  85 141 143  92 728 625 619 714 694 687 127 643 474 574
 202  55 568 627  26  15 663  58 711 421 299 128  59  98  44 594 136 700 659 448 717 543 633 111 545 469 326
 195  90 570 521 108  86 135 550 499 146 155 657 665 102 140  82 701 129 679 698 680 285 632  31 567 535 217
 225 302 723 512 250 247 575 125 653 674  77 197 121 183 161 338 470 157 529 681 170 652 507 200 721 171 234
 145 132 516 729 235 268 691 160 186 607 703 209 288 228 130 262 608 727 322 455  48 491 223 277 581 173 461
 654 176 629 283 167 191 271 534 426 178 123 179 214 241 215 697 255 189 462 335 181 539 645 193 593 669 616
 352 216 709 446 416 162 257 184 264 205 242 279 610 252 231 492 323 295 494 542 194 267 375 196 467 660 725
 232 363 638 227 207 204 293 297 566 144 245 351 208 298 230 424 291 724 536 614 284 617 275 524 428 306 329
 518 243 468 237 266 666 244 282 422 388 463 377 349 175 308 576 565 274 348 430 220 256 259 341 435 219 526
 670 192 355 263 177 314 278 343 396 239 224 368 364 290 164 718 403 321 425 564 520 294 287 402 500 337 447
 342 280 410 345 324 365 319 354 347 334 382 325 304 269 445 281 387 358 414 300 301 726 315 311 549 496 272
 265 389 246 394 307 464 370 415 479 360 330 316 371 317 457 353 373 309 367 350 406 397 390 452 210 472 296
 453 254 366 513 310 407 359 413 420 303 313 582 327 427 376 292 286 346 344 305 436 378  80 318 379 439 429
 118 248 165 459 460 372 386 339 333 473 362 484  71 419 434 451 404 573 260 212 408 532 432 401 328 495 236
 138 519 356 418 508 392 489 380 190 537 106 374 527 454 336 251 478 431 273 201 443 398 384 369 320 482 101
 586 480  38 385 602 592 361 437 438  10 399 525 596 456 511 530 405  43 104 159 497  20 409 481 249 149 393
 276 412 218 187 506 483 449 523  27 395 587 139 531 609 433 331 560 503 569 133 580  52 510 562 180  34  66
 486 590 166 137 517 514 466  50 312 498 649 441 400 515 601 501  53 142 198 676 600  21 548 563   6  51 154
 622 595  35 152 591 357  65 487  63 612 631 528 541 417 538 577  67 606 115 147 134 253 578 381 103 475 185
 522 450 211 188 488 411 661 551  54  75 546 672 533 552 712 174  60  32 156 203 553 556 561 599  81  28 226
 584 589  13 199 493 555 490  12  69  47 699 613 391 554 640 579 505 618 119  39  95   5  64 444 172 647 620
 289 688 110  18 630 477  30 624 423 637 544 648  87 675 504  29 628 715 213  24 572  70  83 540  91   4 502
 340 465 332 238 720 605 673 667 571  46 623 634 112 713 707  99 150  16 114 169  22   9  36 639 383 122 650
 696 651   2  88 710 695   8 668 585 621 671  14   3 693 588 163  25 233 626 126 116 168 240 655  40 261 509
 682 664 206 270 689 662   1 598  89 615 182  73  41 683 708 229 221 124 258 222 105 603  11 604  96 583 636

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 5.93443e+06us (= 5934.43ms, 5.93443s)
Wall-clock time (full program): 5.97666e+06us (= 5976.66ms, 5.97666s)
Satisfaction error: 0
Number of search iterations: 1565
Number of local moves: 581 (including on plateau: 215)
Number of local minimum: 124 (including on plateau: 29)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 471 620  33 696 684 651  95 680 702  51 671 643  85  19  66 628  15 210 594 603  89  28 552 631  35 261  42
  48 727  69  10  27 703 234 408 666  22 714 721  72  81  63 575  58  87 699 624 114  12 653 559 691 690 528
  47 724 240  50 712 701 585 618 674 497 697  90  83 108 110 597 122 132 547 627  46  53 483 640  41 459 172
 416 461 159 682 592 111  56 189 689  73  88 615  84 194 154 718  93 177 537 706 489 345 485 454 472 679 137
 396 591 160 134 728 604 101 713 579  94 705 715 121 146  77 704  67 109 677 650 197 130 437 147 641 136  96
 608 481 175 139 156 593 590 584 526 219 143 636 225 355 123 570 144 222 647 623 241 698 432 213 207 192 113
 606 637 199 180 186 274 577 487 545 209 145 115 158 632 223 157 163 135 725 711 729 169 717 226 565 203 182
 548 716 179 227 230 187 253 178 475 244 276 164 184 707 247 664 265 205 685 558 657 275 683 239 534 149 126
 649 589 264 256 220 280 214 201 321 260 198 282 255 661 267 196 286 248 660 544 665 202 242 262 652 312 669
 232 245 206 243 273 229 630 208 482 726 311 251 224 554 287 663 278 700 271 252 236 346 542 257 571 388 250
 599 233 447 300 281 303 138 294 555 216 600 293 341 619 343 268 500 314 564 295 612 263 254 333 338 246 306
 249 284 298 291 288 266 290 551 607 330 279 538 309 629 342 498 335 350 377 329 326 299 324 317 351 365 433
 297 313 372 328 360 310 339 302 524 340 349 441 308 368 529 323 334 367 358 400 336 560 332 381 378 305 301
 269 394 348 453 331 320 425 361 369 450 438 307 296 427 387 379 344 363 393 354 318 347 374 272 371 366 399
 391   7 422 402 322 315 352 362 319 404  30 364 389 419 410 380 462 452 446 405 458 337 325 398 386 477 421
 401 395 356 409 370 375 470 403 455 434 448 413 491 443 407 383 384 493 153  64  24 373 436 390 412  13 460
  76 463  60 464 411 420 520 478 188 451  29 376 430 439 357 465 417 415 131 440  97 429 494 426 431 480 467
 469 424 457 473 414 435 513 449 150  52 501 456 418 118 474 218 200   5 191 148 505 327 511 535 423 468 521
 105 504 503 466 445 514  55 517 235 519 536 289 502 488  25 527 444 490 238 540 442 515 119 486 258  36  57
 212  16 476 561 532 406 613 128 142 543 522 518 507  82 533 116 568 496  98 259 566 562  71  80 168 484 596
 221 397 510 557 495 102   3 359  61 569 550 508 553 499 523  37 586 563  54  92 176 392  38 506 509 516 479
 125 185 583 587 531 104 530  62 167 567 595 512 578 292 549 141 556 633 204  86 611 127  78  11 165 634 642
 385  20 645 580 140 572  14 525 124 658 610   8 576 304 708   2 539 582 133  21 605 581 174   9 107 616 617
 573  17 602   1 614 588 283 648  44 541 155 382 646 211 635 151 625 622  75  91 285 492  70 103 166 598 638
 120 170 694 670  59  39 574  40  34 546  68  74 654 609 601 215 686 693 161 217 183 644 162 626  18 639 659
 687  49 675 673 428 353 709   4 190 173  45  65 656 181 720  43 722 171   6 117 129 681 672 678 688 112 228
 655 193 723  23  26 100 692 106  32 667 152  79 710 270 695 237 662 621 231  99 719 668 195 676 277  31 316

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00018e+07us (= 10001.8ms, 10.0018s)
Wall-clock time (full program): 1.0043e+07us (= 10043ms, 10.043s)
Satisfaction error: 3
Number of search iterations: 2857
Number of local moves: 903 (including on plateau: 277)
Number of local minimum: 263 (including on plateau: 43)
Number of resets: 2
Number of restarts: 0

Problem in row 17: 76 463 60 464 411 420 520 478 188 451 29 376 430 439 357 465 417 415 131 440 97 429 494 426 431 480 467 => the sum is 9854 rather than 9855
Problem in row 24: 573 17 602 1 614 588 283 648 44 541 155 382 646 211 635 151 625 622 75 91 285 492 70 103 166 598 638 => the sum is 9856 rather than 9855
Problem in diagonal 0: 471 727 240 682 728 593 577 178 321 726 600 538 308 427 410 383 417 5 238 259 176 127 174 103 18 112 316 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 660 686 596  64 700 167 109 141 378 615  28 582 712 251 527 669 372 587 190  89  36  31  56 682 673 219  35
  41 609 722 125 535  47 443 705 710 601 105  32 716  29 475 513 539 466  53 102 104  37  52 689 628 723  54
  50 135 330  49 600 143  55 707 140 440 655  92 154 161 663 547 639 695  90 699 115 714 679  85 145 620 453
 139 130 602  44 142 638 624 192 121 486 718 268 107 165 658 597 704 698  78 176  51 671  79 728 713 156 170
  58 506 501 131 375 403  68 727 177 607 459 158 711  46 244 634 473 622 108 637 155 148 693 642 199 147 226
 336  99 672 218 367 611 708 505  75 499 719  33 152 150 479 577 646 123  76 201 187  38 120 589 484 625 566
 132 285 629 267 652 206 614 324  61 424 729 183 112 197 496 394 487 241 462 583 388 110 127 238 656 410 448
 182 106 725 200 650 271 173 721  43 257 160  86 273 242 579 715 562 211 407 724 119 189 124 369 610 551 606
 180 508 616 209 178 269 287 297 230 258 229 645 215 265 621 575 697 262 661 446 272 341 204 186 303 553 348
  74 316 502 194 441 260 255 281 373 659 151 325 529 315 338 402 428 709 240 550 295 333  97 335 360 654 439
 198 327 481 237 651 298 284 337 398 253 578 376 299 391 308 345 703 294 118 245 386 305 246 392 252 427 726
 431 263 552 421 534 314 313 196 220 270 300 717 283 384 276 480 461 290 706 278 235 302 364 162 426 343 334
 227 326 359 323 289 374 306 361 390 277 377 256 292 347 512 387 397 415 497 490 702 405 412 371 203 365 195
 358 329 409 312 322 320 537 275 214 353 516 274 355 349 370 307 340 280 503 356 413 429 406 381 395 264 488
 351 344 357 318 319 193 457 339 393 368 286 588 385 350 379 404 352 465 239 331 304 483 382 293 458 317 400
 434 296 205 438 469 447 463 477 363 101 408 418 491 346 435  93 149 389 266 383 396 511 420 221 494 454 288
 436 470 282 366 207 464 411 500 591 450   6 328 489  88 188 309 321 425 528 471 472 485 432 416 437  40 243
 556 576 232 514 138 476 362 548 498 234 444 228 452 422 449 202 509   1 558 342 380 445  42 605 401  73 168
 555 493 208 478  21 524 468 522  15 213 519 455 545 518 157 520 100 523 301 231 507 482 467 332 175 279 247
 504 560  20 593 259 536 525 103 688 224 460  48 581 542  77 129 248  83 592   9 687 565 510 517 181 430 184
 533  94 250 662  98 399  19 572 254 544 674 613 515 580 563  82 163  63 644 133 564   4 546 665 171 217 233
 423 569 210 603  91 585 456  96 417  60   5 559 668 541  11 216 146 540 574 179 571  39 586 492 626  71 521
 678   7  30 701   2 530 557 474 573 191 604 117  18 627 568 111 113  57 531 153 631 677 311  24 590 419 561
 543 676  70 720 532 126 594  67 666 623  10 647 641 595  23 185  84  59 174 618 549  95 632 114  72 128 612
 649 451  25 291 310 538 433 222 653 598  80 675  81 691 136 159  16 667 643 172 630 636 554  12   3 116 414
 685  13  45 694 354 690 122 144 567  27 570 657  62 664 236 169 137 526   8 617  14 684 633  66 166 670 635
 442 680 225 683 619  26 212  22 648 223  65 495  17 599  87 134  69 164 608 640 692 696 681 249  34 584 261

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0003e+07us (= 10003ms, 10.003s)
Wall-clock time (full program): 1.00447e+07us (= 10044.7ms, 10.0447s)
Satisfaction error: 2
Number of search iterations: 2911
Number of local moves: 879 (including on plateau: 347)
Number of local minimum: 247 (including on plateau: 45)
Number of resets: 1
Number of restarts: 0

Problem in column 2: 686 609 135 130 506 99 285 106 508 316 327 263 326 329 344 296 470 576 493 560 94 569 7 676 451 13 680 => the sum is 9854 rather than 9855
Problem in column 9: 378 710 140 121 177 75 61 43 230 373 398 220 390 214 393 363 591 498 15 688 254 417 573 666 653 567 648 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  18 532 579 248 219  44 106 661 693 609 696  11 675 663 569 687 158 251 635  27 657  20 152  63 155 658  69
 620 482 688 113 156  37 655 682 612 642 691  99 604 681  92 670  12 468  56  73 200  40 149 654  19 325 335
 618 428 452 144  26  78 611 288 694  23 636  84 664 160 512 470 649 336 102 596 646 120 318 666 366  21 147
 580 195 576 476  98 110  30  25 647 702 351  54 638 571 556 631 104 605 577  66 562 190 621 590  89 126  85
 632 542  31  55 127 132 673 652 209 660 564 220 692  75 572 603   9 628 587   1 240   3 584 589 203 550  22
 578  29 558  42  13  32 625 536 630 607 547  58 553 472 599 617  28 214 528 146 634   2 259 592 125 624 207
 458 610 487 269 349 121 157 648 616 438 570 233 531  17 431 606 362 337 508  24 252 396 500 565 183   7 180
 404 509 585  64  90   5  88  38 525 588 521 168 520 432 502 457 568  82 384 361 449 216 544 560 534 483 178
 486 463 390 107 196 381 497 517  81 633 112 137 582 537 485 466 575  94  35 549 506 490 386 434  61 397 258
 529 371 510 478 151 171 420 541 430  91 557 134 535  43 454 206 391  16 444 515 392 345  34 627 475 552 443
 440 128 479 122 435 181 484 442 441 505  41 401 393 197 374 281 310 118 403 573 402 410 451 469 538 459 378
 594 188 395 387 385 268 496 473 365 418 400 289 494  68 467 221 260 185 491 344 412 413 204 429 292 464 453
 477 501 499 398 333 319 307 379 425 426 367 414 355 408 286 380 450 242 465 300 388 383 100 245 360 436 212
 419 306 504 291 461 439 262 424 211 421 427 364 334 399 346 446 297 357 347 271 433 253 316 301 343 423 460
 239 339 405 372 394 265 455 322 358 415 331 231 338 369 417 715 373 411 406 382 448 328 285 308 295 324 330
 340 294 377 312 298 493 651 309 353 272 700 243 350 303 179 567 321 546 264 246 274 244 317 389 226 278 709
 718 254 241 305 370 705 614 329 368 263 359 456 167 284 255 341 332 311 249 375 668 327 187 314 191 595 277
 184 676 320 480 593 653 172 261 352 222  97 574 166 287 250 323 205 727 293 270 177 717 559 266 518 256 257
 138 363 282 629 539 566 228 210 304 296 236 583 238 356 232 376 227 662 591 229 313 315 679 342 601  47 273
 247 174 153 608 530 471 223 707 217 161 213 563 198 302 275 176 354 619 237 513 527 170 685 201 540 194 597
 218 488  45 511 516 561  67 280 224 199 543 728 182 225 299 142 208 637 189 514 665 623 279 186 551 283 492
 115 641 131 659 526 723 169 276 111 116  74 640 124 695 173 215 600 519 139 159 193 507 164 140 699 704 643
   8 114 202 522 683 416 689 545 133 141 474 503 162 669 105  62 554 163  79 686 117 716 721  39 677  77 598
  48 136  87 726 690 708 447  71  93 123  83 581 154 422 555  36 650 348 192 622 101 697  57 714 701 135 678
  15 148 711 437 326 644 495  50 533 524  51 639   4 145 713 109 674 108 407 656  80 698 613  33 103 267 672
  10 234  72 602 680 626 175 129 165 130 119 729 150 586 143  46 481 462 724 645  49 548 615  53 290 725 667
 722 710  96 498 671 706  59  60  65 230  95 719  52 489  14   6 703 409 523 712  70 684  76  86 720 445 235

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 3.82597e+06us (= 3825.97ms, 3.82597s)
Wall-clock time (full program): 3.86764e+06us (= 3867.64ms, 3.86764s)
Satisfaction error: 0
Number of search iterations: 786
Number of local moves: 584 (including on plateau: 180)
Number of local minimum: 32 (including on plateau: 21)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 323 638 318 649 476   9 383  18   3 697 684 178 610  54 650 698 676 606 537 132 185 696  80  22  75 416  42
 275 289  35 632 692 130 371 129 607 615 268 658 591 110 590 691 550 670 667  86  85 593 345   4  68  13  91
 646 174  23 666 577 140   8 105 620 682  88 685 518  41 665 702  45 689 581 144  50 668  52 634 283 201 168
  81 512 635   7 671 588 288  28 624 314 126 656 664 107 631 627 188 639 628  25 250 660  24  46  36 617 183
 622 414 578 598  32 630 302 296 541 616 642 661 629 609 580 611 112 368 114  17  37 572  14   6  60 116  78
 602  21 545 570 571  53 295 231 521 621  10 589 619  27 431 565 135 574 536  67  83 381 160 499 488 298 363
  69 563 645 432 495 564 111   1 546 510  74 543 566 585 507 554 280  38 597  87 341   5  89 557 449 603  44
 508 167 490 548 544  34  29 310 582 303 187 677 424 584 556 568 134 511 501 138  79 539 175 504 530  61 172
 437 576 502 481 474 406 154 237 282 399 531 428 579 367 461 458  43 417  72 239 196 494 223 552 442  20 385
 455 263 482 549 558 553 233 159 520  11 270 480 506 465 497 277 498 387 177 319 202 522 165 393 462  49 403
 464 560 468 382  95 348   2 186 409 398 411 423 446 569  71 505 378 390 451 487 230 469 259 408 360 486 200
 392 410 514 162 472 421 445 232 427 394 567 388 235 492 540 369 267 425 435  26 155 384 245 294 265 473 426
 402  82 443 439 324 523  93 395 415 170 441 438 434 467 420 430 370 359 413 351 479 397 274 346 333 158 459
 350 447 326 405 257 253 329 412 551 515  77 373 401 308 407 312 332 376 391 356 456 454 322 311 377 353 404
 152 704 236 335 338 212 587 440 422 475 527 349 366 293 450 309 419 340 297 181 313 292 357 315 304 613 229
 273 301 149 396 139 375 625 460 493 276 358 327 477 372 334 448 272 344 242 693 400  97 637 305 362 248 452
 266 491 213 355 278 354 524 517 194 317 519 365 347 320 300 290 500 343 216 643 429 573 503 307 197 254 240
 672 316 380 243 238 299 271 478 374 640 211 151 136 361 331 219 256 686 306 483 485 113 618 284 339 703 262
 137 605 330 198 379 193 659 484 249 218 264 221 258 189 342 244 583 208 389 457 714 220 648 128 325 678 535
 222 728 260 291 191 321 532 418 471 203 663 204 286 337 122 143 561 241 287 279 600 261 534 352 234 651 463
 214 594 179 281 166 655 525 623 207 147 526 146 176 100 124 228 669 133 192 699 513  62 599 641 195 653 608
 246 252 269 209  47 636 647 547 205 626 255 226  12 180 285 190 206 336 150 612 675 433 673 679 680  63 516
 184 157 118 115 711 705 251 575 225 153 708 161 108 729  96 142 657 171 210 528 509 199 470 695 247 489 542
 453 106 163 723 224 123 586 633 121 217 595  40 125 701 141  19 559  48 127 710 717  59 496 674 687 364 444
 662 227 712  39 104 681 719 690 131  84 109 145 169 707 215  64 538  65 164 725 724  56 688  73 614  30 720
  94 182 694 117 683 592 173 718  16  98  92  15  70 715  51 102  31  55 709 644 562 555 604 120 721 716 726
 654  76 148  33 119  57 713 533  99 156 652 328 103  66  58  90 596 436 466 727 386 101 601 706 722 529 700

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00423e+07us (= 10042.3ms, 10.0423s)
Satisfaction error: 2
Number of search iterations: 2775
Number of local moves: 1091 (including on plateau: 435)
Number of local minimum: 208 (including on plateau: 58)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 0: 323 289 23 7 32 53 111 310 282 11 411 388 434 308 450 448 500 686 389 279 513 433 470 674 614 716 700 => the sum is 9854 rather than 9855
Problem in diagonal 1: 42 13 283 46 14 381 341 138 72 387 378 369 420 308 366 327 519 640 249 418 525 636 711 723 712 182 654 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 211 692 699 434 666  71 387 401 356 114 499  66 142 642 553 696  28  74 462  20 134 644 270  75 135 675 709
 700 312 102 466 702 637 412  32  76 570 440  63 146 714 641  85 431 115 163 145  94 729 132 718  18 543 669
  89 128 370 257 698 105 601  15 131 723 609 123 483 651 198 715 575 141 676 149 365 465 703 155  13  79 638
 119  80  53 727  57 117 156 460 220 554 493 445 686 649 659 701 667  46 127  98 215 716 144 662  92 186 726
 222 635 194 228 708 202 574 110 207 725 138 104 684 611 200 480 619 101 152 109 683 502 724 181   9 180 573
 223 720  52 251 107 711 232 688 663 622 615 108 506 397 521 598 531 148  68 172 184 280 219 605 236 208 190
 238 261  51 322 136 133 106 560 582 661 559 259 585 178 455 231 624 633 245 233 706 677 654 143 185 262 176
 157 728 175 450 189 166 285 689 679 244 694 448 283 183 287 151 589 266 227 719 697 593 171 167 258 159 201
  78 162 317 424  83 177 188 536 584 591 664 405 161 242 377 653 625 284 668 116 345 529 234 452 443 173 344
 240 315 248 353 264 352 707 647 267 541 660 318 169 205 300  88 503 713 273 357 187 705 256 326 302 290 269
 336 334 213 229 164 252 680 579 174 331 717 372 254 279 599 230 449 170 373 288 249 721 299 634 382 168 379
 338 351 192 272 307 294 340 552 453 235 247 710 250 722 569 310 217 439 320 464 292 567 260 297 281 246 330
 291 311 362 308 325 371 314 278 410 324 469 407 712 337 275 403 218 332 358 392 306 384 458 212 429 442 427
 393 282 517 304 309 378 293 323 467 395 411 391 451 265 225 402 425 346 361 253 289 321 441 432 342 476 363
 366 459 355 103 381 295 341 191 433 165 255 550 406 339 487 482 519 360 520 398 329 121 380 446 423 408 343
 471 419 347  31 474 475 348 444 430 390 327 216 333 389 126 319  60 435 454 495 399 374 422 369 415 456 437
 472 328 484  61 364 385 512 124 420 400 375 416 367   4 565 477 237 277 534 603  65 113 556 268 544 468 436
 394 510 396 485 463 428   7 111 547 197   2 545 533 530 305 497 221  14 368 522 498  16 473 404 303 549 537
 383 572 580 516 505 496 509  37  67 414  34 602 120  29 276 494 158 313  17 566 461  99 588 376 568 511 564
 492 561 508 526 514 527  93 409 418 140 137 523 562  48  95 199 210 594 359  22 630  30 481 388 479 489 421
 524  91  44 616  96 636  77 226 470 500 100 417 628 604 125  40  62 478 618 447  70 239 501 504 528 600 614
 577 612 513 182 682  43 623 203 571  69  35  38 525 557 413 587 193 540 617 610  73   1 486 130 542 386  47
 646 558 438 672  84 640 507 286  64 335 241 350  50 583 535  33 147 491 643 551 645  45  23  11 656 596  25
 626  21 681 209 655 597  56 195 563 263 122 670  42  39 539 457 129 627 613 608 632 301 139 581 349  54  87
 555 214 576  86 112   5 518 515 271  90 490 631 620  24 488  19 296 650  41 648 548 354  12 621 687 578 206
 704 150 695 685 657 691 316 592 153  58 224  72  59  27   6  82 590 639 595 674 678  55 243 538 546   8 118
  10  49 693 658 154 671 673 652 179 204 298 606  97 607  36 426 532 629   3 196  81 274 586 160 690 665  26

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.00432e+07us (= 10043.2ms, 10.0432s)
Satisfaction error: 2
Number of search iterations: 3251
Number of local moves: 1218 (including on plateau: 666)
Number of local minimum: 262 (including on plateau: 79)
Number of resets: 1
Number of restarts: 0

Problem in column 5: 666 702 698 57 708 107 136 189 83 264 164 307 325 309 381 474 364 463 505 514 96 682 84 655 112 657 154 => the sum is 9856 rather than 9855
Problem in column 13: 142 146 483 686 684 506 585 283 161 169 254 250 712 451 406 333 367 533 120 562 628 525 50 42 620 59 97 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  80 670 702 599  53 650   4  22  24 694 538 622 682  81 404 529  77 244 109 334  14  59 591 655 455 637 326
 211  32  57 640 483 192  13 684  85 610 145 540 433 578 707 206 197 586 551 564  44   7 423 656 648 542  21
 327 565 704  84 613 290  71 396  76 692 709 675 315  27  82 614 113 198 329 178 124 235 573 634 444 515 272
  62 619 588 340 562 713  65 288 111 603 649 579 646 144 237 581  12 405 307 624 110 131 628   6 667 135  43
 240 302 537 585  98 593 295 546 193 446 623  75 680 393 712 568 204  73 651 652  52  36  92 642 246 257  64
 162 576 174  29 665  66 597  99 132 663  61 638  96 355 569 587 664 685  56 319   5 427 516 426 629 495 164
 271 508 616 278 598 563 375  35 479 243 575 501 625 281 626 641  11 347 143 199   8 194 487 600 434  37 181
 247 571 543 514 583  70 242   9  26 418 609 632 524 490 592 556 698 161 134  18 179 245 553  63 510 618  50
 451 410 574 202  91 475 264 191 218 547 559 606 496 520 450 500 519 464  79 566 525 250  58 149 531 118  42
 507 462  33 476 580 517 251 513  17 466 223 234 512 253 491 584 232 236 233 480 504 348 445 530 175 532  20
  19 209 366 661 335 701 221 511 715 406 403 158  41 473 617 252  15 249 523 362 380 671 127 392 313 417 318
 294  86 370 416 570 463 248 460 341 435 291 408 374 421 461 183 388 265 323 282 350 286 320 601 316 456 447
  60 324 527 432 364 522 200 677 413 333 349  74 293 554 424 305 299 420 322 488 344 210 325 338 312 437 509
 541 465 409 345 386 303 407 337 383 454 262 289 367 317 203 399 400 544 470 384 116 443 268 332 387 225 419
 184 431 280 659 373 346 342 274 422 267 558  97 674 254 381 371 391 492 453 411 343 208 415 188 171 469 401
 412 308 389 368 429 170 550 377 259 436 287 691 719 227 266  54 220 458 297 238 376 521 442 378 219 292 472
 722 260 214 306 331 100 468 397 414 439 440 270 301 339 163 394 336  55 612 425 686 438 155 449 128 359 654
 572 548 195 189 300 186 485 596 467   2 321 474 121 275 402 154 567 676 284 369 481 534 536  23 273 136 689
 673 228 296 201 358 120 502 230 498 104 256 351 159 589 142 679 365 539 639 167 687 471 311 168 283 231 608
 582 484 205 151 535 703 152 644 357 217 185 129 353 112 146 360 549 477 503 705 398 669 276 279 123 166 395
 699 190   3 261 101 147 729 631 604 241 157 356 150 354 140 102 690 222 595 304 696 486 122 148 643 457 627
 441 125 176 207 226 215 552  16 611  10 372 177 533 352 107 182 561 594 285 141 697 363 605 711 668 630 298
 607  49 385 263 229 615 688 213 723 169  72 328 180 678 119 660 672 212 269  31 526 428 725 108 635  47 224
 706  93  68 720 160 314 493 255 452 718 115  48 310 239 173 137 196 645 620 448 518  87  67 478 390 710 695
 172 557 683 187  90 506 602 482 497  51 379 216  39 666  45 117 105  25 577 505 662 658  78 708 126 489 633
 114 714  40  95 653 277 545 382 717  88 258 657 138 727 560 106 693 153 130 133 330 724 716 165  46 139 555
 499  69 721 647  89  38 494 590 621 103 459  30  94 156 636  34 681 430 361 528 700 726   1  28  83 309 728

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00012e+07us (= 10001.2ms, 10.0012s)
Wall-clock time (full program): 1.00425e+07us (= 10042.5ms, 10.0425s)
Satisfaction error: 2
Number of search iterations: 3214
Number of local moves: 1155 (including on plateau: 434)
Number of local minimum: 277 (including on plateau: 49)
Number of resets: 2
Number of restarts: 0

Problem in row 7: 271 508 616 278 598 563 375 35 479 243 575 501 625 281 626 641 11 347 143 199 8 194 487 600 434 37 181 => the sum is 9856 rather than 9855
Problem in row 10: 507 462 33 476 580 517 251 513 17 466 223 234 512 253 491 584 232 236 233 480 504 348 445 530 175 532 20 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 643 690  23  69   6 116 693 514 657 218 604 702  32 700 248  67 564 299 634  24  49 622 687  11  57 680 246
  43 689 632   5  36 663 639 161 258 213 638 656  15 718  61 176 697  64 694 132 439 621 671 200  27  21 686
 294 644 374   3 135 645 637 668 626 115 100 606 198 683 239 214 672  10 666 178  83 602  68 618  62  19 696
 109 674 673  14  13 595 627 225 107 285   9 583  73 678 182   4 662 117 615 492 164 574 642   2 572 580 584
 127 623 629 134 143 640  77 442 191 154 476 577  12 596 167 489 568  41 187  89 153 588 372 612 543 613 611
 244 545 567   8 148  17 590 544 185  93 533 527 573 571   7   1 420 319 274 472 552  28 551 550 556 481 500
 220 559 560  94 177 582  59  75 451 119 499 566 502 554  25  71 579 553 242 570 411 141 591 531 581 525  18
  65 549 518  45 151 526  81  22 227 145 270 593 510 497  86  84 431 461 498 470 520 505 534 587 507 467 506
  48 496 562 233 281 441 283 146  16 468 501 471 202 466 491 111 208 446  20 513 528 479 474 509 414 540 508
  72 482 561 312 397 490 150 175 123 408 445 405 384 330 421 286 340  50 235 504 450 483 381 477 493 455 546
 104 487 463 316 221 440 188 204 133 324  35 373 488 435 484 392 407 462 358 515 480 394 284 409 401 547 511
 457 387 448 267 287 447 388 351 360 168 438 417 328 428 432 247 575 364 259  31 382 361 456 459 386 305 427
 422 346 434 265 393 436 380 398 410 363 404 444 192 390 371 416 383 396 130 424 317 304 272 378 336 449 402
 385 332 345 430 302 391 344 433 331 369 400 327 335 362 406 375 452 310 412 429 339 325 308 306 354 403 350
 292 366 377 293 399 337 289 313 334 357 303 333 370 323 413 365 425 592 280 389 460 224 376 709 320 307 309
 349 278 343 415 264 341 348 355 326 301 269 624 297 282 229 342 419 713 368 315 279 679 356 298 353 437 275
 300 271 257 676 485 276 291 359 633 266 535 260 249 458 238 352 203 322 585 234 205 706 231 232 253 261 717
 725 318 254 619 530 347 217 277 563 608 251 273 478 122 252 290 296 576 516 321 196 212 609 194 329 245 237
 494 311 222 653 675 230 599 724 704 256 241 263 243 197 228 524 255 268 379 236 726 288 250 155 140 395 199
 598 184 183 691 647 166 190 144 658 601 473 162 521 216 635 654 181 126 625 616 138 367 195 189 262 210 223
 565 137 160 426 548 129 711 630 454 669 179 159 443 128 685 716  79 157 659 173 610 165 121 646 131 149 226
 469  39 136 682 667 722 519 681 113 650 240 163 206 180 641 699 529 211 101 684  91 600 124 186 110 219 193
 636  55  80 665 215  60 677 503 169 537 147  51 620 152 586 715  92 295 314 517 705 108 651 708 465  37  95
 423 170 102 597 605  54 103 538 660 536 698  98 661 207 648 569 201 649 475  99  74 172  53 703 692  38  30
 495  29 723 603 695 614  90 464 209 512 453  78 710  40 607 617  58 720  85 120 719 139  42  88 158 631 156
 555 112 142 628 707 106  96 171 539 542 688  97 558  66 541 522  34 670  70 594 729  63  33  46 701 727 118
 721  82  87 712 728  44 589 338 418 578  26  47 655  76 532 557 125 664 174 714  56 105 523  52 652 114 486

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00032e+07us (= 10003.2ms, 10.0032s)
Wall-clock time (full program): 1.00451e+07us (= 10045.1ms, 10.0451s)
Satisfaction error: 2
Number of search iterations: 2784
Number of local moves: 1164 (including on plateau: 544)
Number of local minimum: 215 (including on plateau: 57)
Number of resets: 1
Number of restarts: 0

Problem in row 5: 127 623 629 134 143 640 77 442 191 154 476 577 12 596 167 489 568 41 187 89 153 588 372 612 543 613 611 => the sum is 9854 rather than 9855
Problem in row 6: 244 545 567 8 148 17 590 544 185 93 533 527 573 571 7 1 420 319 274 472 552 28 551 550 556 481 500 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 719 636 695 647 229 729 109 580 131 556 574 129  55 416  23  40 639 170 717  75 650 257  65 157  84 721  52
 692 102 702 511 713 727 230 716 481 132  98 605 169 147  99 112 617 612 705  56 615 243  57 436  50  53 175
 703 526 683 587 151 245 200 546  60 128 140 563  61 166  20 694 107 611 120  58 208 637 368 386 724 718 445
 504 475  54 712 627 625 366 681  51 539 137 710  89 561  87  45 135 122 691 217 697 619  59 728 126  81 117
 711 673  27 130 645 577 480 447  66 377 196 658 709 190 163  26 478 570 568 123  67 590 161 676 224 218 105
 272 409  91  93 662 114 110 538 201 569 214 686 286 689 707  30 236 620 415 136 399 706 186 360 317  86 723
 216 541 211 203 184 593 714 499 183 566 215 271 118 282 162 198 164 672 674 231 682 684 339 251 225 212 565
 187 660 197 139 146 254 329 725 202 195 125 180  37 688 291 199 227 720 638 657 698 471 295 602 192 178 623
 168 558 247 167 576 604 332 591 715 238 138 176 388 667 379 159 277 258 618 240 287 232 207 633 206 280 514
 181 664 464 262 315 722 353 477 369 654 400 507 278 307 406  94 154 606 185 313 542 241 344 290 349 145 233
 532 422 264 244 213 209 404 485 294 438 235 265 237 305 302 220 699 266 261 666 387 665 446 341 274 350 431
 300 310 358 319 194 458 171 430 289 421 405 292 450 384 455 395 223 273 518 704 276 361 372 410 346 417 324
 380 403 165 351 327 188 460 476 250 363 326 268 700 391 260 246 427 298 234 308 649 370 342 322 708 331 312
 334 299 513 398 443 323 119 393 491 338 408 330 434 536 297 448 456 306 407 374 204  63 347 420 549 397 228
 193 321 248 143 333  78 269 141 354 530 394 423 465 508 340 318 452 383 598 484 562 502 488 589 267 293 179
 283 501 335 453 586 325 454 101 396 418 426 314 356 263 490 320 411 392 239 284 461  42 533 378 328 304 462
 364 256 412 371 348 500 285 279 459 115 675 352 419  44 376 429 401 588 553 468 437 124 506 149 413 390 142
 148  11 451 594 497  70 425 365 535 607 439 470 457 482 440 432 367 104 545 472 242  68 496  64 414 359 301
  92 435 592 503 520   6 522 343  39  43 512 466 486   2 303 467 441 389 311 424 515 555 622 428 444 362  33
 469 316 382 550 505 270 494  15 572 158 449 564 616  31   8 679 670  21  34 509 116 222 483 571  24 524 603
 521  62 373 600 357 608  85  35 517 121 595 498 583 557 601 473 210  95 103 442   9 543 651 205 249 487 275
 552  88  22  80 381  32 336 337 585 108 493 100 573 609 567 534 663 191 226 355 255  73 492 345 726 581 551
  46  29 479 635  13 525 529 152 659 219 554  79 575  90 540 648  77  17  82 599 613 156  12 646 668 582 631
 578 173 516   3 134 296 495 182 655 528 596  83 111 221 579 626 531 523 133 547  14 474  10 144 584 630 489
  36 252  16 653  18 701 634 253  97 537  48 644 510 463 621 690 160 153 113 632 189 385 687 127  38 527 671
 519 559 678  74 177  69 641  19 656 288 661 150 652 259 643 640   4 281  71 106   5 544 677 172 685   1 624
 155 174 680 433 560   7 309  49 548 669 402  72  41 597 696 693 629 614  96 375  76  28 610  25 642 628  47

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00023e+07us (= 10002.3ms, 10.0023s)
Wall-clock time (full program): 1.0044e+07us (= 10044ms, 10.044s)
Satisfaction error: 2
Number of search iterations: 3377
Number of local moves: 1003 (including on plateau: 342)
Number of local minimum: 277 (including on plateau: 43)
Number of resets: 2
Number of restarts: 0

Problem in column 5: 229 713 151 627 645 662 184 146 576 315 213 194 327 443 333 586 348 497 520 505 357 381 13 134 18 177 560 => the sum is 9854 rather than 9855
Problem in column 25: 84 50 724 126 224 317 225 192 206 349 274 346 708 549 267 328 413 414 444 24 249 726 668 584 38 685 642 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 106 590 128  37 727 197 581 723 116 574  81 536  89 160 102 121 247  55 608 605 413 564 618 551 579 713  34
  53 703 715 607 693 345 669 509 143 525 594 103  95  99  35  66 108  52 582 140 376 681  15 625 547 707  68
 125 711 719  21 657 699 724 350 144 562 508 186  60  91 101 145 405 520 718  84 487 224 167 698  22 664  63
  80 648 725  83 518 688 722 117  67 514 677 169  96 701  58 534 444  57 181  70 459 691  82 678 132 537 127
 527 624  77  43 426 632 728 260 153 646 454 729 148 522  98 150 235 155 637 458 628  44  93 654 469 147 118
 165 556 241 225 673 721 452 126 180 709  64 171  29 237 296 577 655 208 550 349 635 645  86 135 277 667 226
 704 592 663 109 623 476 714 196 231 602 193 532 188 185 242 205 600 123 649 191 726 312 129 134 192 133 211
 130 265 236 139 692 560 568 621 187 505 221 161 269 136 170 627 258 315 563 686 493 257 213 352 710 100 421
 175 526 268 173 584 565 445 243 716 408 276 472 176 427 270 255 717 174 361 222 696 199  78 250 670 238 271
 282 294 267 702 539 507 305 263 232 708 364 489 229 253 234 675 183 249 189 274 614 328 685 194 332 261 203
 395 682 280 301 432 392 571 287 168 388 694 288 302 137 216 204 593 369 391 313 555 473 306 330 325 240 223
 300 341 327 214 354 326 406 331 228 308 286 720 262 420 251 559 314 289 215 291 397 548 538 293 266 690 381
 259 464 347 279 348 359 297 206 333 339 353 644 450 403 304 275 284 324 523 496 298 195 665 404 342 320 344
 323 299 272 295 318 410 368 322 281 474 317 453 290 478 382 399 494 442 356 373 519 423 456  54 335 338 384
 357 377 362 475 283 424 311  56 394 346 365 383 506 218 552 462 358 431 485 402  38 396 248 499 389 337 401
 521 414 416 425 378 400 355 597 366 447 466   5 407  75 386 482 113 329 435 163 105 303 412 477 439 436 503
 390 409 372 415 122 430 115 443 433 351 449 209 483 422 343 411  90 340 546 441 219 227 497 418 446 471 363
  72 178 398 554  87 254 375 513 387   4 572 451 573  51 468 510 516  19 467 370 307 470 457 380 567 417 438
 585 264 515 575 179 245 256 460 533  71 501 504 480 558 419  73 114 588  25 212  45 616 511 543  59 461 463
 595 393 490 491 120 448 278 360 612  76  31 319 479 535 528 434  88 598 481  28  69  62 455 569 512 437 367
 619   8 385 541 131 184  20 553 679 371  12 517 498 540 529 334  85 613 201 502  27 273 428 610   2 662 531
 604 158 172 668  94 285 210 465 544 112  24 198 530 524 576 486 500 580  18 680 220  46 309 570 601  23 658
 620  26 591 484 495 152  49 549 683  97 200 310 542 672 659 244 587 589  39 492  79   3  41 107 671 233 641
 653   9 190  13 141  17  36 666 611 157 202 336 631 566 636 142 440 640 374 617 239 622 629  65  40 545 638
 252  11 583 676 177 119  33 606 149 246 630  92 626 651 661 578 164 561  47 609 230 599 684  30 182   7 652
 647 151  74 615  48  14 217  32 642 156 634 292 712 656 689 207 557 639 110 154 321 488 379 111 603  10 697
 316 162  42 695  16   6  50   1 643 159 687 586 705 138 650 700 706 596 104 633 660 166 674 124 146  61 429

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 5.44022e+06us (= 5440.22ms, 5.44022s)
Wall-clock time (full program): 5.48631e+06us (= 5486.31ms, 5.48631s)
Satisfaction error: 0
Number of search iterations: 1193
Number of local moves: 565 (including on plateau: 204)
Number of local minimum: 95 (including on plateau: 31)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  66  36 159 725 264 675 319 425 113  87 706 714 140 631 184 112 569 544  38 161 609  57 439 626  62 678 716
 578 341 118 641 116 444 629 705 108 701 627 699  77 698  90 175 723 531  34 105 110  16  61 671  69 718  70
 132  97 534 708  47 328 715 649  85 548 543 630  73 468 170  52 674 595 167  99 529  21 102 655 721 469  44
 513 117  46 717  40  81 689 719 700 697 620 722 485 727 182  60 114 622  84 149  68  55 177 709 103 608  51
 201 180 238 564 145 668 497 703 599 152 681 720 463 160 246 124 728 220 125  82 233 207 713 369 119 576 142
 565 648  93 619 126 222 257 680 232 686 601 335 278 240 460 122  91 148 154 174 211 696 623 530 271 588 205
 692 129 204 339 190  86 490 186 660 250 662 710 704 249 561 212 185 667 218 106 165  83 421 702 221 568 195
 707 216 120 155 157 643 176 458 318 724 261 726 695 598 305 107 206 276 127 134 166 265 401 473 353 711 377
 189 575 256 333 179 153 642 283 484 199 509 465 285 193 409 432 237 677 590 172 268 306 452 632 147 491 297
 687 202 323 187 294 392 650 252 387 431 299 579 712 208 476 198 224 254 453 181 388 245 435 567 144 396 291
 230 253 405 487 274 217 427 334 375 320 532 309 477 277 682 242 214 390 316 370 340 241 426 376 587 503 251
 263 137 188 351 231 466 496 293 329 269 255 289 694 296 616 330 213 266 504 262 225 404 644 472 424 646 292
 158 729 379 380 470 317 507 395 385 298 429 314 270 322 138 386 451 411 307 248 350 373 321 343 430 413 331
 524 346 363 364 478 327 332 315 374 442 422   8 462 300 301 352 436 312 381 500 337 357 398 239 344 434 407
 267 227 447 441 450 325 348 275 512 342 286 399 394 406 288 437 418 501 139 412 324 416 303 287 347 481 383
 360 428 311  88 420 313 356   4  28 400 525 308 366 403 382 464 577 408 533 410 443 522 338 281 371 191 625
 456 486 365 210 539 489 389 514 397 555 173 223 109 349 215 438 483 540 560 393 419 471 131 326 244   3 378
 535 448  10 518 259 508 164 449 423 480 461 415  71 474 178 455 282  18 445 554 520 368 130 384 527 284 495
 499 467 433 523 494 582 200 457 194 479 171 209 273 354 226 459 506  72 391 359 304 517 417  13 414 295 547
  25 558 446 367 510  29 143 258 604 546 128  45 141 516  98 505 652 402 571 521 597 541 203 104 440 235 670
 100 585 559 355 613 536  54  78  53 345 101 123 589 603 519 581 549  67 551 615  12 635 362 163 545  80 482
 593 493 594 498 637  74 454 553  24 515 234 192   6 475 302 596  50  95 633 688 659 492  92 162  58  33 653
 279 336 684  15 537 586 228  59 606 219 135 151 169 583 563 528  17 243 610 665   5 574 591 136 672  26 638
   7 511 570   9 538  11 272  64  35  20  19  56 488 150 557 676 645 614 572 566 542 556 673 372 636  96 600
 639 618 664  14 651 605  41 666 611  43 133 111 550  89 584 580  37  75 657 647 679 236  39  94 685  76  31
 280   1 690 168 634 115 197  49 607  65 196 247 526  63 621 592  22 617   2 658 683 628 602  48 661 229 654
 310 691 656  79 562 663 183  32 612  42 146 156 358  23 502 640 552 290 693 624 669 573 361 121 260  27  30

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0003e+07us (= 10003ms, 10.003s)
Wall-clock time (full program): 1.00469e+07us (= 10046.9ms, 10.0469s)
Satisfaction error: 1
Number of search iterations: 2686
Number of local moves: 1023 (including on plateau: 483)
Number of local minimum: 204 (including on plateau: 53)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 1: 716 718 721 709 713 696 165 134 590 254 214 330 138 300 394 308 173 480 194 258 54 74 537 9 664 1 310 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  92 698 591  51 622  37 538 407 499 529 402 693 285 631   9 672 174  55 584  56 524  24 599  35 517  49 482
 101 688 657 374  94 465 183 111 435 125 489 152  93 450 100 630 563  78 496  73 503  82 717  59 720 704 713
  15 728 582 136 564  79 171  31 646 421 721 661 592 649  63  20 669 404 568  41 461  99 304  61 488  68 613
  39 725 604 357 557  44  97 342 549 468 676 103 453 716 302  10 565  89 417  18 640  60 633 724   5 115 547
 142 441 539 642 372 114 186 231 608 123 671  95 289 699 295 286 157  45 719 189 625 135 623 130 652 121 726
  13 179 526 212 428 156 120 206 723 138 170 205 542 632 153 193 442 673 694 381 706 711 214 260 512 107 559
 394 689 109 199 727 175 203 134 463 185 181 166 556 150 176 681 687 178 307 373 714 192 628 616 602 323  47
 300 210 571 219 648 647 190 660 634 140 266 239 614 198 218 306 262 237 674 370 119 139 184 204 709 196 701
 313 583 333 227 695 350 379 553  11 338 536 238 580 264 133 606 532 127 456 201 309 177 294 340 337 589 354
 277 167 376 710 455 328 253 351 420 217 641 250 492 146 221  86 261 729 446 356 268 299 251 228 684 596 347
 358 335 336 209 574 303 320 590 609 246 665 612 425 494  38 145 312 275 449 208 316 245 346 235 485 401 324
 359 349 378 518 252 241  40 322 447 487 301 352 240 287 279 702 137 406 367 375 187 610 593 368 566 310 382
 365 129 211 144  21 298 361 321 411 326 325 427 668 384 387 385 414 397 353 371 377 578 363 708 679 147 305
 315 327 341 412 386 284 319 317 445 297 555 718 334 366 380  43 443 318 576 280 470 418 330 344 112 462 263
 437 392 579 296 473 471 436 258 242 278 431 383 249 276 467 393 696  42 269 469 472 291 415 273 283 423 161
 457 364 369 692 265 244 464 270  48 271 360 141 403 531 395 388 348 513 544 259 169 355 440 391 274 490 410
 399 225 691 281 159 480 314 534  26 466 116 416 474 389 233 451 459 430 188 229 408 424 448 460 202 433 520
 476  77 510 500   2 458 409 405 224  65 479 422  32 434 515  91 562 438 148 514 477 452 432 629 236 390 478
 722  29 493 483  98 484 400 554 234  30 419 528  52 502 519 155 572 505  75 595 495 509 561 162  85 486 108
 570 501 200 523 226 413 481  17 220 516 213  14 131 560 615 248 586 533 396 506 638 290 598  50 149 543 118
 530 521 282 288  57 548  46 444 164 491 525 552 158  87 603 654  90 546  71 650  67 587 173 585 339 504 293
 541 581 124 545 257  16 643 308 151 535 522 644  81 426 573 345 128 597  72 272 126 690  80 627 223 594 154
 577 619  54 331 194 624 667 567 168 683 110  28 332  12 600 655  27 163   1 362  88 666 429 575 343 651 329
 215  74 105 207 498 618 639 540 712 626   3 497 180 195 686 507 222 527 255 677 117 678  66 588  76 182 165
 511  96  34 439 454 636 682 197  84 537   6 659 232  19 621 558 311 670  36 685  69 292  58 703   7 658 601
 675 106  70 605 617 637 607 635 569 620   8   4 653 256 611 398 104 216 551 645 243 172  53 475  62 230  33
 662  22 191 254 160 705 707 550 113 697  64 656 715 102 663 247 132 664 143 700 267 680  23  25 508  83 122

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00039e+07us (= 10003.9ms, 10.0039s)
Wall-clock time (full program): 1.00494e+07us (= 10049.4ms, 10.0494s)
Satisfaction error: 2
Number of search iterations: 2639
Number of local moves: 919 (including on plateau: 326)
Number of local minimum: 238 (including on plateau: 47)
Number of resets: 1
Number of restarts: 0

Problem in column 3: 591 657 582 604 539 526 109 571 333 376 336 378 211 341 579 369 691 510 493 200 282 124 54 105 34 70 191 => the sum is 9856 rather than 9855
Problem in column 4: 51 374 136 357 642 212 199 219 227 710 209 518 144 412 296 692 281 500 483 523 288 545 331 207 439 605 254 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  17 290  21 166 656  68 640 186 316 629 274  59 354 141  47 657 685  82 660 678 686 609  18 628 671 616   1
 136   3 229  25 176  19 196 613 128 248 225  35 665 601  15 702 662  50 631 673 669 684 585 707 697 419  62
 642 624  20 182 465  44 604 658 222 216 564 258 272 309  38 674 574 643 545  40 666  13  14 444 369 102 653
 636 591 190 462  49 142 632 672 113  96 101 560 283 191  37 562 663   7 648 675 635  32 476   8 641  42 711
  56 615  58 123  36 175 534 667 108  80 357 146 435 557 692 594 670 223 496 530 524 638  94 183 677  48 539
 610 521 112 158   6 282  76 472  95 103 114 493  39  28 533 630 559 622 293 623 541 452 617 540 603 201 532
 517 605 202  26  71 217 589 486 542  55 584  53 334 192 608 565 602 428 570 563  31 650   5  97 651  75 537
 590 579 226 143  65 168 578  22 246 313 492 593 551 207 507 494 529 595 490 513  45 292 571  69 454   4 519
 522 471  34 228 509  12 420 501 153 483 133 453  16  87 568 576 405 514  67 475 445 380 546 506 458 491 402
 389 448 558 484 526   9 488 421   2 431 482 463 180 370 582 516 495 356 459 547 597  46 373 172 417  33  11
 268 451 382 152 296 259 487 432 518 194 409 523 436  43 461 267 115 460 238 477 442 410 308 450 416 504 457
 289 406 503 395 160 232 478 372 387 449 470 361 429 265 422 418 256 386 393 388 275 464 360 439  24 407 427
 446 385 199 294 325 139 346 456 341 438 411 425 337 280 392 399 515 378  27 423 415 368 480 466 455 371 344
 479 394 321 467 391 430 319 330 355 121 335 329 377 505 412 314 502 441 351 340 273 326 347 261 525 339 271
 333 276 408 426 338 577 352 332 367 320 324 343 508 473 300 414 381 204 376 287 424 434 257 307 213 481 400
 348 266 366 301 573 437 277 397 531 327 219 554 634 527 401 485 252 285 398 342 331 315 245 270 269 312 193
 363 396 390 284 362 404 317 345 403 318 611 299 607 599 181 383 384 303 572 231 291 188 322 311 161 600 230
 241 323 566 235 687 586 349 214 682 443 555 218 709 499 260 295 224 288 375 227 350 170 179 374 215 310 281
 298 365 528 468 440 474 286 164 237 203 606 159 637 614 715 244 433  93 512 279 236 174 278 654 210 305 243
 233 134 693 664 137 592 150 679 668 712 250 306 510 302 110 132  81 247 155 722 255 205 165 561 263 680 249
 364 104 544 489 727 587 116  86 221 701 655 652 580 708 167  54 253 717 359 234 353 131 157 242 264 206 184
 169 147 691 596 220 718 676 138 688 694 211 189 118 548 262  91 185 148 254  90 239 728 497 550 240 639 129
 209 212 683 689 726 645  72 163 626 627 549 198  41 208 122 187  99 171 543  83 117  92 721 581 200 644 647
 135 156 706 569 535 625 251 723 598 500 162 703 413 659 567  51 173 149 125 119 197  98 100 713  70 618 140
 716 178  30 690 447 698 469 111 699 511  77 107 154  89 714  57  74 719 177  66  85 649 725 126 328 498 661
 120 195 575 520 379 704  29 127 536 538 621 695 130 297 109  10  61 700  78 151 588 724 710 144  60 358 696
 729 720 620 619 553 612 124  88  73 105  64 681 106 556 633  84  23 646  63  79 145 583 705  52 304 552 336

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 3.19757e+06us (= 3197.57ms, 3.19757s)
Wall-clock time (full program): 3.24009e+06us (= 3240.09ms, 3.24009s)
Satisfaction error: 0
Number of search iterations: 716
Number of local moves: 541 (including on plateau: 93)
Number of local minimum: 25 (including on plateau: 19)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 222 721 623  92  51 126  36 659 491 642  59 148 457  39 711 599 562  48  34 692 124  71 443 481 505 630 589
 724 655 495 115 652 690 118  86 446 644 567 489 677  57 110 469  30 140  25  31  62 712 513  80 490 726  52
 727 639 111  65  38 632 240 202 578 616  61 433 720  98 113 425 651  93 519 461 710 709 149 173 543  66  83
 668 125 645 182  76  96  78  58 682 670  79 654 306  28 100 646 657 395 679 708 554  89 153 722 587 106 112
 213 372 535  54 718 636 575 223 698 501  90 518 527 130 122 260 669  67 102 499 138 186 717  74 347 683 201
 169 170 525 164 137 723 157 103 617 604 120 568 714  72 105 156 224 233 117 637 158 716 610 691 322 614 429
 613 188 624 136 184 189 699 180 619 497 703 627 557 205 217 488 166 365 181 176 680 264 131 150 528 210 278
 172 238 707 226 195 419 209 656 715 486 671 524 326 159 351 171 142 179 302 713 185 247 162 598 684 206 212
 327 263 729 178 197 151 155 174 346 522 245 666 422 291 258 229 529 728 462 620 161 230 689 287 694  84 218
 219 315 276 381 370 215 603 269 605 665 227 658 574 272 248 293 647 498 313 323 274 231 312 165 314 388 200
 216 328 359 241 152 373 234 193 432 444 662 725 687 411 282 250 414 309 407 695 296 190 310 367 266 283 329
 316 255 244 262 252 325 299 330 410 564 199 413 375 483 286 458 228 246 270 584 350 484 253 374 434 719 442
 289 267 259 342 363 284 399 353 305 405 378 334 335 471 303 385 393 362 366 354 704 516 318 298 357 268 447
 297 275 279 465 548 420 397 421 467 311 198 376 237 417 338 336 406 386 349 321 382 387 308 404 380 332 418
 340 337 456 368 358 487 333 440 320 356 396 265 128 294 317 555 360 273 438 331 341 324 424 281 379 506 448
 403 402 520 389 280 339 394 415 285 192 196  26 392 261 401 345 423 384 352 398 409 377 454 436 445 500 437
 369 510 455 468 460 400 485 371 114 220 428  53 243 552 344 475 300 493 129  44 536 364 383 492 476 343 348
 540 430 139 473 547 538 431 439 225 257 583 187 191 390 307  87 355  97 449 450 549 530  63 482  69 573 474
 507 591 203 452 426 533 435 391 361 235 572 214 301 560 134 480 183 194 288  32 453 638 116 416  99 496 545
 542 521  85 479 631 580 596  10 119 232 502 211 177 477 537 107 629 531  64  41 504 463 427 579   1 559 251
 618 470 108 612 569  77  16 585 304  82 676  45 295 526 600  88  11 546 539 290  37 685 472 512  33 544 515
 523 553 441 586 594  15 271 146  27 104   8  75 249 561 459 509 534 571 577 514 611   4  94 494 175 597 563
 622 558 478 556  24  70 641 550  49 123 466 221  42 697 621 609  43 511 661 517 204 673   3 144 242  22 508
  95  29 239 593 693 649 626 590 412 236 595 133  68 565 602  60   2 464 254  73 615  40 408 672 541  19 582
  56 576   9 570 633 160 653 663  18  91 588 277 607 451 664 660  21 551 701  14 132 127 625 145 208  20 635
  55  17 168 706 566  23 608 667  47 121 581 319 147 686 675 109 628 503 634 256 674 592 678  46 135 207   7
  13  50 143 700 141 705 167 681 163  35   5 696 101 702 650 606 648 688 643  81  12   6 640 292 601 154 532

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 2.98038e+06us (= 2980.38ms, 2.98038s)
Wall-clock time (full program): 3.02144e+06us (= 3021.44ms, 3.02144s)
Satisfaction error: 0
Number of search iterations: 622
Number of local moves: 554 (including on plateau: 139)
Number of local minimum: 4 (including on plateau: 16)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 147 540 620 684 581  46 676 462 601 567 155 524 141  23 675  78 655  54  19  51 488  29 693 598 661  48  39
 614 603 552  61 611 689 668 680 711 193  20 542 461 101 638  47 102 136 124 172 474 110 671 125 615  67  68
 725 181 729  69 589 171 421 290 525 699  33 534 623 132 678  95 143  72  77  73 546 594 558 399 682  63 154
 482 535 533 712 719 472  82 137 468 644 149 639 613  27 672  57 686 158 370 161 582  50 319 113 215  59 201
 630 497 200  53 698 521 139 190 527 503  76 292 198  75 669  36 667  84 232 588 666  40 717 432 625 294 206
 683 713 512 142 561 728 122 260 665 591 501 637 532 220 140 153 612 234  85 219 640 160 262  90 145 131 117
 516 593 652 204 569 146 560 191 718 568 253 373 642 214 195 126 157 566 163 118 513 130 231 709 316 194 238
 674 562 529 134 473 178 119 144 727 241 325 647 211 167 212 189 495 467 280 721 617 268 257 199 643 174 202
 520 726 159 240 298 216 353 288 389 246 266 691 670 165 237 243 151 632 235 236 697 196 330 707 281 412 271
 409 443 279 381 255 296 297 364 528 641 256 537 303 690 187 336 286 720 242 218 619 203 267 175 392 247 284
 648 723 291 351 349 208 311 342 522 327 724 337 305 420 285  93 610 228 424 321 309 324 492 180 282 114 335
 585 715 213 442 299 332 418 359 414 426 358 283 156 249 304 664 323 636 374 295 287 329 394 239 300 209 252
 441 259 368 346 434 402 289 376 274 384 396 455 263 385 395 383 417 314 308 340 312 251 317 714 345 310 377
 277 361 405 375 352 398 339 369 245 322 357 233 306 354 307 302 438 425 356 326 422 489 423 301 404 505 464
 475 341 411 355 273 484 350  92 334 447 347 510 393 254 388 372 463  58 367 450 413 365 477 408 429 338 261
 407 293 500 272 265 427 366 348 449 275 460 390 128 333 410 445 344 479 452 485 258 403  11 446 397 343 469
 315  81 371 331 419 498 457 379 378 433  34 248 470 538 506 437 217 121 318 511 400 416 575  22 439 458 483
 106   8 454 544  64  52 207 471 226 551 481 530 508 539 465 478 526  42 444 590 363 523 440  41 328 415 459
 108 103 225 250 362 553 541 509 148 173 502 188 597 431 428 618 507 518   1 571  60 493   2 548 476 556 387
 244 176 448 456 380 386 554 382 169 499 480  45 109 406 112 514 401 269 563  35  18 574 494 430 573 634 504
 186  62 221 599  89 436   3 550  31 120 391  43 519 564 486 515 223 185 604 531  56 578 628 580 543 466 646
 168 150 133 490 435  37 536 656 179 197 627   5  97 662 545 596   9 313 570 651 360  38 517  30 496 650 708
  15  80  87 609 183 116 605 622  74 210 229  65 595 487  16 657 453 549 607 692 205 688 138 645  49 600 579
 107 177 104 451   7 677 626  66  94 547 491  91 583 559  83 320 270 565 649 633  88 703  13 621  17 659 654
 129 192 722 576 276 587 602 584 170  24 555  86  28 572  99 705  12 658 704 127 227 577   4 278  70 660 631
 230 557  26  55 152 105  79 115  25  21 710 706 182 653  98 701 592 685 681 696  71 608  10 702  32 663 700
  14 184 111 673 162 694 135 629 264   6 679 224 222 635 624 695  96 687 606  44 164 716 616 123 100 586 166

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.00458e+07us (= 10045.8ms, 10.0458s)
Satisfaction error: 2
Number of search iterations: 3070
Number of local moves: 1045 (including on plateau: 400)
Number of local minimum: 270 (including on plateau: 55)
Number of resets: 2
Number of restarts: 0

Problem in column 15: 675 638 678 672 669 140 195 212 237 187 285 304 395 307 388 410 506 465 428 112 486 545 16 83 99 98 624 => the sum is 9854 rather than 9855
Problem in column 23: 693 671 558 319 717 262 231 257 330 267 492 394 317 423 477 11 575 440 2 494 628 517 138 13 4 10 616 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 695 582 661 729 208 454  37 444  58 659 718 141 654  57 722  73 612  56 664 456 100 128  65 303 145 161 273
 149 340 728 473 108 604  31 475  82 563 720 520 696  79  10  41 727 632 353 710 106 133  60  42  45 713 715
  54 595  14  25 670 522 140  22 529 646 523 703 657  15  80 393 698 709  59 154 567 555 258  16 678  75 498
 514 649 107 686 113  91  93 306 146 599 697 693 275 198  44  55 174 600  70 711 223 724 449 719 105 110 704
 220 685  53 395 725 180  68 517  40 538 674 714 572 188 229  29 605 116 130 591 192 620 705 224 137  84 624
 616 706 178 226 164 717 539 584 255 707 672 126 394 167  13  94 577 177 157 663 183 471 365  83 185 168 668
 124 609 291 556 446 176 723 506 138 611 179 123 608 172 218 112 596 280 182 505 726 590 159 257 173 170 625
 682 607 219 641 658 251 169 716 162 120 267 292 699 163 199 186 239 109 358 721 135 348 642 143 325 194 610
 244 525 151 639 101 284 326 540 708 518 253 205 214 335 152 319 256 225 464 617 376 131 619 301 190 627 535
 196 688 209 644 492 279 356 676 236 503 580 262 246 320 355 222 278 339 132 324 309 281 578 302 121 382 545
 318 549 297 290 294 260 254 416 276 286 315 269 277 289 274 388 212 397 566 249 363 360 690 457 653 466 390
 361 536 270 300 308 293 282 445 448 272 259 396 313 243 195 380 310 283 474 158 691 230 435 509 440 533 491
 417 652 298 383 613 235 400 462 338 312 295 250 544 333 211 252 443 331 321 316 372 197 479 322 264 352 463
 263 231 497 426 342 364 373 317 350 387 288 345 519 367 206 408 247 341 377 560 187 327 268 323 487 712 343
 421 349 237 433 407 401 242 432 422 305 378 500 450 465 147 375 389 526 404 287 470 428 328 398   5 299 357
 344 142 461 371 399 271 447 458 468 369 460 175 337 386 472 370  86 430 234 285 486 561 379 489 419 528  28
 441 366 391  30 402 362 512 144 510 413   3 410 562 334 493 351 368 385 411 438 415 495  50 488 381 459 241
 511 261 588  21 427 442 496 153 423 203 424 434 156 586 314 484 552  49 431 104 490 494 336 530 564 304  78
 504 184 406 102 233  88 502  95  19 455 559 547  69 546 570 532 482 437   6  96 615 701 332 412 483 550 330
 477  12   9  32 207 420 542  99 507 467 568 405 480 452 476 403 392 569 266 117 647 409 384 425 543 354 193
  66  52 501 189 481 629 245 129 554 202 240 575 200 469 660 592 565 478 655 418  43 527  92 553  63 439 238
 216 227 587 166 634   8 679  39 573  33  87 614   4 581 583 551 531 429  38 541 571 125 221 648 645 359 165
 115 127 643 311  27 671 347 329 621  48 134 453  36 594 515 601 118 414 574 217 628 119 485 650 606 374  98
 114  90 576 436 516 499 635  23 558 451 307 548  34 638 692 689  61 534 508  67 191 103 139  11 666 521 248
 537  72 630  20 603 598 623 633 181  64  81  77 160 637 687 656  24 296 673 136 111  47 694 513 346 585 171
 677   1 213 669 122 524 593 215 622  89 148  76 602 557 636 681  85  46 683 210 651  51  17 675 597 265 150
 579  18 640 662 155 232 201 680 631  35  26   2  97 684 702 618 228 667 665 204   7 700 626  62 589  71  74

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.00422e+07us (= 10042.2ms, 10.0422s)
Satisfaction error: 1
Number of search iterations: 3753
Number of local moves: 1220 (including on plateau: 523)
Number of local minimum: 326 (including on plateau: 65)
Number of resets: 2
Number of restarts: 0

Problem in diagonal 1: 273 713 678 719 705 471 726 721 464 339 212 380 211 367 450 175 3 203 19 99 245 8 27 436 630 1 579 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 707 115 688 645 704 276  64 288  57 583 659 405  87 528 336  85 680 380  40 109 148  60 690 585 112 135 689
 519 114 667 671 129  46 643 692 113 298 563 123 379 613 410 181 625 116 206 110  34 341 137 615 168 728 614
 619  86 343 693 715 504  54 121 433 681 705 118 119  35 694 686 726  77  29  49 532 107 677 160 675  73 144
 592 169 576 729  56 539 170 575  33 699 682  80 360 717 556 668  81 709 249 150 145  88 237 712  42 188  53
 703  32 199 448 280 683 492 521  79 636 666 147 604 151 460 629 261 674 549 215 102  93 725 242  91  83  90
 582 125 616 724 672 259 196 647  59 211 189 192 637 708 595  69 185 202 203 449 133 727 388 541 111 142 293
 209 171 183 562 721 633 720 618  95 358 212 193 651 300 676 157 309 317 416 356 315 248 325 600 149 253 108
 229 437 200 557 260 480 286 509 163 608 664 463 650 216 663 413  74 697 269 321 333 267 214 243 187 270 182
 218 234 581 447 152 574 238 621 714 602 246 297 308 586 306 271 371 653 342 143  89 220 323 593 265 207 254
 505 245 225 247  36 630 436 716 320 660 277 155 499 381 235 255 377 488 313 120 722 250 364 546 251 283 319
 227  96 354 395 330 687 178 540 221 367 627 236 609 141 669 351 711 177 503 398 161 239 140 584 339 353 222
 391 451 359 632 347 718 256 174 332 520 274 159 228 257 281 713 338 266 489 387 295 296 294 329 458 263 348
 304 390 428 472 491 290 468 285 420 272 340 302 407 482 337 396 382 419 299 440 264 287 198 403 400 397 282
 374 506 518 307 464 461 368 369 258 324 312 278 471 386 233 421 459 314 146 279 275 412 366 414 301 476 363
 402 430 373  19 623 427 418 423 442 362 399 361 305 439 426 331 431 226 483  38 372 511 422  20 365 424 383
 327 622 205 346 322 466 454 375 579 415 385  50 561 316 328  11 166 352 117 487 406 378 438 457 497 401 394
 530 435 513 232  48 210 139 512 484 502 462 292 529 173 349 393 310 544 335  84 425 514 376  25 408 553 478
 179 450 455 446 344 180 370 389 404 190 240 384 311 409 507 411 434  52 230 624 558 441  51 445 469 392 490
 485 350 164 284 501 456 474 508  22 496 132 570  62  61 101 452 357 195 291 542 500 443 564 127 536 648 534
 326 345  58 156 535 289 555 172 470 219 567 578  98 486   8 598 493 429 417 105 698  28 594 131 495 481 524
 580 634 477 153  76  15  13 122 700  16   9 569 194 124 201 494 475 603 559 537  26 601 465 531 523 548 610
  65 533 162 167 654  41 565  18 522  27 473 649  72 268 130  94 566 560 213 678 696  44 467 244 635 617 695
 204 453 571 104  39 224 126 273 510 639 138 641 334 642 551 588 589  82 605 706 527 552 136  23 554  37   7
 252 685 662  14 572  55 106 128 526  30   5 626 516 591  63 597 100  66 498 657 186 638  47 515 545 547 628
 103 543  99 154 517  68 691  24 710   3  75 670 197  71 318   2  21 640 656 644 568 646 606  97 611 525 596
 217 573 134 208  92 479 702  78 612  70 550 652 444 184 191 587  31 262 719 620 684 723 599 241  10 176  17
   6 631  45  43 175 165 673 158 577  67   4 665 223 590 231   1 303 355 679 607 661 701  12 432 658 655 538

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00032e+07us (= 10003.2ms, 10.0032s)
Wall-clock time (full program): 1.00449e+07us (= 10044.9ms, 10.0449s)
Satisfaction error: 2
Number of search iterations: 2922
Number of local moves: 1123 (including on plateau: 524)
Number of local minimum: 219 (including on plateau: 61)
Number of resets: 1
Number of restarts: 0

Problem in column 8: 288 692 121 575 521 647 618 509 621 716 540 174 285 369 423 375 512 389 508 172 122 18 273 128 24 78 158 => the sum is 9856 rather than 9855
Problem in column 16: 85 181 686 668 629 69 157 413 271 255 351 713 396 421 331 11 393 411 452 598 494 94 588 597 2 587 1 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 646 685 543  52  26 444  13 340 698 395 627 264 699 663  18  63  76 719 688   3 676 301 660 191 195 119  51
 521 681 129 184 454 231 228   4 653 446 115 572  34 586  69 534  86  44 134 672 619 657 351  56 644 509 642
 654 679  23  77 241 675 540 299 239  14  33 612 639 448 656 147 406 525 479 192 643 604 302  95  82  16 535
 602 651   6 373 514  57 277 645 633 597 536 232 618 260 531  61  87 267 621  31 559  22 505   7 561 124 478
 637 290 636  43 328 629  24 342 588 180 648  53 545 161 120 284 623 617 595   1 491 515  92 462 400  19 532
 172 671 522 272 133 692 226 111 538  42  30 647 198 316 238  99 632  10 670 705 714 177 546  47 611 288 548
 379   9 658 204 583 687   5 251 594   2 331 201 483  91 317 593 533 482 445 581 280 580  67 346  88 391 674
 492  25 582 218 606 332 105 294 430  38 499  75 217 449 500 164 193 673 550  45 558 530 640  90 456 526 568
 574 341 553 140 544 466 385  81  27 399 377 287 415 245 560 155 460 589 426 254 312 562 162 455 350 380 356
 159 537  11  54 401 541 432 547 357 393 512 539 437 481 441 333 398  55 409 511 564 476 131 275 157 187 517
 376 369 423 307 566 394 551 440 435  78 702  65 471  20 388 459 212 596 442 477 190 367 322 599 173 311 122
 591 427 464 329 630 552 528 469 508  32 365  15 506 123 436  12 249 496 137 461 244 487 243 495  74 549 433
 281 366 412 334 194 364 348 608 397 417 497 374 381  94 255 309 271 447 323 556 438 421 310 413 338 389 318
 428 344 300 324 354 518 330 325  48 422 414 371 347 474  84 424 368 396 404 382 237 450 614 443 375 343 336
 355 689 296 439  97 247 265 345 457 273 132 425 712 527 405 361 257 158 691 320 160 418 353 362 465 262 384
 410 202 278 463 402 486 276 138 431  41 407 326 208 306 327 378 250 242 577 662 484 203 304 667 219 452 716
 613 206 101 524 434  58 293 624 282 149 136 677 279 638 303  60 587 610 150 286 565 168 196 715 664 321 216
 313 107 174 467 151 289 578 635 220 723 126 475  72 717 269 600 167 480 248 182 175 268 690 598 234 605 292
 215 235 419 489 383 291 166 411 722 592 246 315 335 230 363 490 472 319 570 209 183  59 360 725 628 199 229
 110 337 718 576 153 227 697 726 222 669 145 372 225 451 585 210 176 504 109 221 266 259 359 253 659 520 106
 154 181 668 513 649 258 707 607 256 601 274 575 114 200 297 197 139 263 205 170 420 270 590 117 554 728 148
 104 370 386 305 387 724 468 186 285 641 179 503 207 390 708 620 252  70   8 416 108 686 283 666 665  49 189
 615 121  66 631 169 116 473 501 488 523 682 603 125 143 128 684 655 178 314 622  89 569 130 214 141 710 165
 188 102 185 703 661 211 542 236 112 529  62 694  85 352 706 709 693 144 429 704  79  64  37 156 453 711 308
  68  98 721 683 696  21 563 240  93 494 701 146 233 358 103 650 695  73  29 519 652 142 458 223 127 720 349
 118 729 498 567  71  50 135 152  96 680 609 213 557 616 555 625 510 727 163 100 113 339 571 507 502  35  17
  80 403  83 584  28 295 700 298  46 485 470 224 713 516 493 634 408 171  39 573  36 261 579 678  40 392 626

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.75559e+06us (= 8755.59ms, 8.75559s)
Wall-clock time (full program): 8.79749e+06us (= 8797.49ms, 8.79749s)
Satisfaction error: 0
Number of search iterations: 2896
Number of local moves: 977 (including on plateau: 370)
Number of local minimum: 233 (including on plateau: 38)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 312 187 286 266 114 725 552   8 718 704 470 240 216 574 378 520 493 190 557  65 709  42 594 159  34  20 722
 497 719  60 158 583  61 309 512 633 673 385 598  59 691 119 461 677   4 432   1 513  88 624 592 166 178  62
 638  82 585 698  53 682 630 660 506 445 391 602  36 524 669 678 456 122 171  56  76 106 253 140 104 490   2
 152 664  18 225 135  69 667 144 327 438 241 542  80 203 446 728 527 112 201 126 713 227 657 699 169 625 720
 492 546  85 108 700 530 723 498 421 575 536 116 707 194 674 555 239 155 703  70 338 283 102 314  31 111  49
 653 210 484 179 601 150 717 611 689 714 160 531 288 252 459 588  21 167 221 688 182 517 124 115  35 427  72
 136 142 238 454 211 298  81 360 641 434 687 726 578 458 145 306 650 212 204  52 399 452 175 619 335 571 292
 702 229 367 130  90 174 223 587 559 549 617 297  51 463 272 569 596 177 138  28 383 523 684 541 172 558 176
 268 293 149 154 217 197 209  67 591 514 646 710 290 544 215 661 165 435 477 250 352 191 189 685 418 645 323
 273 129  78 289 207 213 328 697 260 567 716 665 274 313 280 294 262 346 404 354 604 141 526 388 320 727 200
  41 205 247 494 265 123 340 679 153 476 384 525 127 417 237 466 394 248 393 607 701 431  55 686 319 486 356
 724 143 251 134 301 375 482 350 441 387 121 715 433 232 299 345 342 371 267 426 620 233 332 305 311 586 329
 236 249 471 322 648 528 285 259 545 547 291 282 318 110 636 276 439 343 400 303 410 304  95 485 392 584  97
 351  63 406 370 347 336 398 308 369 457 374 443 415 295 357 366 325 483 412 300 231 414 353 397 244 708 333
 509 416 430 499 331 334 453 448 257 271 505 501 425 500 277 317 407 186 422 413 405 222   6 132 447 362 380
 516 218 395 468 504 423 372 615 436 195 590 478 310 228  77 242 364 344  75 321 442 634 382 437 275   3 511
 515 729 389 128 361 408 156 270 449 173 396 373 206 279 146 543 429 668 474 386 481 676 539  96 465  11 109
 451 632 365 440 529 479 460 316 269 419  12  32 640 538 582  91 148  66 652 503 235 358  98 264 613  86 577
 411 519 409 595 609 518 184  29 224 230  73 255 721 643 603  74 315 712   5 610  68  92  45 403 480 467 561
 219 381 605 339 139 376 563 537  44 258  24  83 672 473 508 162 103 553 635 562 199 540 647 170 639  22 402
 535 450 560 349 532 377 502  17  15 147 157 193 363 711  13  10 554 487 579 696  94 533 622 183 469 245 462
  27 151 671 551 637 208 472 489 113  23 326  99 464 284 572 101 565 337 566 444 341 359 355 296 654 133 616
 131 680  37 581 263 695 507  40  50 100 655 161 368 287  16 608  33 666 324 692  48 629 556 348 614 278 488
  93 621 706  54 256 510  39  58 428 330 495 192 120 202 521 246 597 589  46 606 548 379 496 105 694 261 663
 118 491 390 593  14 424 168 705 220  87 181 125 475  38 618 401 576 570 420 599 198 642 656 580  79 307 180
 185  47 573 649 644  30  26 534 243 117 196 234 568 188 455 163 107 681  19 690 522 675  64 627 693 302 623
 670 659 600 628 564 612   9  57 254  25 226 137 651 214 281  84  71 631 658   7  43 164 626  89 683 662 550

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.00424e+07us (= 10042.4ms, 10.0424s)
Satisfaction error: 2
Number of search iterations: 3094
Number of local moves: 882 (including on plateau: 434)
Number of local minimum: 294 (including on plateau: 49)
Number of resets: 1
Number of restarts: 0

Problem in row 7: 136 142 238 454 211 298 81 360 641 434 687 726 578 458 145 306 650 212 204 52 399 452 175 619 335 571 292 => the sum is 9856 rather than 9855
Problem in row 22: 27 151 671 551 637 208 472 489 113 23 326 99 464 284 572 101 565 337 566 444 341 359 355 296 654 133 616 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 728 127 727 411 480 183 725  24 604 182  70  83  93 200  45 581 523  84 558 692 616 218 675  97 606  30 493
 316 213  77 455 669 648 724 103 254 729 131  50 334 162 122 646 623 501 478 468 321 289 670  37  67 726  42
 232 719  58 689 693 590 126 543 617 153 137 216  39 106  44 497 626 640 656 507 706 118 158  47 716 114 108
 107 536 700 110 505   9  81 239 573  38  43 192  54 392 330 591 701 510  69 549 705 599 644 718   8 234 618
  86 717  68  29 713 587 100 275 290  85 287 164 146 125 703 553 712 545 662 348 635 255 598  90 704  51 327
  61 311 291 168 446 323 237 638 371  98 687 243  66 428 673 509 655 615 206 410  33 659 685 172 246 241 383
 711 266 215 210 612 207 681 304 714 524 312 105 356 140 554 583 723 652 191 401 211  87 372 224 155 120 225
 309  95 535 240 427 235 198 625 299 226  46 171 698 175 690 286 564 485 633 483  41 696 488 285 710  80 135
 654 305 375  88  28 489 102 298 561 188 147 124 202 683 677 721 539 650 527 697 186 185  79 567 403 203 176
 691 145 184 178 519 307 379 300 579 366 405 465 328  91 629  52 534 490 412 441 688 222 474 236 297 238 205
 180 351 294 709 641 694 418 310 664 138 353 260 332 248 425 342 322 156 578 196 242 252 715 190 278 228 339
 460 547 347 475 702 257 258 445 404 613 245 288 170 317 365 420 160 308 165 345 430 413 467 388 263 354 249
 442 346 277  60  14 343 619 571 528 451 274 380 469 273 382 223 315 229 584 481 212 270 482 492 264 466 408
 325 454 384  40 415 560 269 318 363 390 605 496 314 394 350 399 355 250 119 409 595 214 381 389 281 337 449
  94 364 201 359 282 416 331 385 419 456 387 610 150 407 661 220 369 362 542 424 244 301 306 450 303 435 377
 614 130 391 177 349 552 157 267 393 421 422 280 283 374  63 395  57 487 708 639 609 336 265 514 227 632 113
 522 104 398   6 636 546 550 429 360 512 326 361 518 439 149 194 159 230 461 476 603 443 219 181 516 504  13
  96 386 437 133  71 521 268 517 293 295 608 628 537 526   5 329 335 352 440  78 458 544 272 292 568 453 414
 462 284 563 530 174  19 494 651 101 556 457 448 434 463 376  49  36  32 173  72 508 566 279 586 503 432 607
  53 433 576 520  25 431 341 333 367 666 540 502 621 373   2 491 402 720  11 115  20 572 111 447 396 525 262
 506 473 532 470 142 426  23 231 152 580 647 569 658 204 296 117  59   7 452 128 444 541  18 477 464 559 680
 538 423 515 678 548   3  31 148 276 529 511 313 459 649 533 132  89 179  92 357 495   4 582 438 400 555 378
 197  76 324 657  75 208 417 151  74 479 630 570 551 622 319 406 585 513 531 129 123 557  64 484 643 217 253
 634 667 121 722  34 597 575 637 193 116 663 596 562 672  82 109  26 221  12 199  48 139  62 665 169 660 674
 143 500   1 631  16 344 600 166  99 187 624 471 620 695 679 498  56 256  73 436 163 589  65 699  55 601 588
 684 397 671 499 167  22 577 645 112 668  27 594 259  15 565 251 141 247 154 340 161 642 707 370  21 233 686
  10 486 593 611 472 338 574 302 195 209 271 676 602 682 136 261 189 134 368  35 358 144  17 320 592 627 653

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00032e+07us (= 10003.2ms, 10.0032s)
Wall-clock time (full program): 1.00445e+07us (= 10044.5ms, 10.0445s)
Satisfaction error: 2
Number of search iterations: 3290
Number of local moves: 1189 (including on plateau: 474)
Number of local minimum: 285 (including on plateau: 53)
Number of resets: 2
Number of restarts: 0

Problem in row 9: 654 305 375 88 28 489 102 298 561 188 147 124 202 683 677 721 539 650 527 697 186 185 79 567 403 203 176 => the sum is 9854 rather than 9855
Problem in row 18: 96 386 437 133 71 521 268 517 293 295 608 628 537 526 5 329 335 352 440 78 458 544 272 292 568 453 414 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 673 575 210  15 198 688 700 242 645 660 272 702  62  22  81 236  88 123 578 469 666 646  21 522 677  83   1
  14   7 640  54  35 133 671 649 678 683 175 590  85 670 621 661  66 223 110 190 635 605 251 607 676  18 108
 140 571  29  60 652 686 515 559  24 598 130 534 583  17  63 699 121 705 658 679 164 691 353  79  44  67 434
 207 697 682 116  30 616 233 105 545 653 634 644 288  42 290 181  11 239  51 119 622 696 237 555 647 602 113
   4 577 587 317 456 674 615 200 552 536 538 591 139  64 569 111  93  65 134  73 668 510 562   6 519 549 146
   8 623 707 222 253  27 694  38 554 581 143 709 544 487 460 118 526 145 595 169 493  16  84  61 638 580 380
 531 518 631  57 334 582  26  32 512 501 584 357 586 527 247  43 149 480 486 405  23 303  49 287 606 588 411
 497 464 441 170  97 553 432  74 643 628 617 461 509 420 498  41 504  87 435   5 344 468 196  58 471 558 184
 543 604 450 255 528 412 408 466  36 496 593 369 447 482  47 165 472  90 232 160 669 479  13 494 438 437  70
 514 430 132 244 163 425 503 343 589 341 350 176 481 636 608   9 489 154 413 191 392 574 458 295 525  94 326
 309 423 478 270 475 532 470 505 279 444  39   2 367 453  52 445 293 502 457 446 546 533  25 566 488 285 171
 352 418 306 215 547 320 304 415 455 516 396 351 372 406 511 383 431 262 417 216  20 523 339 150 404 548 278
 485 302 452 310 451 389 448 467 402 385 318 264 429 436  34 312 366 520 421 286 377 440 484 235 246 315 281
 282 362 335 321 368 349 250 189 273 419 265 378 249 463 398 384 314 442 323 387 428 409 374 685 298 507 403
 299 376 551 416 257 443 424 316 439 474 388 426 427 365 381 373 292 433 337 356 400 308 354 338  10 346 325
 360 229 173 537 199 414 271 361 328 327 363 618 410 379 254 695 382 195 289 394 462 260 576 305 364 219 491
 283 370 313 529 258 268 284 300 291 259 687 513 220 332 330 659 358 627 182 540 126 342 401 331 206 221 625
 465 348 294 477 572 274 275 166 225 355 371 459 197 266 307 704 135 726 245 535 243 252 601 301 230 161 672
 228 397 172 654 277 202 297 194 684 359 541 340 395 168 345 495 180 637 690 399 240 106 656 179 151 296 573
 241 193 256 557 550 231 124 729 276  56 155 280 629 267 524  75 476 204 662 716 319 208 568 614 156 226 563
 642 183  98 567 391 269 719 556 100 217 224 187 620 188 521 186 619 713 449 185 728 136 693 177 167 107 213
  59 322 162 517 710 329 153 234 214 101 263 178 579 561 261 648 701 212 454 630 238 393 407 125 722 192 490
 667 158 104 692 706 209 157 613 248  31 141 333  77 655 641 592 152 324 174 311 147 131 375 698 117 727 675
 564  46 122 336 599  78  91 218 112  37 689  80 723 109 530 500 712 483 148 715 203 596 542 492  76 390 664
 144 597 711 714 651 142  19 609 138  28 227  99 205  82  86  69 650 600 201 703 137  96 603 570 720 632 422
 626  53 102 639  95 539 115 612 114  50  72 159 129 725 611 347 665 624 681 508  92  89 506 560  48 386 708
 718  12 717 594   3  71 657 663 499 120 680  55 103 633 585 724 610  40  33  68 473  45 127 565 211 721 128

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00433e+07us (= 10043.3ms, 10.0433s)
Satisfaction error: 2
Number of search iterations: 3154
Number of local moves: 1059 (including on plateau: 521)
Number of local minimum: 243 (including on plateau: 56)
Number of resets: 1
Number of restarts: 0

Problem in row 15: 299 376 551 416 257 443 424 316 439 474 388 426 427 365 381 373 292 433 337 356 400 308 354 338 10 346 325 => the sum is 9854 rather than 9855
Problem in row 18: 465 348 294 477 572 274 275 166 225 355 371 459 197 266 307 704 135 726 245 535 243 252 601 301 230 161 672 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 547   4 616  27  52 676 690 162 698  85 633 622 410 610 144  54  61   7  44 706 110 353 623 689 571  37 624
 118  53 632  14 526 661  22  28 310  30 158 496 539 629 142  17 620 170  12 642 672 679 295 541 637 563 649
 150 657   6 664 161 544 537  41 628 123 143 662 314 668 253  32 710 254 101  13 687 422 656 666  21  95 647
  15 603 593  60 300 546 553  71 634 190 596   3 296 677  56 179 702  39 282 174 528 567 653 530 588  70 350
 189 591  16 609  78 578 589  31 671 345 574  72 615 614 171  48 607  58 100 652 535 215  36 586 557 114 604
  19 562 523 579 211   5 475  65 512 180 627 556 122 565 183 207 625  45 120 223 498  23 621 670 555 483 601
 252 651 522 582 206 401   2 359 575 145 472 554  40 564  29 102 376 197 136 270 468 476 592 436 542 293 613
  99 600 569 650  93 416 525 256 520  98 267 561  10 465 141  47 341 177 479 630 467 451 425 515 393  34 626
 200 597 491 524 178 492 640  86  11 213 559 507  87 581 224 212 545 250 119 499 518 458 580 348 502 104 330
 231 402 474 460 173 430 395 297 490   8 577 464 194 533 191 167 608   9 508 138 506  43 423 501 457 511 665
   1 572 339 378 271 486 302 306 368 166 327 384 409 434 431 497 493 163 519 168 517 229 406 383 428 504 374
 477 485 442 397 291 356 455 318 426 362 349 403 251 294  94 342 400 260 390  57 419 466 326 484 470 398 443
 471 447 459 404 424 429 435 228 407 218 494 421 369 529 427 321 243 298 307 202 411 399 414 334  66 463 235
 382 370 452 456 364 272 351 208 503 372 232 375 448 301 450 438 480 210 340 317 308 389 386 433 346 278 394
 305 358 417 284 269 331 391 420 249 366 361 323 673 240 388 360 343 333 367 595 405 594 385 265 225 273 335
 510 320 325 247 328 714 440 473 264 387 631 392 505 332 338 413 198 516 204 311 281 329 237 292 285 344 239
 227 316 365 379 304 187 315 396 165 606 277 274 220 172 352 380 558 536 712 531 700 238 275 313 371 445 241
 682 216 182 303 449 299 233 605 514 469 309 147 654 181 441 724 412 373 268 521 289 453 219 322 140 214 236
 437 132 312 205 688 128  69 576 209 487 354 263 617 363 717 543 175 509 619 415 217 513 222 193 244 560  88
 538 152 192 283 540 242 641 408 230 549 184 203 570 288 377 454 500 686 548 357 255 290 279 286 266 201 336
 552 126 337 127 462 258 646 663 355 583 381 261 157 160 461 287 169 727 276 154 720 257 705  64 245 488 234
 584 221 262 195 693 248 226 669  38 667  74 660 495 185 648 573 115 723 135 444 159 707  81 105 156 695  97
 590 137  67 715 680 111 149 684 125 550  79 188 482 124 644 729  96 725 568 489  62  59 721  42 148 645 246
 551 199  84 153 587 155 186 726 701 527 133 728 259  83 674 678 196 658 681  89  46  50  80 716 691 134  90
 446 129 151 130 704 176 131 655 103 719 697 146 532 108 709 713 106 612 708 566  18 139  49  33 722 602  51
 599 280 703 319 659 116 432 643  73 692 347 113 478  92 534 639  55 685 618 107  35 638  91  26 117 696  68
 683 675 324 711 164 598  25 481  76 718  20  77 109  63 636 699 121 635 694 585  24 418  75  82 112 611 439

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.61858e+06us (= 6618.58ms, 6.61858s)
Wall-clock time (full program): 6.66034e+06us (= 6660.34ms, 6.66034s)
Satisfaction error: 0
Number of search iterations: 1639
Number of local moves: 675 (including on plateau: 305)
Number of local minimum: 128 (including on plateau: 34)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 305 222 678   3 685 645  59  10  90 682 667 511  11 697 358 636 696 141 693  27 700 172 703 144 265  16  39
 649 283 609  31 534 673  21  26   6 592 628 179  97 653  67 676 705  74 519 666 650   8 687 146 229 407  40
  20 284  34  35 658 617 605 557  94 393 523 402  87 220 123 623 620 639 362 501 698 175 644 586  22 160 173
 625 261 582  85 689 624 544  44  13 593 565 148  36 343  56 641 566  42 691 640 647 138 563   1 103 127 488
 580 235 262 651 292 635 648 596  28 631 431 174  72 113 101 616 547 562 502 629 630 121  37  41  75  70 576
  29  84 646 244 308  48 553 304 207 634 504 637 590 239 599  96 491 506 564 543 561   2 603 513  65 143 142
 559  83 516 662 652 556 415 585 445 619 162 248   4  57 546 607 476 494 584 457  58 106 489 255  64   7 149
 537  95 524  45 661 588 608 139 483 594 526 204 472 147 423 531 545 495 480  38 155 245 349 105 140 307 419
 442  33 461 344 401 548 370  12  88 426 577  18 552 110 555 604 525 226 433 575 437 520 451 569 168 211 199
 541 125 532 550 365 463 214 572 505  54 403  52 360  30 486 482 460 449 632 366 410 247 464  50 318 256 469
 493 296 400 527 414 474 536 281 447 167 126 558  43  55 432 538 560 357 371 356 492 439 441 515  14 332 191
 509  46 336 340 418 424 177 455 268 487 417 312 478 477 359 406 289 351 399 299 446 298 394 602 326  24 518
 514 361 434 542 353 136 500 354 364 376 497 485 421 227 128 383 427 182 257 395 263 363 453 409 254 429 348
 206 475 422 285 347 438 392 530 466 295 286 413 405 291 381 412 411 443 471 352 260   5 391 320 398 324 436
 251 611 198 368 218 315 388 416 302 278 716 473 462 458 452 345 373 450 377 253 355 339 306 118 342 510 181
 246 322 390 350 228 157 269 375 448 264 310 726 379 512 275 387 380 317 297 328 384 659 337 258 420 643 194
 389 695 331 396 669 270 444 288 294 579 274 280 346 242 601 213 309 300 188 378 273 316  93 329 468 521 369
 334 699 277 205 397 169 325 164 231 240 571 656 287 613 279 183 234 702 323 367 335 490 225 249 570 454 276
 311 382 163 372 166 193 670 282 627 430 435 677 236 707 195 408 303 158 724 187 223 522  60 271 614 209 330
 266 499 117 313 151 385 201 720 679 159 165 508 267 425 197 208 180 459 241 723 170 581  49 671 709 540 272
 232 612 250 122 238 129 152 212 654  99 341 729 728 333 216 104 154 681 133 135 484 551 132 660 672 428 674
  91 465 200 684 112 210 706 243 610 115 107 237 638 554 301 259 203 224 233 196 252 535  82 655 688 598 657
 176 496 327 621 721 178 130 470 615 321  19  23 190 498 704 161  77 719 102  86  62 528 567 150 642 587 686
  69 517 134 711  81 186 119 683 314 319  80 215 725 230 708 202  32 145 108 456 583 573 595 386 529 622 533
 680 481 715 606   9 549 111 626 717 184  79 503 633 568  71  66 137 219  25  61  76 663 293 713 374 507 189
  89 714 217  98  73  53 574 690 185 171 290  47 618 589 664  17  63 116  68 727 120 668 338 539 694 722 710
 712 479 100 665  15 192 124 221 675 153 156 440 718 467 578  51  92 404  78 114 131 591 109 600 692 701 597

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.00432e+07us (= 10043.2ms, 10.0432s)
Satisfaction error: 2
Number of search iterations: 2774
Number of local moves: 920 (including on plateau: 326)
Number of local minimum: 199 (including on plateau: 33)
Number of resets: 1
Number of restarts: 0

Problem in row 23: 176 496 327 621 721 178 130 470 615 321 19 23 190 498 704 161 77 719 102 86 62 528 567 150 642 587 686 => the sum is 9856 rather than 9855
Problem in row 26: 89 714 217 98 73 53 574 690 185 171 290 47 618 589 664 17 63 116 68 727 120 668 338 539 694 722 710 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 579 710  30 711 571 644 658 187 316  35 637 207  36 611 195  15 224 105 645 191  12 269 638  10 225 701 693
 670 136   6 647  80   9 696 196  13 146 583  26 124 531 534 659 664 153 667 605  81  37 117 500 691 668 616
 140 102   8  60 613 568  57 259 363  85 584   7 604 614  53 662 671  42 695 563 629  31 628 501   1 633 682
 669 630 660  18 549 680 661  88  14  16 674  47  69 558 270 590 461 123 599 540  39  43 588   2 608 168 491
 653 411 564 561 101 649 209 548 158  62 456  32 177 596   4 618 581  28 640 566 593  20   3 626 208 112 679
 450 518 541 282 600  41 555  76  82 311 606 134  86 677  56 469 627  24 689 220 160  49 643 547 348 408 656
 504 533 521 538  22 573  38 519  58 438 471 525 176 113 476 493 100 162 454 543 116 122 502 598 228 505 527
 597 607 589 333 631 514  33  90  74 511 654 142 204 675 155 306 484  29 592 441  25 128 485 375 137 499 545
 467 575 486 171 587 390 481 559 321 512 532 309 167 448 126 336 405 305   5  68 496 210 473 595  97 154 580
 528 474 468 480  34 535 417 381  19 420 520 440 111 490 406 268 632 114 415 183 494 243 318 508 377 125 455
 447 554 591 372 344 419 423 407 387 267 552 550 517 396 347 197  11  66 463 109 452 266 431 199  98 551 439
 255 475 290 384 495 356  94 313 487 466 488 178 443 416 402 161 492 470 478 156 479 281 335 382 139 498 442
 328 453 412 516  17 355 386 433 213 368 376 422 449 296 526  27 395 464 307 359 362 510 357 421 332 334 437
 284 444 522 445 624 482 366 291 392 338 310 394 303 373 352 346 274 389 414 353 323 327 409 182 401 279 238
 320 337 285 380 308 265 326 426 697 325 251 280 378 299 489 430 603 304 462 324 339 398 429 288 258 361 293
 383 256 252 393 315 436 434 319 374 413 322 273 544 539 287 404 254 345 147 371 283 536 174 722 602 235 242
 172 218 205 425 232 246 365 708 507 180 340 648 317 275 350 349 690 574 397 364 229 446 157 262 657 245 297
 215 264 292 300 312 298 585 234 576 569 260 370 625 331 513 460 179 673 188 248 261 523 185 257 529 427 181
  91 391 367 672 369 241 201 687 706 424 230 341 236 465 159 203 330 385 295 610 189 665 301 202 582 329 184
 388 278 149 233 169 152 709 715 360 343 302 684 663 239 249 272 271 681 294 729 231 399 226 198 457 217 247
 212 175 286 276 151 244 289 221 451 612 143 572 620 342 615 211 477 703 240 263 723 277 104  75 503 716 354
 166 164 121 515 692 728 193 190 497 622  23 700 650 135 542 459 132 652 200 435 250 683 130  21 651 227  77
 133 106 237 120 214 216 173 685 601 570 170 699 223  95 646 206  71 676 127 418 410 560 725 694 351 678  51
 103  92 636 530 150  65 192 108 642 721 131 666 358  52 165 379 141 577 253 428 634 707 718 186 432 567 222
 314 144 506 145 557 110 619 621 472 609  83 509 483 148 705  55  93 537  63  50 712 702  70 714 717  73  44
  67 724 713 129 562 115 623 194 458  89  96 641 565  54 655 594  40 586  48 639 698 704 546  64 107  99  45
 720  84 118 219 556 524  72 400 617 403  61  59 727  87 578 686 553 688  78  79 635 719 163 726 119  46 138

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.90282e+06us (= 6902.82ms, 6.90282s)
Wall-clock time (full program): 6.94438e+06us (= 6944.38ms, 6.94438s)
Satisfaction error: 0
Number of search iterations: 1661
Number of local moves: 681 (including on plateau: 247)
Number of local minimum: 108 (including on plateau: 34)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  24 621  91 676  14 171 694 637 711 675 657 256  64 702 681 608 691 318 614 148  21 124  34 471 101  48   3
  30 450 207 671 692 662 304 696  20 699 260  66  53 684 704 638 393  37 315  80 674 634  62 649  84   9  82
  55 151 103 612 113 435 644 281 560 635 254 271   6 673 628 578 701  52  49 122  90 670  99 643 727  40 663
  95 225 166  47 620 658 661 648 604 588 655 145  18 606 641 650 441  27 142  25 652  29  32 100 640  94 646
 280 558 226 564 715 247 590 593 143 556 600 599  26 683 647 356 202 557 116 137   4 611  16  13  88 136 592
 130 542   5 597 607 399 499 581 118 249 617 162  19 577 601 575  31 141 131  42 584 516 111 532 536 415 538
 195 102  59 522 582 156 133  22 546 529 528 496 572 535 545 418 140 193 487 553   8 509 185 534 636 585  85
 184 494 182 533 527  76 531   2 566 268 567  83 519 576 480 495 526 242 110 433 439  23 198 483 377 468 473
 153  63 279 559 432 274 491 510 188 447 478  75 500 508 465 561 125 518  10 420 563 422 220 548   7 524 515
 521 163 261 461 503  73 357 514 488  61 481 438 507 504 544 475 350 338 506 470 425  15 498   1 476 392  33
 513  87 308 485 458  54 423 525  92 402 107 456 459 490 455 416  28 467 114 443 427 484 382 457 401 445 477
 426 404 326 440 127 376 379 444 390 365 155  96 505 479 446 414 277 412 472 211 419 436 408 411 289 462 286
 367 400 311 403 410 333 452 407 389 486 334 391 265 152 429 385 406 451 396 442 358 397 380 123 381 325 282
 387 345 395 430 294 431 421 243 349 331 337 343 351 405 383 463 371 434 372 330 344 354 360 341 363 332 346
 394 370 409 292 335 320 368 301 313 328 700 369 248 278 288 388 324 489 340 386 679 373 378 295 316 284 290
 303 589 424 213 300 680 267 364 263 565 272 312 359 251 361 688 298 569 375 413 321 244 348 305 228 270 273
 307 310 517 355 214 327 238 317 329 428 660 339 342 309 241 283 724 586 215 314 253 347 296 245 234 708 417
 190 302 492 269 291 454 196 231 626 464 129 695 366 275 252 233 666 718 689 258 240 218 571 119 353 299 259
 664 682 460 175 246 587 187 362 723 178 698 217 201 239 165 150 562 453 710 179 227 208 651 287 223 189 232
 656 181 591 262 264 250 306 713 502 257 229 659 668 192 168 323 551 449 595 322 204 197 512 255 180 170 199
 523 709 609  70 266 537 717 212 200 530 209 552 336 221 115 237 598 219 191 210 722 173 630 167 172 625 105
 543 352 554 203 222 726  97 186 639  71 474 205 135 144 134 177 574 236 669 654 493 160 667 224 194 539 583
 665 501 624 169 725 547 158 230 161 120 157 549 645  58 206  51 139 176 174 631 104 690 293 149 627 629 677
 602 579 615  17  98  72  65 112 117 183 164 678 619 147  67 126 568 603 596 633 685 610 613 719 276 159 132
 482 109 374 108  56  46  69 138 706 216  77 720 672  57  81  79  89 618 716 632 128 541 594 622 728 686 511
 437  11 570 106 121 580 540 550  38  78  12 448 707  60  35  43  41 398 466 653 705 297 712 520 721 319 687
 729 555 697 616 623 384  68  36  74 146  44 235 693  50  93  45  39 154 285 714  86 573 605 642 497 703 469

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 5.59288e+06us (= 5592.88ms, 5.59288s)
Wall-clock time (full program): 5.63396e+06us (= 5633.96ms, 5.63396s)
Satisfaction error: 0
Number of search iterations: 1196
Number of local moves: 694 (including on plateau: 261)
Number of local minimum: 54 (including on plateau: 38)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 204 704 700  20 512 182 576 590  56  23  44  42 703 518 421  40 450  78 619 636 143  53 490  94 679 554 723
 600 713  96  72 675 195  75 114 101 400 122  82 616 597 707 201 513 553 461 694  74 206 669 494 699  99  27
 374 725 411  60 623 483  28 220 716  65 112  46 453 341 127 138 672 485 718 693  93  98 208 460 691 726  89
 506 155  55 656 383 493  39 602 149 108 157 129 677 309 674  68 695 109 685 722  71 117  64 706 709 698 119
 158 198 363 124 627 541  30 639 495 238 126 110 676 566 136 134 544 237 643 592 151 561 205 488 361 645 267
 202 168  81 649 116 708 162 633 113 371 135 217 621 469 106  87 379 287 673 589 172 727 200 606 724 470 190
 702 717 213 274 272 715 360 159 184 539 150 179 166 464 281 456 534 228 654 540 666 209 216 250 415 259  54
 568 719 178 148 684 218 710 720 163 232 222 192 103 318 130 270 294 542 617  76  63 186 364 634 582 728 194
 625 212 300 254 336 711 348 251 655 240 153 183 338 591 271 236 577 612 481 215 234 221 241 628 275 521 146
 585 154 226 104 642 624 344 319 337 452 306 140 305 500 343 310 380 307 613 392 712 246 260 261 302 323 368
 670 170 290 292 156 467 311 244 185 353 667 249 258 714 301 245 565 369 438 409 169 269 299 652 454 345 314
 416 229 298 264 219 273 256 686 432 626 396 173 188 327 395 382 253 255 437 332 705 211 365 378 284 729 346
 165 268 689 248 289 362 439 349 235 293 227 721 644 223 295 389 277 329 330 303 372 320 497 475 347 297 472
 525 426 334 263 285 335 333 370 243 387 358 266 442 436 283 351 681 308 279 405 359 366 417 419 321 296 367
 288 280 477 412 449 375 340 326 328  77 478 528 242 413 247 331 317 457  35 390 451 424 388 418 563 466 355
 404 373 376 385 431 410 406 440 598 197 377 531 533 121 536  59 398 403 207  57 286 615 322 448 164 465 313
  13 526 354 444   5 434 496 402 499 189 399 473 583 196 425 530 142 575  12 352 394 423 441 160 422 447 519
 401 384 487 414 504 171 230 482 356 480 446 428 408 133 342 339 325  66 262 498 516 458 462 123 231 430 479
  38 381 491 581 532  67 435 429   1 210 443 548 550 233 522 471 214  88 265 455 552 511 647 144 420 125 502
 176 549 463 580  24 118 407   2 427 508 593 476 524 137 391 514  80  52 278 501 538 604 611 181 547  29 545
 161 595 535 433 276 105  32 152 505 474 445 517 393 239 503 468 145 291  86 111 610 556 596 557  91 459 520
 174 574 515 492 555 579 638 527 486 641 594 584  14  43 587 618  22 668 224  34  36  49 662 139  69 312  19
 529 175 578  83   3 199 658 564 648 653 692 603  73 120 537 571  84 573  97 562 315 523   4 350  41  62 558
  61 131  31 559 257 141 607 509 663 567 489 661 107 177 660 599  58 659 191  79 588 543 572   7  85 167 687
 608 304  26 697 128 203 688  90 646 357 507 586  21 551  18 680 510  48 102  17 630 609 640 282 147  95 665
  70  10 637 683 252 132 682  25 601 629 657 569 180 484 570 690  50 605  51   8 324 650   6 386 187  16 701
 632  15 651 664 620 614 225  11  33 546 560 622  37 635  47 678 696 671 397 193 631 100   9 115  45  92 316

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00477e+07us (= 10047.7ms, 10.0477s)
Satisfaction error: 2
Number of search iterations: 3512
Number of local moves: 1118 (including on plateau: 575)
Number of local minimum: 288 (including on plateau: 67)
Number of resets: 2
Number of restarts: 0

Problem in row 1: 204 704 700 20 512 182 576 590 56 23 44 42 703 518 421 40 450 78 619 636 143 53 490 94 679 554 723 => the sum is 9854 rather than 9855
Problem in row 7: 702 717 213 274 272 715 360 159 184 539 150 179 166 464 281 456 534 228 654 540 666 209 216 250 415 259 54 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 719  95 201  99  32 607 644  58 606 151  77 135 608 530 704  17  12 421 670  23 605 700 531 112  92 684 722
 603  60 137  22  14 610 516 543 619  73  13 301 587 583 710  54  18  59 728 128 331 512 675  81 721 703 454
 571 178 724 665  29 600 599  85  66  42 309 110 672 103 475  74 478 546 639  80 538 664 118 729  45 160 556
 581 681  27 379 509 549 420 709 679 132 123 158  88 580  71  63  37 718 493 154 725 674 185 677  67  35 341
 640 380 176  84 726 683 702  65  83 167  97 173 712 654 127 140 156 609 708 574  91 584 456 108 184 162 614
 631 433 188 190 418 419 534 104 673 144 217 469 169 713 168 138 182 668 669 133 489 625 285  69 694 221 212
 352 517 148 256 245 575 688 652 249 119 149 686 145 637 143 126 196 692 437 260 676 477 200 250 611 146 223
 655 598 259 193 267 582 564 727 189 215 164 632 179 716 229 198 170 222 385 175 613 590 214 216 147 202 554
 706 569 405 197 157 535 643 203 723 326 166 565 238 310 367 264 254 181 671 228 165 521 255 120 328 195 563
 455 621 560 279 268 705 183 242 344 427 230 645 273 281 246 293 232 659 399 213 382 685 237 231 329 210 226
 311 638 348 241 289 523 340 271 224 346 691 362 265 218 353 313 278 338 629 292 342 548 298 320 290 323 464
 576 698 376 227 282 498 247 266 272 192 337 450 356 314 235 567 312 304 481 294 296 484 234 387 460 485 225
 487 424 365 468 402 459 397 274 511 236 347 355 373 299 220 324 374 597 349 306 343 441 307 276 284 321 316
 371 332 335 389 411 400 370 322 315 345 357 253 396 410 369 384 283 390 440 372 336 449 422 350 325 363 366
 319 295 377 434 463 208 408 514 381 407 360 428 333  48 472 394 351 444 269 480 415 391 398 317 205 417 327
 368 361 446 131 388 288 412 416 442 244 302 414 409 386 358 426 395 507 286 443 482 257 263 334 401 544 152
 339  47 486 425 445 297 451 330 318 496  90 515 470 447 432 467 404 375 124 393 413 275   1 500 406 506 403
 287 233 163 502 122 207  96 519 490 303 592  33 528 532 522 452 430  31 277 488 383 199 533 494 479 537 423
 105 121 457 508  62  78 461 474 359 471 392   9 462 520 483 378 499 473 305 465 558 243 435 439 513 491  94
 117 180 492 525 579 191  53  16 476 503 495 547 501 561 527 551 431 550 139  57 448  39  93 602 429 542 211
  70 172 248 505 536 100 159 364  15 566 539 114 562  89 627 497 436 526 252 570  38  82 589 453 595 555 596
  86 308 572 620 623 106 115 612  34 557 541 642 510 177 636 552 529  52 109 591  11  64   6 438 553 617 194
 174 270 586 663 593 239 125 604 656 635 633  55 291  19 630 524 626   7  30 594  20  41 354 518 209 588 171
 219 601 573  10 658 136 251 186 618 667 616 280 559 101  43 650 699 204  75 578 577 153 707   5 585  76  28
  61 545 540 504  26  79 300 116 150 693 649 690   2 240 701 662 695 142 134 628 155  46 624 666  49  98 660
  44  40 641 657 634  51 141 615 102 687 689 187 111 258   4 651 661  72  50 714 262  87 715 466 648  21 647
   8 458  25 682 678 130  36 568 261 711 680 646  56 129   3 696 717  68 107 622 161  24 720 697 206 653 113

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.00516e+07us (= 10051.6ms, 10.0516s)
Satisfaction error: 2
Number of search iterations: 2879
Number of local moves: 948 (including on plateau: 383)
Number of local minimum: 258 (including on plateau: 46)
Number of resets: 1
Number of restarts: 0

Problem in column 5: 32 14 29 509 726 418 245 267 157 268 289 282 402 411 463 388 445 122 62 579 536 623 593 658 26 634 678 => the sum is 9856 rather than 9855
Problem in column 12: 135 301 110 158 173 469 686 632 565 645 362 450 355 253 428 414 515 33 9 547 114 642 55 280 690 187 646 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  43 167 143 168  98 372 633 537  36 724 723 285  68 686 557 369  34 602 618  25 490 244 719 570  47 720 177
 108 279 700 449 532 694 535 649  30 291 688  96  14 105 593 703  67  97 318 200  81 564 101 554 693 590 124
 181 111 494 403 173 489 711 584  31 729 725 632 139 671 669 149 131 103 710  23  69 708 121 123 646 212 118
 133 630 432  59  71 250 486 543 390 678  75  76  45 654 605 675 391 660 100  99 146 624  90 448 237 582 676
 184 246 206 398 728 210 162 640 166 621 692  55 642 116 574 117 445 718 498 705 219 192 241 306 190 501  83
  70 203 314 530 412 648 607 609 628 661 634 249  19 127 509 171 194 523  73 300 553 631 180 682 122 169  37
 198 185 670 436 113 699 585 601 136 261 588 400 690  84 714 668 147  15 158 240 465 338 170 182 251 673 188
 270 567 358 674 207 536 313 364 197 302 576 354 289 114 286 677 265 599 128 563 187 691 493 138 156 229 322
 680 556 689 653 252 195 341 288 276 274 511 666 221 204 216 377 199 165 625 283 152 507 267 388 140  29 701
 679 571 482 480 193  56  72 278 209 325 721 508 263 305 248 384 227 696 234 266 132 662 159 527 349 519 310
 218 231 461 439 145 647 226 717 309 363 228 336 189 360 611 191 296 627 307 346 347 583  10 524 178 636 330
 317 410 329 591 282 538 450 233 716 452 546 443 315 280 243 362  79 321 256 290 495 284 260 444 213 380 326
 120 242 344 422 520 357 613 504  50 339 396 600 526 414 368 224 428 297 419 281 376 404  87 333 430 416 345
 273 402 164 409 350 389 460 424 312 451 295 342 386 371 299 373 401 580 304 351 287 334 697 264 160 308 469
 324 374 415 239 319 455 141 485 353 303 378  86 343 393 331  44 540 332 722 417 539 316 457 148 474 521 406
 431 272 397  26 201 392 604 446 471 262 235 176 375 405 459 440 383 555 106 462 547 271 453  92 558 425 411
 515  80 466  53 517 328 542  13 516 144 277 395 491 408 327  91 119 464 562 433  38 637 505 367 622 470 475
 427 499 232 434 529 211 115 179 421 196 337 437 320 664  58 512 463 355 298 514 413 214 429 382 381 394 441
 560 503 129  22 473 575 311   1 294 496 142  28 438 456 112 399 549 525 134 655 572 259 488 335 293 561 545
 541 484 151 366 598 126 442   9 544 589 238  40 497 581   2 629 483  88 379 435 423 163 481 217 477 502 370
 612 500 479  82 569 447 566 472 595 626 102  46 531 506   3 522 458  93  41 592 644  32 323 161  48 255 550
 616 407 365 301 597   8 215 418 487 183  49 635 641 573  52 614 587 202 340   6  66 137 586 684 552  24 510
 253 109 551 659  42 359  95 420 620  64 107 713 157 533   5 174 476 356 548 594 559 153 454 651 658  17 528
 534 610 125 268 565 220  89  57 608 247 110 665 579 513 706  65 467 387 606 258 205 615 135 596 361 257   7
 726 639  62 468 645  77  35 104  61  18 254 208 715 186 727  51 652 230 709 638 619  74 623  21 578  54 681
 225 518 603 478  39  85 154  11 695 223  78 712 687 130 577 172 707  20  12 657 663 155 643 292 385 236 698
 617  60  94 348 685 492 352 269 704  33 150 672 275  16   4 702 667 245 650 222 568  63 683 426 656 175  27

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.74368e+06us (= 7743.68ms, 7.74368s)
Wall-clock time (full program): 7.78484e+06us (= 7784.84ms, 7.78484s)
Satisfaction error: 0
Number of search iterations: 2445
Number of local moves: 1002 (including on plateau: 454)
Number of local minimum: 185 (including on plateau: 63)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
   9 106  70  83 674 298 581 458 248  51 439 710  44 143 707 713 724  77 611 416 668  46 665  16  50 521 727
 132 683 135 124 616 677 641 428  69  81 524 382  52 481  31 692 718  38 528 567  91 557  97  57 681 728  45
  40 575 496 123 192 533 608 566  61  53 578 689  43 502  58  84 619 714 576 712  95  49 679 288 300 532  90
 129 101 676 112 121 128 568 659 118 231 636 717 170 462  85 107 706 116 716 635  35 108 540 686 495 570 228
  73 152 401 552 482 642 589 632 195 207 430 652 171 721 127 297 201  64 664 489 154 157 323 210 384 671 215
 229 511 234 704 100 484 591 690 167 242 708 449 186 250 130 661 119  60 455 720 216 355 226  59 656 555  98
  66  94 516 292 321 672 645 667 725 136 595 385 305 265 206 103 197 302 615 658 655 273 140  87 537 221 177
 184 202 538 224 266 697 471 470 239 370 621 339 223 649 137 233 162  92 222 729 342 263 654 191 529 715  93
 422 391 159 267 180 592 433 475 719 270 256 318 196 666 287 185 335 203 393 662 217 286 700 291 474 285 193
 310 225 601 147 139 696 703 551 198 569 376 280 179 261 282 386 429 328 255 360 336 150 341 519 582 343 309
 274 326 643 172 205 366 512 480 141 637 631 322 312 212 417 316 410 175 387 340 381 264 432 243 605 325 327
 330 176 388 238 165 451 396 546 237 352 308 584 346 333 364 463 246 281 299 440 315 397 236 563 610 357 434
 543 723 457 293 200 379 395 337 374 371 230 399 486 307 452 372 362 188 347 320 262 702 241 120 368 351 276
 301 373 542 375 490 392 436 324 390 249 348 338 402 331 358 296 398 431 227 356 359 304 363 269 400 423 380
 421 419 522 294 411 427 314 469 407 498 403 253 441 289 415 464 208 414 247 303 413 437 275 367   1 378 365
 218 518 406 257 122 290 214 319 252 245 353 377 583 468 510 219 279 554 394 153 418 345 456 488 420 503 494
 240 350 146 404 412 369 361 271 442 499 109 603 459 507 556 460 163 443 562 181 259 446 158 409 272 425 349
 447 329  11  55 435 161 134 254 477 545 344 487 354 166 466 479 476 450 190 268 525 571 558 506 142 505 520
 574 508 454 424 448 408 145  75  37 597  25 149 590 144 514 614 586 405 115  99 535 110 580 726 383  76 534
 682 579  14 628 550 183  89  12 561 572  56  26 626  96 673 648 472 278 478 317 638 389  24 426  20 155 663
 541 453 125 501 334 148 182 131 504  48  67 539 577 640 585 633 500 609 114 284  10 473 599 709  30 187 332
 491  47 513 687 523  36 105 151 530 174 169 102 596 564 527 594 117 598 549 138 617   2 602 160 492 111 660
 531 536 306 517   5 295 244  82 493 548 283 606 620 260  86 126 445 657  27  80 630 691   8 565 232 485 497
 675 651 509 444 698 209 189  88 213 547  79   6 653 465 544  42  21 587  78 235 607 467 625 461 168 156 438
 694 650 104 613 483  39  22  62 688 526 612   7 588  17 627  41 559 618 178  54 211 684  23 646 251 173 685
 629  13 695 647 644  63  29 593 701 722  71 133 634  34 693   4 204 573  68 311 553 705 277 113 699  32  15
 670 164 194 678 639 220 258  65 669 515 604   3  19 622  18 623 199 600 560  28 313 624  33 680  74  72 711

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 3.57568e+06us (= 3575.68ms, 3.57568s)
Wall-clock time (full program): 3.61709e+06us (= 3617.09ms, 3.61709s)
Satisfaction error: 0
Number of search iterations: 854
Number of local moves: 485 (including on plateau: 100)
Number of local minimum: 47 (including on plateau: 23)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 660 640  87 148  61 669 602 654 275 574 615 549 616  84 120 699 204 233 183  22 582  54 678 641  18 153  34
 609 672 117 110 561  32 661 224 517 635 115  23 666 683 598 515  13 702 210 608  78 161 197 628 124 278 118
  20  21 627  17 157 555 655 572 187 576   9  82 508 633 595 642 198 690  68 679  70  33 689 693  15 665 199
 592 534 451 164  59 225  26 626 472 643 560 154 439 114 578 663  10   1  36 211 276 567 617 612 625 509  91
   4 513   2  75  25 658 170 512 109 443 575 554 664 503 143 502 539 581 149  81  35 538 605 586 579 169 541
 596 540 162   5   6 564 271 562 499 528 529  43 558 361 184 497 621 496 461 181  48  11 623 417 522  14 556
 542 566 244 548 613 500   3 580 607 243 673 634 591  95  98 636 194 422 222  39   7  69 123 487 489 430 200
 531 611 163 493  41 601 269 401 495 524 647 571 547  77  45 557  76 599 246  28  12 600 648 475 525  16  57
 590 535  52 486 577 479 251 521 185 507 490 537 646 186  58 453 506 481   8  44 235 464 384 444 519 151  66
 593 589 378 530 191 532 150 473 160  27 458 333 476 142 125 423 240 257 466 326 414 485 477 488 501 432 189
 456 418 427 248 460 587  86 434 408 393 305 351 516 196  19 347 283 428 441 594  31 518 452 445 498 426  88
 546 504 343 467 435 368 360 386 147 585 514 145 261 237 135 389 395  65 446  96 396 358 474 411 624 274 494
 367 448 375 459 311 406 317 405  85 492 256 255 440 429 310 152 420 409 356 398 468 450 366 390 288 382 421
 431 371 291 172 552 324 298 455 413 286 290 320 357 327 350 465 308 205 339 338 370 412 388 355 359 381 698
 703 415 400 201 295 314 260 303 341 337 695 379 385 352 410 312 463 536 102 321 397 279 437 270 203 436 309
 301 334 195 289 573 239 622 277 511 523 284 568 402 307 565 249 520 322 424 399 348 287 209 262 362 215 268
 245 331 323 671 353 694 645 363 345 178 159 182 281 569 715 136 297 632 505 241 267 330 218 391 227 258 299
 176 173 285 236 254 336 639  46 354 668 364 340 280 342 667 387 316 711 373 447 550 296 202 315 214 265 619
 264 134 374 684 710 234 325 328 563 220 335 171 252 304 462 394 121 469 365 657 300 688 193 319 167 344 478
 228  51 692 247 250 238 543 724 293 175 259 188 273 583 606 217 369 137 229 686 471 376 302 101 230 713 674
  55 346 449 551 553 292 682 263 533 282 242 726 158 272 705 438 709 213 510 207 719 132 206 112 122 166 212
  74 138 701 294 380 332 629 232 454  79 140 174 192 708 484 190 231 131 723 631 588 697 216  37 180 676 544
 168 105 603 526 266  90 653  80 226 223 208 483  93 306 392 119 707 604 433 419 650 106 729  72 403 700 491
 144  47 677 219 253 313 139  62 637  60 146 177 130 482 570 165 725  83 610 618 714 712 104 133 651 597 687
 129  49 681 691 685 108 404 179 372 221 155 720  71 527 480  40 630 329 584 545 718 113 107  89 116 442 670
 103 716  97 680 559  92 128  99 349  50 706 470  24 416 377 127 722  56 649 425 407 457 100 652 656  42 696
 728  53 659 644 675  73  67  94 318 383 126 727  29 620  64 141  38  63 717 614 704 662 111  30 638 721 156

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.00424e+07us (= 10042.4ms, 10.0424s)
Satisfaction error: 2
Number of search iterations: 2967
Number of local moves: 1122 (including on plateau: 624)
Number of local minimum: 260 (including on plateau: 67)
Number of resets: 1
Number of restarts: 0

Problem in column 2: 640 672 21 534 513 540 566 611 535 589 418 504 448 371 415 334 331 173 134 51 346 138 105 47 49 716 53 => the sum is 9854 rather than 9855
Problem in column 12: 549 23 82 154 554 43 634 571 537 333 351 145 255 320 379 568 182 340 171 188 726 174 483 177 720 470 727 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 131  52 406 717 595 532  71 711  47  46 692  60 389 128  19  27 697 458 580 694 451 706 626  79 302  24 615
 670 727 538 616 591  73  88  59  93  86 662  64 720  49  94 122 464 127 712 699 420 524 101  65 563 384 544
 606  50 424 541 255  54 531 648 300  38 537  99 702 112  75  26 678 465 234 550 529 323 107 688 609 100 574
 480  55 724 714 559  76 511 125  56  31 279 173 136 120 111  48 650 718 682 696 540 222 145 721 500 206 576
 695 139 110 722 472 280 147 685 205  35 186 178 115 510 249 176 654 148 303 657 705 690 471  96 599  28 600
 561 109 630 640 581 708  89 491 190  21 268 294 165 213  25  97 577 142 462 638 578 709 181  18 675 114 679
 286 261 701 710 381 521 691 259 152 246 121 221 725 137 330  67 251 334 684 501 468 225 159 182 539 230 473
 642 123 545 527 488 135 169 297 265 271 666 283  95 726 133 118 543 162 212 399 728 438 140 244 661 413 432
 328 326 243 264 499 484 211 715 216 700 342 155 232 116 257 227 410 312 635 664 354 434 308 102 250 397 674
 252 372 677 284 729 380 291 219 324 248 124 108 520 188 325 422 210 407 392 530 373 513 314 317 236 377 723
 292 200 656 278 523 605 419 301 198 262 535 269 235 238 149 602 713 258 622 460 247 351 191 146 421 352 332
 288 305 240 337 518 564 437 220 346 239 282 391 482 218 395 586 341 229 504 475 443 295 273 716 189 340 202
 263 366 113 277 707 376 448 347 370 393 272 228 634 525 304 287 497 231 416 494 207 517 254 320 363 339 307
 289 197 435 357 344 425 457 187 343 345 440 719 103 445 338 556 355 418 327 316 274 428 329 331 285 430 382
 298   4 371 253 402 474 226 394 479 335 456 336 296 492 431 436 358 293 519 309 365 409 310 502 362 359 386
 348 356 396 299 177 554 318 452 390 439 387 217 411 368 449 447 144 369 171 276 444 507 374 266 400 590 306
 446 322 560 426 183 405 453 237 404 423 315 383 319 534 349 313 442 459  10 106 256 398 417 608 412 364 311
 503 476  57 514 161   2 487 506 388 493 379 489 367 485 621 526 528  77 164 130 552 461 150 455  61 408 415
 214 619  29 241 134 275 495 486 153 645 547 567 454 477 585 542 194 614  70  45  74 170 566 680 203 647 129
 555 611 192 242 126 215  33   9 568 385 427 470 594  62 593 467 508 450 184 429 105 570 698 498 172 612  81
 401 655 160  68 281 573 132 613 584 651 496 512 481 533 433 441 175 516  91  30  17 168 569 607  98 490  80
  92 618 163  66 267  16 633 639 644 589   5 469 180 579 463 571 158 663 361 245  83  14 649 681 119 687 201
  82 548 193 478  42 270 620  51 704 671 625 598 350 668 689 558   3 686 196 156 204 509  41   8  85 597 223
 515 601 179   1 154  12 565 617 660 546  43 610 603 553 587 375  44 637 483  69 536  34 575 143  84 551  78
 224 646  11 208 138 522 604 549 628 378 167 673 151 199 632 653 209  13 321  72 562  87 572 676 693   7 260
 104 414 466  22 353 659 588  15 505 672 596 658 360 557 592 583  20 629 403 157 166  90 652  37 333 185  39
 290 703 636  53 195 665 141  23 643 667   6 631  36 623 627 582  32  40 117  58 174  63 683 669 641 624 233

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00021e+07us (= 10002.1ms, 10.0021s)
Wall-clock time (full program): 1.00441e+07us (= 10044.1ms, 10.0441s)
Satisfaction error: 2
Number of search iterations: 3006
Number of local moves: 1059 (including on plateau: 486)
Number of local minimum: 243 (including on plateau: 56)
Number of resets: 1
Number of restarts: 0

Problem in row 4: 480 55 724 714 559 76 511 125 56 31 279 173 136 120 111 48 650 718 682 696 540 222 145 721 500 206 576 => the sum is 9854 rather than 9855
Problem in row 20: 555 611 192 242 126 215 33 9 568 385 427 470 594 62 593 467 508 450 184 429 105 570 698 498 172 612 81 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 596 676  63 167  45  59 112 148 168 387 128 544 709 424  21 633 612 686 728 619   7  88  14 704  80 722 715
 647 114 729  99  79  90  67 261  84 144 137 592 685 512 104 630 601 665 296 634 590  82  19 697 507 721  69
 248 529  53 698 675 160  33 130 113  52 102 503 575 701 108 603 244 650 439 610  11 637  78 588 718 443 154
 177 712 713 707 187 125  49 451 161 201  92 178 437 290 124 708 694 723 119 720  25 671  24 299 471 725  72
 523 292 121  97 466 203 181  23 442 153 143 478 608 602 166 659 475 580 101 306 115 717 727 348 473 654 202
 107 703 159 242 105 724 110  62 131  77 332 517 714 658 254 691 595 425 252 628  37 645 240 333 411 538 165
 297 149 245 329 259 688 145 281 170 285 638 614 649 583  36 495 516 468 193 456 146 209 258 673 558 509   6
 674 162 273 186 164 311 172 253 140 385 270 351 680 656 195 224 574 357 492 639 205 257 397 480 653 428 277
 216 225 156  71 232 350 217 317 470  95 283 699 539 716  98 678 618 133 705 550 291 219  94 445 636 667 135
 582 622 173 183 305 521 396 335 340 199 226 566 196 308 280 433 360 541 129 571 184 271 324 346 505 661 298
 374 719 327 370 450 150 194 316 341 334 200 572 211 528 301 310 180 369 395 591 228 175 349 488 605 394 384
 587 302 353 295 268 354 362 352 465 213 356 278 393 300 368 434 319 331 489 192 336 274 321 578 373 726 236
  42 246 382 379 188 410 320 455 415 315 407 365 497 482 412 447 440 279 552 323 409 198 265 546 389 325 367
 431 408 294 314 189 432 391 355 392 250 430 286 405 406 427 215 464 282 221 422 343 454 287 457 347 313 640
 218 303 441 307 399 461 309 477 380 386 272 342 174 275 359 401 328 436 372 293 366 289 555 420 462 344 487
  43 269 276 435 684 484 429 414 377 402 423 330 241 264 624 493 361 417 288 371 418 338 421 235 132 322 364
 204 518 449 510 438 398 452 522 378 358  54 127 337 426 463 207 481 446 547  60 540 564 499 231  10 260 376
  26 459 212 381 545 635 562 400 585  32 345 363 388 116 527 469 390 151 383 263 453 548 617 227 208 126 444
 494 255 513 519 593   5 642 536  75 561 491 118 557 460 498 419 318 179 169   1 490 535 559 185 142 138 403
 615 486 267 621 581 501 524  46  89 632 485 120 247 237 627  17 139 413 375  34 543 567 669  93 197 157 573
 556 483 506 467 549 626 511 641 520 476 589 109  85 100 599  29 176 155 229 249 525 504 496  96  38 214 326
 532 147 448 577 502 526 625 594 554 514 458 553  65  73 563  87  50 206 579 190 657  13 472 404 152 256  58
  28  86 710 643   8 690 508 551 570 652 609 136  41   9 600 171 266 479  55 304 500 569 696 141  39 122 672
 262 312 597   3 613 238 542 598 530 683 616 134  51  66 682  64  61  12 533 474 568 117 662 565 223  20 629
 644 534 700 663  57 666 655 586 695 689 416 222  56 182   2  15 239  22 531 233 584  44  83 158 611  31 537
 692  68  47 576 604  30 668  70 664 693 702 515  81 251 706 103 163 339 560  48 677 210 106  27 631   4 620
  40  76 648  16 670  18 679 681 606 687 651 243 234 230 711 220 191 111 123  74 607 660 623  91 284  35 646

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00033e+07us (= 10003.3ms, 10.0033s)
Wall-clock time (full program): 1.00447e+07us (= 10044.7ms, 10.0447s)
Satisfaction error: 2
Number of search iterations: 3464
Number of local moves: 1171 (including on plateau: 458)
Number of local minimum: 314 (including on plateau: 51)
Number of resets: 2
Number of restarts: 0

Problem in row 15: 218 303 441 307 399 461 309 477 380 386 272 342 174 275 359 401 328 436 372 293 366 289 555 420 462 344 487 => the sum is 9856 rather than 9855
Problem in row 21: 556 483 506 467 549 626 511 641 520 476 589 109 85 100 599 29 176 155 229 249 525 504 496 96 38 214 326 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  61 144 416 299 576 532 719 108 210 319 135  65 172 113 648 476  51 729 656 297 404 377 692 671 186  87 712
 240 701  92 718 181 607 667 313 373  54 559 604  68 381 267 716 472 591 442 143 121 167 509  66  67 714  22
  79  52  19 659 185 666 681 684 614 133  42 522 627 721 112 603 111 413 157 336 389 688 440  57 720  27 118
 359 272  76  15  36 188 567 676 502  43 642 675 553 146 290 708 570  96 612 433 645 152 640 689  91 156  23
  89 107 139 615 706 175 626 717 654 149  58 253 698  72 725 657 158 564 650 102 631 123 475  85  70 458  99
 635 205 346 594 233  86 630 202 266 628 184 169 198 160 726 636 142 562 126 150 679 723 670 209 245 237 214
  95 382 605 501 105 260 499 179 187  94 599 386 265 163 617 569 397 110 662 552 526 161 505  82 580 597 177
 412 258 254 674 165 669 236 491 693 665  28 180 140 228 195 249 341 697 462 439 331 194 589 345 212 256 452
 338 197 269 611 200 173  84 646 618 724 137 223 466 124 182 328 206 435 524 129 620 174 713 315 727 558 134
 409 286 220 273 602 296 473 401 308 459 624 661 314 278 183 292 251 406 203  44 623  97 694  77 702 166 513
 168 410 170 224 155 119 367 385 238 658 418 652 235 333  90 287 709 586 379 432 707 527 295 347 349 261 354
 178 601 274 246 374 566 403 420 436 215 151 608 394 291 342 227 281 653 294 545 284 369 437 204 239 380 443
 592 264 262 480 276 259 579 363 616 500 282 225 426 304 510 368 508  56 361 306 525 322 327 323 226 352 243
 457 324 451 431 504  47 298 722 539 250 430 445  64  40 268 371 477  49 310 366 391 231 399 378 632 514 467
 247 395 460 487 376 455 387 263 271 106 454 421  10 241 453 686 541   7 350 277 468 447 193 533 486 485 356
 344 493 429 456 334 358 537 171 339 321 488 280 307 396 311 351 357 335 538  34 417 590 482 515  26 154 492
 414 464 120 130 419 318 244 402 542 415 302 104 465 332 330 390  24 583 329 516 309 610 489 370 470 326 438
 348 593 705 494  63  46 211 398 303 229 643 461 208 519 289 325 375 490  60 446 213 568 221 422 353 312 560
 511 340 523 285 507 423 581 301 116 481 383 127 548 444 364 230 255 196 300 189 199 469  74 512 540 557 400
 637 528 384 584 639 530 362  21  73 471 651  31 503 393 547 103 283  41 474 159 141 405 232 546 305 496 316
 565 434 575 115 582 543 191 128 554 411 478 483  33 248 425   2 234 574 270 534 343 497   6 495  98 518 520
 320 101 683  37 647 577  32 536  75 606 219 136 672 622 704  50 573 201 448 222  71 176 109 498 550 549 441
 619 479 571 279  13 588  17 153 578 365   3 147 449 690 506   5 595 407 529 596  88 317 293 372 217 392 587
  78 634 696 190 521 408  14  81   1 655  30 649 663 711  48 551 664 337 609 695  93   9  25 450  62 463 517
 644 484 216  83 703 428 148 715 117 242 691 561  29 660  55 218 687  45  53 572 360 685 125 600 427 207 100
 728   8 275 355  80 114 138 257  11 531 668 535 638 563  35  69 555 680  39 641 132 192 162 678 598 629 544
 288 699 625  20 673 424 164 122 621 131 556 252 710 682 633 388  38  12  18 700 145 585  59  16 677   4 613

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00024e+07us (= 10002.4ms, 10.0024s)
Wall-clock time (full program): 1.00439e+07us (= 10043.9ms, 10.0439s)
Satisfaction error: 2
Number of search iterations: 3145
Number of local moves: 1033 (including on plateau: 482)
Number of local minimum: 259 (including on plateau: 69)
Number of resets: 1
Number of restarts: 0

Problem in row 21: 565 434 575 115 582 543 191 128 554 411 478 483 33 248 425 2 234 574 270 534 343 497 6 495 98 518 520 => the sum is 9856 rather than 9855
Problem in row 24: 78 634 696 190 521 408 14 81 1 655 30 649 663 711 48 551 664 337 609 695 93 9 25 450 62 463 517 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  34 539 728 720 666 607 122 488 693  58 101 640 643  81  45  27  74  56 630  29 530  43 551 707 175 150 718
 691 713 103  70 680 545 372 619 719  42 321  28 651 639  18 120  21  84 466  44 178  79 647 566 688 729  22
  68 725 141  65 649 721 644  60 704 646  99 135 683 527  94  51 495  62 602 492  77  61 614 586 726  80  48
  54 686 708 727 722 711 121  71 283 328 100 124 154 703  53  69 696 125 627 481 389  72 512 445 621 158 115
 110 542 676  73 637 595 126 147 107  50 117 709 519 613 149 139 612  96 604 555 440 662 380 660 165 151 221
 130 168 142 173 592 351 668 111 138 146 448  92 702 705 170 136 155 123 635 641 581 699 624 520 663 156 186
 223 181 565 114 517 538 697 218 131 179 497 192 690 560 144 206 219 112 667 572 689 229 610 489 231 214 171
 167 664 213 188 491 490 191 723 258 558 161 241 176 617 195 196 382 184 582 714 245 511 506 549 204 238 211
 256 199 260 197 645 529 177 227 598 302 564 233 174 315 297 225 700 239 425 583 579 210 684 552 263 185 237
 240 261 253 251 669 652 273 275 205 201 280 235 243 323 259 262 215 712 500 650 701 267 503 642 257 252 274
 271 284 303 212 442 467 330 250 550 222 248 458 255 384 291 272 716 308 528 294 265 285 717 636 288 281 298
 415 276 278 317 487 461 475 292 264 451 426 340 421 304 228 397 327 484 515 306 307 282 476 312 386 310 318
 301 345 331 390 609 443 343 329 287 411 418 361 341 296 371 326 368 342 381 420 349 364 366 357 314 309 383
 379 378 402 369 299 353 362 376 356 289 405 350 370 295 347 322 408 375 332 427 407 396 311 391 358 374 424
 336 479 346 316 355 320 410 414 398 417  25 319 293 365 404 373 242 395 344 367 471 399 377 430 419 412 429
 393 454 359 406 300 337 450 444 468 433 166 290 388 505 434 363 473 324 305 234 439 401 333 394 409  15 338
 416 432 428 477 286 352 533 513 413 516  63 431 438 457 446 463 478 472 202 469  89 441 105  24 436 465  10
 422 462 459 562 153 339 452 557 464 128 217 518 507 360 435 403 334 354 246 132   8 509 325 127 447 453 482
 525 494 485 474 203 140 496 498 106 499 279 480 544 104 437 537 548 573 109   2 268 348  91 180 524 456 455
 532 486  93 522 133 159 531  12 460 504 611 502 470 556 568 501  13 523 247  36 172 190  82 163 588 616 585
 483  55 508 571 152 182  46 590 534 207 493 577 137 164 601 567 387 541  38 209  31 561 224 244 554 608 591
 335  75 514 599  41  78 546 559 194 578 574 575 600   1 584 596 102 536 220 193  40 423 160  32 540 535 625
 569 226  85 521  11 230 510 618 580  30 606 587  83  20 547 673 183 631  26 526 449 626   5  88  90 658 677
 603 553 570   4  39 118 623  47 543 634 597 655  49 236 638 648  98 620 129 157 633 628 189  33 187 615   9
 654  76 216 715  19  66 162 605 385 659 656  17 208  23 724 687 665 232 198 269 671 148 119 145 169 706 661
 672  16 594 143  52   7 108 249  14 692 698 134  57 589 681 674 266 670  97 400 593 392 277 313 116 694 657
 576  86  95 679   6  64  87 563   3 675 685 632  59 113 695 622 678 682 200 653 254 629  67 270  37  35 710

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 4.85042e+06us (= 4850.42ms, 4.85042s)
Wall-clock time (full program): 4.89191e+06us (= 4891.91ms, 4.89191s)
Satisfaction error: 0
Number of search iterations: 1072
Number of local moves: 681 (including on plateau: 252)
Number of local minimum: 49 (including on plateau: 28)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 150 688 588  62 722  56 702 141 253 307 672 677  37  95  39 615 501 550  33  46 103  23 667  69 617 723 719
  49 674 160  72 668 148 585 281 695 670 713 521  99  76  60 710 530 487 414  73  51 300 331 639 119 632  98
 726 693 718  71 595 319 624 138 509 111 544 679  82 109  77 658 606 543  48  32  87  35 610 161 131 224 725
 130 546 151 637 464 225 569 122 598 183 721  85  47  52 149 727 661 599  59 114 448   8 646 479 664 602 169
 206 728 262 108 715 687 566 117 357 136 634 656 115 198 152 139 686 306  74  55 167 101 652 512 692 613 221
 158 508 193 304 527  44 603 134 694 132 689 683 201  43  61 619 247 703  79 258 191 712 534 520 684 294  40
  50 488 285 207 514 182 623 145 452 179 633 165 328 184 720 673 627 649  58 283 434 580 320 164 607 129 176
 237 621  96 256 579 729 266 211 411 286 270 120 146 442 366 572 264 657 102 717 365 124 541 616 350 263 248
 724 426 260 227 382 175 156 241 324 503 647 317 214 246 318 272 641 561 618 168 706 234 417 215 192 337 334
 212 620 218 330 576 329 235 288 568 313 200 210 326 374 194 155 644 312 232 231 707 276 671 315 554 416 349
 394 481 282 303 345 208 454 354 476 233 173 344 249 209 242 500 716 699 289 297  83 431 600 659 290 202 342
 217 409 267 655 170 552 213 341 525 257 523 494 309 299 140 461 197 460 415 379 380 466 490 250 261 338 387
 352 333 245 701 465 422 222 395 410 243 359 278 515 259 298 389 229 373 311 478 157 280 376 335 308 447 675
 364 273 369 363 424 384 348 408 372 292 443 255 407 327 392 277 385 322 386 244 562 545 421 240 362 406 284
 351 346 325 423 321 172 413 252 467 458 397 340 393 456 358 398 347 254 381 516 355 471 336 371 269 383 302
 507 181 361 470 126 526 536 547 125 555 496  81 316 519 339 420  89 323 574 378 404 388 110 239 377 440 428
 370 223 419 187 399 293 430 332  92 412 535 367 463 462 425 147 116 279 459 444 483 453 301 402 291 549 522
 504 275 436 557 391 439 427 542  93 128 190 353 435 401 368 451 106 251 475 502 396 100 295 310 445 457 528
 360 174 498 477 492 450  27 432 205 654 418 305 493 437 472  67  94 216 506 538  42 400 271 185 582 489 571
 449  41 625 592 133 446 429   1 142 651  66  28 532 474 495 469 226 153 594 653 403 228  91 560 230 581 563
 533 265 650 177 186 505 590 597   4 529 104 587 473 685 455  22 127  14 441 513 438 510 163 196 468  64 559
 540 433 405 631  78  38 480 604 565 666  63 614 648 584 497 274 539 113 220 570 203 144 188 605  86  13  54
 531  24 635 517 268 593  17 524   2   6   3 678 556 573 638  45 112 199 591 537 486 485 375 219 195 482 564
 575  80 697 356  84 577  31 669 629 642  75 154 622 491 711  36  88 143 596 314 681 612  68  20 499 118 287
 567 121   5 609  65 611  53 662 676 626  57  25 586 643 645 171 296 180 511 698 236 551 189 390  10  12 660
 578  26   9 548 137 105 159 663 204 665 107 238 558 628 608 518  90 166 709 135 583 690  30 484 553 630  34
  21 178 696  15  29 640  97 714   7  18 123 601 705 589 636  70 691 343 680 682 704 708 162 700  19  11  16

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 5.17395e+06us (= 5173.95ms, 5.17395s)
Wall-clock time (full program): 5.21552e+06us (= 5215.52ms, 5.21552s)
Satisfaction error: 0
Number of search iterations: 1191
Number of local moves: 707 (including on plateau: 331)
Number of local minimum: 66 (including on plateau: 39)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 635 696  25 687 719  22 530 601  76 713 149  53 520  47 216  73 642 229  52  55 184 570 705 702 661 260  33
 529  95  23 526 716 432 724 404  58  74 560 626   4 113 534 118 563 124 706 109  85 116 217 439 629 725 606
 117 616 722 505 637 624 627 671  77 101 700 550 156 699  80 138 597 141  60 133  36 130 335 655  94 595  59
 132 135 108 714 501  92 727 709 510 205 104 692 100 107 206  29 717 469 704  42 140 680 577 728  71 596  61
 685 690  64 369 723  26 695  78 176 203 277 623 245 155 708  56 715 308 163 190 233 186 192 632 234 581 648
 694  81 173 450 663 641 683 221  96 121 284 668 657 249 568 168 664  34  67 157 139 721 144 643 148 538 183
 583 239 105 679 471 459 353 328 605 214 327 166 656 150 329  93 198 164 220 134 128 158 693 707 295 691 710
 161 147 253 660 718 564 729 544 175 354 202 172 215 285 670 196 323 211 299 248 244 146 312 586 212 541 688
 177 251 182 633 495 618 654 242 711 110 222 666 389 170 225 238 129 286 639 210 339 374 226 672 167 316 514
 266 287 273 235 720 566 373 165 319 681 236 207 278 325 355 257 246 430 298 653 243 197 357 665 227 442 554
 313 265  84 569 269 467 484 431 180 219 301 429 351 174 291 394 617 523 508 364 456 397 398 517 282 382 189
 275 326 317 375 267 628 448 433 455 240 228 264 548 255 307 726 154 193 213 352 309 399 321 522 288 368 644
 701 272 232 358 417 281 458 384 400 558 181 259 479 262 340 362 208 289 712 274 263 359 241 640 201 414 310
 361 283 333 345 314 403 391 343 293 302 341 334 387 421 557 271 453 322 342 413 360 392 276 447 363 370 438
 350 300 386 416 344 303 318 426 482 405 396 223 440 480 500 465 412 324 185 445 337 411 296  41 420 379 371
 497 348 483 454  89 304 332 418 427 320 532 188 237 408 519 200 380 254 464 315 367 401 356 187 388 478 509
 449 502 572 366 152  15 270 506 436 486 294 457 461 435 390 485 280 410  24 452 419 383 422 171 338 476 204
 395 425 415  87 330 292 199 468 487   8 466 160 434 494 372 490 525  32 503 594 533 549 406  50 579 256 306
 153 451 619 191  40 290  45 610  35 347 511 573 513 545  99 580 547 463 305 546 574 460  43 169 598 120 428
 444 407 331 159  65 279 131 381 553 493 512  54 224 535 145 539 515 378 587 346 551 507 552 127 559  19 462
 489 524 542  57  27 376  20 625  90 543 602 498 209 582 473 424  44 475 477 377 612 446  82 137 589 142 393
  28 611 488 402  39 423  98  70 441 584 521 607 103 491 443 674 111 593 555 565 516  91 151 123 536 472 119
 115 609 631 297  48 126 102 195 615 531  86 585  46 537 650 576  37 603 518 638 636 527   7  11 600 268 261
   3 614 684  16   9 194 125  14 677 662 575 365 409   5 567 499 179 588   1 599 652 561 686  68 649 143 311
 590  12 667  38 252 437 258  63 697 646 675  83 578 604 178 492  13 703 591 592 571  30 647  62  31 114 231
  79 659 673 218 349 385  75  51 622 122  69 247 676 669  21 630 336 689 645 496 230 528 562  88  18  97 621
 634  10 470  49 481 608   6 474 162 613 504 106 540 658 112 682 250 620  17 556 698 136 651  66 678  72   2

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00004e+07us (= 10000.4ms, 10.0004s)
Wall-clock time (full program): 1.00422e+07us (= 10042.2ms, 10.0422s)
Satisfaction error: 2
Number of search iterations: 2981
Number of local moves: 1060 (including on plateau: 460)
Number of local minimum: 220 (including on plateau: 39)
Number of resets: 1
Number of restarts: 0

Problem in row 4: 132 135 108 714 501 92 727 709 510 205 104 692 100 107 206 29 717 469 704 42 140 680 577 728 71 596 61 => the sum is 9856 rather than 9855
Problem in row 11: 313 265 84 569 269 467 484 431 180 219 301 429 351 174 291 394 617 523 508 364 456 397 398 517 282 382 189 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 726 543 713 121 712  72 135 109 557 586 722 567  61 141  50 140 162 143  54 725 653 683 588  93 622  59 118
 167  46 659 700 138 395 696 171 282 626 425 122 197 465 273 155  32 689  47 724 123 550 345 654  33 499 642
 636  91 584 131 594 205 539 116 486 355 718 651  88 566 446 147  57 148 473 166 692 727 158 179 706  96 100
 449  62 433 708  65 695 573 145 169 657 710 640 136 434 615 534 149  52 139 228 590 535 119 702 168  40 108
 618 156 551 132 723 150 130 292  80 564 220 624  67 311 137 313 699 553 191 558  94 661 728 177 334  76 716
 677 555 515 125 660 715 672 493  22 184 457 406 218 623 106 232 614 288  60 666 259 507  89 151 144 193 224
 719 628 533 245  77 146 617 176 189 318 192 546 329 676 571 231 682 214  66 152 537 367 339 242 322 233 508
 198 684 370 142 431 104 278 671 249 658  83 675 257 120 655 201 611 239 188 701 455 665 299 117 363  64 377
 484 305 650 337 260 262  85 126 202 306 341 206 225 679 346 601 638 303 673 270 563 729 213 244 376 216 215
 319 267 440 173 649 237 253  84 227 720 134 336 187 644 612 714 479 616  74 223 428 247 212 235 364 344 637
 185 403 474 549 580 301 280 717 181 470 709 366 264 230 693 569 327 265 276 172 386  53 268 219 360 174 384
 263 407 527 285 511 291 388 210 647 333 721 401 368 275 451 295 357 229 385 351 528 287 304 161 209 476 195
 251 297 512 289 252 387 409 429 302 380 392 272 286 350 481 274 598 374 393 372 424 243 399 343 325 423 398
 326 487 105 300 256 335 332 408 353 452 342 438 308 383 340 307 330 358 711 504 416 296 362 379 448 281 298
 309 352 199 396 320 348 381 413 421 415 338 321 405 485 290 279 315 502 356 175 437 373 347 531 314 391 442
 514 331 390 419 397 269  43 495 426   6 492 453 294 404 422 328 371 454 460 402 178 203 520 258 458 365 503
 418  49 207 472 127 254 548 382 561 602  23 464 490 466  39 439 427 477 378 525 412 312 323 522 505  44 389
 443 436 375 462 394 236 599 498  34 261 450 516 444  86 208  71  24  36 432 467 540 349 447 489 456 519 583
  90  68 271 608 610 575 430 541  16 200 556 410 494 579  79 101 411 463  29 124 359 578 471 570 190 445 587
 111 536  55 369  28 592 518   8 500  97 544 114 591 461 554 246  41 526 589  30 154 248 475 641 605 619 603
 576 483 310 420 211  45  27 547 694 621 222 400 606 112  75 164 165 530 459 585  87  26 414 441 468 635 532
 597 182 240 593 194  19 560 542 662  18  58 552 491   3  78 283 284 180 565 513 435 600 517 581 496 510 102
 115 545 128 572 354 568 633 183 663  81 521  51 469 595 196 664 317 523 226  38 153 107  31 529 488 596 509
 478 524 160  14 506 698 609 480  15 538  17 266 574 133 250 691 217 204 577 241 255 110 559   7 417 685 630
  63 625 361 613  92 646  48 639 678 129 316  12 648 238 562 497 234 652 643  95  11 157 501 687  13 686   9
 113 631  20  98 645 620  35 656 632 277  70  21 688 103 697 674 634 170 703 221   5 186 159 604 669 482  42
  10 163  73 582  69 690  37 324 607   1  82  25 670 293 629 705 680 667 707 627 681  56 668  99   2 704   4

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0002e+07us (= 10002ms, 10.002s)
Wall-clock time (full program): 1.00452e+07us (= 10045.2ms, 10.0452s)
Satisfaction error: 2
Number of search iterations: 3056
Number of local moves: 931 (including on plateau: 380)
Number of local minimum: 252 (including on plateau: 51)
Number of resets: 1
Number of restarts: 0

Problem in column 2: 543 46 91 62 156 555 628 684 305 267 403 407 297 487 352 331 49 436 68 536 483 182 545 524 625 631 163 => the sum is 9856 rather than 9855
Problem in column 19: 54 47 473 139 191 60 66 188 673 74 276 385 393 711 356 460 378 432 29 589 459 565 226 577 643 703 707 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 352 719 665 705 107 189 130  29 239 553 125  24 715  78  64 530  19 538 624 651 134 452 570  48 465 680 450
 141 720  58 628 726  96 567  46 142  99 120  97  74 503 157 689 495 727 542 694 556 109 469 158 625 573  44
 700 704  54 721 224 496 180 113  35 207 173 170  77 461 714 691 687 442 642 711 111  51 607 187 559  79  59
 143 490 127 361 724 729 698  26 160  90 185 106 251 162 728 196 637 668 587 688  86  42 593 438 228 667  45
 102 539  91 635 666 108 139 226 218 149  92 161  82 622 682 601 566 716 669 582 105  30 710 154 402 671 137
 283 580 118 443 608 605 344 576  68 179 212 133 100 250 565 480 199 653 645 232 222 712 650 184 512 249  53
  52 297 201 516 192 449 340 216  33 706  50 210 272 206 717 708 677 690 425 248 725 203 386 330 656  80 270
 122 699 123 661 259 236 510 709 205 214 190 194 221 392 146 328 579 409 497 723 213 104 204 315 584 620 398
 153 444  88 678 217 362 121 329 718 347 332 262 193 612 508 611 365 373 369 447 273 264 167 355 722 246 299
 200 575 360 543 219 274 159 266 175 655 307 342 183 602 230 231 306 597 599 244 334 311 657 654 275 385 172
 253 458 215 534 488 294 713  94 247 256 348 313 356 614 337 237 594 395 376 481 202 303 310 281 467 422 267
 561 432 414 434 454 323 354 351 302 448 424 404 284 520 382 426 439 413 341 223 220 357 366 176 287 309 211
 423 431 291 517 522 420 277 258 265 235 464 394 484 320 384 290 388 241 416 319 276 389 364 396 494 368 229
 415 350 411 326 312 296 261 371 533 286 498 353 324 359 238 338 288 343 513 446 419 428 525 110 421 292 399
 453 279 304 400 380 335 358 528 554   6 403 445 289 410 298 506 278 147 383 477 377 372 331 529 478   3 532
 387  95 555 374 504 408 515 429 316 339 630 405 349  84 308 568 181 182 336 487 379 412 393 370 463 375  11
 321 280 540 166 482 103  28 526 406 460 433 390 381 119 333 367 521 255 441 560 435 502  69 417 541 474 305
 468 440 391 112 322 592  60 572 536 509 101 401   2 171  39 318 345 317 300 128 615 523 485 527 511 552 518
 547 188 623  89 378 327 659 500 150 551 549 545 471 209 466 451  18 285  65 195 501 491 225 456 145 457 314
 430 116 619  34 581 418 472  14 363 550 621 544 674 252 240 242  98 177 257 126 475 660  72 563 186 473 598
 647 243 519 136  12 268  32 427 591 489 462 585 531 260 483  49 470 589  27 492  43 569 163 437 144 514 673
  55 148 558  31 537  57 583 590 459 455 524 436 486 702 701  13  71  37 115 233 548   5 562 613 135 505 696
 675 151 643 198   7 600  81 609 595 610 586 641 546 263 124  62 535  38 132 269 629 634   1  85 169 479 493
 662  76 564 227 293 639 604 588 676 638 627 681 646 254  36 476 397  83  66  10 138 663  23  47  75  17 649
 603 191  21  56  61 499 648 574 557 507 672 693 652 129  40 156 164 208 165 114 577 618 578 683  41   4 644
 685  70 632 152 571  25 325 617 679 301  63 234 596 606 295 174 131  87 168   8 636 631 282 658 197 346 686
  22 140 670 178   9 707 697 271 633  16 664 692 616 695 640 117 407 245 155  67 626  20  93 684  73  15 703

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00016e+07us (= 10001.6ms, 10.0016s)
Wall-clock time (full program): 1.00442e+07us (= 10044.2ms, 10.0442s)
Satisfaction error: 1
Number of search iterations: 2727
Number of local moves: 902 (including on plateau: 268)
Number of local minimum: 257 (including on plateau: 48)
Number of resets: 2
Number of restarts: 0

Problem in diagonal 0: 352 720 54 361 666 605 340 709 718 655 348 404 484 359 298 568 521 317 65 126 43 5 1 47 41 346 703 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 479 436 526  15 341 664 532 722 296 359 628 277  49 602 208 364  91 634 391 243 173 232 361 674 433  74  51
  25 206 157 368 175 279 640  31 620 114 477 339  45  16 659 400 454 294 706 714 642  10 484 564 411 349 676
 451  82  13   7 255 658 647   5 701  72 396 585 193 566 709  48  11 308 654 669 192 617 621  14  35 720 626
 562 274  34 212  36  60 688  41 633  61 727 618  27  76 474 275 665 580 557 703   9 598 571 160 494  77 643
 690 137 460  12   2 677 594 295 115 591 725  33 729  29 491 290 181 376  19 515 544  44 252 619 574 222 639
  64 242  17 381 178   3 507 354 299  70 589 445 530 545 523 327 245 632 531 596 636 370 456 540  20 120 635
 513  97 348 153 134 439 421  78 413 489 106 404 119 337 614 521 148 306 504 609  37 590 588 700  59 573 555
 534 425 558 152 627 565 452 162 548 237  67 227 593 472 461 210  38 146 528  18 554 511 272 434 496  85 483
 291 518 116 641 203 541 335 597 378 360 201 340 514 576 610 104 319 352  98 435 131 519 535 542 179 169 251
 581 315 487 442 673 550 624 469 497  46 418 586 183 595  50 177 408 102 510 336  83 247 230 506 380 124 236
 600 606 145 105 363 141 221 122 463  96 468 525 569 476  62 538  28 467 457 353 622 695 159 320 437 314 503
 301 529 527 409 224 490 383 362 317 447 313 392 687 715 522  32 332 324 184 459 334 388  56 283 397 163 285
 512 347 256 652 470  66 211 501 346 214 305 200 438 419 405 579 440 338 372 196 678 266 357  95 401 543 248
 112 416 253 516 403 350 323 244 417 240 402 164 172 509 723 377 267 393 480 444 671 197 389 250 385 448 310
 233 307 502 280  23 287 281  53 646 382 599 536  52  24 728 696 284 358 329 455 420 414 345 121 398 607 495
 537 190 426 710 387 601 209 493 223 127 331 675 300 180 254 399 189 458 583 213 699 293 246 257 322 186 367
 443 270 582 386 547 316 375 365 191 259 670 465 342 466 355 424 517 268 261 260 278 129 229 407 249 422 379
 366 441 147 369 132 176 138 657 288 726 258 273 174 265 125 651 394 680 235 318 298 499 638 662 303 587  55
 140 431 481 165 684 344 321 717 578 613 217  81 546 228 218 205 560 423 292 202 549 637  42 430  40 653  58
 325 199 570 686 508 663  21 475 215 615 453 123 572 117 351 390 645 333   1 682 326  84 395 289 373 286 158
 410 666 693 282 343 100 533 231 195 631  39 356 708 309  93 592 611 449 109   6 133 649  65 263 450 415 524
 485   4 198 492 681 446 204 623 207 608 182 269 156 271 561 302 612 111 704 188 150 486 429 154 432 427 473
 113 661 128 702 705 144  99  30 374 672 194  71 711 216 330 567 625 556 136   8 577 130 667 126 568 719  26
 219 712 575 539 644  80 629 713 262 384 328 584 142 264  88 170 689 103 101 650 167 226 151 505 691 185  54
  68 311 698 241 276 716 312 655 478 604 155  75 488 239  73 551 297  22  86  69 630 482 161 679 107 685 697
  94 605 406 718 225  87  63 139 108 603 498 692 168 660  89 500 149 724 563 471 187 304 462 171 553 559  57
 707 428 552 220 616 412  92 721  47 234 110 520 648 683  79 166 656 118 464  43 135 238 694  90 668 143 371

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00005e+07us (= 10000.5ms, 10.0005s)
Wall-clock time (full program): 1.00428e+07us (= 10042.8ms, 10.0428s)
Satisfaction error: 2
Number of search iterations: 3293
Number of local moves: 1098 (including on plateau: 447)
Number of local minimum: 291 (including on plateau: 55)
Number of resets: 2
Number of restarts: 0

Problem in column 10: 359 114 72 61 591 70 489 237 360 46 96 447 214 240 382 127 259 726 613 615 631 608 672 384 604 603 234 => the sum is 9854 rather than 9855
Problem in column 11: 628 477 396 727 725 589 106 67 201 418 468 313 305 402 599 331 670 258 217 453 39 182 194 328 155 498 110 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 235 595 532 703 122 704 513  71 430 610 682 432  81 719 424 689  84  52  47  61 147  23  19  39 658 581 602
 637 725 666 494 113 367 611 653 428 560 175 474   6 693 588 579 116  31  24  14  18  57  21  56 501 678 570
 724 509 630 597 518  91 583 574  97 515 123 170 447  38  63 519 723  93  54  66  58  64 161 599 445 700 694
 722 726 641 400 670 721 634  40 141 194  82 502 646 151 169 410  87 139  92 279 159 196 126 701 397 698 132
 601 444 231 538 403 715 612 117 577 606  29 708  46 729 106 706  62 647  15 118  83  32 523 135 628 277 167
 699 728 145 589 681 392 591  78 697 660 152 616 112 156 150 206 220 368 243  89  76 418  28 398 625 557 181
 227 705 528 717 146 248 622 292 153 245 197 669 527  95 188 261 164 596 262 214 413 210 205 516 702 643 110
 263 592 202 665 716 200 211 425 650 371 187 514 207 679 408 290 254 253 217 696 133 239 257 203 522 318 183
 218 341 143 536 651 376 614 204 198 155 109 618 603 199 212 640 260 667 727 247 201  88 322 547 350 383 246
 714 464 233 491 571 265 258 356 274 237 121 590 490 230 272 605 264 347 189 195 298 293 671 317 548 306 256
 166 224 284 521 301 250 275 228 433 297 349 711 695 216 687 320 422 684 124 209 238 344 268 308 285 326 690
 310 294 378 498 456 720 414 402 421 327 222 355 307 309 165 417 366 388 332 335 328 416 249 550 314 340 242
 438 329 208 454 304 386 401 300 354 325 336 451 270 179 280 370 331 718 321 191 375 303 564 500 453 334 380
 302 364 221 404 443 286 405 358 441 351 266 299 372 477 348 412 460 362 259 503 419 374 312 429 225 369 394
 338 330 415 273 389 584 480 373 289 296 357 393 359 345 282 319 343 391 479 232 459 114 468 458 365 276 448
 385 382 339 313 476 381 130 580 342 481 423 361 154 426 360 305 399 449 486 363 442 267 439 149  99 545 379
 558 446 384 271 525  22 337 295 411 530 489 140 148 395 104 244 517 396 452 510 427 457 488 226 128 493 461
 613 499 455 287 291  70 311 223  69 436 617  30 483 559  34 520 324 281 511 484 288 431 475 549  68 440 507
 482 176 469  96 142 470 138 576   9 541 435 406 173 387 462 186 629  25 593 450 465 487 531 471  33 437 587
 434 108 120  44 390 496  50  16 567 473 407 174  85 608 644 136 624 127 529 537 565 539 508 533  42 526 573
  37 184 620 190  17 495  45 562 554 578 492 236 241 478 551  43 420 467 497 409 352 621 627 251 172 182 534
  80  74  48 252  98 115 171 546 315 555 642 158 333 524 626 505 160 193 575 677 552 504 668 638 649 107  90
  94 111 582 157   7 563 316 131 134  55 466 229 543 604 323 594 607   8 632 710 661 648 585 240 234  49 572
   3 168 633 162 569  77 185 485 652 129 692 346 707  36 566  59  53 672 255 542 712 655 512  13 377  27 568
  10 125 137 101 635  73 598 615  65 100 463 144 657 561 654 219 639 676 636 556 586 674 609  75 163  79   5
  12  20 600  67 119 105 278 680 619  51 686 103 623   2 544  86 663 472 673 662 709 688 178 269 659   4 283
 553 192  11  35 102 683  72 675 535 177 656  26 540  60 645 215 664 353 631 506 691 713  41 685 213 180   1

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00029e+07us (= 10002.9ms, 10.0029s)
Wall-clock time (full program): 1.00527e+07us (= 10052.7ms, 10.0527s)
Satisfaction error: 2
Number of search iterations: 2865
Number of local moves: 946 (including on plateau: 467)
Number of local minimum: 249 (including on plateau: 48)
Number of resets: 1
Number of restarts: 0

Problem in row 17: 558 446 384 271 525 22 337 295 411 530 489 140 148 395 104 244 517 396 452 510 427 457 488 226 128 493 461 => the sum is 9854 rather than 9855
Problem in row 19: 482 176 469 96 142 470 138 576 9 541 435 406 173 387 462 186 629 25 593 450 465 487 531 471 33 437 587 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  12 159 125 706 655 164 683 620 323 695 641 519  54 203 660   9 234 195 208 644 418  69 628  45 584 580  22
 550 630 319 555  72 152 702 646 235 663 674 623  73 198  42 520 149 651 114 654 273 207 380  79 265 370  59
 181  57  81 137 659 140 657 506 640 177 606 523 684 112  58  44 638 592  27 206 575 117 631 682 484 621  20
  86 609  62 694 492 231 304 133 564 647 612 111  80 120 102 597 155 615 501 645 229 242 593 126 500 664 141
 582 699  41 521 260  70 190 559  32  93 636 595 306 349 243 632 524 485  29 571 557 423 119 171 528 475 165
  68 541  26 688 675  18  19 569 508 643 652 591 522 279 302 587 293  24 132 511  25 113 676 389 619 294  91
 166  90 624 487 461 534 705 145 256 505 562 481 516 486 233 599 531  49  23 110  13 236 579 525 629 212  98
 178 576 558  64 468 413 563 345 650 548 573 608 285   5  82 457 303  52 456  28  35 400 464 556 568 143 478
 554   3 538 610 668 196 583  76  75 414 483 391 504 443  15 441 115 338 397 480 570 444   4 463 412 266 372
 477 495 218 493   6 107 552  97 408 661 546 471 469 449 191 448 453 160 455 384 199 431 394 637 396  56 202
 422 425 473 347 105 502 539 533 332 545  63 315 108 314 440 283 447 717 262 299 268 490 491 515 211  31 378
 361 173 542 374 551 123 363 156  16 611 343  39 388 488 327 450 460 574 248 421 476 700 375 472 200 189 435
 466 427 627 405 284 470 409 344 467 224 316 352 368 318 286 277 432 109 465 381 253 365 274 317 354 529 336
 518 395 634 287 307 403 415 342 328 290 401 358 406 339 618 310 420 459  10 392 182 382  77 341 252 693 296
 561  47 600 535 331 407 353 295 404 371 417 479 333 289 351 360 350  60 387 489 320 298 272 364 446 454 281
 402 288 146 346 278 280 626 603 439 261 424 653 329 175 590   2 326 357 324 588 362 250 390 247 312 429 428
 393 720 321 311 698 276 271 367 251 300 135 337 359 376 291 567 275 496 241 122 215 148 540 722 356 433 334
 183 213 325 197 309 205 238 297 249 704 398  66 633 526 719  37 194 665 263 230 566 639 313  30 335 625 696
 445 116 246 373 221 711 154 220 340 452  14 635 244 225 602 223 692 527 544 167 366 585 257 254 153 512 577
 686 386 214 204 330 605 269 714 728 124 305 210 607 497 430 245 292 168 649 322 348 237 142 144 101 201 697
 451 712  78 139 715 724  55 482 157 161 193 138 308 709 187 186 437 723 596 179 689 136 185 411 192 239 673
 163 667 708 130 121 227 174 184 658 222  84 270 259 301 729 134 532 616 560 258 718 701 537 267  67 517  51
 106 158   7 170 669 681 151 385 514 217 419 180 147 656 383 604 436 219 670 128 581 503  38 685 434  36 678
 499 379 713 680   1 598  43 169  99 127  33 264 458 176 671 543 565 474 662 216 536 617 209  40 150 426 507
 642  87 716  94  11 614  21 399  74  95  61  88 726 691 438 613 369 282 416 162 498 232 589 530 710  96 601
 131 703 687  53 462 410 727  83 442  34 172  48 672 578 188 622 104 240 707 547 228 377  50 118 103 679 690
 572 100 226 255  46 594  89 586 666  71  92 510  17 553 677  65 129   8 509 721 355 513 648 725 494  85 549

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00033e+07us (= 10003.3ms, 10.0033s)
Wall-clock time (full program): 1.00551e+07us (= 10055.1ms, 10.0551s)
Satisfaction error: 2
Number of search iterations: 3019
Number of local moves: 908 (including on plateau: 257)
Number of local minimum: 276 (including on plateau: 41)
Number of resets: 2
Number of restarts: 0

Problem in row 8: 178 576 558 64 468 413 563 345 650 548 573 608 285 5 82 457 303 52 456 28 35 400 464 556 568 143 478 => the sum is 9856 rather than 9855
Problem in row 15: 561 47 600 535 331 407 353 295 404 371 417 479 333 289 351 360 350 60 387 489 320 298 272 364 446 454 281 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  41 682  91 721 291 187 241 616  31 717 489 521 541 432 121 608  97 591 185 295 207 443  48  82 605 430 542
 102  55   8 664 395 327 355 569  16 725  14 656  98 170 526 379 561 167 654 677 652 685  62 153 450  64 671
 729 718 708  33 446  20 619 177 114 728 572 688  68 151 545  69 257 296 694 668  83 171  40 193 706 242 120
 145 540 444 627 195 676 622 157  13  84 657 536 683 101  63 580  54 258 505 136 611 115 328 593 719 303 110
 485 152 710 106 716  71 700 172 139 633  15 137 636 213 617 267 184 156 626 724 236 673 666 138 116 132 435
 341 660 176 149 225 142  22 211 317 613 503  56 661 113 517 690 265 223 566 387 639 599 350 161 253 342 674
 623 618 470 419 325 402 459 169 141 237 621 464 283 264 420 100  75 269 620 248 585 181 124 175 704 686 173
 146 552 702 105  99 276 669  67 692 707 645 198 650 607 461 263 214  52 638 108 126 667 188 614 133 246  30
 586 189 589  76 249 348 473 234 726 471 695 696 583 208 628 179 308  86 486 135 389 199 394 162  88 472 206
 351 218 634 196 272 307 560 226 377 311 659 128 183 428 564 292 215 400 612 401 418 319 166 590 109 675 244
 345 123 703 576 256 274 465 216 288 315 354 201 277 240 360 229 382 300 495 403 358 507 262 701 356 594 275
 314 321 714 711 247 282 523 163 372 323   5 381 375 408 565  59 219 376 429 243 357 280 723 336 324 474 331
 250 285 662 512 222  93 558 320 362 374 332 148 371 632 504 460 192 305 458 385 254 330 204 289 318 647 388
 310 373 217 301 500 294 333 691 164 411 437 439 255 339 140 436 438 426 200 410 398 481 304 340 365 449 404
 178 550 299 409 396 457 279 245 680 555 455 422 284 491 442 346 456 514 168 366 281  66 194 322 268 326 406
 191 391 233  78 498 383 727 347 359 313 445 298 574 273 335 480 338 393 212 433 369 270 440 492 364 227 392
 232 117 399  32 415 533 462 344 448 378  89 427 506 648  58 425  92 453 150 302 568 490 610 482 144 567 484
 488 468  47 412 476 548  28 228 596 513  53  43 582 595 118 469 407 197 286 515 278 452 494 502 519 125 416
 266 361 698 532 231 397  74 343 547 431 130 424 511 334 131 451 384 147 367 527 352  95 679 261 290 487 405
 601 606  27 499 417 493 202  85 562  34 525 524  18 329  25 609 615 466 107  94 363 508 501 546 520  70 509
 624 154 483 497 477 534  10 475 537 159 160 186 221  80  29 380 530 447 239 559 421 592 414 538  24 386 699
 297 129  36 479 441 630 413 573 535  44 230 190 531 554 510 635 658 563 182 111 143 543  50 220  49 528 581
 174 672  45 693 715 134 180 577 529  17 575 454  42 293 467 689 641 516  26  73 112 155 625 337 235 309 570
 722  87   3   4  38 165 251 651   6   1 259 598 720 681 478  72 463 597  35 518 571 312 349 549 642 370 713
 584 119   9 687 579 600 238 644  46 578 127 306  60 637 260  11 602 423 353 663 587  79 684 224 640  96  19
 649 557 252  21  37 629 390 712 670  61 705 103  77 544 603  12 655 556  23 271 287 604 522 646 205  57   7
  81 158 496 316 697 653   2 643 588 122 104 631  65  90 368 665 553 678 539 203 210  39 434 209 709 551  51

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.92145e+06us (= 9921.45ms, 9.92145s)
Wall-clock time (full program): 9.97841e+06us (= 9978.41ms, 9.97841s)
Satisfaction error: 0
Number of search iterations: 2886
Number of local moves: 981 (including on plateau: 369)
Number of local minimum: 227 (including on plateau: 49)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  18 712 363 217   8  77 642 653 672 524   4 703 655 693 541 237 127 640 105 602 647  68 215 124  40 214 354
 366 192 319 216 138  75  83 576 678 554   6 694 645 521  78 477 611 662 247 711 154  16 269 719 635  35 178
 603 687 283   9 699  82 641 372 566 585 159 689 677 692  58 663 680 162 249 225 605 144  51  21  15 131 107
 518 578  34  33 459 103 650  38 632 654 271 601 599 657 549 575 546  43 151 676 309  74  88 200 614 141  62
 696 626  47 589  59  96 618  76 496 643  97 450 390 481 495 519 636 139   1 587 588 573  17  42 600 184 111
 253 629 498 109 469 112  27 140 565 388 130 615 610 669 564 609 488 683  95 451 474  87  56 265 520 223 126
 598 505 491 466 571 331  80 213 403 512 260 478 550 606 582 553 634 153  84 125   7 596  67  57 515 303 115
   3 514 330 465 597 557 504   2 370 486 195 620 593 572 230 591  24 688 119 539 221 538  30 188 487 207 185
  41 483 427 517 679 544 502 436  10 507 304 624 385 355 434 639 526  63 129  49 359 542 454  13 411 220 202
 447 590 484 422 556  12 438 509 594 448  19 473 489 494  65 406 384 235 533  37 114 418 458 147 516 555  11
 511 583 270 579 523 536 558  45 398 121 305 525 133 373 433 439 132  14 374 570 325 429 506 441 347  90 295
 431  31 528 353 475 329 421 212 376 334 256 341 501 493 287 440 155 452 437 419 337 322 449 351 413 410 302
 394 292 562 404 424 327 446 409 464 397 248 472 358 386  61 456 535 457 267 272 282 313 238 480 268 345 298
  36 320 300 470 368 460 395 444 312 379 408 333 284 399 365 357 485 369 443 412 423 527 360 224 405 286 291
 407 335 435 471 306 266 229 349 428 219 391 308 664 289 401 243 361 342 275 314 236 430 714 380 340 326 396
 697 244 228 479 381 332 310 278 197 307 362 299 288 180 463 280 382 263 246 328 584 416 499 348 552 317 595
 199 432 651 344 383 117 297 378 339 156 352 367 346 276 652 377 293 604 277 426 468 324 343 371 101 442 540
 607 231 623 257 206 279 318 616 168 728 581 135 194 137 104 157 350 336 563 321 649 170 608 375 211 529 402
 196 254 656 158 262 226 301 420 708 222 661 165 415 134 210 356 698 522 706 274 490 259 143 545 123 387 364
 561 240 209 537 146 255 315 704 264 166 574 285 250 455 205 294 169 673 160 709 190 273  89 568 148 716 700
 233 234 631 177 113 637 729 204 152 311 500  50  69 227 242  22 467 296 659 492 723 128 674 513 189 701 482
 252 338 187 193 191 613 179 668 171 181 646 167  92 161 559 245 232 316 530 453 323 685 621 567 176 577 532
 261  70 638  91 258 713 150 682 136  93 648 183  98 290 173 670 198 612 644  60 241 393 721 586 201 417 628
 164  99 110 625  71 658 671 122 251 686 580 149 239 142 175  46 476 203 684 218 705 116 543 619 675 281 547
 182  72 503 414  86 724 145 681  26  39 715  32  66  52 665 118  64 445 660  55 208 726 548 718 592 702 617
 551 392  25 627 710 667 106 120  79 186 722  53 102  48 695  81 174 389 720 510  85 622 560 462  54 425 690
 630 172  23 633 717 727 100 508 400  29 461  44 163  73 569   5  28  94 497  20 108 666 534 531 707 691 725

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00452e+07us (= 10045.2ms, 10.0452s)
Satisfaction error: 2
Number of search iterations: 2902
Number of local moves: 879 (including on plateau: 303)
Number of local minimum: 262 (including on plateau: 33)
Number of resets: 1
Number of restarts: 0

Problem in row 5: 696 626 47 589 59 96 618 76 496 643 97 450 390 481 495 519 636 139 1 587 588 573 17 42 600 184 111 => the sum is 9856 rather than 9855
Problem in row 10: 447 590 484 422 556 12 438 509 594 448 19 473 489 494 65 406 384 235 533 37 114 418 458 147 516 555 11 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 291 508  78 667  14 700 646 456 136 703  22 629 639 717 525  34 503 158 656  36 678  49  98 123  54 720  15
  86  77 724 636 619 415  46 183  96 622 485 666 691 121 157 154 228 716 135 484 718 116  99 665 696 101 119
  31 565 161 538  90 714  41 131  72 583 405 729 694 145 521 580 350  58 709 559 535  71 112 679 523 191  68
 120 476  53 715  82 509  69 648 355 358 124 649 669 244 701 110 663 128 719  20 531  63 197 725 126  74 727
 163 536 442 618 693 597 556 438 146 587 134 524 274  91 192 114 505  83 206 705 364  43 721 217 500 138 268
 139 572 117 129 132 698 491 205 194 671 569 241 229 258 548 628 198  92 690 542 625 662 172 243 577 177  56
 152 641 175 249 178 706 212 684 155 276 272 574 609 219 728 664 692 130  81 668 321 210  27 202 575 239 216
 105 590 246 208  45 644 726 166 528 275 652 617 359  19 167 621 674 111 259 414 522 225 133 150 708 231 460
 122 185 127 174 260 306 520 673 207 638 607 254 289 354 235 326 611 256 723 519 676 240 176 142 683 342 209
  75 713 140 180 296 143 327 357 263 332 165 539 169 443 292 381 592 591 279 561 384 722 376 204 553 316 462
 330 270 695 182 613 273 266 689 164 213 294 189 475 301 232 248 712 339 377 670 437 290 251 220 573 271 281
 493 697 257 308 322 374 250 196 447 550 457 252 181 247 501 651 335 265 282 632 436 393 171 407 224 218 309
 362 392 420 348 435 201 302 455 489 305 369 344 319 371 331 373 421 298 303 402 486 400 432 211 450 264 372
 349 190 324 255 323 440 262 346 426 498 445 506 477 315 314 380 299 401 418 284 555 325 448 347 170 370 388
 366 413 640 227 494 328 100 317 307 334 507 411 245 449  87 312 288 360 396 320 236 549 404 571 318 454 422
 385 419 333 479 391 311  57 397 383 497 463 465 398 351 356 417 444 337 287  59 230 295 473 361 338 468 461
 481 187 566 482  95 352  33 399 478 496 300  12 375 533 516 423 464 389 514 433 160 488 578 510  64 434  93
 529 427 329 557 283 453  62  89 451 162  67 567 429 439 424 452  79 526 408 409 215 428 365 600 141 412 552
 378 431 471 616 582  40 472 518  38 278  42 469 554 537 336 499   8 368 441  37 188 490 458 406 242 540 416
 502 115 395 579 551  55 233  21 459 410 562 113 581 483  16 466 340 602 544 144 193 286 430 492  24 661 598
 595  97 512 530 470  76 382 511 386   4 148 106 467 604  13 541 200 532 474 199 390 657 584   9 147 534 688
 637 104 313  44 564   5 599 403 631  94 186 234 626 610  88  26 425 654 480 277 195 645 586 627  51 633 118
 642 280 570 103 345  60 576  23 517 585 173 563  25 558 568 487 222 685  80 285 156 237 658 387 379 102 589
 546 367 655 108 650 605 699 394 608  10 504  70   6 137 151 545  61 596  29 184 149 643 614  65 297 515 647
 660 107   2 547   3 304 543 353 513 125 630  30  35 659 624 214 269 267   7 203 179 594 601 560 527 711 588
 682 343 615 310 653 253 710 168 704  28 593  18   1 603 612 159  11 226 341 363  73  48 606 109 238 707 681
 634 153 495  66 672 293 675 635 702 221 680  84  39  47 620  50 261 687  17 446 223 686  85 623 677  32  52

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00444e+07us (= 10044.4ms, 10.0444s)
Satisfaction error: 2
Number of search iterations: 3186
Number of local moves: 793 (including on plateau: 249)
Number of local minimum: 257 (including on plateau: 34)
Number of resets: 1
Number of restarts: 0

Problem in row 9: 122 185 127 174 260 306 520 673 207 638 607 254 289 354 235 326 611 256 723 519 676 240 176 142 683 342 209 => the sum is 9854 rather than 9855
Problem in row 21: 595 97 512 530 470 76 382 511 386 4 148 106 467 604 13 541 200 532 474 199 390 657 584 9 147 534 688 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 403 621 608 221 695 594 708  54  35  76 578  38  28  14 139 598  60 713 658 541 643 589 583 132  70 102 354
 229 421 617 121 663 682 437 401  49 484 489  42 714  92 662 610 337 224 211  79  82 496 616 180  68 388 461
 599  74 304 480 341 709 321 526  36  24 452 428 562 269 697  48 191 538 231  89 705 614  50  57 689 219 602
 703  95 216 563 313 676 615 136 659 286 430 197 515 305 481 126 537 580 131 184  44 648 200 720 233  81 181
 177  33 165 158 285 593 637 164 684  78 646  53 706 652  45  59 259 591 161 522 665 631 660 239 472 245 275
 687 351 176 205 678 715 656 387  87  77 586 570 696 613 104 147  10 412 154 160  27 691 141 196 189 685 455
 171 152 157 408 636 539 301 204 277 595 498 220 668 228 185 356 182 528 307 222 215 451 722 686  40 207 700
 343  91 332 218 712 116 346 592 423 175 319 543 130 724 242 373 619 329 111 303 145 459 558 362 264 716 310
  22 318  69 213 623 280  55 626 711 290 577 291 367 707 156 443 371 590 693 729 193 394 268 190 112 284 283
 352 266 262 335 524 202 603 669  43 384 340 393 718 295 406 292 500 579 363 267 372 508 127 186 349 100 420
 198 314 386 138 236 402 551 258  56 418 548 214 375 575 690 142 719 353 572 342 241 645 144 163 378 588 209
 339 322 389 326 287 396 552 585 172 254 232 309 217 721 620 188 582 226 504 434 274 466 330 345 376 256 153
 350 327 657 407 368 405 390 248 187 289 456 311 666  31 448 530  32 492 568 464 297 540 282 281  67 324 438
 447 298 103 625 272 433 521 512 355 357 299 454 364 727 479  63 483  23 133 399 436 369  46 445 294 527 391
 325 416 476 485 212 424 240 536 370 377 383 257 134 344 449 361 673 432 502 458 374 302 225 417 155 457  71
 410 460 493 395 146 453 263 223 409 557 556  94 261  90 413 542 170 487 465 253 366 238 494 328 519 411 359
 234 468 419 323 439 315 203 379 533 271 317 210 308 124 347  29 514 534 279 473 511 166 569 478 503 440 469
 499 477 441 415 273 235 681 392 482 109 174 380 276 348 510 360 497   4  99 467 624 244 525 618 336 381   8
 331 651 634 597 486 110 250 523 255 680  66 581  15 670  93 501  39 550   1 358 567  97 506 677 427 115  75
 320 265 247 252 179  96  30   2 475 654  88 694 365 630 565 260 306 382 470  86 596 270 490 513 516 642 462
 463 546 509 531 638 120 288 605   6 398 137 553 544 488 296 564 442 113 535 633   3 122  11  19 560 431 300
  84 471 227 425  58   7 117  62 635 414 129 640  61  73 554 628  98 246 561 566 644 243 726 518 627 429 612
 249 710 426 520  21 293 108 385 529 450 118 183 114  85 574  25 555 169 609 334 587 162  26 699 683 692 549
 629 495 655   9 397 444 106 641 723 674  16 671 159 717  17 571 545 507 404 128 661 201 143  34 168 135   5
 576 446  13 559 230 532 584 237 251 604 679 312 573 125  18 607 148  65 517 667 105 178 505  52 474 149 649
  83 600 675 491  20  72 173 192 688 208 547 611 278 101  64 704 653 151 422 650 140  51 206 622 639 150 664
 632 167 199 435 123  12 119 316 725 672 195 606  41 107 601 728 333  37 194  47 338  80 702 698 647 701 400

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.76781e+06us (= 8767.81ms, 8.76781s)
Wall-clock time (full program): 8.80903e+06us (= 8809.03ms, 8.80903s)
Satisfaction error: 0
Number of search iterations: 3021
Number of local moves: 1033 (including on plateau: 441)
Number of local minimum: 235 (including on plateau: 49)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 181  63 601  35  28 594 593 421 695 708 186 348  62   9 718 125 658 657 376 536 636  83  72  99  40 725 606
 622 419  47 217 310 129  12 625 532 516 674 256 574 137 249  80 167 603 488 705 526 592 713   3 182  11 466
 511 212 709 377  41 643  39 677  93 684 615 102 103 148 116 131 395 652 729 686 113 196 361  66 707  27 722
 692 152  95 689 487 426 134  49 250 543 702  53 145  86  42  43 355 673 688 690 706 234 264  65 598 326 668
 359  96 175 208  16 517  74 621 118 462 727 121 464  91 370 364 503 663 720 556 109 222 717 160 584 440 398
 618 420 207 132 507   7 194 661 631 610 728  30 296  56 154 215 568 523 700 349 223 714 290 206 139 192 485
 569 238 163 105 397 567  31 719 723 353 151 317 213 168 291 153 704 611 203 437 724 141 271 210 710  37 649
 570 258 169 286  89 614 385 537 245 653 123 660 293 219 259 542 362 260 324 721 266 285 415 254 246 124 696
 519 188 305  88 315 669  98 679 563 546 529 242  81 292 328 235 524 228 613 586 269 339 117 198 565 143 596
 323 664 308 197 190 655 295 392 243 726 100 387 371 130 272 693 320 683 446 184 220 233 218 531 581  25 468
 716 424 496 402 140 617 255 202 401 265 589 332 128 394 303 459 261 671 176 281 284 101 607 333 360 428 230
 227 267 551 133 304 289 681 283 405 443 114 287 187  58 214 502 645 499 382 341 585 270 577 239 640 389 343
 379 298 149 451 327 278 279 399 356 350 616 369 257 632 408 366 445 545  92 344 263 381 347 442 367 357 358
 314 336 108 365 340 297 412 211 307 390 432 637 325 407 497 549 450 275 409 447 274 644 457 530 146 288   8
 352 136 484 566 555 374 410 241 480 372 521 330 306 248 434  76 191  90 345 533 262 525 460 414 433 331 386
 417 294  57 431 624  71 404 455 535 334 534 111 559 493 454 383 656 201 231  69 483 452 463 538 229 373   4
 489 477 453 179 380 155 441 430 342 715 587 418 189 388 378 490 318 180 444 142 473 247 174 474 478 299 115
 436 481 368 492 458  61 505 522 403 158 467 112 528 642 486 506  51 427 411  52  64 429 135 391 495 375 400
  94 159 639 470 605 321 665 512 322  82  75 280 338 564 527 384 393  79 107 423 268 561 678 557  87 482 183
 491 590 273 406 449 161 448 126 313  68 127 515 629 682 144 316 225  78 501  34 697 504 498 539 425 177 439
  46 413 554 641 461 346 193 119 494 106 475 572 544 471 608  50 199 226 438  32 582 513  18 560 422 472 300
 244 591 680 416 634  45 620 216   5  67  22 252 635 630 301 479  33 171 465 562  26 337 672 600 302 646 204
  17 609 573 579 354 540 571 469 200 120 309 628  97 597 583  77 110  59 236  84 319 311 558 510 520 703 122
 156 626 691  10 612 276 670  48 282 312 251 647 580 602 329 604 173 150 165 687 240 676 209  20 237 548  54
 170 518  15 650 178 104 685  19 500 185  14 514 654 541 694 659 277 232 147  55 666 633  38 651  73 648 335
 205 351 550 711 476 552 595 221  21  85  23 623 698 662 667 675 363 224  13 162 553  60  70 627  36 588  44
 138 575 435 619 578 547 166   1 396   2 164 712 599 508  29 699 509 195   6 157  24 172 456 638 253 701 576

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.21895e+06us (= 7218.95ms, 7.21895s)
Wall-clock time (full program): 7.26085e+06us (= 7260.85ms, 7.26085s)
Satisfaction error: 0
Number of search iterations: 2536
Number of local moves: 876 (including on plateau: 388)
Number of local minimum: 215 (including on plateau: 44)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  77 143  93 623  68  76 647 561 688 721  73 483 669  69 672 704 637 237 323 580 384 634 131  49 142   9 362
 154  81 458 691  55  50  37 413 486 582 484 655 629 101 587 702 638  97 729 145 635 373  52  89 180 720  32
  61 708  46 644  53 421 712 103 696 454  94 610 681  34 714 116 660  58  62 174 701 105  79 533 707 472 157
  38 191  80 715 178 682 243 141 540 503 122 548 592 164 643 584 324  21 123 457 685 579 128 388 692 424  70
 186 155 106 649 112 100  63 153 521 673  64 569 619 129 663 636 616 254 228 642 161 234 408 179 716 461 558
 719 235 505 640 588 725 144 275 192 572 171 183 245 108 208 571 575 516 296 121 196 596 193 133 664 149 335
  60 238 151 595 104 239 711 631 264 523 163 562 722 246 278 344 212 607 240 204 608 550 311 295 198 508 291
 216 159 727 474 225 223 188 639 697 366 272 658 253 436 232 190 329 206 549 118 560 624 147 195 665 310 197
  44 146 259 399 252 127 352  86 723 585 134 309 201 150 659 618 182  72 687 626 285 611 331 260 552 530 674
 280 173 219 589 185 203 334 305 304 726 355 261 202 301 250 284 307 675 281 177 353 594 351 609 299 568 670
 221 277 199 468 431 338 220 165 319 213 455 390 273 266 287  99 605 308 599 271 293 706 728 387 241 668 428
 395 693 710 553 322 227 385 300 189 321 242 226 600 314 555 630 126 102 363 251 341 345 312 365 262 396 330
 229 415 139 372 443 339 349 381 348 394 401 425 358 286 393 233 265 690 328 446 371 386 207 114 294 724 526
 378 361 412 427 440 256 444 392 434 320 383 398 211 270 318 282 297 356 459 375 535 302 416 350 435 315 289
 406 368 465 313 369 377 463 430 389 255 317 367 337 410 501 290 469 340 248 423 288 504 370 422 429 137 168
 267 453 419 276 327 447 283 364 360 244 247 354 515 527 274 541 359 405 520 336 448 236 450 117 218 376 492
 407 374  29 224 499 478 298 506 326 497  11 333 380 511 510 382 547 518 403 473 409  14 420 347 433 258 268
 460 391 512 209 522 346 400 502 519 187 464  66 456 441 517 432 439  41 379 451 565 231 148 471 470 138  98
 650 414 476 215 507 543 625 397  92 438 537  74 514 426 479  78 452 132 170 442 487  87 493 418 496   8 205
 411 498  90 156 437 489 485  59 542 316 445 495 417 477  57  42 538 570 653 513 500  43 633 573  40  51 325
 539 559 529 176 564 657  18 597 402 342 482 175 110 602 120 222  84 184 532 545 140 230 162 343 488 578 475
 551 661 617  20 404  13 491 466  16 125 481 109 534 480  28 509 279 576 645   1  10 593 689 554  33 357 613
 676 632 590  30  23 160 666 449   5  82 671 303  67 641 158  35 111 586 627 628 524 528 598 525 263  96 181
 566 646 652 292 651 462 166  85  47 172 662 556  31 603 567 531 467 490  91   3 249  24 654  39 214 257 678
 601 648 591  65 684 574 494 169 167 107 709  48  75 581 136 130 306 536  88 269  25 200 612 700 113 544 683
 577  26  83   4 694 604 620 606 583 135 703 546  45 615  27  56  12 622 217 621  95 194 115 695 557 124 679
 686 210 698  36 718 699  17 680   6   2 713 152 119 667  22 614  19 656  15 563   7 332 717 705  54 677  71

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0001e+07us (= 10001ms, 10.001s)
Wall-clock time (full program): 1.0044e+07us (= 10044ms, 10.044s)
Satisfaction error: 3
Number of search iterations: 2834
Number of local moves: 844 (including on plateau: 297)
Number of local minimum: 266 (including on plateau: 42)
Number of resets: 2
Number of restarts: 0

Problem in row 9: 44 146 259 399 252 127 352 86 723 585 134 309 201 150 659 618 182 72 687 626 285 611 331 260 552 530 674 => the sum is 9854 rather than 9855
Problem in row 13: 229 415 139 372 443 339 349 381 348 394 401 425 358 286 393 233 265 690 328 446 371 386 207 114 294 724 526 => the sum is 9856 rather than 9855
Problem in diagonal 1: 362 720 707 388 408 596 608 118 687 675 605 630 393 270 337 354 11 187 92 59 18 13 23 292 591 26 686 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  54 664 682  39 125 154  57 602 672  67   7 698 569 681 333 673 684 147 316   5 706 524 111 336   6 256 687
 399   3 642 620 149 570 152 285 115  15 659  11 695 633 178 198 593 160 618 117 675 637 680 127 284   2 638
  99 632  62 613 116 589 573 643 691 187 641  82 617 565 186 666  19 118 223 142 699 234 671  33  68  12 674
 167 678 652  69 197 267 630 402 293 534 493   4 656 560 484 538 583 208 292 158  22 598 609  17 151  78 515
 586 635 540 578 490 165  16 591 522 246 584  20 623 705 195 523   8  66 640 172 231 575  14 216  35 251 628
 619  24 458 636 501  10  38 558 646  84 318 693 511 697  79 510 266  26 545 168 514 123 563 249 304 148 567
 466   1 585 554  28 503 505 595 581 213 564 401 627 307  30 557 588  25 531 121 113 502 339 240 177 202 500
 562 436 592 520  87  13 596 463  86 495 533 506 481 512  70 469 606  41 442 343 608  58 443  97  90 193 513
 475 508 549 542 405 406 393 413 171 361 483 352 238 528 124 460 517 224  27 367 576  45 556  65 474 110 486
 580 459 403 473 369 431 468 527 159  98 547 485 375 330 389 561 338 308 204 139 541  23 529 416 101 162 440
 424 454 368 410 498 126 499 504  36 337  83 471 446 313 516 509 441 422 332 242 433 489 614  75 102 244 467
 386 535 548 497 279 358 415 382 164 435 283 408 439 331 379 445  42 472 180 222 559  81 377 418 409 521 290
 364 390 394 420 374 387  47 465 309 425 314 480 397 353 407 477 373 492 362 295 437   9 423 455 263 355 388
 417 447 356 329 507 449 342 340 370 378 448 488 365 265 122 363 350 317 335 298 404 412 322 392 347 371 321
 376 252 278 303 349 380 297 296 572 384 287 398 543 327 271 470 344 519 217 395 381 487 354 411 305 299 360
 311 334 294 346 286 310 432 383 704 259 326 229 300 426 325 667 235 385 634 450 203 427 230 372 341 452 194
 391 214 260 273 421 250 351 400 438 434 685 255 268 219 236 239 649 237 491 462 241 306 183 611 644 396 301
 253 289 281 274 258 176 345 315 190 539 366 348 277 429 324 328 254 532 621 590 205 323 276 629 453 661 319
 188 414 232 257 212 546 144 275 714 288 153 291 185 233 248 247 209 645 712 600 215 702 243 612 597 530 163
 106 191 359 132 648 669 312 717 261 109 173 245 302 161 665 156 220 552 686 444 179 478 269 604 626 457 134
 201 270 228  96 603 145 729 114 430 655 166  93 264 150 651 211 136 670 526 582 653 357 206 476 479 537 227
 155 112 105 157 647 718 226 225 536 218 175 108 141  43 607  34 272 719  48 456 577 715 199 726 710 587 639
  91 103 280 657 133 192 727  89 553 625 129 622 130  76 525 184 689 555  72 694 262 207 713 320 624 496 107
 683 707 615 723 676 688 196  74 128 571  60 138 169  50 721  52 700 568 189 518 119 221  85  95 419 550 140
 709 544  18 174 728 182  40 100 282 482 668 663  73 181 660 210  31 143  55 461  61 725 631 722 574 701  37
  77 131  53  92 599 566 724  51 200 720  94 658  44 692 551  49 679 650  63 711 137 146 135 677 610 690  56
 716 428  21  71 170 605 601  46  32 696 616 708 120  88 579  59  29 654 494 703 104 451  80 464 662 594  64

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.00433e+07us (= 10043.3ms, 10.0433s)
Satisfaction error: 2
Number of search iterations: 2936
Number of local moves: 996 (including on plateau: 431)
Number of local minimum: 245 (including on plateau: 46)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 0: 54 3 62 69 490 10 505 463 171 98 83 408 397 265 271 667 649 532 712 444 653 715 713 95 574 690 64 => the sum is 9857 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
   8 653 650 702 708 643 431 268  64 627 242 312  44 320  51 642 517   6  60 671  59 707 617  16 704  87  46
 108 385 677 547 583 367 509 148 315  19 131 701  62 410 105 713 693 273  63 651 654 464 639  10 560  67   1
 405 506 717   2  70 564 542 179 589 183 603 680 264 224 145 284  48 666 146 124 659 729 577 137  17 204 591
 466 692 623 123 646 710 624 101 138 392 634 655 144  24  42 644  43  25 212 628 197 574   9 156 616 157 580
 195 435 556 663 537  41 177 323 621  66 582 389  38 127 109 235 647 253 430 590 130  84 614  65 645 667 636
  57 584 684  56 592 206 676  54 700 201  52 668 271 285 635 661 221 581 189 498  29  49 543 207 625  73 458
 605 662 272 536 494 239  95 139 344 669 578 604 227  78 203 534 538  30 176 595 135 526 525  61 161 191 638
 523 388 502 200 211 497 443  14 570 149 554 553 459 125 576 626 168  22 482 484 480 163 155 491 366 194 460
 470 492 243 322 339 411 557  23  82 508 575 530 340   5 408 290  18 349  45 456 689 533 588 171 514 407 490
 432 486 511 291 180  53 107 437 445   4 406 469 190 119 287 558 450 449 550 507 416 455 561 143 391 593 365
 381 540 330 394 434 121 440 423 447 354 476  40 446  71 544 483  12 414 241 336 705 465 417 166 619  11 545
 512 379 504 475 462  83 454 380 629  68 438  88 433 328 572 402 386 136 467 280 396 356 422  35 401 453 316
 487 293 175 571  28  72 329 300 342 403 350 265 429 711 304 463 347 387 420 664 382 187 362 418 258 384 524
 400 471 324 345 383 311 448 425 346 261 103 170 479 274 426 397 620 399 376 427 398 468 353 308 327 174 442
 331 240 640 404 515 412 395 361  47 246 725 503 493 409 377 325 305 369  34 333 419 529 341 283 294 229 296
 337 348 371 286 318 278 302 709 373 541 262 695 225 549 299 226 415 238 520 255 521 202 120 141 372 528 424
 649 111 222 199 244 298 134 485 277 319 477 254 363 230 555 310 673 421 728 343 266 375 147 608 633 306 228
 297  94 249  21 461 674 352 263 338 510 214 587 496 481 248 359 292 535 607 270 128 393 374 690 198 474 250
 686 276 142 167 594 598 158 364 610 672 609 126 234 188 220 118 675 154 288 231 162 637 546 489 295 519  97
 269 182 368 217 236 596 355 281 472 413 313 390 586 539 196 173 307 652 611 252 358 279  80 726 232 681  91
 164 193 256 282 301 357 641 657  96 679 267  69 495 694 245 172 185 518 665 247 551 165 160 656 151 548 441
  99  50 205 334 370 678 117 585 115 208 209  33 573 600 712 153 513 579  58 257 648 602  81 615  79 697 685
 159 724 237 210 721 444 218 687 631   3 326 186 104 723 140 599 457  86 488  98 129  75 715 719 122 670 184
 317 110 219 630 114 499 223 428 216 698 102 289 714 682 565  77 150 696 527 259 133 552 132 720  37 597 169
 718 213  39 727  20 436 314 567 251 658 233  31 451 622 660  15 192 500 563  32 378 112 181 562 706 568 106
  89 335  26 699 116 260 722 688 522 531 309 478 612 532 613 360 632 516 303 152 332  74  27 703  93  55  76
 691  13 113 452 178   7  92 566 275 473  85  90 683 505 618  36 351 601 606 215 501 100 569 559 439 321 716

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00422e+07us (= 10042.2ms, 10.0422s)
Satisfaction error: 1
Number of search iterations: 3434
Number of local moves: 1106 (including on plateau: 393)
Number of local minimum: 297 (including on plateau: 49)
Number of resets: 2
Number of restarts: 0

Problem in diagonal 0: 8 385 717 123 537 206 95 14 82 4 476 88 429 274 377 226 673 535 288 252 551 602 715 720 706 55 716 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
  63 671 615  33 572  99 680 725 693  46 604  71 290  95  93 634 591  64 195 517 111 370  32 579 665 697  50
  43 723 609 284  88 638 718 594  86 117 711 113 602  84  83 466 660 156 632  54  42 727 104 169  53 722 577
 149 132 678 316 119 618 670 603  79 134 649 120 492 196  51 583 155 131 514 174 168 380 712 664 475 652 241
  78 601 716 635  56 565 694 576 233  69 663  70 447 101 291 143 118  45 677 116 162 676  89  18 699 656 661
 102 212 386 126 672 381 686 140 614 538 682 170 226 178  98 461 254  75 685  26  27 464 720 575 622 136 599
 220 108 605 639  67 703 564 555 240  24 581 221 673 208  28 658 188 214 463  65  77 606  85 487 228 691 657
 202 568 446 417 317 489 401 293 690  82 392 165 646 124 206 151 210 115 194 308 708 628  38 641 129 574 721
 278 237 523 637 177 280 513 640 595 141 334 148 696 186 203 160 139 244 650 715 298 717 213 662  66 157 246
 260 272 698 567 249 367 488 205 540  29 451 276 562 191 243 286 204 374 621 192 277 724 142 182 107 669 679
 322 361 207 329 299 405 496 227 236 729 692 668 365 383 190 407 225 267 232 415 269 358 245 443 321 180 584
 434 340 681 683 198 623 479 300 283 164 313 409 369 494  90 366 643 354 289 261 339 593 185 229 296 209 231
 285 372 333 356 510 323 522 342 364 235 341 328 307 292 450 355 152 258 449 728 541 412 325 187 413 516 159
 295 319 183 528 253 478 470 251 239 467 452 179 426 425 343 503 345 262 445 378 265 460 423 273 338 462 393
 312 279 324 410 493 274 327 197 440 667 199 454 385 275 497 335 469 373 326 403 305 294 468 304 336 271 438
 395 437 456 106 396 248 359 150 352 306 288 353 347 531 390 346 394 350 511 314 344 297 491 435 429 439 391
 436 471  10 337 477 406 422 250 363 376  17 320 482 402 465 360 408 549 480 303  80 135 441 566 432 234 633
 270 382 147 201 535 255 216 398 490 524 145 458  36 414 404 431 309 486 389 590 424 122 526 377 362 589 375
 418 371  44 315 472 109 130 578 573   2 332 330  73 529 448 420 506  25 515 400 501 311 483 421 585 509 455
 411 547 268 173 596  81 172 399  48 536 430 543 224 310 419 144 544 397 379 554 588  16 519 474 433 138 512
 624 348 485  59 500 539 301  14 546 530 453 387  22 484 620 527 331 701 222  13 642  60 570  57 651   6 163
 666 557   3 189 553 238  19 610 154 428 580 502 302 442 504 137 388 518 193 551 368 218 629 257 611 133 105
 427 351 215 349 476  11 121 521 560 608  91 636  76 520 499 473 542 627 184 264 532 263 534 128 569 112 166
 481 507   4 545   8 444 171 459  58 655  62 600 550 153 607  55 537 525 158 625 675 167  31 211 709 571 287
 626  68  74 612 548 495  72 598   9 558 252 653 247 704 587 613  41 706 161 592 700 256 457  39  92   1  94
 726  37 561 223  12 505  20   7 556 552  40 416 146 719 631  61 586 619 242 597 508 259 647 644 176 318  47
 645 563 200  97 582 100 114 127 533 684  52 648 175 702 710 282 559 713  34   5 674 123 659 616  23 110 125
 687  21 384 688 630 181  30  96 281 654  49 617 689 714 705 498 357 707  15 695 230 219  87 217  35 103 266

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00019e+07us (= 10001.9ms, 10.0019s)
Wall-clock time (full program): 1.00436e+07us (= 10043.6ms, 10.0436s)
Satisfaction error: 2
Number of search iterations: 3142
Number of local moves: 1072 (including on plateau: 553)
Number of local minimum: 225 (including on plateau: 53)
Number of resets: 1
Number of restarts: 0

Problem in column 4: 33 284 316 635 126 639 417 637 567 329 683 356 528 410 106 337 201 315 173 59 189 349 545 612 223 97 688 => the sum is 9854 rather than 9855
Problem in column 14: 95 84 196 101 178 208 124 186 191 383 494 292 425 275 531 402 414 529 310 484 442 520 153 704 719 702 714 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 116  62 729 675  40 685 123  68  25 186 127 723 458  98 610 101  60 115 517 711 578 649 706 701 654 203 135
  74 684 660 505  78 595  18 639 379 397  70  86 552  71 632 407   5 103 663 651 700 630 125 228  52 704 147
 478 664 211 690 104 591  42  90 119 627 551  64 334  28 682 507 124 158 611 368 644 605  80 209 626  65 583
 183  73 712 464 107 395 486  84 725 681 111  87 703   7  77  58  94 177 635 708 527 724 225 716 353  54 689
 434  88 567 721 198 655 162 451 139 625 200 102 597 226 120 499  23  49 556 667 496 512 714 159 152  33 710
 679  12 114 670 665 666 109  79 175 537 157 224 652 155 197 216 534 212 631 202 705 713 168  51 696 176 460
 573 180 695 319 717 673 650  43 100 452 246 136 598 128 118 719  99 316 297 131 491 514 223  93 659 215 470
 502 242 165 613 273 506 324 191 190 544 387 151 720 179 126 606  56 259 220 718 641 574 235 229 166 390 648
 500 238 285 646 164 518 315 219 240 543 283 658 493 286 256 328 187 206 376 299 529 634 227 160 217 676 371
 403 236 354 707 245 511 257 726 428 310  95 148 184 201 294 399 688 345 243 300 680 508 214 323 562 174 320
 276 332 450 475 620 504 575 142 307 394 250 270 272 289 185 326 466 253 305 194 614 554 341 698 268 303 193
 340 192 322 295 444 677 172 440 728 269 108 145 540 497 143 264 204 327 208 234 359 600 582 674 352 375 364
 483 709 239 329 163 356 393 247 404 284 304 156 365 277 447 436 309 473 381 298 414 398 457 351 357 343 482
 722 443 266 113 261 330 361 727 210 576 278 318 241 362 367 384 349 244 317 461 347 167 313 430 446 449 373
 346 279 287 490 363 336 417 358 420 233 401 321 338 389 325 455 528 122 453 372 169 388 480 355 468 366 396
 426 411 385 248 331  66 311 262 302 533 195 418 400 431 380 498 465 530 560 409   8 291 454 416 433 251 441
   1 459 520 344 181 421 337 624 405 274 413 522 293 306 437  46 221 553 442 503 282 178 462 429 333 509 360
   4 448 432 406 531  10 369 439 474 312 548 549 467 546 590  61 564 524 485 438  48  85 415 290 386 412  22
 137 492 542 141 538  82 419 382  35 171 314 281 423 510 471 138 378 572 308 523 254 249 594 608 521 501 271
 263 633  50 149 669  47 392  17  91 252 692 657 133 481 563 144 693 494 489 617  19   3 427 585 445 592 258
 230 408 557 106 547 205  16 348 435 121 513 622   6 536 603 472 487 463 488 267 383  38 636 637  14 425 292
 231 593 265  27 599 391 571 469 477 196 484  45 280 535 173 621 550 476 182 237  75 422 569 350 555 342 140
 699 596  32 199 288  63 588 561 586 232 619 604 565 697  11 370 609 532  69 170  83  44 335 558  96 612  37
 642 607  30 275 519 213 656 515 525  76 643 628  15 687 188 146 479 541 132 105  81  20  21 402 377 671 661
 516  57 207 112 374 296 683 587 668 645 615 647  92 623 601 301 568 686  67 129 495  59  53   9 424   2 339
 584  55 150  97 618  34 570 456 702 255 579 653  24 694 678 638 526 545  31 117  72  36 577  41 154 410 559
  13 662 629  39 218  29 539 691 566 130 672 640 110 616 581 715 589 580 189  26 161 260 222 153  89 602 134

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00034e+07us (= 10003.4ms, 10.0034s)
Wall-clock time (full program): 1.00449e+07us (= 10044.9ms, 10.0449s)
Satisfaction error: 2
Number of search iterations: 2757
Number of local moves: 1041 (including on plateau: 430)
Number of local minimum: 243 (including on plateau: 52)
Number of resets: 1
Number of restarts: 0

Problem in row 9: 500 238 285 646 164 518 315 219 240 543 283 658 493 286 256 328 187 206 376 299 529 634 227 160 217 676 371 => the sum is 9854 rather than 9855
Problem in row 11: 276 332 450 475 620 504 575 142 307 394 250 270 272 289 185 326 466 253 305 194 614 554 341 698 268 303 193 => the sum is 9856 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 611 117 710 690 663  92 168 586 217 492  37 116  45 602  64 494 109 689 711 464 128  90 547 524  74 722  93
 723  79 675  46 662 727  28 519 503 186  35 467  65 544 215 549 531 640 561  59 166  33  72 685 259 729  97
 715 668 641  62  98 410 514 605 714 185  66 183  70 523 114 516  63 627 439  68 618 588  99 383 118 701  67
 599 581 127  43 648 655  58 510 709 556  52 489 473 189 129 179 595 624 694 190 369 218 162 721  71 153  61
 174 665 137 138 716 700 707 661 460 139 225 120  53 463 272 674 184 527 712  94 125 219 704 182  76 632  96
 221 134 201 161 149 719 708 403 637 612 146 425 247 509 132 676 256 669 724 199 160 717  21 246 477 154 152
 672 445 110 224 119 104  89 660 678 646 195 232 253 670 151 657 594 194 692  81 631 262 292 193 564 196 251
 260 283 208 202 177 307 112 683 623 257 288 587 673 649 697 656 546 284 115 726 255 287 171 192 270 178 169
 126 203 156 261 143 542  48 406 696 304 281 348 308 634 102 699 659 616 728 377 150 214 290 402 625 244 293
 133 142 342 205 444 276 280 397 236 686 327 316 339 568  77 430 550 702 268 197 653 364 200 713 465 277 269
 349 541 314 238 294 423 408 318 289 266 698 596 636 279 230 264 720 285 345 258 295 347 322 301 282 286 271
 187 298 313 718 235 355 343 433 242 211 240 607 333 374 512 540 420 252 583 309 306 303 341 245 325 451 379
 340 324 388  73 373 394 391 315 209 416 311 392 474 521 417 409 278 332 329 356 299 367 725 326 310 338 448
 428 210 431 385 458 320 358 263 363 354 234 305 371 376 389 291 357 495 407 411 366 350 469 300 401 498 265
 426 239 415 387 497 396 472 220 424 351 250 335  30 382 375 331 476 399 328 365 330 381 457 400 359 390 440
 233 386 248 453 378 346 336 188 393 372 429  44 459 471 450 228 213 562 136 446 487 454 490 442 413 569 229
 436 107 506 418 241 461 502  19 353 412 312 466 468 361 486 297 432 352 370 344 180 422 535  17 441 437 480
 398 296 434 421 479 491 380 508 223  11 539 164 323  22 438 172 173 237 302 484 613 532 619 534 165 414 483
 501  10 592 267 395 565 520 504  31  40 529 321 513  41 449 159 419 462  12 515 488 505 543 455 101 360 558
 555 533 443 405 518 500 620 254 140 435 572 198 553  87 591  57  86 158 337  26 108 563 598 482  32 548 456
 481 511 578 551 614 131   2  88 557 124 538 536 141  80 645 111  36 167 106 651  13 590 681 575 216 580 552
 452 610 475 517 384   3 621  23 537 571 362 601 554 273 334 157 577   4 249 638 191   7 478 175 585  50 427
 526 485 103 644  15  29 629 643  95 122 573  39 609  85 680 574 130   5 319 570 559 626   8 113 470 499 705
  91 679 630 530  18 105   9 148  75 579 687 582 633 507 635  34 667 231 121 567 584  42 243   6 706  69 677
  38 666 545 566 528 144 606  83 170 615 628 496 163 145 603 181 176  84 147 589 597 639  82  60 695  49 560
  25   1  55 650  16 604 275 206 227 222 654 522 622 226  51 493 204 123  20 664 608 688 682 658 652  14 693
 155 642  78 600 593  56 671 212  54 691 647 368 447 274 617  27 404 135 100 207 576  47  24 525 703 317 684

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00019e+07us (= 10001.9ms, 10.0019s)
Wall-clock time (full program): 1.00437e+07us (= 10043.7ms, 10.0437s)
Satisfaction error: 2
Number of search iterations: 3848
Number of local moves: 1185 (including on plateau: 591)
Number of local minimum: 340 (including on plateau: 76)
Number of resets: 1
Number of restarts: 0

Problem in row 10: 133 142 342 205 444 276 280 397 236 686 327 316 339 568 77 430 550 702 268 197 653 364 200 713 465 277 269 => the sum is 9856 rather than 9855
Problem in row 27: 155 642 78 600 593 56 671 212 54 691 647 368 447 274 617 27 404 135 100 207 576 47 24 525 703 317 684 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 356 670 638 185 161 191 695 705 678 195  14 630 444 320 601 706  13 659 624  74 194  33   4 123  96 603 243
  24 308  56 633 127  68 128 729  37  84 636 720 655 714 661 537 170 663 623  16 614  77 137 674  48 707   9
  30 647  69 553 202 532 643 250 609 144  20 620 672 622 543 244 192 168 282  21 698 124   5 654 389 280 642
 196 574 585 324 500 570 576  90 671  65 122 635 690 583 656 107 484 284 206 372 538   6   8 307   3 590 113
  50 612 190 676  35  31 703 213 631 502 579 488 628 567 629  67  39 164  89 577  22 200 231 649 111 555 617
 104 607 494 533 482  17 566 157 651  42 542 485 505  41 562 216 305 665  29 419 575  26 298 693 149 669  23
 134 529   1 497 117 205   2  97 608 571 559 380 525 173 515 175 565 544 600 573  11 349 120 523 197 675 610
  49 473 644 394 125 415 528  19 530 578 498 650 403 150 506 155 160  36 535 306 626 169 145 357 359 493 552
 256 376 549 534 118 507 602  25 368  62 606 504 514 411 588 377 459  93 337 180 479  59 181 407 167 539 557
 269 508 428 569 469  43 547  87 431 133 467 572 512  92 477  91  81 486 334 541 546 392 143 520 271 448 398
 353 375 474 580  51 443 487 219 352 378 265 503 404 239 384 369 103  88 568 424 454 427 360 396 267 383 509
 343 402 527 301 463 405 412 430 436 153 399 299 511 241 524 162 335   7 255 266 442 457 388 489 400 447 361
 257 582 322 417 395 367 434 325 432 422 426 423 387 346 332 240 289 365 147 354 465 449 309 362 310 347 351
 304 203 294 370 390 455 363 355 371 418 595 476 358 319 350 381 475 311 386 336 348 345 186 316 328 437 385
 339 439 341 421 420 333 313 295 393 468 425 199 458 277 326 451 292 312 342 416 268 429 581 374 338 291 314
 413 711 409 563 249 478 331 712 300 274 435 518 340 273 279 233 237 106 212 321 276 408 462 302 278 236 499
 688 281 228 260 224 283 645 414 495 286 330 285 584 253 270 182 397 261 165 433 344 513 548 287 694 317 188
 453 156 689 329 246 187 293 327 189 201 263 138 296 441 401 517 220 727 496 214 491 445 483 615 545 275 218
 481 217  83 234 594 166 315 664 681 226 238 259 132 366 323 637 604 667 248  99 382 657 519 245 456 139 223
 492 252 115 247 210 242 272 591 178 597 264 262 141 440 183 702 598 558 258 586 303 318 464 179 526 211 666
 673 198 114  54 522 100 225 692 163 677 251 207 110 560 208 501 715 662 230 229 723 540 653 135 452  46 215
 641 140 686 193 697 592 172 438 105 713 159 221 297 254 171 379 627 450 700  76 126 683 406 227 531 108  63
 710 130 101 146 685 724 158 490 235 373 176 136 154 148  79 461 364 152 699 632 184 704 611  75 708 119 701
 556 204 288 717 618 691 232 121  34 709 648  82  44  94 102 680 222 391 177 554  40 516 725 716 551  86  57
 613  58 290  12 521 510 112 634 129 652 209  38  15 728  95 619 718 599 589 646  64 668 682  47 446  52 109
 605 142 561  53 684 640  28 151 116 472  71  55  66 587  18 621 721  27 131 719  78 687 480  85 639 722 696
 466  61 679  60 550 660  73 625  32 460 658  70  10 616  72  45 470 410 593 471 564 174 726  98 596  80 536

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 4.91315e+06us (= 4913.15ms, 4.91315s)
Wall-clock time (full program): 4.95527e+06us (= 4955.27ms, 4.95527s)
Satisfaction error: 0
Number of search iterations: 986
Number of local moves: 552 (including on plateau: 107)
Number of local minimum: 47 (including on plateau: 8)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 392 560  42 640 407  15 104 619 597 579 546 130 102  11 581 715 687  76 668 134 508 377  17 665  61 602  20
 113 512 148 395   4 204  14   2 542 660 636 366  13 340 613 703 690  12 642   3 515  72 688 606 160 721 481
 572  59 176 648  91 489   6 150 663 578 582  65  28 262 695 536 577 124 528 347 600 537 263 495 322 107 355
 593 313 106 682 100  70 240  96 213 440 612  31 189 137 510 564 693 232  63 622 652 651 666 543 255 115 467
 618 119 233 720  22  54  27 121 646  29 436 144 592 299 525 689 522 673 171 350 351 464 179 609 526 168 568
 585 117  47 674 260 544 127 278 293 558 114 499  46   5 376 601 711 479 551 365 580 402 500 235 159 188 561
 680 243 264 362 178 576  81 314 194 492 486 538 571 199 637 709 529  43 217 210  56 509 557 418 145 574  73
 683  30 669 456  94 599  39 286 433 503 706  84 111 155 186 357 336 138 607 245 610 454 432 535 141 553 413
 539 209 242 554 475 449  64  78 224 523 514 598 477 166 462 215 476 338  74 428 620 524  60 520 394 471 161
 404 207 154 420 531 548 491 408 485 151 387 162 532   9 679 712 516 272  80  21 406 559 410 513 203 562  33
 533 298  95 390 504 670 300 142 547 517 109 490 363 274  49 505 594 463 409 451 443 498 302  26 181 455 247
 419 370 473 415  38 276 382 567  86 287 335 502 424 358 421 447 389 439 256 391 427 429  35 445 315 494 435
 320 295 375  16 552  88 321 698  40 426 393 211 294 662 566 311 266 353 378 488 399 465 444 398 396 319 381
 303 367 258 633  53 371 333 388 586 430 327 423 331 482 105 380 279 438 630 372 434 555 334 349 281 101 312
 208 411 442 360 664 275 400 697 252 234 297 308 565 583 282 125 325   8 573 405 253  92 397 310 459 588 342
 685 317 450 226 422 354 385 453 627 493 487 128 139 230 257 641 318 198 441 348 212 316 307 437 457 305 222
 545 328 530 304 202 326 714 519 361 254 448 384 283 341 187 309 280 521  48 704 152 332 344 227 461 460 291
 596 214 268 269 251 719 677 639 692 324 267 173 386 172 364 261 414 729 383 549 184 236 183 259 248 180 218
  79 478 550 270 540 163 628 373   1 368 196 306 343 713 225 289 231 569 629 369 541 345  89 472 563 195 330
  82 696 650 401 190 284 587 691 146 193 129 575 496  50 191 219 122 458 167 506 158 624 723 603 501 185 228
  34 645 468 108 527 156 671 684 699 118 701 359 216 632 112  57 143 654  55 205  10 221 595 352 625 200 608
 452 470 136 170 497 133 590 249 285  18 197 655 658 710 556 177  44 288 164 237 425 220 614 290 647 301 672
 110 483 705 175 718 631 374 277 135 323 518 169 621 474 271  24  99 584 182 725 116 273 466 238 480  67 617
 103 635 653  90 616 206 591 174 147 604  62 659 643 644 511 120 165 292 534 649  69 484 153  36 570 149 296
  97 416 379 201 623 724 686  32 611 223 244 700 656 605 246  25 140 626 661  45  93 126 346 131 446 356 417
  52 726 667 239 589 681 694 192 265  23  51 727 678 634 229 123 241 132  87  71 638  83 412  66 157 722 676
  58 337 675  37 707 250 329 728  85 507  75 469  98 708  19  41  68 716 657 615 403   7 339  77 702 717 431

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.16207e+06us (= 8162.07ms, 8.16207s)
Wall-clock time (full program): 8.20341e+06us (= 8203.41ms, 8.20341s)
Satisfaction error: 0
Number of search iterations: 2318
Number of local moves: 766 (including on plateau: 240)
Number of local minimum: 181 (including on plateau: 28)
Number of resets: 1
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 703 172 697 649 402  61 726  42 592 576  67 488  60  82 146 605 681 723 178  24 156  76 656 191 114 264 724
 658 569  40  54 486 107 636 100 542 533  53 638 148 175 661  87 149 184  84 116 584 506 534 706  91 721 693
 720  47 712 586 694  93 608 589  66 369  25 660  48 110 160  72 137 622 168  57 252 158 668 716 715 541 262
 619 130 189 705 616  39 469 151 268 174  49 714 177 523  83  81  38 727 105  56 383 696 672 722 679 678 112
 426 615 155 285 537  97 648 197  92 548 109 443 233 650 180 291 669 531 138 236 690 378 719 588  63 123 214
 507 132 396 139 708 717 713 230 701 203 140 445  85 725 166 248 157 515 193 144 399 665 520 518 210 183  96
 607  19 202 217 682 590 372 256 131 583 339 683  70 227 465 221 380 364 119 120 728 687 249 516 124 653 251
 671 206 201 142 684 163 434 692  69 366 167 729 314 209 244 220 154 204 289 718 634 538 222 547 128 585 325
 652 152 205 386 133 246 567 190 666 474 395 629  77 676 637 159 181 266 527 229 536 288 280 223 195 628 258
 397 670 349 187 287 552 436 219 135 710 306 377 283 276 173 182 472 611 241 689 374 330 375 275 323 394 232
 419 711 250 164 141 261 468 284 215 532 700 473 161 143 517 257 707 677 340 243 698 207 111 216 169 441 350
 430 454 699 327 253 295 709 281 171 293 298 353 296 294 360 471 211 422 393 409 290 334 231 498 342 404 337
 411 344 331 418 361 379 508 438 282 351 482 408 384 385 270 442 254 239 455 446 301 228 311 481 304 279 363
 355 273 512 449 421 198 271 448 514 359 490 309 427  45 356 318 277 299 502 458 391 357 452 453 278 300 343
 315 316 260 345 352 333 487 322 297 444 524 389 479 194 305 392 302 558 336 432 362 272 370 470 320 387 292
 212 485 484 400 410 543 373 326 519 147 447 235 416 335 199 348 368 423 208 401 113 329 461 435 511 346 381
 371 415 347 577 503 390 153 620 341  52  20 413 544 428 579  64 451 308 398 310  41 526 463 365 593 245 338
 376 407 328 457 414 460  43 483 630  36 554  89 307 104 269 557 513 179 491 367 358 495 560 170 462 185 561
  58 425 510 424 509 382 303 609  31  80 433 259 559 439 621 545 573 150  17 420 122  73 494 489 450 403 477
 192 437 521 417 126 635 265  14 587 267 659 176 596 556 500 429 655 480 459  11 129 466  13 234 549  26 456
 118 475  16 505 440 604  71 478 599 136 504 263 614 539 464 631   4 540 406 600 224 535   5 103 493  21 467
  74 286 654 476  88  27  98 685  32 633 431 101 613 551  28 595 575 312 624 601  51  44 388 162 497 617 612
 200 354 566 578  23 134  75 572 563 675 603  62 550 117 623 562 657  95 565 255 564 188  34  90 522 582  46
  59 319 642  22 165 553 242 238 598 626 591  55 597 602 632  37 127  99 618 571 555  50 496   8 530 121 702
 196 225  10 412  78 662  65 106 528 574 492 145 580 218 226 646 645 213 647 606 581 499 568 237   7   3 686
  94 529 570 501 274 695  29 641 651 108 313 240 594 625 324 691 186 102 680 673  18 405   2 125 640 115  30
  15 688   9  33  68 639  86 644  35   6 664  79 643 627 667 704 332  12 674 663 321 525   1 317 546 610 247

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.08528e+06us (= 6085.28ms, 6.08528s)
Wall-clock time (full program): 6.13711e+06us (= 6137.11ms, 6.13711s)
Satisfaction error: 0
Number of search iterations: 1328
Number of local moves: 655 (including on plateau: 260)
Number of local minimum: 74 (including on plateau: 37)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
   1 615 655 664 633  75 167  21  82 625 651 646 672 605 179 658 266  26  44 141 279 674 626 500  23   9 318
 662  31 682  71 264 188 360 271 630 627 649 690 654 665 303 273  51 162 361 233  11  41 620 545 108   5 698
  94 695  57 624 539 213  52 248 527 706  35 713 673 558  42  79 385  63 110 136 555 666 570  59 140 635 681
 641 542 618  70 609  55 161  48 585  93 581 667 578 604 306 671 225  89  19  81 193 478 685 669  17 536  34
 670 640 623 544  72  43 112  62 622 599 597 240 572 679   7 636 160  33 103 237  76 710  15 571 156 557 519
 614 590 554 535 531  45 286 166 548 406 483  13 482 592 301  18 637  29   2  39 335  12 525 485 343 631 653
 417 465 481 559 621 165  54 265 587 550 576  87 652 546 119 282  20  37  65   8 364 556 583 492 177 524 603
 243 582 567 438 569 344 134 463 537 486 328 514 506 477  22  60 139 446 453  36 107 579 551  46  24 657 547
 634 421 606 470 158 436  74 143  73 469 489 601 588 502 189 595 317 187 196 186  14 475 541 398 153 447 493
 589 529 457 497 138 408 182 183 552  28 639  25 496 442  10  27 341 226 517 253 464 498 471 383 386 561 553
 419 462 443 371  80  98 351 437 396 573 402 472 332 507 359 433  16 365 508 415 484 560  30 459  47 427 409
 504 395 284 488 363 416 232 199 430 320 491 331 450 346 280 300 413   4 314 528 390 495 368 533 499 479   3
 310 239 355 454 445 425 369 414 347 412   6 373 397 256 358 325 330 384 467 480 354 530 333 262 452 257 521
 422 455 336 350 440 315 250 411  58 403 407 337 324 392 259 399 366 404 458 418 236 319 380 490 405 522 299
 449 352 323 151 566 321 426 584 292 312 460 382 349 357 367 423 289 400 338 476 474 435 155 258 329 234 353
 420 316 128 326 372 263 439 509 238 288 362 712 261 370 513 376 296 276 287 487 432 342 283 580 387 285 307
 322 302 195 202 345 247 725 628 170 249 311 678 334 293 327 252 691 461 393 494 297 377 211 313 309 281 448
 260 424 697 278 221 379 563 434 218 565 215 206 394 269 543 456 638 708 515 210 220 178 378 205 191 255 235
 124 340 135 295 147 501 656 180 718 168 308 598 159 224 611 115 643 564 701 389 451 375 100 223 647 216 267
 617 190 207 157 401 503 607 532 290 254  92 228 268 270 723 163 175 562 245 616 688 208 219 696 593 197 154
 102 129 241 212 705 660 374 709 229 209 275 231 122 214 644 689 699 505 305 659 694 298 171  96 468  69 146
  83 150 251 242 204 574 686 227 222 172 277 246 109 137 594 684 619 704 612 677 291 230 169 274 726 339 356
 131 217  99 181 145 613 520 518 106 526 198  95 144  91 715 511 194 707 661 727 441  53 728 716 516 176 126
  68 127  56 702 164 680 431 720 121 304 174 473 111 142 645 117 540 663 428 591 650  38 272 185 693 675  85
 123 132 668 125 173 632 596 381 203 294  64 105  90 130 600 717 721 523 575 577 642 610 101 148 703 104 118
 244 466  97 700 602 534 510 714 683  84  61 114  50  67 410 444 116 608 629 113 201  32 586 192 687 711 200
 692  49  40 149 348 722 538 388 391 133 724  78  88 120 429 152 568 719 549 648 512  86 184  77 676  66 729

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 5.50327e+06us (= 5503.27ms, 5.50327s)
Wall-clock time (full program): 5.54642e+06us (= 5546.42ms, 5.54642s)
Satisfaction error: 0
Number of search iterations: 1490
Number of local moves: 765 (including on plateau: 361)
Number of local minimum: 97 (including on plateau: 43)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 570  50  54  86  73  48 675 111 115 646 134 515 702 367  10 518 460 125 714 510 535 331 204 517 660 634 491
 512 616 149  34 546  35 671   9  13 726 133 643 401 391 701 124 559  26  67 676 578 146 165 457 648 137 692
 673 684 687  64 706  39 716 123  91 150 113 685 153 628  77 703 528  38 116 174 674  61 593 471  90  93 725
 640 638  52 719 555 104 708 181  23 207 189 591 590 394  79 625 199 162 526 682 170  81  92 639 187 112 710
 658 257 602 151 721  65 470  66 335 729 724 547 376 118 122 238 107 557 102 661 654 287  97 163 255 126 667
 529 267 167 114 218 700 576 121 136 417 722 480 575 193 109 717 511 168 324 148 664 680 141 178 233 242 525
 622 192 679 186 215 106 699 253 131 216 728 635 418 599 120  88 713 110 263 209 697 222 195 468 108 260 723
 479 213  85 185 707 172 243 694 203 231 293 695 439 659  17 689 677 292 144 357 552 183 294 718 208 200 226
 301 139 256 362 237 262 626 364 633 727 303 312 405 605 277 332 545 143 214 161 537 240 295 610 245 269 455
 502 251 318 310 142 179 241 205 359 637 283 278 462 688 176 363 656 175 234 330 611 275 308 678 145 334 715
 354 191 347 340 273 227 720 247 265 177 385 228 588 655 383 506 422 409 333 254 304 182 236 670 567 220 372
 520 280 452 164 299 289 249 274 681 652 173 504 407 561 319 305 317 377 211 343 421 166 300 651 291 370 279
 397 286 368 323 442 302 197 230 645 264 374 384 356 473 355 564 400 320 467 309 339 337 232 352 349 403 387
 366 341 348 447 344 494 266 306 290 258 327 414 268 563 322 250 386 523 432 235 484 413 252 441 316 433 336
 402 358 259 451 419 415 365 406 390 513 272 371 298 315 342  53 475 307 404 453 321 514 248 450 285 440 329
 261 369 373 425 389 461 410 568 296 288 382 464  80  94 434 154 328 311 444 582 392 446 436 101 501 505 361
  18 381 577 521 345 458 423 465 430 353 105 412 276  62 393  89 507 435 489 503 508 420 325  87 346 490 437
 239 429 338 544 482 408  60 500 314  70 375 530  45 427 495 539 360  55 627 456  84 483 620 463 411 282 219
 448 579 398 445 454 527  24 426 160 498 477 201 270 100 424 449  71 607  32 663 428 534 431  25 556 438 190
  96 497 127 560  42 474 380 443 536 378 476 156 472 538 499 531 117 481 550  33  51 524 488 128 459 623 196
 217 532  14 540  69 569   4 598 553 619 612  75 246  36 565 281  47 396 522 541   1 600 642  98 492 587 399
  46  22 603 574  95 519 284 630 586  40 572   2 558 395 486  43 416 650 668 631  59  16 478 221 614 548  99
 271 549 157 662 566 592 129 632 584  29  76 130 152 224 597 533 297 683 615 583 184 604  15 379 516  68  28
  63 493 542 158 580 589 543 629 562 350 581 159 487 202 496 469  74 601  30  19   6 212 711   3 666 618  12
  58  21 613 693 244 509  37 690 485 595 194 135 551 155 704  49 147 594 636  56 388 617 647 313  11 705   8
   5 624 641 132 554 691  20 606 466  41 672 169 198 188 644 571 210 653  83 229   7 585 712 351 669  31 103
 609 596 649 665 138 621 119  78 573  44 180 140  82 225 709  72 326 657 608  57 206 696 698 223  27 686 171

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00031e+07us (= 10003.1ms, 10.0031s)
Wall-clock time (full program): 1.00442e+07us (= 10044.2ms, 10.0442s)
Satisfaction error: 2
Number of search iterations: 3399
Number of local moves: 850 (including on plateau: 346)
Number of local minimum: 266 (including on plateau: 37)
Number of resets: 1
Number of restarts: 0

Problem in column 1: 570 512 673 640 658 529 622 479 301 502 354 520 397 366 402 261 18 239 448 96 217 46 271 63 58 5 609 => the sum is 9856 rather than 9855
Problem in column 26: 634 137 93 112 126 242 260 200 269 334 220 370 403 433 440 505 490 282 438 623 587 548 68 618 705 31 686 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 679 290 596 336 142 619 642 611 653  40  59 579 677 727 145  16  58 313  86 558  54 594 510 704  51  99  17
 243 714 660 560 719 672 337 364 524  80 114 621 610  32 166  24 168 139 664 416  61 159 542 172  22 583 489
 604 606 640 124 183 586 192 137 175  23  74 659 607 722 256  64  47 113  73 522 153 563 694 129 707 728 474
  57 217 673 309  81 668 671 546 627  36 111 632 513 690 533 223 151 178 112 212 641 635 709 152  90 182 206
 695 158 164 682 291 239 608 443 655  62 103 634 484 670 669 492 173 148  49 367  65 491 430 146  42 170 725
 251 552 102 263 105 647 681 525 235 216 390 708 662 190 231 565 199 208  77 572 125 683 507 211 118 196 636
 238 165 155 261  52 691 711 515 689  96  41 388 463 684 289 110 378  45 333 477 729 685 582 225  88 141 624
 620 236 265 716 255 649 696 587 220 262 286 214 715 162 191 459 275 258 163 287 266 663 578 247 135 127 323
 201 246 555 534 228 568 571 693 617 341 233  71 661 242 257 185 194 176 161 532 249 643 480 149 230 117 721
 651 140 324 301 330 692 180 332 506 724 356 295 198 365 329 355  56 189 466 234 351 250 646 187 377 543 478
 294 590 171 469 657 516 143 570 344 219 678 296 310 334 281 218 360 319 321 650 272 204 529 293 339 202 276
 240 260 282 384 362 584 569 302 354 197 169 303 311 402 472 467 680 271 315 720 195 186 224 306 528 460 312
 448 458 232 316 267 468 248 447 437 209 331 450 237 493 285 348 305 353 279 455 427 274 485 449 623 213 318
 415 444 476 357 222 304 308 452 401 300 273 283 431 531 361 349 380 393 268 526 345 433 210 428 269 322 374
 411  29 403 386 410 280 359 358 453 442 479 461 340 372 314 503 320 270 439 368 370 418 297 254 417 277 425
 193 432 490 298 241 292 278 495 530 327 397 383 379 470 381  92 373 343 317 120 371 465 407 509 498 398 376
  53 464 363 253 512 325  95  44 499 538 520 436 523 471  72   3 252 497 518 394 451 382 400 396 375 537 482
 409 504 392 154 488 264 335   7 481 595 259  48 404 550 421 284 366   9 369 559 539 405 101 511 483 505 413
 346 589 424 150 486 144  67 160 133 406 419 581 517   1 602 446 601 487 352  84 625 342 116 557 462 408 350
 576 119 422 207 599 203 457 106 441 473 429 423 108 501 420  13 440 527 435 107 326 519 104 553 603 299 445
 618 547  85 123 456 227  69 188  35 508 702 514  87 434 387 712 545 615 535 115  12  21  46 638 686 399 551
  37  55  68 221 666   5  33 174 426 674 502 597 121 644  83 605 656 648 549  66 592 130 385 699 574 548  97
 600 496 612 554 226  79 128 167  27 628 536  75  82   4 645 614 414 654 412 122 630  89 328 494 131 713 395
 288 100 633 556 575  11 475 703 177 521 540  25  14   8 665 667 561 688 701 156  76  70 244 179 616 588  18
 200 593 580 652  39  63 573 567  19 562 706  43  94   2 136 697 585 726 541 347 591 138  30 564  15 577 215
  34 307  10  60 637  28 338 157 147 718 438  98 181 134 566 705 631 613 598 500 717 184 245 609 700 391 109
 454 544  78 629 626  31  91 205  50 658 710  38 126  20 698 639 687 675 723 389 622 229  26  93 676 132   6

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00019e+07us (= 10001.9ms, 10.0019s)
Wall-clock time (full program): 1.00436e+07us (= 10043.6ms, 10.0436s)
Satisfaction error: 2
Number of search iterations: 2779
Number of local moves: 978 (including on plateau: 406)
Number of local minimum: 188 (including on plateau: 45)
Number of resets: 1
Number of restarts: 0

Problem in column 19: 86 664 73 112 49 77 333 163 161 466 321 315 279 268 439 317 518 369 352 435 535 549 412 701 541 598 723 => the sum is 9856 rather than 9855
Problem in column 24: 704 172 129 152 146 211 225 247 149 187 293 306 449 428 254 509 396 511 557 553 638 699 494 179 564 609 93 => the sum is 9854 rather than 9855
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 146 local moves
Selected variables are frozen for: 0 local moves
73 variables are reset when 146 variables are frozen
Do a restart each time 729 resets are performed
############
Solution:
 668 564  31 251  51  61  45 588 539 456 270 605 590 543 486  80 677 641 266 363  90  83  48  78 336 716 729
 709 104 175  30 141 718  38 361 503 537 181 107 581 630 664 639  89 685 594 655  93 168  79 703 109 420 142
 128 701 691  58  91 547 233 514 101 122  59 443 673 557 357 278 603 163 157 721 216 372  55 593 728 651  43
  57 680  74 666 131 328  87 119 151 698 200 374 540 496  95 439 650 652 145 606 637 441 225 704  39 489 132
 714 679 171  60  34  52  71  53 401 694 155 558 579 669 106   1 235 610 139 657 103 507 726 615 675 406 185
 575 130 217 665 120 347 534 184 409 359 189 563 625 167 586 423 148 509 158 693 512 696  42 491  77 373  63
  67 595 323 114   5 551 702 568 241 723 205 183 201 223 711 166 199 717 110 477 727 589 159 220 256 662 161
 291 204 656 209 333 246 487 715 433 585 172 645 147 250 622 232  29 219 187 523 258 391 672 684 244 149 272
 642 569 146 255 263 117 206 578 536 518 405 254 202 700 725   9 265 699  19 153 247 644 179 207 553 574 190
 269 427 248 309 318 479 351 308 722 287 280 301 173 573 264  12 710 188 689 165 192 580 274 688 116 240 692
 305 208 531 312 193 315 144 468 667 690 697 245 350 195 273 706 382 334 705 377 238 316 124 297 307 186 290
 321 293 452 417 326 510 719 375 511 384 289 614 345 340 196  17 370 267 550 252 335 271 296 320 404 239 442
 221 286 472 343 545 346 426 226 660 348 413 549 330 285 279 358  73 224 437 395 379 385 532 408 332 262 341
 319 462 198 295 378 169 353 453 663 303 471 352 304 396 388 695 121 344 260 237 356 415 355 389 416 461 302
 451 203 178 369 458 508 211 349 376 530 210 390 436 354 327 339 324 380 387 454 367 284 470 431 368 364 337
  37 365 371 449 429 275 447 249 111 325 485 299 457 554 609 411 392 403 483 140 459 125 445 393 424 126 592
 425 194 298 455 474 513 331 469  54 257  64 419 478 407 317 611   3 306 624 500  23 283 261 533 475 400 681
 493  62 311 522 410 438 480 440 338 552 565 502 402 465 444   2 105  24 463 282 501 118 446 506 362  66 556
 399 464 584 600 720 160 504 313  11  36 481  84 521  86 526 541 524 418  72 177 661 212 528 129 435  92 577
 525 516 520 467 544  98 242 164 366   6 430  96 562  69 310  10 653 473 626 505 398  47 498 428 460 281 561
 583 559 617 494 567 674  41 191  94  25 490 182 176 102 576 598 412 277 300 495  70 421 570  85 628 136 492
 538 322 497 638 535 414 658 288  68 222 519  99 383   4 546 560 329 115 218 156 314 197 488 294 683 253 517
 170  20 608 527 712 571 482  75 636 397 596 112 108 631  33 143 476 127 602 180 515 627 529 227 607  88  56
 386 555 686  18 676 670 623 213 215 150 422 154  81  21  28 616 613 236 597  49 633 259 619 123 632 572   8
  46 548 137 646 629 450 724 394 229 268 635 484  15 292 100 640 113 230 134 432 604 434 566  40  13 381 671
  50   7  16 659 707 276 634 601 133 152 612 654  97 618  44 708 682  32 591 135 214 542  26 234 162 620 649
 466 138 647  27  65  22  82 599 687 231 360 587 499 228 243 621 678 582 342  76 713 448 643  35  14 648 174

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.43102e+06us (= 6431.02ms, 6.43102s)
Wall-clock time (full program): 6.47202e+06us (= 6472.02ms, 6.47202s)
Satisfaction error: 0
Number of search iterations: 1939
Number of local moves: 843 (including on plateau: 350)
Number of local minimum: 166 (including on plateau: 44)
Number of resets: 1
Number of restarts: 0

