@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 758 745 138 718 831  84 784 583 683  49 569  98 425 618 151 422 215  47  10 828 404  68  44 811 117 750 519 265 475
 451 753 514  55 721 661 161  39 502  87 595  72 667 641 134 804 195 105 472 783 834 120 157 601 561 778 130 410 206
 814 144 830  56 400 463 630  65 817  19 646 638 691 185 148 184 102  88  94 767 664 165  71 821  64 725 637 465 816
 113 122 214 612 755 617 586  95 754 208 803  69 248 622  77 762  43  96 139 694 815  46 836 103 218 788 702 470 602
  81  37 247 771 841 210 176 112 808 639 656 126 536 812 171 775  63 278 107 712 648 777 224 183 533 219 319 480 668
 607 673 213 801 262 840 268 722 579 200 615  82 260 153 152 170 222 263 385 145 764 254 317 592 774 297 605 736 258
  99 123 108 709 287 770 446 143 757 234 810  89 825 202 316 751 160 189 787 257 532 191 374 813 231 177 305 743 781
 235 824 149 232  92 412 321 634 746 220 839 320 769 310 294 150 147 197 739  70 735 688 186 744 154 216 829 682 275
 792 353  85 304 261 437 799 572 469 763 567 156 188 178 279 245 272 199 101 642 838 211 341 289 264 311 727 835 731
 192 331 506 309 424 732 717 408 565 380 466 286 327 354 169 255 335 421 383 723 464 391 407 307 293 312 793 747 212
 221 342 127 239 531 545 338 674 508 240 496 382 488 290 348 324 442 507 708 690 562 724 431 193 158 190 833 360 318
 347 325 243 252 314 766 241 249 733 403 405 741 672 223 179 398 660 517 345 340 633 832 352 349 323 377 136 603 251
 521  83 371 528 322 346 730 452 447 295 433 436 381 397 306 416 568 280 666 355 512 440 401 357 228 409 332 644 553
 420 438 326 493 511 525 266 237 578 205 445 449 428 478 343 358 456 284 481 620 330 369 402 419 546 510 518 500 274
 537 339 292 387 654 386 296 363 462 350 411 429 362 563 443 368 376 550 370 495 486 414 434 423 490 427 396 333 373
 384 458 378 625 365 585 301 283 359 267 413 498 372 415 453 460 281 516 356 529 393 491 432 450 582 392 473 250 448
 588 379 441 589 515 276 328 542 367 570 594 395 556 575 399 571 530 302 181 482 146 336 334 501 270 467 457 315 203
 246 269 288 487 598  21 485 494 351 564 180  26 559 573 541 444 477 417 164 552 229 439 461 580 593 523 520 435 693
 124 162 524 658 476 182 555 285 194 609 303 662 590 459 489 576 678 711  75 111 121 522 509 499 479 636 344  25 651
 471 554   4 455 426 299 698 558 253   5 236 389 173 394 716 535 204 623 300 227 273 539 647 540 619 714 596 135 626
 167 795 652 581 544  62  16 209 406 645 604 613   7 643 534 692 628 574 497 557 430 635 468 526 104 591  20   1   8
 629 483 705 166 503  78 600  12 217 551  80 271 597  51 549 650 484 761 611 560 131  31 782 172 797 680 454 366 238
 670 599 621 606 640 313  33 818  52 614 118 632 163   3 671 687 728 713 159 610  61 547 137 627 742 132  11 361 141
  86 114 807 631 737 337 577 155  17 566  58 676  91  66 689 677 710 543 513  60 277 697 492 418 655 707  30 207 616
 587 695 740   6   2 719  13 726  90 505 116 780 242 791 686 233 794 657 548 244 142 584 706  53  42 684 225 291 308
 653 823 704   9  34 388 196 734 175 760 226 701  45 649 822  36 790 659 773  79 230 298 715  27  73  57 608 282 663
 538 527 681  93 110 786 765 504 106 675 140 809 119 738 700 125 820  97 679  35  50 259 805 729 748  14 128 329 100
 802 696 474  48  38 168 198 756 174 837 129 720 669 752 624 109 800 796 768  24 115 364  41  54 779  67 375 133 699
  76  23 827 789  15 201 685 785  40 749 256 665 759  74 826  32  29 819 798  18 390 776 703  28 772  59 187 806  22

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00628e+07us (= 10062.8ms, 10.0628s)
Satisfaction error: 2
Number of search iterations: 2827
Number of local moves: 1011 (including on plateau: 416)
Number of local minimum: 215 (including on plateau: 53)
Number of resets: 1
Number of restarts: 0

Problem in column 12: 98 72 638 69 126 82 89 320 156 286 382 741 436 449 429 498 395 26 662 389 613 271 632 676 780 701 809 720 665 => the sum is 12210 rather than 12209
Problem in column 22: 68 120 165 46 777 254 191 688 211 391 724 832 440 369 414 491 336 439 522 539 635 31 547 697 584 298 259 364 776 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 789  43 831 721 462 666 821 633 116 681  74 135  69 468  46  49 614  33 576  54 711 466  83 747 530 587  78 725 401
  80 833  52  89 781 758 709 729 504  59  60 167 679 674 146  87  35  34 578 114 796 792 819 797 835  70  30 834  68
  57 683 425 622 701 525 506 816 168 829 141 602 172 134  71  82 798  38 597  79 768 745 240 527 810  66 832 124  51
 198  61  50 161 818 799 757 562  45 495 107 736 806 830  72  73 640 174 254 130 641 767 394 784 780 841  19 151  64
 197 822 179 109 838 811 574 499  32  77 544 528 137 138 160 731 106  92 813 102 737 744 118 663 839 660 203 714  42
  53 175 231 129 561 647 101 686 250 191 143 808 304 764 127 211 639 199 802 173 754 727 193 774 692 208 812 608 247
 220  88 145 183 671 698 734 675 251 164  98 665 817 144 131 189 672 469 783 263 537 264 837 840 621 153 489 195 213
  90 158 123 309 691 756 228 575 152 239 538 824 223 301 205 318 628 204 637 163 723 719 111 801 623 185 624 750 311
 150 227 178 214 603 556 305 687 226 259 518 815 209 316 196 298 656 276 255 649 620 378 272 748 613 274 333 827 551
 315 186 248 260 651 290 313 516 180 261 655 689 267 284 103 353 741 329 828 778 370 253 293 751 452 319 383 762 379
 772 400 321 310 552 273 269 644 268 390 585 300 337 165 411 372 732 332 423 433 347 418 752 324 571 297 464 270 477
 244 358 793 825 503 384 330 573 335 352 678 776 295 327 224 296 584 717 392 237 345 424 221 256 559 339 338 289 215
 200 246 445 381 577 376 275 738 409 317 631 432 726 355 351 814 470 441 312 277 443 306 365 429 461 493 249 326 364
 374 366 299 257 430 416 485 382 479 413 449 359 386 473 804 439 465 346 342 428 294 234 368 387 514 356 786 438 440
 322 399 344 448 492 509 459 350 474 476 410 363 460 340 434 478 406 395 371 360 437 512 526 336 472 361 446 407 422
 447 550 320 357 412 606 393 548 498 435 502 545 444 110 497 117 331 417 521 408 431 508 325 486 369 450 420 414 348
 367 442 458 456 258 427 553 354 467 451 362 501 341 288 565 519 491 511 377 230 292 558 402 454 343 554 600 483 105
 629 471 523 496 176 419 529 229 540 616 507 278 586 534 494 252 210 212 232 487 405 532 539 201 156 457 555 380 564
 396 522 549 634 286 482 475 283 547  76  25  13 481 677 517 500 541 303 543 262 510 531 389  95 323 570 520 533 626
 591 592 696 391 265 590 515 155 569  11 154 463 436 546 579 524  48 580 536 385 302  41 599 314 373 601 166 583 604
 593 635 667 588 133 207 567 202  10 572 328 169  21 581 535 638 307 484 605 718   8 542 589 404 233 670  20 617 566
 610 685 654 650 217 162 662  12 560 611 388 119 645 557 643 746 147 690  36 661 426   5 636 216 187  39 688  67 490
 594 225 728 595 245  29   3 281 619 505 791  47 349 115 653 646 219 693 238 743 563 568 455 206   9 615 803  63 609
 632 702 740  75  56   6 697 397 582 722 630 421 715 735 642  23  94 453 157 618  81 598 733   7  93 139 627  40 794
 676 648 704 705 375 235  16 279 770  28 266 142   4 668 773 771  99 716   2 415 125 222 760 182 488 271 787 282 800
 713  17 680  37  62 194 712  84 749 657 403 241 682 694 612 707 236 703 242 684 112 104 759  55  96 480 171 664 659
 769 190  27 782 334 121  24  14 807 755 652 625 669 136 765 658 596 763 192 790 148 120 218 108  18 720   1 398 809
 823 708 673 695  15 181 132 122 766 788 775 159 188 149 700 513  97 785 280 742 170  31 128 140  58 710 739 243 699
 308 777 126 730  44  86  65 184 836 779 795 287 761 706 753 805 607 820 285 826 113 100  85 177  91 724  26  22 291

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.5726e+06us (= 7572.6ms, 7.5726s)
Wall-clock time (full program): 7.63341e+06us (= 7633.41ms, 7.63341s)
Satisfaction error: 0
Number of search iterations: 1467
Number of local moves: 910 (including on plateau: 393)
Number of local minimum: 77 (including on plateau: 42)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 157 701  77 821   7 779 807 113 566 284 153  40  26 813  59  22 728 152  67 660 524 648 753 820 120 757  72 646 837
 730 408  28 108 726  44 836  64 810  65 739 601 591 818  71  56 766 114  86 603 174 110 401 667 769 725 839 198  62
 124 829 834  57 599  51 772 664 626  81 627 224 100 620 125 196 749  52 163 584 213 122  75 770 528 761 787 822  54
 180 733 814 838 582 465 644 718 550 118 419  34  99 594  82 208 595 170 197 832  91 176 544 777  80 798 105 693  73
 195 826 203  53 827 221 806 751 485 555 714  87 189 737 117  30 767 302 706 225 200 194  36 655 521 828 155 720 104
 797 669 183 229 588 835 670 215 722 164 795  97 199 515 111  84 812  96 158 815  85 145 505 824 201 679 232 678 106
 241 702 227 222 589 242 616 231 654 109 578 811 206 786 192 154 805 234 271 338 150 690 476 647 165 643 228 748 254
 290 661 518 536 736 277 288 830 823 246 808 482 168 533 257 172 299 126 304 161 212 817 340 568 356 671 236 348 146
 329 496 205 239 741 398 173 249 833 245 596 143 819 762 309 376 321 140 637 235 478 369 780 575 327 638 269 320 207
 226 641 252 394 743 344 313 392 760 479 803 237 240 677 255 278 179 287 794 512 372 342 754 316 244 666 243 295 171
 260 651 268 658 530 275 433 262 605 319 430 448 434 343 291 353 366 371 548 280 322 759 362 480 289 543 202 745 382
 334 587 293 156 662 251 317 456 379 312 597 442 303 558 440 793 358 809 281 267 393 663 325 307 368 540 314 298 406
 363 672 841 328 650 378 323 330 441 352 375 220 466 389 381 487 513 407 324 410 377 391 450 347 308 435 446 421 384
 464 311 498 506 525 443 390 403 318 370 508 346 405 432 335 788 364 424 417 469 286 425 387 510 585 282 345 373 300
 386 458 567 351 336 361 349 497 455 481 436 473 420 365 409 297 449 463 337 367 527 422 431 500 411 355 374 494 438
 461 253 402 468 396 520 604 503 444 467 412 517 341 292 127 333 472 557 486 462   6 454 426 470 416 354 460 488 618
 283 383 385 459 413 388 538  15 501 573 502 428 549 539 577 265 359 581 492 483 453 429  24 310 418 399 457 452 554
 531 248 357 211 404  16 541 636 484 504 332 471 427 475 423 564 553 514 400 451 614 509 103 210 606 414 131 545 535
 522 238 395 273  32 415 570 193 511 230 499 640 507 306 579 529 490 166 628 301 493 491 688 532  33 264 447 674 563
 592 187 590 629 542 489 583 598  92 169 178 360 569  68 523 617 562 600 223  88 437  55 526 397 622 115 608 625 565
 551 209 516 633 274 495 571 634  48 621 315 560 615 102 680 556 279 546 639 547  46 712  42  74  38  61 580 642 623
 689  93 474 652  25 668 612 119  83 684  69 576 552 188 687 682 142 609 270 572 683  13 746 559 214 160 574 184 630
 537 162 624 691 331 611  76 619 186 656 138   3 699  18 704 534 272 740  29 645 561 676  10 339 696 218 593 112 729
 765 191 717 305   8  90 116 659 135 586 141 785  39 256 771 703 653 649 744  19 710 185 700 132 758 159 665 123 445
 713 137 632 816 148 755 147 675  27 657 139 686 694 250 721 285  11 716 610  49 791 182 613  35  79 151 698  58 734
 695 149 439  47 276 708  31 607  78 731 263 724 799 204 681 635  14 697  43 247 719 477 121 136 685 350 763 181 709
 784 101   5 692 296 782  50 519 261 602 294 773 768 217 705 804 167 707 792  45 750 781  70  98 825 107  17 134  63
   9 380 776  37 219 130  12 129 266 775 326 259 727 175 801 673  20 747 840 831 752 216 789  60 764  41 738   2 715
   1 133  89 800   4 778  21 128  66 774  23 742 258 177 796 735 144 233 723 711 790 756 732  94 783  95 631 190 802

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.46398e+06us (= 8463.98ms, 8.46398s)
Wall-clock time (full program): 8.52486e+06us (= 8524.86ms, 8.52486s)
Satisfaction error: 0
Number of search iterations: 1537
Number of local moves: 907 (including on plateau: 338)
Number of local minimum: 71 (including on plateau: 38)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 475   4 788 758  48  15 791 168 813 306 736 733 826 310 284 293 162  37  24  12 580 793 721 724 664  46  22 727 349
  78 479 838 757  89 647 265 213 103 376 177   9 806 156 694 179  34 751  38 314 683 746 822 778 181 331 749 127 789
 189  67  60 715 114  74 110 224 241 153  16 787 834 578 802 692 197  90 755  61 738 812 700  43 673 240 799 731 714
 149  92  27   1 484 682 818  76 804 135 272 681 808 111 805 169  19 654 745 226 100 699 824 732  85  20 663 706 622
 603 166 657 803   3 655 206  99  97 627 210 616 665  17 561  21  23 756 730  82 707 542 624 259   8 245 693 761 773
  62 140 705 501 493 115 684  30 104   7 178 783 666  79 716 170 585 661 653  25 604 723 763 249 564 237 710 225 777
  54 228 790 574 674 744 497 424 356 125 154 650 782   5 439 252 101 494 398  42 499 606 138 619 649  65 487 667 696
 514 311 573 607 620  84 636 122 552 628  73 601 516 182 712  55 489 594 536 171 662  10 643 325  66 136 571 652 568
 300 188 632 465 612 165 569 645 105  44 143 548 672 155 359  32 635 767 187 191 217 630 546 591 602 130 768 718 593
 163  11 509 626 589 609 261 220 418 309 289 523 567 157 660 656 488 397 297 350 340 610 532 426 579   6 402 631 584
 219 502 330 702 461 294  35 581 498 466   2 728 587 298 486  39 576 425 400 541  13 500 703 144 644 463 455 547 570
 344 473 590 412  59 453 277 495 420 394  53 422 519 392 386 492 525 399 442  41 481 539 588 600 560 533 434 507 379
 629 460 669 449 490 441  77 369 411 438 295 553 527 483 459 478  68 505 407 253 477  93 456 504 419 534 366 396 503
 353 472 496 429 457 558 381 307 275 448 291 639 362 444 562 385  70 506 388 404 393 395 447 520 335 582 365 491 454
 384 262 464 312 470 530 410 286 549 389 390 348 435 543 382 512 476 485 406 469 368 414 357 329 408 462 452 450 467
 416 437 405 540 522 797 659 271 258 458 559 316 260 401 332 474 403 255 621 556 510 436 443 283 354 341 318 282 302
 334 324 445 373 511 347 440 301 336 355 468 608 326 575 430 451 741 270 421 598 531 358 132 840 428 251 315 339 361
 343 446 360 374 391 482 427 634 337 378 648 832 375 521 554 748 247 413 623 605 243 256 305 345 423 364  64 238 233
 480 676 209 250 377 370 214 231 346 596 528 409 433 417 697 276 304 287 387 798 545 327 211 720 372 323 537 526 363
 784 583 338 263 321 242 779 415 328 809 668 203 290 811 288 740 216  95  81 586 236 229 183 658 704 640 244 333 142
 383 734 185 215 218 513 535 296 820 592 518 320  47 319 239 292 688 708 517 729 794 279 175 196 367 765 193 299 273
 776 614 230 204 274 278 796 677 146 116 678  14 351 752 264 771 200 184 529 613 352 633 223 431 317 725 780 232  49
 772 698 248 269 201 795 760 792 167 770 762 117 281 555 544 322 766 432 160 717 158 313 141  88 133 709 267  80 192
 161 690 235 207 831 839 637 686 123 837 764 121  94 719 195 680 828 118 254 739 126 198 202 152 303 829 342  87 212
 827 380 148 208 835 641 285 754 823 833 815  36  31 599 109 785 176 120 617 551 257 119 280 128 801 565  91 205 190
 759 816 124 713 234 137 164 769 689 701 577 172  52 618  18 566 800 687  56 611 131 194 139 642 646 775 173 174  72
 807 597  50 227 266 129 147 679 524 221 786  63  28 742  26 572 814 246 685 743 737 515  86 726 186 563 841 145  58
 671 538 268 159 830 471 150 750 819  83 508 308  40 675 108 550 825 722  71 371 670 106 774  45 113 691  75 711 107
 180 821 836  96 735 102 199 695 747 615 651  69  29 595  98 557 753 151 781 810  57 134  51 112 625 638  33 222 817

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.41724e+06us (= 6417.24ms, 6.41724s)
Wall-clock time (full program): 6.47834e+06us (= 6478.34ms, 6.47834s)
Satisfaction error: 0
Number of search iterations: 1189
Number of local moves: 751 (including on plateau: 263)
Number of local minimum: 59 (including on plateau: 28)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  74 122 679 804 812 236 763 238 216 401  69 752  68 739  62 738 814 747 742 110 175 234 788 186  83  10 780 765   2
  12 327 719 689 586 723 358  91  33 745  96 806  45 292  49 760 756 781 762 703  34 801  75 104 614 791 378   7  72
 124   8   5 741 714 687 179 257   3 751 112 743 221 222 212 792 755 676 728  41 626 700 187   6 325 746 645 770 233
   9  65 686  76 736 232 424 188 181 810 228 710 350 382 126 772 711 702 731 632 201 675 610 154 303  38 600 754 123
  58 386 171  28 590 650 348 281 163 800 521 404 145  13 101 677 828 631 764 718 604 766 659  31 342 587  67 716 160
 288 158 673 660 636  55 758 425 144 637  97 581 182 150  15 744 596 782 621 750  30 616 722 269 285 582 602  36 115
 554 100 485 641 591 682 647 161 344 655 119 681 177  23 111 769 615 570 663 622  54 620 283 223 208 598  78 633 302
 263 475 693 664 698 639 613  37 147 625 102 551  26 240  59 740 575 611 640  51 192 184 662 505 501 725 272 583 136
 482 205 599 674 530 579 162  88  42 589 419 468 259 113 592 683 573 557 195 297   1 643 737 532  44 561 534 547 504
 142 256 563 508 159 528  93 105 248  43 542 595 525 167 312 735 567 630 667 705  11 576 491 414 535 494 497 665 436
 128 207 553 529 648 559 545 608   4 315 391 509 522 291 550 470 690 488  14 438 185 474 467 316 114 546 422 629 597
 568 217 435 531 451 495  86 456 198 461 457  20 619 146 390 465 264 515 774 428 571 510 335 483 418 493 411 564 448
 543 273 646 539 606 511  60 410 209 447 520 473 379 305 374 507  63 450 355 416 540 538 605 460  57 578 466 565 314
 377 300 373 478 423 218 486 544 262 279 513 459 527 336 476 439 394 453 526 420 518 558 426 443 237 330 455 480 479
 666 258 409 329 477 496 406 462 340 360 299 458 362 396 317 431 585 266 328 204 484 489 415 609 537 437 454 464 471
 295 541 790 395 319 365 333 452 492 287 349 324 352 490 481 268 398 835 388 393 318 397 345 820 337 323 351  64 707
 572 392 421 408 502 560 519 385 652 361 267 353 280 321 617 472 308 322 402 387 399 289 371 444 405 284 252 822 442
 407 359 249 313 346 383 132 654 802 500 433 389 326 668 607 235 293 441 265 823 430 412 369 427 618 180 757 243 148
 332 709 274 247 380 429 753 364 627 213 669 334 445 697 286 225 276 251 594 169 713 307 354 724 694 368 331 244 200
 400 649 282 261 190 376 306 339 548 839 296 836 624 775 294 196 367 241 413 375 785 143 278 298 773 183 670 347 125
 779 635 250 203 127 220 798 771 817 178 155 206 656 776 290 121 230 202 141 214 829 696  61 370 704 271 807  99 603
 566 786 151 310 311 168 574 341 729 417 783 117 657 720 808 275 242 338 231 164 708 834 135 156 357 211 199 260 661
 434 658 191 245 165 533 816 678 503 255 672 384 506 536 706 103 253  16 131 219 730 137 803 440 695 130 239 343 688
 588 733 270 174 304 841 715 691 789 381 246 254 818 463 727 277 229 356 227 153 197 301 193 685 556 157  52 189 644
 811 826  90 309 717  80 118 523 795 320 819 403 577 761 768  22 109  92 134 129 469  18  56 787 838 601 210  95 732
 815 634 120 372  81 671 226 569 825 149 784 194 584 498 612  87  84  77 499 176 514 138 831 166 363 432 794 215 699
 628 680 512 140  50 133 552 701 749 152 653  82 446 517 684  19 562  85 106 805 712  94  79 555 224 638 827 172 651
 516 524 107 833  21  71  73 748 580 173 821  70 797 623 824 170  47  46 139 830 487  32  40 793 449 799  35 840 721
 778 726 813 108  39  89 366 642 767  66 777  53 734 549 759  17  25  48  29 837 692  27 832 809 593 116  24  98 796

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00004e+07us (= 10000.4ms, 10.0004s)
Wall-clock time (full program): 1.00611e+07us (= 10061.1ms, 10.0611s)
Satisfaction error: 2
Number of search iterations: 1999
Number of local moves: 1003 (including on plateau: 551)
Number of local minimum: 120 (including on plateau: 52)
Number of resets: 0
Number of restarts: 0

Problem in row 24: 588 733 270 174 304 841 715 691 789 381 246 254 818 463 727 277 229 356 227 153 197 301 193 685 556 157 52 189 644 => the sum is 12210 rather than 12209
Problem in row 27: 628 680 512 140 50 133 552 701 749 152 653 82 446 517 684 19 562 85 106 805 712 94 79 555 224 638 827 172 651 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 832  77  49 837 104 830 562 841 698 740 717 523  47 765 651  61 477 580 800 125 605 710  85  56 182  75  62  93  25
 804 195 354 825  86 521 291 167  95 665 704 686 147 499 572  79  87 763 556 799 774 385 166 145 121  53 713 840 117
 785  26 836 827 106 805  90 118 205 751 620 276 177 773 614 112  52 758 806 835 829 359  39 250 621  50 230 131 128
 139  98  83 831  40 600 155 801 723 527 654 622  31 788 650 252 736 728 744 163 786 211 708 159 178 199 437 102  64
 797  65 255 352 810 564 148 834 217 656 681 649 201 735 760 142 533 690 197 802 579 161  16 110  74 680 289 153  59
 777 116  80 296 107 464 129 508 693 821 826 762 135 151 755 228 388 807 725 401 823 505  66 235 798 113 270 111 119
 120 238 833 747 338 648 784 458 180 756 787 531  78 194 590 202 372 749 526 328 200 657 792 189 140 353 184 146  89
 124 555 226 263 275 640 269 729 721 653 522 761 207 169 588 149 557 746 573 237 243 223 689 181 791 249 632 122 115
 105 170 274 254 190 818 356 411 668 490 676 695 472 281 808 256 568 781 253 154 320 261 593 703 240 248 452 303 409
 187 220 333 305 334 748 150 646 271 451 493 767 394 287 594 387 536 581 420 196 260 811 482 301 227 114 794 495 425
 288 386 279 294 267 241 436 459 126 509 486 696 285 329 221 383 776 571 726 355 347 757 768 318 342 478 496 266 324
 198 473 144 323 157 304 312 530 258 514 813 602 219 317 371 298 771 316 340 225 393 795 839 339 403 373 822 295 465
 302 277 378 367 257 838 322 487 357 502 247 700 513 360 244 630 828 456 567 627 350 286 431 242 325 284 268 413 351
 282 426 460 485 506 246 300 481 423 442 376 430 349 375 812 369 494 419 272 361 560 399 331 467 606 433 363 405 337
 453 408 343 293 138 397 341 510 540 193 466 319 454 389 624 306 515 440 455 575 529 500 380 381 332 358 410 501 659
 307 434 407 457 299 422 497 492 374 483 468 449  28 406 469 395 558 398 336  15 543 309 400 463 550 534 643 520 553
 259 479 443 103 574 384 615 224 569 344 480 165 639 327 441 563  37 229 503 538 547 525 429 512 565 382 134 554 645
 618 475 471 428 672 173 552 283 427 292 188 518 390 461 136 396  55 370 516 315 549 435 491 474 628 634 174 504 584
 412 548 583 415 402 450 414 208 377 368 313 404 754 542 418 623 183  88 366 626 517 109  68 597 655 439 265 589 476
 488 591 603 511 566 391 559 392 551 432  54  30 446 661 582 631   7  91 215 362 734  32 642 445 570 633  99 447 444
 611 673 438 625 663 234 498 326 598 379 214  12 587  96 251 658 321  14 541 596   5 599 236 604  38 577 507 691 617
  97 687 608 209 644 448 730  22  73  63 210  60 662 664 175 671 524 528 519 612 635  69 245 712 674 561 297 141 669
 539 484 610 586 216 160  23 470 595   3 143 346 424 532  18  27 168 132 666 709 619 546 417 779 692 647 416 707 535
  70 705 697 607 616 222 694  34 641 311 278 203 715  17  35 764 172 130 108 699 137 186 462 421 660 720 576 592 737
 537 637  46  24 732 152 718 206 348  48 127 280 796 629 262 638 308 335 191 731   8  21 702 814  67 743 636 790 683
 578 770  29  19 742 185 679 719 310 158 101 364 809 652  82 793 212  42  81 716  71 489  84 745 678   6 667 609 819
  57 545 820 100 775 156 670 232 213 204 314  45 688 706 239 722 585   1 133  13 192 780 733 817  92 739  51 772 815
 677 701 711 783 824 164 753 601 345 123 218  41 759  10 171 685 714 176   2  58  11 365 684   9 233 752 778 179 682
 766 750 816  43 769   4 162  20 613 330  33 273 803  94  76 789 675 290  72  36  44 724 231 741 727 782 544 738 264

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.00623e+07us (= 10062.3ms, 10.0623s)
Satisfaction error: 3
Number of search iterations: 2056
Number of local moves: 841 (including on plateau: 164)
Number of local minimum: 175 (including on plateau: 24)
Number of resets: 1
Number of restarts: 0

Problem in column 10: 740 665 751 527 656 821 756 653 490 451 509 514 502 442 193 483 344 292 368 432 379 63 3 311 48 158 204 123 330 => the sum is 12208 rather than 12209
Problem in column 21: 605 774 829 786 579 823 200 243 320 260 347 393 350 560 529 543 547 549 517 734 5 635 619 137 8 71 192 11 44 => the sum is 12210 rather than 12209
Problem in diagonal 1: 25 840 230 199 74 235 792 223 320 196 726 316 828 369 624 406 639 518 313 432 598 22 23 222 732 19 820 701 766 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  20 728 763 297  47 824 596  32 518 176 568 140 675 615 256 808 503 103  91  62 786 482 146 653  72 699 142 585 822
 812 832  93 647 238 705 577 144 129  92 672 689 509 794 797 543 136 723 535  45 178 617  41  37 218  61 830 429  86
 156 796 715  49  77 785 250  53 549 148 635 528 139 725 780 611 451 108 214 820 801 533  85  24 802 104 441 695 135
 121 720 150 749 116 679 467 168 739  68 200 268 466 795 702 125 764 152  58  50 834 605 508 706 118 316 138 696 731
 821 778  90  57 151 806 488 595 744 158 697 219 216 803 272 229 462 180 133  25 683 737 179 284 816  84 826 654  22
 169 161 100 279 124 839 621 730 837 114 815 665 743 575 513 813 573 767  33  38 106 690 102 443  69 163 259 770  98
 254 409 206 199  94 601 819 301 732 194 768 698 814 760 587 579 217 177 111 265 648 639 450 275 243 160 290 493 226
 831 373 127 132 220 643 727 841 836 285 717 564 213 686 655 840 337 170 221 166 464 357 187 332 320 198 159 507 101
 305 504 244 263 264 571 738 237 402 212 306 597 173 193 630 175 838 137 341 356 804 835 278 789 185 546 202 772 312
 252 434 383 184  70 624 668 210 516 393 771 287 196 380 719 761 781 303 269 448 729 307 308 811 309 403 231 224 239
 280 406 345 233 340 551 660 240 750 365 833 530 262 294 646 282 779 274 740 271 711 531 235 225 232 317 249 295 333
 171 277 349 512 379 612 469 288 480 299 773 313 319 327 708 419 692 658 311 321 552 298 662 318 370 293 130 444 465
 352 191 230 325 400 468 389 416 652 527 456 823 255 315 661 476 506 828 382 211 330 511 276 242 236 376 452 537 386
 378 398 449 495 415 461 545 539 427 360 423 339 414 286 396 500 620 610 283 825 371 342 145 523 401 372 359 260 273
 361 253 364 351 481 550 331 358 428 432 502 453 485 484 498 347 426 540 459 289 362 483 582 445 536 323 334 367 385
 517 472 477 471 270 350 578  17 505 326 598 622 418 510 394 392 174 433 460 463 424 470 439 638 457 567 368 387  11
 446 474 374 413 454 292 548 542 369 440 395 336 421 338 538 494 671 246 420 300 609 644 574 119 473 437  59 366 417
 388 304 557 491 632 141  82 606 377 526 520 167 155 422 397 442 126 560 261 381 455 641 664 541 649 353 637 181 553
 521 618 634  83 626  66 123 532 363 625   7 492  35 490  48 565 182 519 554 497 190 529 431 524 405 627 608 631 684
 404 486 670 562 584 257 186 487 344 355  73 576 603 479 228 547  23 522 458 583 164 105 475 570 563 501 619 204 581
 496 407 651 435 555 147 251 588   6 629 107 324 569  81 248 592 188 438 558 534  76 650 607 515 694 561 525  18 759
 600 408 628 616 640  40 594  30  99 682 192 688 399 656 215  52 447 436 613 208 112 348 703  44 752 478 591 154 784
 645 769 701 754 666 201 207 714 247 681  64   5 776   4  71  89 412  10 663 724 234   1 685 580 766 659 691 134  56
 556  74 642 599 499 410  96  51  63 593  36 162 674 122 346 113 544 735 788 704 747 241 566   8 602 758 559 209 712
 302 765 700 633 787  78 310 707  26 589 329  88 676 667 391  27 430 514 746 757 390   2 157 153  15 590 710  13 657
 669  54 586  16 798 131 267 809 258 721 183 109 709 117 343 354 335 425 722 807 120 115 829 411 172  21 756 636 736
  14  80 291 741 799  65 266 782 314 726 245 733 748  67  87  95 205  39 680 753 223  79 489 604 783 755 143 716 687
 623  29 678 818 673 281 322 375 296 693  97  43 128 149  28 742 384 775 328 734  46 195 614 677 762 774 110  42 793
 745   9  12 805 810  31  34 817 203 800 227 751  19  75  55 197   3 827 777 572  60 222 792 718 189 713 791 790 165

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00037e+07us (= 10003.7ms, 10.0037s)
Wall-clock time (full program): 1.00646e+07us (= 10064.6ms, 10.0646s)
Satisfaction error: 2
Number of search iterations: 2261
Number of local moves: 867 (including on plateau: 263)
Number of local minimum: 168 (including on plateau: 35)
Number of resets: 1
Number of restarts: 0

Problem in row 10: 252 434 383 184 70 624 668 210 516 393 771 287 196 380 719 761 781 303 269 448 729 307 308 811 309 403 231 224 239 => the sum is 12210 rather than 12209
Problem in row 16: 517 472 477 471 270 350 578 17 505 326 598 622 418 510 394 392 174 433 460 463 424 470 439 638 457 567 368 387 11 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 821  33 123 835 833 810 796 752  74 659 128 524 458  26  42 149 695 721 154  68 792 769 774 474  57  81 450  62  49
 709 103  60 481  45  77  48  65  75 647  59 461 677 122  43 124 719 548  51 794 791 801 697 807 720 777 829 800  79
 787 144  41 603  69 565 806 633  70 523 117 798 662  30  98 160 616 575  61 588 812 735 761 431 803 132 393  82 114
  78  76 109 606 476 712 804  88 269 780 157 401 497  92  66 245 759 221 163 749 809 148 701 529 785 831 692 215 151
 729 241 167 819  99 726 824 522 115 656 158 691 449 207 194 252 451 755 113 740 330 273 377 243 733 646 456  56 187
 169 139 820 560 614 107 196 758 557 640 147 636 530 170 175 235 184 718 270  90 808 707 753 816  37 247 768 118 240
 214 301 314 638 104 675 786 817 220 654 217 778 257 212 193 137 238 388 198 805 298 466 825 477 208 671 652 304 162
 748 344 309 499 432 191 105 828 171 737 173 818 528 206 210 373 228 713 227 288 649 168 754 353 183 665 585 430 294
 129 209 413 722 482 763 355 264 839 236 213 746 728 292 190 239 159 592 337 762 596 197 564 176 108 730 700 332 136
 272 276 343 823 613 224 315 323 346 802 223 226 744 392 352 399 382 282 218 826 250 336 604 693 296 772 384 321 172
 326 300 424 595 764 715 378 253 371 328 380 320 390 146 305 375 307 811 311 291 635 306 711 618 316 275 485 335 438
 278 153 462 605 834 308 324 279 185 261 555 262 827 179 277 412 686 620 327 334 379 232 607 838 680 408 265 293 339
 331 345 222 457 621 259 295 822 365 391 364 188 402 832 363 356 281 370 395 830 317 453 411 790 202 260 455 460 372
 793 813 284 840 237 120 410 369 338 425 199 354 351 246 498 313 340 468 318 534 554 493 396 251 535 389 404 428 509
 360 459 542 362 367 333 470 416 463 492 386 446 547 376 521 403 394 525 200 429 490 303 442 418 445 366 398 506 350
 546 444 426 329 101 280 448 359 518 475 502 543 421 299 472 433 471 577 496 383 519 599 325 166 381 422 385 435 454
 452 484 563 312 156 526 487 417 486 510 512 302 219 437 501 479 589 310 505 504 572 489 289  46 473 464 434 244 447
 488 544 439 205 242 427 601 567 420 625 480 655  35 562 568 409 135  39 550 374 406 690 290 111 608 515 233 584 407
 467 673 602 126 357 576 590 441 696   4 436 570  71 520 573 513 559  73 591 532 361 551 130  55 586 387 119 533 517
 440 538 566  63 358  53  84 397 537  36 587 553  87 642 581 716 630 405 465  23 494 666 469  47 503 527 593 552 597
 676 580 531 287 514 626 483 571  29   7 628 274 507 727 491 617 322 110 657 161  24 511  94 267 679 283 286 645 622
 600 516 641  91 556 508 500 739 687 624 619  21 125 541 443 705 650 155 682 539 423  10  12 100 549  31  44 540 558
 683 631 623 254 134 561 102  64 653 258 688 192 667 714 643 582 644  97 545 140 216 609  16 610  19 347 249 569 699
  22 773 669 164 131 637 698 211 704 145 684  13 297 574 670 702 674 536 681 256  14 639  85  25   9 271 632 664 629
   6 668 612  50 736 116 594 678 771 182 781 611  72 579 734 741 165 230 743 106 204 141 177 706 478  52  58 495 723
 263 799 770  40 837 415  67 266 133 598 578 225 189 766 765 583   5 229 750  80 127  20 285 368 775 797 180 648 651
 661 756   2 234 627  89   1  32 615  28 789 248 231 815 784 779 663 203 776 186  17  15  96 672 745 658 732  38 717
 143 178 783 341 836 724 634 195 760 138 660  11 841 738 710  27 121 757 731 112   3 174 150 419 201 152  93 795 782
  18 689 349 268  34  86   8  83 742 348 788 342 400 767 747 751 142 181 694 685 319 708 414 703  95  54 255 725 814

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00008e+07us (= 10000.8ms, 10.0008s)
Wall-clock time (full program): 1.00617e+07us (= 10061.7ms, 10.0617s)
Satisfaction error: 2
Number of search iterations: 2608
Number of local moves: 976 (including on plateau: 422)
Number of local minimum: 173 (including on plateau: 54)
Number of resets: 1
Number of restarts: 0

Problem in column 11: 128 59 117 157 158 147 217 173 213 223 380 555 364 199 386 502 512 480 436 587 628 619 688 684 781 578 789 660 788 => the sum is 12208 rather than 12209
Problem in column 26: 81 777 132 831 646 247 671 665 730 772 275 408 260 389 366 422 464 515 387 527 283 31 347 271 52 797 658 152 54 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 333 794  40 784 111 806 586 506  49  94  53  10 270 760 818 821 114 791  70 118 516  41 651 495 812 698  63 439 566
 817 775 375 173 121 807  58 717 106 301 108 128 280 160 692  60 100 713 302 751 367 672 133 514 810 264 705 834 366
 756 811 808  42  47 836 795 686 425 835 189 202  79 134 762 207 279 774 230  93 109 127  84 701 707 815 374 219  83
 662 804 180 797 761 802 584 201  92 436 185  37 155 232 661 149 777 770  68 254  80 221  69 732 709 476 583 473 259
 703 768  29 123 824 828  74 720 153 226 785  26 157 665 736 314 143 684 206  61 142 832 170 771 734 169 781 220 165
 606 148 161 318 186 827 150 726 799 837 240 175 183 727 321 192 236 570 793 256 137 385 234 554 839 105 588 803 113
 800 688 326 145  52 658 735 551 324 124 508 562 235 722 130 163 132 204 260 228 826 191 507 653 702 203 753 590 237
 613 152 291 833 247 831 315 421 253 575 136 242 164 172 699 308  66 741 654 685 627 841  88 582 440 255 721 135 122
 363 284 141 252 244 515 320 483 739 825 210  87 209 342 405 369 349 292 838 598 823 822 233 635 248 336 719 265 263
 783 261 578 378 343 640 276 681 615 249 319 299 218 391 323 257 371 387 754 471 348 444 331 829 417 245 258 388 355
 649 178 755 241 408 694 376 419 281 581 656 340 283 445 413 229 103 243 840 668 225 559 359 591 446 310 304 215 398
 782 306 313 457 400 757 274 322 222 296 312 648 434 238 569 184 353 809 372 779 212 362 282 612 328 285 652 399 250
 830 337 740 418 386 465 167 351 360 334 383 338 224 325 268 217 458 381 393 511 556 402 357 752 481 275 347 776 377
 542 373 330 188 468 426 517 278 429 345 499 404 409 435 269 407 512 289 438 335 370 624 533 595 548 352 307 459 528
 277 518 616 195 475 364 453 520 346 430 486 535 487 461 358 469 327 498 365 384 696 295 490 449 267  73 431 389 555
 452 317 513 470 392 422 159 527  13 395 460 637 523 390 380 592 539 412 424 480 329 504 411 479  19 420 587 403 560
 447 394 443 493 474 309 432 605 563 382 519 521 396 472 303 311 502 597 410 197 552 482 534  36   5 379 503 492 456
 448 428 573 271 541 144 610 450 510 455 231 673 416 675 631 650 294 154 198 401 565 525 618  35 557  98 477   2 579
  64 604 484 454 485  14 305 205 491 657  51 522 536 601  91 451 617 350 239 397 690 545 655 156 246 571 577 531 620
  55 567 659 441 466 194 538  99 608 208 497 561 677 501 467 546 547 162   3 433 626 553 611 182 530 437 287  59 695
  77 766 356 564 625 187 638 139  24 746 463 630 660 629 558 488 568 619 679 288   9 622   1  76 174 646 423 509  45
 140 663 596 526 549 119 632 286 750 151 494  62 572 464 603 427 682 117 609  17  50 332 687 213 505 489 196 529 749
 216  71 341 614 415  96  20 171 550  44 711 442 758 576 524 667 730 621 623 129 593 406  25 179 585 633 112 639 718
  56  97  48 769 697 273 693 193 600 110 543 634 798 602 158 644 636 496 599 354 166   7 689 223 500 641 227  27 729
 101  38 767  72  28  22 814 316  67 731 368 642 816 115  78 788  33 131 478 733 738 680 786 177 462 540 146 764 778
 116 298 683  16 706  43  34 723 744 737 773 669  11 544 607 664 743  82 361 645 181 272 589 168  12 104 214 674 796
 125  54 414 712 801   8 819  46 725 211 594 724 813 120  65  81 748 147 678 759 715 138 787 176   6 820  18 262 643
  57  39 574 716 691 107 805 772 671 102 728 714 742  21  23 789 580  90 293 647 710 126 763 300  89 780 190  86   4
 339 676  75 747 266  15  30  95 700 792 708 745 704 290 297 765 670  85  32 537 251 199 532 344  31 790 666 628 200

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00012e+07us (= 10001.2ms, 10.0012s)
Wall-clock time (full program): 1.00638e+07us (= 10063.8ms, 10.0638s)
Satisfaction error: 1
Number of search iterations: 1966
Number of local moves: 790 (including on plateau: 203)
Number of local minimum: 148 (including on plateau: 19)
Number of resets: 0
Number of restarts: 0

Problem in diagonal 0: 333 775 808 797 824 827 735 421 739 249 656 648 224 435 358 592 502 154 239 433 9 332 25 223 462 104 18 86 200 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 349  10 775 650 795 715 647 151 260 137 782 810 131  72 144 474   5  28 790 753 327 191  15 781 754 669 700 133 161
 459 311 734 792 729 180 102  69 728  48 808 696  40 152  37 788 778  26 774 224 652   2  58 806 752 712  12  14 726
 756  29 411 449 697 766 286  33  64  20 602 630  88  70 730 787 757 154 134 758 615 100 767 698 747 190  52 175 644
  22 278 714  54 125 789 367  79 495 174 673 640 475 143 760 744 632 648 585 127 746  80 129  56 645  60 801 403 765
 725  13 684 280  99 741 255 103 691  31 814 576  95 264  21 681 511 124 702 581 705   1 435 709  23 659 784  93 809
 579 235 805 438 609 203 118 168  47 679 740 815 251 128  86 710 721  61  50 608 612 164 676 290 560 146 800 247 663
 610  32 568  90 683  98  51 121 505 187 708 694 119 677 613 699 586 607 552  36 678  16 197 622 406 661 664 111 618
 723 254  97 202 538  49 319 310 604 156 501 535 620 256 446 583 572 108 540 660 751 380 122 689 257 639 524 157 617
 575 283  27 742 464 182 160 178   3 408 563 672 123 577 641 513 643 561 690 603 272 313 163 580 262 483 549 299 680
 578 140 530  19 452 135 382 181 596  63 598 592 159 573 653 471 531 600 451 433 587 605 569 634 183 112 508 249 625
 548 365 516 739 199  38 393 294 476 597 375 719 352 499 491 631 469 555 287 523 291   4 532 432 571 472 413 324 104
 354 218 550 300 493  43 276 232 675 582 711 465 627 502 427 537 626 277  81 487 407 265 503 429 184 420 703 289 546
 599 228 616 498 522  83 543 279 512 358  18 544 362 378 494 479 369 470 514 551 421 588 496 410 172 527 518  76 584
  41 437 504 305 497 439 425 558 396 482 388 359 528 377 317 366 351 554 395 477 412 481 222 510 492 473 383 434 606
 485 399 293 284 486 460 149 454 468 355 448 562 347 490 364 534 400 387 455 635 594 541 426 409 229 343 418 456 338
 339 441 453 507 253 419 466 428 353 340 356 337 384 372 436 397 841 325 398 478 816 539 217 462 461 281 316 431 363
 515 376 417 570 519 415 593 424 386 213 371 445 333 405 389 226 330 500 394 520 334 430 447 307 296 404 833 489 328
 109 642 450 748 342 390 614 467 488 370 484 442 443 315 336 341 295 314 401 318 506 416 361 201 414 392 220 566 824
 783 668 329 138 259 619 649 547 301 837 509 269 223 292 381 385 346 457 374 463 736 322 270 227 320 274 258 623 350
 282 526 302 357 368 657 654 326 298 722 304 250 373 285 348 205 312 275 323 831 245 590 621 306 786 738 210 536 179
 230 556 212 731 379 589 533 839 243 177 423 288 391 268 246 345 440 785 208 233 818 770 209 244 628 225 193 646 360
 267 750 117 762 194 236 704 838 234 402 239 189 685 670 136 206 142 629 241 219 185 797 214 624 564 198 826 638 303
 173 521 170 791 237 248 422 707 716 688 242 207 717 216 830 130 309 204 799 764 114 658 798  92 517 165 120 567  87
 186 732  91 458 332 807 667 636 171 542 147 116 761 686 662 344 167 188 221 331 105 321 525 819 444 693  66 836 155
 107 695 148 139 817 701 771 735 252 769 162  68 655 671 823 145 141 749 682 240   9 793 192 106 308 611  42 633  45
 713 745  94 832 126 545 777 763 110 724  71 153 656 802 266 261  30 480 263  65  85 779 687 150  59 820 271 706 176
 132 759 835  57 720 559  82 743 804 565  75  84 811 591 196  78   8 827   6  67  62 674 772 273 195 553 834 840   7
 215 737 733  39  44 574  77 828 776 803  73  35 768 666 821  96 101 665 825  55 113 794 813 297 158  89 166 637 211
 755 829  34 238 231 529 727 718 557 780  24  17 692 812 115  53 796 651  74 169  11 595 773  46 822 200  25 601 335

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.76107e+06us (= 7761.07ms, 7.76107s)
Wall-clock time (full program): 7.84117e+06us (= 7841.17ms, 7.84117s)
Satisfaction error: 0
Number of search iterations: 1414
Number of local moves: 697 (including on plateau: 216)
Number of local minimum: 96 (including on plateau: 20)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 128 571  31  61 798  91 750  33 643 795 825 785  82 789  66  54 588 748 490 811  46  50  59  81 739  20 703 580 792
 680 531  42 840 105 669 826  47 256 698 725 765  48 691  27 264 197 838  44 717  68 735  34  22 772  21 749  51 747
 492 645 527 131 141 692 773  58 100 793 833 648 154 832 143 139 117 776 545 644  94  85  83 129 819  57 487 606 666
 589 579 339 834 116 741 126 529 112 627 711 839  96 696 196  16  74 723 145 673  39 144  97 771 149 114 802 836 496
 820 628  79  77 801 637 202 138  80 624 835 553 162 720 130 135 284 712 113 656 155 199 104 181 737 238 695 827 687
 815 700 805 166 189 665 171 307 193 237 152 386  99 658 318 106 287 537 303 663 151 251 241 784 787 184 744 671 639
 829 706 163 397  60 716 841 232 177 768 253 614 174 517 134 182 169 719 214 289 109 329 732 191 314  43 823 831 683
 618 782  98 136 147 621 837 828 173 608 224 140 187 625 161 268 250 269 804 662 170 774 245 335 175 107 547 605 813
 710 770 280 246 219 738 306 270 788 324 255 519 258 607 213 263 192 254 808 261 478 310 332 328 215 183 684 758 640
 281 781 290 207 259 230 265 249 292 653 271 515 243 615 252 300 370 273 718 734 319 354 761 358 226 288 578 730 797
 311 745 330 222 343 481 331 391 133 400 756 610 347 551 283 484 312 326 780 727 239 309 348 298 362 428 522 433 407
 194 450 364 344 267 777 498 393 278 221 272 457 305 533 323 812 301 524 419 413 365 418 816 341 293 342 822 372 295
 399 443 285 431 398 277 509 390 350 274 408 714 599 470 464 520 234 432 392 449 810 244 353 327 351 366 557 346 417
 548 325 411 592 220 294 262 359 371 355 345 762 369 463 336 507 381 477 462 368 636 302 316 436 210 414 775 504 409
 406 539 377 321 562 340 373 402 453 516 493 291 395 384 286 468 357 573 405 455 442 334 480 430 503 482 317 458 367
 466 363 440 337 494 394 403 374 438 489 514 383 322 389 361 185 546 446 476 385 508 560 518 412 555 426  84 378 563
 460 410 459 452 538 584 421 485 424 160 554 282 523 380 569 451   2 444 441 388 236 486 556 469 448 561  25 540 461
 471  13  55 422 534 497 425 541 582 604 597  15 415 387 566 454 602   3  12 577 404 559 544 475 564 587 276 447 581
 502  35 427 401 479 483 552 512 601 456  87 164 650 279 532 488 664 499 206   7 603 501 570 423 558 543 313 596  78
 513 103 445 536 591 198  18 434 505 670 495 248 510 225 641 649 500 439 593 233 506  28 550 530 631 594 349 240 235
 204  64 661 526 617  41 667 472   9 465 651 247 416 203 572 521 677 567 652 275 376 660 360 620 586 565 150 195 190
 186 168 576 632 642 590 626  14 525 159 333 172 688 178 511 382 629 715 622 156 574  10 731 753 600 585 211 176  65
 180 260 467 568 685 623 119 528 672 583 633 121 697 137 630 542 713 111  26   1 681 304 721 668 110 674 297  29 429
 157 375 609 701 659  17 616 612 746 127 142 217 647 167 676 679  72 296 707  89 824 689 598   8 678 675  76 228 122
 108 308 654 764  45  53 613 694 266 123 595 729 682 200 638 743 549 146 686 188 809 619 101 657 125 755 124 165  70
  88 158 740 491  86  52 227 635 790  69 148 473 818  36 821 779 817  30 379 704 763 754 708 690  71 693  37 120  32
 179 102 733 724 796 356  92 722 767  24   5  19 742  62 814 728 799  90 315 655 223 709 420 634  56 806 216 209 212
 229 437 736  75 611  95 242 800 702 338   4 474 751 352 752 791 757  11 320  23 778 766 435 705  40 759  38  73 115
 646 218 786 575 807 257 118 760 783  49  93  67 830  63 794 299 769 231 132   6 803 726 396 153 535 699 208 205 201

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.67007e+06us (= 7670.07ms, 7.67007s)
Wall-clock time (full program): 7.72771e+06us (= 7727.71ms, 7.72771s)
Satisfaction error: 0
Number of search iterations: 1646
Number of local moves: 662 (including on plateau: 219)
Number of local minimum: 107 (including on plateau: 26)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 192 814 830 412  69 750 793 442 500 691 124 169 760 199  84 641  46 112  30 833  92 727 787 818 132  56 153 196 757
 662 622 129 736  95 813 661  73 596 825 810  97 729  76  65 498  96 166  37 102 465 238 579  98 150 427 826 841 697
 829 732 712  54 578 557  61 104  51 832 168 414 670 218  39 158  27 144 152 118 673 147 837 730 763 149 835 836 621
 332 325 820 448 155 840  90 122 800 430 803 177 779 200 151 807 131 623 127 347 639 117 805 114 134 143 232 687 831
 156 703 839 100 533 140 225  64  74 608 700 224 715 824  89 704 167 671 275 788 194 176 669  87 789 241 136 655 663
 259 329 181 699 133 777 373 272 816 599 255  72 740 160 254 684 222 812 377 320 276 258 799 817 216 115 355 233 806
 206 311 314 497 179 106 792 474 350 774 173 189 781 101 121 635 267 739 187 161 257 553 838 243 546 496 483 784 652
 733 295 429 297 270 163 307 808 205 758 108 246 640  23 183 737 103 734 107 215 756 721 581 193 249 769 563 214 802
 209 828 301 223  94 211 269 231 637 797 201 171 770 207 445 742 379 795 326 210 334 819 556 217 319 287 811 182 638
 274 539 322 366 510 411 240 330 450 488 197 125 251 268  99 633 328 809 281 723 468 298 685 391 776 591 656 282 418
 227 283 309 518 501 317 289 146 256 560 815 247 514 175 333 188 341 631 834 262 746 398 766 186 665 346 541 434 381
 304 487 250 306 203 195 376 180 242 548 537 552 519 265 466 348 349 508 331 804 680 402 554 382 393 747 531 380 370
 303 356 302 137 422 441 292 481 277 459 419 288 357 431 428 822 378 609 464 236 385 471 565 410 401 693 266 582 534
 447 299 344 178 443 425 392 365 782 521 323 482 526 617 413 318 316 406 228 300 313 494 593 437 386 512 407 438 504
 455 480 212 506 446 361 624 423 415 339 291 290 610 432 408 458 462 417 397 388 493 396 460 280 416 372 375 564 439
 371 352 261 394 449 495 536 543 358 625 484 479 327 486 499 335 555 279 433 420 336 451 285 383 369  75 520 538 571
 551 472 463 619 342 528 128 570 575 337 453 374 569 424 457 476 527 511 517 338 529 522 148 253  26 535 475 473  17
 426 296 585 111 545 590 558 505 573 165 489 461 587 620 119 491 592 444 368 403 260   1 139 549 345 594 390 547 456
 586 244 584 363 525 435 509 572 606 293 135 523  43 576 440 562 360 454 252 634 389 532  33 613 530 542 208 524 142
 567 405 387 213 604 492 735 157 294  16 728 507  45 502 544 353 436 513 559 478  50 664 145 648 273 702 162 744 286
 477 566 470 658 116 399 395 485 191 248 660 666 190 694 583 490 409  71 577 647  35 515 229 603 632 263 204 503 234
 667 550 642 616 657 754 602 707  38  48 710 516 321 362 674 235 646  18 597 568  60  67 184 611 364 698 219  10  68
 651 467 678 105 688 679  49 752  32 202 659 600  81 677 790 113 650 340 681 615 312  63  20  88 701 630 126 588 172
 636 682 574 796 696  86 745 645 278 284   4 705  36 798 741 123 692 315 404 627 649   9 226  41  59 598 580  70 110
 605  57 626 676   3 595 653 755 629 305 690 724  29 589 791  24 717  93 672 607 239 359 109 786  52  78 644  40  62
 719  77  80   8 778  14 711 561 683 159 185 801 170 695 654 130 716 421 726 308 354 618  82 720 689 469  21  58 601
 324 154   7 823 686  15  11 612 743  55 718 643 120 794 767 230 780 367 668 714 731 708  91  25 765 343  42 271   2
  13 220 174 628 725 614 771  47 753  79  19 706  85  34 821  53 768  66 775  31 709 772  44 738 759 540 675 452 138
  28 264 384 722 764   6  22 783   5 164 351 761 245 762 751 221 749 141 827  12 785 713 400 748 310 198 773  83 237

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00025e+07us (= 10002.5ms, 10.0025s)
Wall-clock time (full program): 1.00635e+07us (= 10063.5ms, 10.0635s)
Satisfaction error: 3
Number of search iterations: 2128
Number of local moves: 937 (including on plateau: 429)
Number of local minimum: 140 (including on plateau: 45)
Number of resets: 0
Number of restarts: 0

Problem in row 21: 477 566 470 658 116 399 395 485 191 248 660 666 190 694 583 490 409 71 577 647 35 515 229 603 632 263 204 503 234 => the sum is 12210 rather than 12209
Problem in row 26: 719 77 80 8 778 14 711 561 683 159 185 801 170 695 654 130 716 421 726 308 354 618 82 720 689 469 21 58 601 => the sum is 12208 rather than 12209
Problem in diagonal 1: 757 841 835 143 789 817 838 721 334 723 834 508 378 318 408 486 569 461 135 16 191 707 49 86 3 8 7 220 28 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 641 808 371 810 789 283 763 511 317  31 798 188 802 699  67  40 100 388  55 591 448  98  39  28  52 782 768 216 726
 129 840 831 793 323 167 602 604  46 517 767  68 770 165  50  84 717 485  72 827 111 756 109 496 156 784 148 653 139
 110 157 790 687 713 264 644 200 126 603 648  73 777  26  82 162 694 259 161 499 829 196 632 547 217 727 817 493  76
 137 174 427 482 124 121 729 812 142  90 716  88 820 629 164 112 838 744 365 615 182 703 234  54 198 825 783 822  79
  85 184 232 818 592 370 826 778 237 206 774 125 788 103 215 207 160 646 328 731 101 106 163 422 839 718 745 246 464
 287 189 460 776 153 400 619 773 255 743 141  20 816 469 244  86  93 512 630 824 253 701 143 799 170 704 702  89 158
 364 229 441 501 233 524 620 607 230 133  87  35 623  48 191 116 445 821 136 750 708 837 761 685 128 697 728 329 202
  49 178 710 809 251 612 627 677 168 486 711 210 256 187 325 197 147 361 586 354 324 819 832 628 176 489 248 135 657
 123 212 319 698 278 152 577 199 828 696 341 275 270 241 281 228 276 674 665 581 801 806 155 363 146 712 285 833 194
 150 360 349 618 131 258 823 218 224 836 416 214 359 391 389 262 250 313 636 835 811 203 180 597 127 491 656 282 830
 381 240 384 683 140 134 749 495 345 669 530 545 245 226 340 538 195 652 265 807 410 334 362 291 352 542 492 288 575
 219 209 320 662 269 252 561 373 372 642 223 740 243 295 394 392 274 222 589 407 634 238 338 631 353 533 797 247 780
 834 175 424 303 465 398 292 350 321 390 439 541 376 431 480 213 841 401 532 385 470 421 419 471 378 601 302 263 293
 395 314 297 504 346 527 429 411 440 347 560 438 355 739 413 379 290 299 457 433 444 342 368 503 608 598 272 284 417
 481 474 522 498 399 396 418 404 351 382 435 298 574 454 596 479 478 273 459 397 344 437 277 434 442 286 472 423 326
 468 301 331 516 409 357 458 490 377 426 367 520 590 177 358 374 760 446 508 405 356 402 309 296 531 447 335 483 412
 559 566  25 369 500 521 327  34 386 305 565 546 453 579 443 348 266 647 494 306 526 428 450 467 336 254 455 540 514
 408 415 484 383 775 225 406 558 549 375 190 289 473 380 563 529 552  70 571  62 420 315 567 239 621 242 475 523 550
 573 738  10  29 487 452 333 671 339 562 181 622 515 456 449 676 578 436  17 308 610 551 502 183 684 271 151 488 337
 580 525 107 261 477 430 235 637 572 122 609 613 528 661 584 587 509 171  64 311 393 616 497  59 569 192 505 700  95
 519 614  43 211 466 535 307  44 310 343 462 576 476 747 425 664 506 611 322 300 366 593 461 231 117 268 568 554 570
 403 624 625 104 553 715 118 108 668 304 513 536   4 414 555 633 651  94 650 279 132  91 709 617 507 186 179 655 582
 737 518 758 145 679 451 130  15 585 635   3 332 115 690 766 686 564 105 675  38 640 595  75 154 659  96  32 794 537
 594 714 666  60 557  37  33 510 544  63 316 705  24 707 688 605 643 144 208  65 689 548 736   9 753  66  45 734 746
 691 600 660  11  77 667 138  92 786 539 673 556 733 772 732 695  41  74 534 201 172 280  30 692  19 114 227 815 588
 764 294 583   2 543 785  80  97 387 706   8 719  47  23 781 814  27 672 654 149 236  51 693 755 722 312 670  36 599
 795 741 120 221 762 649 119 626 721  22   5 765  21 682 185 742 606 173 752  81 680 318 681 800 754  71  14 102   1
 720  12 751 249  56 748  53 257 787 267 724 813  57  83 678 638 639 725 805 463  58 220 757 113 803 159  78 166 330
  13 804 169   6 663 779 193 658 796 769   7 759  99 735 771 723  69 791  18 205  61 204 730 645 792  42 260  16 432

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00005e+07us (= 10000.5ms, 10.0005s)
Wall-clock time (full program): 1.00627e+07us (= 10062.7ms, 10.0627s)
Satisfaction error: 2
Number of search iterations: 2242
Number of local moves: 1014 (including on plateau: 480)
Number of local minimum: 139 (including on plateau: 60)
Number of resets: 0
Number of restarts: 0

Problem in column 5: 789 323 713 124 592 153 233 251 278 131 140 269 465 346 399 409 500 775 487 477 466 553 679 557 77 543 762 56 663 => the sum is 12210 rather than 12209
Problem in column 19: 55 72 161 365 328 630 136 586 665 636 265 589 532 457 459 508 494 571 17 64 322 650 675 208 534 654 752 805 18 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 402 698  27 727 816 719 747 267  38 708  84 641 644  34 611 194 731  26 661  31  24 120  23 129 829 830 141 729 578
 800 677  35 811 823 130 588  90 106 781  73 678 542 118 836 796 702 245 577 486  48  25 122  92 835 499  37 119 538
  64 771 801 839 108  68 825 556 498 826 136 827 517 260 716 221 190 640 673 199 602  78 160 175  85 252 763 156 203
 105 818 181 601 191 138 828 790 162 746 144 802 831 151 787 303 547 110 659 246 167 114  66 759 174 834 169 158 628
 626 707 173 810 710 128 432 219 643 685  95 511 213  79 592  88 479 446 681 422 353 295 103 183 815 649 230 721 121
 226 748 182 692 632 819 125 192 686 712 463 567 107 711 737 185 724 178 837 302 217 377  86 146 140 734 244 222 218
 172 372 113 171 143 204 599 813 817 743 137 323 145 779 466 822 516 769 780 232 214 154 821 164 389 600 255 216 280
  69 745 322 361 604 239 306 642 407 633 290 291 253 345 262 207 833 166 768 363 722 824  96  71 109 807 342 757 375
 420 289 281 269 399 668 581 809 841 294 193 206 102 332 792 165 751 111 791 431 799 414 288 237 201 671 184 308 382
 126 472 314 383 808 227 840 454 591 541 223 210 132 564 220 275 670 351 761 795 249 709 344 197 187 211 725 319 311
 491 387 326 307 228 189 700 701 820 299 804 436 229 557 405 277 803 247 782 258 238 263 268 346 279 669 297 370 233
 333 520 364 358 340 243 354 339 523 170 510 704 425 756 575 411 430 832 490 357 384 330 373 325 386 310 403 271 393
 404 341 381 286 481 424 487 412 488 316 324 256 590 623 287 442 449 456 468 212 806 331 278 457 427 276 527 410 570
 235 793 471 347 433 298 391 406 376 304 388 438 428 502 509 627 349 540 453 423 684 415 371 329 368 335 205 390 401
 426 356 507 448 336 460 492 500 519 301 398 417 418 241 441 392 439 374 397 560 484 224 318 594 400 480 489 248 550
  94 465 616 546 380 395 475 444 445 367 539 312 450 429 455 561 338 292 416 566 478 435 359 369 603 440  58 352 530
 452 366 554 493 272 543 503 569 580 208 334 242 620 394 583 379 149 343  44 408  81 506 497 537 462 464 612 518 496
 461 261 482 283 513 320 470 385  80 163 355 689 512 282 350 504 552 240 300 421 309 572 629 477 691 467 559 409 473
 585 259 693 501 534 474 195 548 188 660  14 573 273 305 515 555  97   1 396 508 494 568 625 624 696  47 647 619  15
 571  59 579 533 362 321 495 250 313 161 618 535   8  72 528 621 100 587 152   7 524 694 536 654 574 529 549 630 646
 609  99 589 469 443 476 123  98   5 699 595 505  29  89 705 656 593 525 176  74   2 651 683 610 596 236 650 679 545
 608 521 544 196 664 636 485  57  53 565 562 186 459 231   3 576 139 674 135 717 234  18 551 605 675 265 666 532 652
 615  83 635 584  62 732  40 437  36 653 726 200 531 413  39 706  54  61  13 607 198 563 697 655 723 657 662 778  49
 631 695 378 597 638  93 134 458 215 270 665   4 766 348  33 730 522 613 101  32 514 251 728  42 690 157 451 733 720
 617 115 645 284  30 715 315 274 337 150 637 153 789 558  19  60 317 718   9 614 765 736 775 754  67 133 755 155 713
 762 104 739   6 680 753  52 360 773  41 785 131  20 814 639 648  45 328 117 764 777 209 676 526  22  65 586  17 770
 553 434 419 148  46 672  56 293 752  51 598 483 794 750  76  55 179 786 147 658 296 738 714 741  28 285 112 663 682
 742  11 767  82 168 327 124 582 177  75 735 687 622 838  12 703 257 774 159 772 788 783 797 805  70 127 142  63  21
  10  43  91  77 365 798 447 264 740  87 784 202 760 634  16  50 254 776 266 744 758 812 225 606 688 180 749 667 116

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.00618e+07us (= 10061.8ms, 10.0618s)
Satisfaction error: 2
Number of search iterations: 2474
Number of local moves: 959 (including on plateau: 368)
Number of local minimum: 186 (including on plateau: 43)
Number of resets: 1
Number of restarts: 0

Problem in row 20: 571 59 579 533 362 321 495 250 313 161 618 535 8 72 528 621 100 587 152 7 524 694 536 654 574 529 549 630 646 => the sum is 12208 rather than 12209
Problem in row 28: 742 11 767 82 168 327 124 582 177 75 735 687 622 838 12 703 257 774 159 772 788 783 797 805 70 127 142 63 21 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 646  71  22  37 762 784 601  57 837 448 798  60 152 164 759 143 513 737  81 116 803  34  82 796 818 830  74 633 351
 216 710  73  30 492 665  70  40 733 797 824 373  68  65  55 622 732 603 807 786 793 111  56 540 705 550  75  97 521
 785  47  63 240 369 790 118  54 730 145 707 120  51 212 641 792 445 741 129 146 817 257 592 788 207 781 841 422 179
 717 680  78  41 816 828  84 225 682 141 699 110 112  86 187 698  64 679 157 776 755 208 101 593 789 833 148 764 158
 123 131  39 144 651 812 170  94 753 155 499 160  46  76 805 616 176 767 230 839 821  27 205 835 775 738 172 771 579
 799 151  33 565 262 509 149 263 551 156 656 193 270 209 173 804 254 748 596 644 619 142 135 518 292 765 238 743 772
 311 819 218  88 826 524 750 277 670 139 249 163 150 284 704 132 640 613 389 182 184 154 840 808 115 829 189 740 222
 237 133 516 211 612 618 167 758 631  72 136 357  48 348  96 280 366 760 137 834 605 822 241 607 800 690 747 255 125
 276 735 317 153 806 570 250 769 511 248 626 108 175 364 287 309 274 838 354 165 831 235 410 575 316 372 333 734 268
 327 229 227 285 308 591 267 538 569 825 497 411 475 353 338 242 282 742 197 823 588 219 200 574 306 339 307 349 801
 300 258 827 239 739 645 290 302 666 273 462 578 396 322 213 256 283 545 228 345 192 688 269 275 331 778 431 777 301
 245 243 279 756 360 609 628 261 638 382 714 813 527 310 297 336 544 481 305 217 291 186 399 659 293 318 253 198 667
 556 501 378 832 355 549 286 367 487 434 376 393 344 398 335 530 226 334 649 387 221 420 531 506 490 383 298 371 272
 423 295 498 380 385 484 451 433 496 442 402 391 350 494 281 663 296 388 252 534 485 337 379 374 658 370 361 405 502
 401 467 425 352 413 505 512 660 278 447 271 417 247 377 386 313 602 418 548 312 395 368 535 394 359 533 321 416 537
 456 289 428 342 489 452 375 504 347 330 356 493 568 427 392 453 430 325 397 390 381 332 408 482 421 419 554 483 486
 314 526 412 439 432 320 668 437 457 303 244 529 299 466 426 470  91 204 140 515 558 594 517 480 459 525 384 532 468
 473 424 478 440 610 181 460 491 363 471 180 246 528 507 624 595 441 409  92 454 206 465 643 474 449   1 446 536 522
 701 634 340 639 562 406 463 444 450 435 264  66 436 577 523 510  25 343 407 557 520 519 599 469 650   7 552  44  67
 362 582 542 455 128 214 546 464 304  15 288 404 543 676 584 729 488  12 580 472 572 585 751 114 586 625  89 365 134
 514 695 589 561 323 233 583 590  36 559 495 555 669 458 539 629  58  17 329 443  21 620 547 117 657 461 757 119  35
 611 700 795  85 581 202 201 414   9 623 571 673 600 723   3 223 636 259 429 358 194 328 567 236 564 105 598 606 315
  61 541 566 752 210 102  10 652 319 587 477 749 655 168 632 617 727 215 604 113 661 597  52 294   2 188 782 130 746
 500  16 686 691 100 195 614 687 171 671 576 672 736 573 479 553 768 260 654  31 190 563 191   8  38  42 642 177 725
 104 711 678 675  28   5 728 684 126 709 621 346 720 702 615  93 713 121 780  20  77 627 608 508 162 159 703  79 107
 754 251 696 403 161   4 694 681  24 719  11 809 662 693 783  53  29  13 648 683 122 810 745  18  26 231 653 127 706
 724 635 476 794 174 166 712 326  50 637  98 560 744 674 199 124 647 203 664  14 185 415 106 103 630 234 438 716 761
  95 503 815 814  59  99 677 731 138 722  43 697 836 811  62  83 770 169 718 266  90 820 779  19  87  23 774 400 109
 178 232 715 766 196 147 685   6 183 324  69 763 802 692 791 341 689 265 708 787  32 726 721  45 224  80  49 220 773

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00626e+07us (= 10062.6ms, 10.0626s)
Satisfaction error: 1
Number of search iterations: 2604
Number of local moves: 966 (including on plateau: 322)
Number of local minimum: 214 (including on plateau: 34)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 0: 646 710 63 41 651 509 750 758 511 825 462 813 344 494 386 453 91 409 407 472 21 328 52 8 162 231 438 400 773 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  14 155 125  18   2 122 792 287 129 754  64 657 833 452 229 121 758 743 813 700 759  21 794 798  86 763 174 770 276
 704 293 137 774   5 775 790  24 154 756 782 112 793  67  27  94 783  66 766 755 796 751 690 513 361  55  30 304  52
 726 167 183 391 724 496 289 710 422  89 202 141 473 135  81 785 623 685 680 553 789 713 266 283  41  36  20 725 781
 587 222 744 580 762  76 670 711 182 675   8 279 641 708 209 714 633 684 642 148 240 262 622  57 234  34 667 118 100
 757 210 739 795 356 175 689  12  58 107  63  85 590  15 132 788 437 664 625 358 588 692 609  19  50 731 598 780 487
 683 404 750 645  17 102 630   4 184 694 687 457 691 584  31 566 507 652 302  45 661 236 639 386 163  47 619 105 718
 528 144 784 551 709 729  35   9  37 525 734  97 615 603 197 621 655 677 747 130 719 665 108  40  61  13 147 663 666
  23  33 653 261 606 706 618 173 297  10 686 440 517 635 552 586 697 592 595 282 654  60  43 278 346 656 565   1 644
 495 231 620 306 614 475 579 519  16 423 531  72 520  25 571 503 594 669 591 246 637  90 558 220 270 491 662 120 561
 455 370 597 212 648 268 589 504 536   7 492  26 791 539 533 467 576 441 573  11 570 493 318 228 443 476 554   6 486
 541   3 390 671 604 601 478 511 522  62 617  29 450 567 545 629 518  75  22 131 569 485 596 285  83 631 679 247 668
 760 548 712 301 472 510 514 578 439  51 544 359 721 540 466 280 451  39 383 230 482 477 446  73 299 555 333  84 562
 458 546 311 549 608 428 547 389  59 366 462 295 288  99 369 360 444 506 523 435 459 535 521 367 461 574 355 427 468
 502  38 577 241 593 419 339 542 432 314 538 381 516 529 474 429 448 380 388 379 501 490 336 296 434 344 377 509 463
 368 325 445 497 488 272 362 385 411 313 363 413 357 263 256 634 421 373 312 605 395 582 515 508 526 512 409 410 489
 138 611 352 332 326 371 430 449 250 494 447 837 470 433 418 479 416 331 426 436 425 319 405 483 524 223 387 498 499
 259 394 342 264 800 200 298 375 705 737 347 345 804 227 320 196 753 324 464 696 327 238 341 407 469 406 353 417 401
 274 292 372 624 242 343 284 243 612 310 165 673 315 308 382 415 438 527 505 820 271 787 431 454 396 378 745 300 303
 414 398 253 534 305 364 365 349 600 193 393 563 317 374 249 424 638 321 768 660 412 397 176 682 610 337 338 484 291
 348 676 290 543 281 316 189 351 809 818 453 752 277 255 232 537 181 350 215 824 248 746 213 560 384 340 267 650 104
 188 828 376 550 322 400 269 208 403 602 150 819 185 834 647 354 273 221 335 693 702 187 260 564 643 399 201 460 136
 204 831  98 152 286 334 307 738 810 607 244 672 133 140 681 328 166 226 224 688 225 799 420 568 701 771 156 585 115
 203 802 199 500 216 153 822 816 720 252 168 651 330 826 481 172 159 146  91 695 233 703 742 640 613 254 205 239 178
 557 740 162 807 214 829 206 258 811 727 217 177 180 716 329 265 251 808 309 735  68 103 164 392 532 674  77 767 134
 190 649 207 106 817 192 158 211 707 733 786 736  88 575 812 139 169 145 143 465  53 275 237 769 572 776 805 581 113
 123 715  79 402 823 179 111 699 294 124 772 659  70 198 778 219  46 806  80 109  74 245 839 797 730 149 830 480 779
 114 530 832 257 151 821 626 678 732 119 442 698  87 161 658 171  92 117 456 194 235 116 599 741 628 616  42 471 825
 835 408  65 218  32 836 127 728 323 583 803 157 101 765 801 840  54  82  71 142  69 632 126 723 722 191 841 838  96
 761 646 815 128 186 717  95 748 556 764  49 627  56 636 749  93  28 559 160  44  48 110 195  78 827 777 773 170 814

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00019e+07us (= 10001.9ms, 10.0019s)
Wall-clock time (full program): 1.00632e+07us (= 10063.2ms, 10.0632s)
Satisfaction error: 2
Number of search iterations: 2188
Number of local moves: 952 (including on plateau: 415)
Number of local minimum: 164 (including on plateau: 48)
Number of resets: 1
Number of restarts: 0

Problem in column 7: 792 790 289 670 689 630 35 618 579 589 478 514 547 339 362 430 298 284 365 189 269 307 822 206 158 111 626 127 95 => the sum is 12208 rather than 12209
Problem in column 9: 129 154 422 182 58 184 37 297 16 536 522 439 59 432 411 250 705 612 600 809 403 810 720 811 707 294 732 323 556 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 106 191 225 195 141  35 718 135 473 543 519  77  52 824 720 823 129 599 750 663 149 646 770 837  34  63 809 143 840
 602 247 376  96  74  50 643 506 726  68 164 631 166 787 684 801 712  94 637 766 830 176  78 555  33  27 836 128 716
 175 520 832 165  66  36 754 160 773  69 136 790  79 199 698 796 675 580 782 668 186 838 554 171  39 131 522 174 641
 147 573 800 749  41  61 585 134 561  56 264 654  59 839 281  99  93 118 404 409 645 808 768 678 104 781 784  55 659
 215 277  95 707 114 157 144 189 680  90  62 725  89 816 701 518 815 566 756 799 107 831 448 370 835 217  97  43 746
 124 568 547 115 263 841 775 172 792 377 110 512 177 291 697 300 658 807 605 627 101 833 213 266 145 359 210  71 653
 779 595 249 731 201 294 178 825 822 200  82 771 212 316 688 126 769 179 623 694 216 183 753 708 153 125 146 156 435
 151 578 591 761 206  72 276 436 721 374 105 805  91 221 516 238 748 288 382 742 227 633 275 700 331 287 311 366 777
 827 556 652 234  37 455 267 760 630 133 298 638  75 245 342 181 632 301 608 411 791 203 233 786 341 235 271 384 683
 230 408 593 254 257 261 772 269 324 834 634 715 224 810 348 268 204 274 317 422 284 687 734 774 120 334 169 406 283
 828 540 358 237 113 326 660 323 302 511 559 797 405 320 463 255 590 219 598 620 372 242 394 686 400 290 194 251 356
 349 758 432 308 250 259 262 327 368 802 296 571 534 337 329 292 303 783 487 346 352 425 351 803 398 550 239 403 295
 459 727 357 392 347 304 360 381 319 279 430 579 722 309 444 241 743 285 214 814 335 180 410 804 427 270 315 369 393
 461 451 438 350 528 460 440 472 407 402 364 481 501 542 385 416 524 297 322 260 282 314 426 378 452 535 490 353 478
 496 549 504 484 624 321 537 390 401 375 299 363 354 424 336 389 391 236 306 491 365 414 388 305 541 489 457 486 494
 330 119 431 380 397 338 362 515 488 469 480 265 581 361 614 514 467 443 325 367 507 498 412 465 458 273 310 477 563
 531 100 419 545 437 470 510 530 558 280 476 355 232 421 379 344 193 607 420 551 396 449 538 140 532 447 332 492 525
 475 109 456 482 500 693 508 572 415 493 340 185 428 505 417 536 333 108 533 587 453 575 655  51  58 521 479 552 190
  44 111  42 582 639 450 395 656 223 567  16 103 513 423 589 565 594 544 606 466 562 548  49 123 495 705 603 439 557
 676 278 159 584 429 625  84 248 526  46 592  92 619 499 546 418  60 618 188 371 672 596 577  98 502 399 523 601 583
 636 137 244 483 564 681  25 755 127 517 735 387 626 744  12 611   4 576 454   2 441 182   7 207 695 780 745 648 184
 597 170 497 446 728 650  20 122  88 553 474 220 689 503 629 615  53  21 471  17 729 464 609 205 765 762 529 462 121
 616 138 229 719 671 667  67 586 649 622 386 117 717  40 102 445  76 696  31 313 468 588  45 256 691 736 692 679 167
 665 286 318  85 789 612 222 647 130 307 747 293 640 258  11 644 699 778 434 162 560   5 664  65  48 604 817 704  15
 752 383 574 651 732 569 767 666  83 798 600 163 312 690 173 662  13  81  64 272 527 112 209  57 776 154 539 669 161
 413 485 677   3 826 741 702  18 139 208 806 158 795  47 673 116 289 703 246 253 617 196 228 628 706  30 674 818  14
 142 821   1 682 685 819 509 339  86 730 710 192 764   9 152 657   8 621 570  10 243 155 610 442 670 724  24 811  23
 345 820 328 757 738 168 613 343 187 793 737 373 813 231 132 252 723 759   6  80  29 202 661 433 709 642  73 240  22
  38 714 785  32 812 794  54 733 211 713 788 197 740 198 148  87 711  28  70  26 763 226 150 218 751 739  19 829 635

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.99055e+06us (= 7990.55ms, 7.99055s)
Wall-clock time (full program): 8.05154e+06us (= 8051.54ms, 8.05154s)
Satisfaction error: 0
Number of search iterations: 1532
Number of local moves: 619 (including on plateau: 252)
Number of local minimum: 113 (including on plateau: 36)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 405 136 110 727 719 419 840 553  28 142 752  64 808 128 544 467 668 112  15 152  89  66 586 788 835 314  83 820 839
 775 816 106 120 745 263 697 305  20 132 785 824 683  48 599 684 584  54  26 739 130 122 645 585 827 117 195 499  84
 766 831 146 817 822 767 100 324  67 662 617 109 124 729  91 748 154  31 187 701 208  56 624 126 841 771 160 531  99
 725 731  49 144 699 693 688 102 153 640 720 557 322  61  68 698 202 178 712 760  38 139 167 358 647 794 118 654 392
 648 622 180  55 635 157 182 646 224 198 755 143 629 103 592 751 653 179 270 696 234  93 271 746 707 728 236 779  97
 828 189 206 355 801 836 116 335  32 215 777 264 830 119 545 791 756 181 162 834 134 123 587 829 165 384 246 444 125
 711 733  95 293 807 550 690 161 170 797 614  60 717 256 709 140 742 158 222 297 194 321 505 558 287 276 220 660 266
 737 171 193 184 402 702 240 323 255 336 232  63 666 209 811 191 722 177 114 721 185 326 759 795 454 837 221 675 508
 497 288 333 230 510 212 284 283 832 823 156 169 714 257 678 327 747 337 341 700 364 301 239 532 329 294 445 815 172
 611 248 188 210 494 708 342 391 343 825 251 231 833 290 562 310 649 183  29 664 249 213 804 407 278 773 226 636 261
 796 313 366 524 485 223 254 344 370 410 141 280 495 393 818 509 686 307 518 295 148 285 332 526 259 682 345 774 331
 627 472 546 579 604 317 533 238 427 273 350 406 216 334 732 300 330 420 291 244 375 361 388 821 428 353 404 500 340
 422 328 357 409 453 575 471 606 486 199 435 360 233 235 715 279 462 219 349 311 663 318 398 600 316 642 473 667 228
 395 348 501 385 609 356 203 354 338 227 434 380 432 656 469 368 389 346 411 643 625 440 376 704 430 229 315 397 450
 431 351 782 483 512 528 502 347 396 367 416 441 362 413 458 320 442 452 108 296 309 457 373 456 439 298 383 610 477
 418 498 478 446 414 464 274 491 379 517 306 308 463 390 516 352 548 448 372 265 438 365 443 549 363 423 374 387 520
 403 399 560 449 186 421 488   7 474 460 554 567 543 574 561 459 429 522 594 369 466 437 400 571  50  85 541 269 371
 378 597 381 672 252 581 174 481 408 687 436 282 401 492 111 658 589 424 258 426 523  80 591   3 461 620 513 241 489
 479 556 504 519 250 196 536 480 582 101 530 496 613 394  69 559  81 555 490 447 569 612 262   1 542 286 621 218 661
  11 534 470 537 268 253 281 511 535  23 598 638 205 515 200 565 493 577 514 299 468 669 689 159 525 455 583  65 568
  96 590 527 506 149 302 507 637  36 676 639 570 168 503  73 564 325 674 655 628 243 659 718 359 129  72 578 150 476
  24 601 681 619 304  87 819  27 633 580  77 588  40 547 176 679  17 705 608  52 529 602  43 415 762 339 634 277 744
  58 616 812 741 207 135  98 603 487 734 703  13  70 482 242   2 292 595 433  45 673 806  75 386 671 538 765 217 710
  59 105 563 665  41 695 630 572 623  82 484 800 303 540 214 651 417 539 644  88 650 776 138 275 607 173   8 175 692
   6 552 272 670 319  35 201 770 769 768  92 576 145 798 260 566 107 826 724  47 787 694  33  44  21 618 573 164 772
  30  22 805  19  86 465 615 753 802 736 115 757 225 632 412  90 104 713 789  25 764 735 204 151  42 605 740 121 652
  53   4 475  10  78 521 750 790 783 211 155 786 267 738 113 131 237 691 781 706 761 743 749   9 641 289 596 127  14
  94 133 838  57 166 197 657 763 799  76  39 723  71 780 626  34 247 793 814 382 677 730  18 451  79 163 803 190 809
 726 425 685 784 192 551  37  12 758 312  46 754 631 593 245  16 137 813 778 377 716 680 792   5  74  51 810 147  62

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00014e+07us (= 10001.4ms, 10.0014s)
Wall-clock time (full program): 1.00621e+07us (= 10062.1ms, 10.0621s)
Satisfaction error: 2
Number of search iterations: 2037
Number of local moves: 871 (including on plateau: 146)
Number of local minimum: 159 (including on plateau: 21)
Number of resets: 1
Number of restarts: 0

Problem in row 14: 395 348 501 385 609 356 203 354 338 227 434 380 432 656 469 368 389 346 411 643 625 440 376 704 430 229 315 397 450 => the sum is 12210 rather than 12209
Problem in row 20: 11 534 470 537 268 253 281 511 535 23 598 638 205 515 200 565 493 577 514 299 468 669 689 159 525 455 583 65 568 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 329 554 398 686 180 102 649 599 110 344  84 731 519 223 756 152 557 766 774 100 743 208 492  57  76   1 701 823 495
 747 558 234 289 139  18 654 161 301 295  69 693 764 695 822  49 259  12 737 204 786 372 647 232   2 674 718 807 271
 697 175  22 178 187 321 768 711 755 708 734 741  21 691 814 218 194 286 727 270 782  81   7  72  68  52 343 775 811
 797 237 684 154  98 698 373 714 653 645 648 752  10 247 728  77 265 773 795 121 671  43  54  47 137 325 103 678 682
 615  93 505 345   6  60 624 723 736  59 196 710 732  15 721 107 564 681 614 176 662  37 672 159  48 635 729 746 239
 534   9 195  55  62  23 630 206 722 317 709 626 673  99 656 155 692 273 687 707 719 127 385 324 506 716 663  26 713
 793 284 209  97 164 144 315 730 706 198 118 410 688 251 590  95 162 751 669 704 690 163 348 224 566 689 676 277 498
 725  16 168  31  71 702 618  35 600 562 621 642 585 625 632  17 142 668 541 720 567 226  11 214 591 601 531 643 104
 556  83  32 482  79 657 641 496 619 151 733 504 587  13 463 609 447 631 511 646  44 487 565 189 469 608 667  74 166
 633  28  41 230  19 683 470 572 428   4 448 607 652 639 742 542 483 437 529  34 578 547 510  87 467 443 573 412 371
 516 250 525 553 298 583 471 365 582   3 392 640 579 536 634 460  61 520   5 604 617 473 563 249 527 399 593  53 158
 476 497   8 211 426  89 603 122 589 532 414 514 433 306 512 449 508 338 493 623 461 474 494 220 439 637 530 533 278
 415 549 307 436 268 390 546 456 660 429  51 538 347 555 501 383 336 584 627  20 387 314 423 246 586 445 431 524 455
 517 322 377 568 421 440 363  90 300 478 581 368 262 407 523 613 409 490 576 540 465 485 248 466 452 596  66 384 402
 491 462 479 427 441 535 521 559 605 416 353 450 351 424 379 388 513 457 355 352 464 393 411 126 507 287 310 404 349
 354 305 499 389 545 500 293 290 454 408 367 340 312 335 451 341 304 366 488 282 386 376 459 522 824 391 800 319 509
 468 444 430 370 661 241 264 434 472 526 480 518 375 362 197 326 419 374 453 346 361 231 772 597 280 252 438 337 781
 432 477 318 369 420 258 380 401 787 418 381 644 274 302 400 266 575 839 294 378 257 356 243 610 229 779 417 503 202
 435 425 740 694 796 358 245 394 279 790 594 227 296 297 357 261 327 288 148 395 334 406 308 788 269 254 332 405 767
 403 569 580 622 502 203 213 442 219 841 228 303 276 260 364 446 777 183 299 291 320 735 655 574 281 238 360 359 666
 235 760 812 761 629 267 221 339 292 763 397 233 382 758 116 776 809 350 112 129 330 263 225 550 333 275 309 133 650
 313 780 783 595 836 323 216 832 413 762 188 331 255 236 124 192 816 544 200 106 240 801 199 551 602 167 316 177 311
 157 570 659 160 802 272 794 190 285 638 628 119 138 792 128 831 754 207 179 724 181 253 789 561 552 256  45 396 149
 143 825 620 817 798 805 156 651 101 114 174 135 169 815 215 840 703 328 342 838 201 757 120 738 242 117 212  86 147
 130 700 577 739 696 665  14 458 140 598 712 244 150 131  94 680 205  29  70 543 171 791 677 606 833 785  65 191 515
  58 489 528 182 611 636 283 105 153 481 172  88 717 705 108 744 193 111 539 837  82 769  92 803 804 834 184 826  75
 113 685 616 818 612 699 808 170  39  40 146  24 771 185  73 748 222 210 125 726 115 571 217 820 670 136 829 484 537
  63 475 830 132 658 759  30 165  36 141 821  50 835 745  42 765  91 675 186 715 486 806 810 827 753  25 123  85  80
  64 588  33 819 784 778  46 799 173 548 770  27  56 560  67 679 422  38 134  78 109 664 813 750  96 592 145 749 828

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.00626e+07us (= 10062.6ms, 10.0626s)
Satisfaction error: 1
Number of search iterations: 2167
Number of local moves: 757 (including on plateau: 229)
Number of local minimum: 165 (including on plateau: 27)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 1: 495 807 343 325 48 324 348 226 44 34 5 338 336 613 379 335 375 644 594 841 292 832 794 805 696 182 616 475 64 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 378 470  56  44 790 822 154 462 146  76 671  48  49 184 781 751 580 107 151 644  94  40 688 641 752 839 174 810 806
 565 823  33  89 803 610 682  58 525 814 705  23 152 253 159 818 745  91  62 176 827  25 735 101 689 693  78 821  54
 312 577 153 805 755 527 720 119  61 143 700 321 111 104 166 782 583  80 622  86 642  28 607 736 796  88 706 837  43
 792 476 757 802 813 816 175  47  82 172 681 126 122 643 733 147 715 115 140 144  83 572 216 291 770 809  52 834  84
 574 585 155  71 835 102 741  97 158 163 783 672 108 646 838 128 727 169 125  63 203 134 840 259 562 817 709 728 217
 615 587 249 228 684 743 695 451 193 110 800 618  95 669 257 162 229 192 215 612 199 173 373 773 653 746 139 588 161
 784 532 267 289 182 744 841 233 787 116 825 283  87 776 261 118 762 141 209 614 164 200 676 145 725 363 186 680 219
 282 726  67 298 791 637 258 786 121  90 341 171 236 651 188 828 760 332 196 708 177 687 379 808 555 189 288 479 180
 603 488 132 178 627 287 602 354 355 440 560 296 307 750 301 165 271 302 469 266 831 198 819 328 545 319 304 789 323
 758 701 213 276 277 381 661 220 386 453 490 201 447 392 433 207 357 225 295 780 247 811 232 318 582 662 251 712 241
 305 300 807 275 245 365 435 327 384 322 568 779 345 777 105 461 265 197 763 388 347 272 294 829 531 227 370 489 437
 608 538 208 335 691 360 772 331 344 413 311 419 457 231 396 548 352 798 252 351 361 212 278 248 765 414 350 606 260
 446 824 673 400 313 314 421 383 492 168 482 559 395 325 385 387 285 434 398 279 330 455 244 409 467 346 339 836 420
 423 832 237 376 523 280 338 503 464 369 372 442 374 491 458 306 416 297 274 293 459 290 348 595 483 576 308 512 570
 430 431 429 478 356 377 454 336 456 487 441 494 481 407 284 334 324 405 389 436 493 394 404 471 533 427 444 399 415
 486 349 498 100 465 410 234 448 449 443 501 402 326 502 542 340 526 452 445 438 504 417 368 403 382 485 418 320 556
 507 222 544 475 500 113 569 566 499 281 579 406 316 390 353 460 558 541 393 468 194 358 495 616 239 263 511 367 426
 484 477 508 599 522 317 535 563 425 516 221  65 428 514 342 401 432 534 408 127 505 509 515 411 214 450 660   3 524
 564 286 633 649 124 573 250 537 473 631  81 397 424 191 623 536  72 634  38 362 519 601 529 246 238 575 589 242 592
 210 218 657 510 472 540 337 496 439 136 135  92 635 187 593 597 596 517 528  27 594 590 513 581 206 474 520  55 754
  21 204 620 617 150  42 106 518  22 600 391 628 670 195 578 539 659 654 717 223  70 550 584 554 160 549 714 303 571
  51 226 552 598 167  96 648  18 497 739 309 652 530 205 567 718 666 619 658 586 677   8 123 463 211 130 636 268 591
 262 114 632 547  53 663  20 690 650 778 557 256 729 343 655 546  13 638 466 624 551 553 640  41  60 157 480  79 412
  64 170 665 761  39   1 605 721 747 702  15  35 678  46 694 732 183 310 711 699 656 359 181   2 364 675 697  29 668
  37  75 698 716  66 375 243 639 704 759  74 738 645 766  59 696 683 609 299 422 667 604 156  77  45  36 686   9 626
 269 292  11  16 179 120  34 710 801 797  73 788 707 543 629  85  99 768 812 240 742 826 190 270  31 740 630  14 793
 764   5 333 109 148 722 625 561 679 795 185 719 785 149 685 137 129 703 621 647  69 820 254 749  98  10   4  12 692
 235 366 748 794  26 730  30 264 117 664 255 775 756 767   6  50  19 734 830 737 273 724   7 713 224  93 833 371  68
 380 315 674 774 613 142  24 771 753  32 103 804 815 112 138 230 202 611 723 769 731 799 521 131 329  57 133  17 506

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00615e+07us (= 10061.5ms, 10.0615s)
Satisfaction error: 4
Number of search iterations: 2247
Number of local moves: 760 (including on plateau: 305)
Number of local minimum: 177 (including on plateau: 30)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 378 470 56 44 790 822 154 462 146 76 671 48 49 184 781 751 580 107 151 644 94 40 688 641 752 839 174 810 806 => the sum is 12208 rather than 12209
Problem in row 3: 312 577 153 805 755 527 720 119 61 143 700 321 111 104 166 782 583 80 622 86 642 28 607 736 796 88 706 837 43 => the sum is 12210 rather than 12209
Problem in column 13: 49 152 111 122 108 95 87 236 307 447 345 457 395 374 481 326 316 428 424 635 670 530 729 678 645 707 785 756 815 => the sum is 12210 rather than 12209
Problem in column 17: 580 745 583 715 727 229 762 760 271 357 265 352 285 416 324 526 558 432 72 596 659 666 13 183 683 99 129 19 202 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 814 181 742 161 675 164  72 584 810 691 143  87 580 151 453 666 747  57 835 157 781 197 135 769 127  46 832 530  22
  54 199 799 826 142 155 667 652  70 727 106  52 242 795 648  60 628  67 183 829 121 768  65 787 830 144 696 831  66
  97 149 112  93 749 839  94 686  78 728 173 167 513 824 204 820 762  62 156 125 809 170  44 672 698  73 802 737 773
 152 110 491  53 743  32  80 661  86 740 162  92 699 658 641  83 770  82 310 834  39 745  84 593 841 428 794 526 680
 250 252 544  37 763 129 134 825 216 663 212 724 612 833 735 150 647  59 744 184  71 103 317 813 804 228 706 175 279
 114 434 650 751 485 797 139 714 177 201  99  61 709 176 808  79 818 232 796 189 821 421  30 362 261 158 708 828 191
 133 276 730 190 229 225 231 550 335 823 226 117 777 258 836 360 815 446 487 102 603 721 822 657 215 253 302 210 280
 185 385 733 542 631 188 219 303 118 778 221 213 582 703 608 365 186 529 389 254 619 827 267 606 272 180 240 266 800
 324 645 719 392 501 306  81 817 788 452 390 165 649 202 705 388 372 422 262 321 840 193 115 798 311 239 351 198 263
 361 811 669 296 256 275 681 819 159 415 726 146 370 357 405 319 307 166 387 780 289 241 577 431 341 353 339 685 248
 352 678 653 659 286 356 288 364 269 332 838 375 755 284 285 287 562 450 437 467 741 206 251 601 518 246 305 147 217
 234 495 812 230 539 207 282 764 236 172 408 690 624 274 244 331 355 806 551 300 553 340 237 614 427 344 500 381 259
 358 555 391 359 668 227 304 477 478 337 558 273 739 281 610 419 643 423 398 345 343 525 295 395 371 479 315 297 346
 380 397 384 543 411 396 463 400 323 293 249 511 559 517 313 510 537 326 369 512 373 527 348 465 540 363 209 412 579
 347 404 407 260 386 393 376 435 489 488 214 475 499 394 401 455 354 410 443 531 566 506 472 536 409 270 264 541 484
 414 460 271 557 403 546 179 441 538 342 439 366 596 639 290 336 416 494 502 325 308 283 367 454 368 378 490 515 492
 418  47 328 505 108 374 294 520 312 547 471 430  19 583 459 382 470 585 464 622 438 440 457 291 458 426 618 575 568
 447 413 320 523 498 588 635 203 638 587 535 301 174 432 560 448 521  45 316 509  25 119 646 309 377 590 469 379 602
 725 109 330 480 406 486 572 519 456 496 224 563 235 497 425 461 571 481  29 565 468 664 573 322 466 449  64 567   6
 578 318 137  77 278 574 451 483 493 120 613 533  96 605 524 615 424 548 516 436 569 564 655  90 433 722 124  35 598
 609 298 141  58 617 637 704  56 211 420 556 591 126 616  27 444  20 334 625 522 707 507 757 148 694 607 594  68 514
 549 105 292 634  10 476 640  11 621 532 195 620 474 473 200  51 570 604 597 629 111 160 623 277 508 534 632 349 732
 772 399 171 383   9 630 238  31 576 299 552 327  63 528 192 592 245 774 689 752 503  48 642 233 713 462 695 688   4
 417 746 633 561 586 123 754  85 718  75 589 671 100  17 599 684  49 785  69  24  74 710 482   3 674 581 654  12 734
 712 662 140 784   1 715 600  40 627 132 786 656 104 145 218 660  98 711 702 736 168 665 220 442  38 687 116 636   8
 776 402  76   2 265 792 651 178 720 545 782 679 504  89 182 626 122 771  16  42 333 716 611  55  14 717 128 692 723
 682 748  34 803 701 779 738 223 222  50 801 756 350 697 107 136  33 790 154  26 247  95 731 208  41 816 169 758 314
 750 766 257 683 163 793 837 255 670  28 673 761 130 138 101 693 131  21 760 338  13 554 791 187  15 677  88 153 783
 205 765 243 767 700   7 805 113 775 196 268 807 329  43 429 789  36 729  23 753 676 194 595  91 445 759   5  18 644

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00018e+07us (= 10001.8ms, 10.0018s)
Wall-clock time (full program): 1.00628e+07us (= 10062.8ms, 10.0628s)
Satisfaction error: 2
Number of search iterations: 1926
Number of local moves: 552 (including on plateau: 116)
Number of local minimum: 163 (including on plateau: 11)
Number of resets: 1
Number of restarts: 0

Problem in row 21: 609 298 141 58 617 637 704 56 211 420 556 591 126 616 27 444 20 334 625 522 707 507 757 148 694 607 594 68 514 => the sum is 12208 rather than 12209
Problem in row 23: 772 399 171 383 9 630 238 31 576 299 552 327 63 528 192 592 245 774 689 752 503 48 642 233 713 462 695 688 4 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 809 666 742  69 673 440 416 167 122 160  82  55  33  89 628 795  48 101 137 712 619  84 822 746  58 739 814 542 841
 515 474 823  70 522 234  51  34  37 764 152 124 131  54 731 149 779  39 751 796 839 112 792 744  72 602 776 831 211
 578 497 825 838 562 169  64 827 171 127 153  94  31  75 754  92 608 275 530 527 139  44 829 802 629 415 591 808 155
 597 501 775 446 618 423  91 772  93 255  87  43 106  90 672 800 308 212 718 624 224  53 684 828  66 803 346 755 219
 654 836 830 125 832 244 118  46  40  60 606  41 292 770 607 218 196 195 565 774 108 226 500 835 834 417 763 363 114
 659 837 789 192 679 783 170 819 230 132 181 140 325 134 707 119 696  88 740 703 183  67 485 778 190 185 291 680 227
 675 793 285 252 713  83 826 120 168 197  86 475 189 296 733 157 468 514 760 697 333 225 314 698 200 248 734 749 221
 262 736 330 336 717 158 421 726 156 616 209 186 281 299 563 322 372 301 681 805 266 824 759 617 210 198 365 247 246
 645 534 206 317 682 146 172 840 810 193 287 180 260 288 737 164 634 341 271 732 304 290 425 633 207 636 694 250 331
 254 516 232 427 801 123 237 208 350 797 142 370 261 289 496 184 359 548 273 771 387 594 641 639 343 644 434 544 345
 295 794 204 367 710 358 229 126 482 277 813  76 235 508 228 334 165 339 677 556 253 396 429 657 408 806 782 356 349
 319 414 394 401 213 669 692 762 505 382 147 352 383 300 706 306 686 109 240 453 323 238 353 690 340 558 689 159 426
 685 307 241 452 272 338 298 572 259 465 355 480 386 344 543 833 342 269 379 576 529 263 328 798 553 402 466 216 258
 431 297 463 324 457 329 391 491 506 600 280 309 568 175 294 374 176 517 242 404 390 555 490 541 464 437 791 368 545
 525 420 483 441 454 512 378 398 302 424 223 566 632 389 377 455 436 337 357 481 510 460 444 313 360 458 397 316 361
 449 282 569 400 459 582 494 537 256  25 443 406 584 470 151 467 581 575 381 557 473 407 493 445 432 371  14 354 552
 663 570 283 409 413 448 395 503 683 412 540 492 385 524 310 279 162 477 435 148 561 462 551   9 369 439 519 393 375
 526 249 604 612 264 580 362 410 433 538 384 312 714 637 451 484 321   8 456 245 511 623 113 182 585  79 507 469 550
 554 293 535 589 447 179 442 610 251 559 405 546 574 533 373 471 105 531  81 270 411 523 366 187 461 116 586 716 495
 191 286 539 590  96 509 528 622 520   7 724 430 571 579 166 518 143 499 567 305 486 428  71 117 640 476 564 488 549
 376 268 613 479 403 705 592 472 311 489 699 702 504 438 450 513 163 593 201  77  10 536 647  59 478 202 188 642 399
 103 231 276 662 278 422 743 332 735 605 752 748 498 709 154 532 631 392 364  28 653 335  47  16 630 418 236  12 667
  97 243   3 595 107 676  22 587 757 135 665 609 573 650 560 651 668 670 577  45 621 753 178  57 599 320 104  13 674
   2 222  29 627  50  78 588  26 768 728 701 719 687 652 129 781  65 773  74  61 761 502 620 303 750 646  73 136 658
  18 121   1 598  19 648 727 656 660 693 738 729 583 638 161 596  99 786 635  38 626 708 380 239  23  42  68 214 765
 110  63 521  17 138 643 487 284 615 671 327 601 790 758 274 700 811 614 133 318 780 664   4  49 725  11 217 173 711
 603  56 419 723 177 351 715 194 348 326 655 807 816 691 102  32 688 661 215 141 115 817 199  80 787 720 145 611  15
 267 315  21 130 220 649 804  62 820 784 678 799 812  85 128  98 722 741 625 265 767 815  95 111  30  52  20 547 747
 347 388 174 721 233 730 756   6 821 788 695 818   5 745  24 785 777 704 144 100  27 205 150  36 766 769  35 257 203

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.31317e+06us (= 6313.17ms, 6.31317s)
Wall-clock time (full program): 6.37482e+06us (= 6374.82ms, 6.37482s)
Satisfaction error: 0
Number of search iterations: 1311
Number of local moves: 768 (including on plateau: 210)
Number of local minimum: 62 (including on plateau: 28)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 185 459 152 808  36 113  60 580 633 605 110 818 171 820 653  37 786  28  38 614 115 830 789 618  94 732 804  76 445
 484 801 798 125 282 142 592 785 769 747  43  96  71 839 133   6 806  81  72 761 184 563 740 570 167 153 837  92 470
 566 225 685 701 525 778  62 681 724 590 175 547  84 840 263  55 714 137 222 817 278 755 162  87  73  91 461 551 360
 739 481 104 163 138 829  83 813 683 709  61 180 101 523 218  45 790 151 141 841 193 821  90 543 148 811 834 510 466
 758  85 730  54 815 224  98 825 759 645 654 108 181 691 267 114 728 335 346 727 216 610 122 176 725 274 103 165 674
 458  97 541 699 520 695 149 480 688 767 203 206  26 754 711  63 744 128  50 564 604 796 296 838 200 349 157 179 247
 753 717 246 192 199 196 827 751 797 471 494 100 161 330 698  88 252 234 313 526 342 703 810 150 102 253 320 640 544
 741 227 771 343 237 802 143 302 799 664 327 220 380 272 398 168 700 646 155 582 158 702 105 823 612 294 144 226 268
 793 120 354 338 777 706 269 675 273 787 292 287 230 270  99 139 723 596 290 782 836 299 276 134 828 231 245 325 235
 779 291 697 132 643 824 265 477 277 574 608 259 172 358 805 194 351 399 501 495 160 261 250 788 238 195 178 359 679
 298 431 281 239 762 297 364 427 507 527 375 339 201 275 442 322 347 309 591 694 835 486 248 384 283 212 286 635 812
 254 280 362 241 210 107 378 475 391 658 542 809 242 549 334 383 190 765 406 516 508 365 262 588 336 211 279 773 795
 323 453 410 456 430 421 304 288 352 329 531 293 416 301 371 417 372 513 397 499 328 333 251 159 833 423 452 774 780
 315 432 356 455 353 500 411 376 367 317 579 324 496 418 386 746 326 394 341 340 295 382 308 395 528 514 489 568 498
 449 400 443 420 368 370 576 502 446 412 305 665 402 307 465 345 438 319 228 587 170 396 422 379 644 363 504 408 476
 540 316 532 463 533 474 487 284 505 116 374 511 503 233 454 530 437 366 491 300 357 448 433 467 607 550 377  80 441
 451 561 429 567 634 369 509 219 439 414 310 521 444 435 560 403 460 450  15 166 672 637 548  58 493 545 332  89 479
 436 213 385 457 586 609 553 652 348 217 636 419 575 146 539 468 424 405 668 303 615 447 428 616 243 392 390  32   7
 601 344  95 599 529  82 488 208 627 562  66 673 373 625 522 713 426 361 434 306 572 585 538 517  68 350 409 123 413
 221 667  44 321 440 573 677 660 624 404 121 469 555 571 512 606 401 631 584 177 595 285 462   5 355 537 519 129  64
 183 648 126 472  34 485 689 534 264 597 381 649 663 729 670 693 198  75 569 311  35 619 565  56 515 581  24 630 214
  13 749 124 583 318  93 707  78 147 106 662 719 626 577 556 763 256 202 473 482 589 169 629 109 554 559 622 617 127
 244 552 130 478  67 656  25 669 131 204 182 524 642 651  51 690  11 737 715 257 671 215  49 712 535 726 721 704 260
 661 647 536 602 632 249 696 164  86  77 415 639 620  57 650 628 117 766 546  22 506 188 119 189 112 687 594 692 312
 186 659 684 598 387 492 518  19 255 197 676 174 657  65 271 593  18 558 784  39  41  69 722 794 708 791 760 289 205
  27 578 613  23 497 621 800  21  42 229 770 720 776 314 623 826 678 407 603 389  46 191 745 686 118   1  47 393 425
 154  12  16 743 768 236 757 136 232 140 772  53 803  10 207 716 156 731 734  29 819   4 464 483 557 641 490 611 735
 209  59 832 600 266 258  40  17  30  74 764 742 807 240  20 792 187 748 822  52 655  48 738 750 816  33  79 756 775
 388 705 733 337 223   8 682 111  14  70 781 145 831   9 331 666 173 736 680  31 814   2 638 135 718 710 752 783   3

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00009e+07us (= 10000.9ms, 10.0009s)
Wall-clock time (full program): 1.00631e+07us (= 10063.1ms, 10.0631s)
Satisfaction error: 2
Number of search iterations: 2641
Number of local moves: 907 (including on plateau: 348)
Number of local minimum: 228 (including on plateau: 40)
Number of resets: 1
Number of restarts: 0

Problem in column 18: 28 81 137 151 335 128 234 646 596 399 309 765 513 394 319 366 450 405 361 631 75 202 737 766 558 407 731 748 736 => the sum is 12208 rather than 12209
Problem in column 25: 94 167 73 148 725 200 102 612 828 238 283 336 833 528 644 607 493 243 68 355 515 554 535 112 708 118 557 816 718 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  15  59 114 816  85 839 813 507 727 697 121  29 660  12 797 767  75 837 592 180  89 787 819 136 706 811  35  76   8
  18 838 102 642  53 814  71 799  50 780 103 552 159  61 676 820  28 792 573 793 146 689 749 185 157 160 105 564 730
 598 147 764 761  22 659 104 546 299 751 144 128 152 151 772  79  58 806 795  43  32 680 728  47 758 608 826  82 669
 737 424 149 803 126 140 174 610 756 824  34  91 119 807 483 748 274 131 736 218 101 804 822  80 718 420  23  69 788
 208 770 113 818 825 341 216 599 745 618 106  95 349  14 734 253 164 835 794 753 110 158 738  62 778 725  87  31 170
 637  39 314 791 139 836 195 702 494 563 200 186 626  17 166 828  63 154 783  67  68 643 796 832 685 168 176 343 698
 485 184 141 429 257 207 834 675 823 715 123  74 572 275 744 319 122 377 533 197 724 256 395 169 620 617 260 293 789
 651 731 155 653 145 220 337 739 447 809 175 196 354 258 769 287  52 538 518 278 662 187 550 419 766 821  96 279 117
 840 827 325 282 177 202 283 328 118 607 394 173 668 336 527 234 438 786 649 327 831 137 657 416 198 612 182 246 409
 525 302 350 670 362 677 150 273 374 408 178 211 391 138 705 398 469 242 741 833 755 389 517 194 743 596 171 224 223
 515 519 250 332 360 284 244 775 404 802 425 342 167 370 280 407 539 482 412 281 701 520 681 457 132 732 379 225 192
 243 575 841 371 439 426 313 512 353 587 521 238 290 383 367 226 215 397 364 543 782 445 480 296 428 722 204 270 378
 365 324 261 306 351 172 664 392 385 547 497 323 326 433 263 268 829 435 344 304 291 199 558 785 411 663 723 402 388
 359 228 295 340 537 448 508 436 401 466 432 830 191 529 214 357 434 288 704 301 430 486 410 384 458 441 463 372 467
 535 387 443 505 477 366 510 545 112 312 451 352 423 311 339 585 628 318 588 221 468 454 294 431 530 190 396 490 548
 523 162 462 248 308 289 249 499 805 335 310 488 625 491 437 393 502 358 421 309 487 405 464 526 415 479 307 452 460
 376 509 586 427 541 333 568 269 481 227 473 406 222 475 513 329 417 549 252 400 381 380 235 576 450 501 560 542 231
 203 629 605 489 511 524 471 334 245 297 414  49  72 459 229 373 465 127 413 493 440 593 305 683 582 496 516 708 484
 264  33 504 570 667 553 320 449 571 276 346 495 148 574 498 584 456 285 348 446 230 557 212 632 616 179 750  51 595
 153 455 551  94 644  54 536 540 303 390 528 444 286 647 124 648 633 254  19 347 470 506 321 453 534 363 600 709 603
 210 631 619 461 634  44 561 555  86 133 716 699 239 686 442 369 233 694  57 514 375 622  25 567 262 361 544 163 707
  55 602 695 562 556 492 356  64 613 255 757 614  78 597   2 589 711 690 100 577 569  84 161 604 108  73 566 579 500
 590 655 368 206 609 472 115 181 606 111 522 611 640 714 645 241 478 719 209 720 189 120 403 503  66 267 630 581  38
 345 386 678   6 652 583 130  42 594  26 532 752 654 627 251  92 700 188 237 665 292 615 201 733  81 134 656 684 673
 760  40 624 317 687 135 636  45  46  37 639 815 817 679 156 476 763 621 330 142 646 591  88  90   9 355 790 682 193
 759 688 747   3 729 559 623 236 265  10 740 692 779  93 666  36 641 129  83 565 422 205  27 399 331 109 672 742 259
 810 247  21 272   7 601 712 240 316 315 768 801 650 638 143 107 717  60  13 696 580 531 271 800 116 322  11 773 671
  48 762 578  30 635 165 781  16 691 213 784 777 798 713 266 703 298  20 183 658 277 125 232  24 474 219 710 812 217
 382  56 554   5 674 774 735 300  99  98 776 746 754 721   1 693 808  97 418 338 661  41  70 726  77  65 771 765   4

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00023e+07us (= 10002.3ms, 10.0023s)
Wall-clock time (full program): 1.00652e+07us (= 10065.2ms, 10.0652s)
Satisfaction error: 2
Number of search iterations: 2089
Number of local moves: 912 (including on plateau: 349)
Number of local minimum: 154 (including on plateau: 48)
Number of resets: 1
Number of restarts: 0

Problem in column 8: 507 799 546 610 599 702 675 739 328 273 775 512 392 436 545 499 269 334 449 540 555 64 181 42 45 236 240 16 300 => the sum is 12208 rather than 12209
Problem in column 17: 75 28 58 274 164 63 122 52 438 469 539 215 829 434 628 502 417 465 456 633 233 711 478 700 763 641 717 298 808 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 375   4 722 712 796 229 814 771  16 180  29 134  11  44 114 778 734 428 222 221 806 247 413 816 777 755 197  23 841
 687 732 335 177 819  80 246 805  42 270 267 116 781  76 147 608 401 723 402 656 724 726 709  30  46 733 601  59 211
 146 773 263 550 787 675 800  24  20 109   2   3 761 547  41 376 808 812  99 103 718 799 752 793  17  56 639  70 666
 756  62 685  32 817  68 227 743 810 253  37 245 802 274 153 185 703 738 108 362 811 672 532 277 746  81 210 605 215
  39  18  52 759  14 736 702 160 740 563 170 124 299  57 677 751 707 680 226 358 409 555 452 821  94 578  66 633 769
  50 641 241 708 173 260 552 655  49 519 640 610 711  35 397 623 770 651  91 652 209 713 644  38 166 683  47 122 559
  51 632 275 653 514 110  15 334 697  72 727 203 668 171 310 407 676 577 127 472 587 400  33 626 717 636 682 192 645
 650 576 183 616   9 674 312   7 454 126  45 646 599 783 444 495 689  67 393 179  34  53 663 659 658 603 415 617 560
 625 520 111 485 694 638 498 664 634  85 196 438 181 492 568 231 654 622 190 194 186  22 545 569 325 586  64 600 591
 350 618  74 690 611 151 504 657 832 188 240 531 699 602 128 525 207 604 113 564 217 425 566 306 688 164  78 629 248
 123 453 257 582 557 149 478 542 432 295 280 269 396 487 517 585  19 598 347 612 543 308 486 607 527 556 528 522 154
 679 483 502 430 649  31 536 354 469 216 259 584 427 467 567 562 615 290 201  71 455 167 526 450 594 336  43 565 681
 631 352 273 494 471 145 313 465 533 168  79 647 797 815 439 546 144 107 304 834 595 447 500 338 490 319 501 237 225
 596 497 534 332  21 589 451 291 580 493 208 535 162 355 378 544 665 345 412 619 224 440 463 466 421 503 351 462 272
 287 361 484 456 747  89 789 482 266 464 417 477 518 387 488 508 429 433 403 137 434 449 410 323 459 448  92 457 515
 333 363 384 368 530 573 809 389 349 441 480 307 315 371 286 512 491 399 383  26 516 423 538 418 309 442 436 470 548
 242 435 742 330 281 460 390 695 822 792 388 539 411 620 507 431   1 394 213  27 232 678 446 370 506 419 305 268 265
 322 195 324 297 824 443 408 385 489 719 630 426 549 233 458 300 296 476 670 234 359 369 373 357 317 327 320 360 749
 728 392 827 279 377 340 329 366 302 660 637 261 328 289 590  98 468  55 840 775 721 346 251  28 138 252 374 386 772
 326 282 558 239 206 762 256 169 238 381 635 395 244 311 714 820 367 223 745 184 404 705 117 704 199 276 716 204 829
 356 254 710 379 831 285 318 473 760 627 613  13 214 496 342 150 541 243 739 288 372 561 119 744 321 255 830 271 104
 353 301 292 182 837 364 219 765  77 380 757 661 554 148 505 316 284 250 553 628 236 593 339 314 158 763 422 729 230
 794 152 750 700  82 348 838 175 101 461 791 298 382 132 262 143 187 537 803 642 621 193 365 574 165 157 391 684 481
 551 801 606 205 141 766  87  40 176 754 102 748 198 258 155 807 414 609 833 691 294 189 249 398 839 156 776 235 131
 337  10 581 624  54 424 212 741 737 420 768 583 163 835 701  95  73 437 343  12 597 499 331   8 779 774 303 693  75
 228 715 509 614 112 795 202 191  25 293 758   6 264 669 780 479  61 572 836 725 592  88 159 416 136 782 828 200 174
 767 784 406   5  69 511 735 172  48 790 570 798 142 804 178 139 120 106 521 785 105 523 283 278 643 344 788 730  65
 121 673  84 218 100 818  36 474 825 667 720 826  58 753 671 135 588 115 579 648 125  90 540 341 813 129 475 524  63
 706 130 445  93  86 696 133 220 686 823 764 786 575 698 692  60  97 118 513 510  83 529 405 140 161  96 731 662 571

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00012e+07us (= 10001.2ms, 10.0012s)
Wall-clock time (full program): 1.00621e+07us (= 10062.1ms, 10.0621s)
Satisfaction error: 2
Number of search iterations: 3033
Number of local moves: 1181 (including on plateau: 546)
Number of local minimum: 238 (including on plateau: 52)
Number of resets: 1
Number of restarts: 0

Problem in row 9: 625 520 111 485 694 638 498 664 634 85 196 438 181 492 568 231 654 622 190 194 186 22 545 569 325 586 64 600 591 => the sum is 12208 rather than 12209
Problem in row 22: 353 301 292 182 837 364 219 765 77 380 757 661 554 148 505 316 284 250 553 628 236 593 339 314 158 763 422 729 230 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 747 188  51  26 664 660 120 827 810  71  85 190 309 378 812 683 710  36 803 794   6 100 712  19  58 801 759 782   8
   2 153  48 166  14 740 202 816 138  89 373 560 778 799 699 786 625 193 672 702 727 106 201  18  21 821 807 255 698
 686  20  29 761  69  55  30 822 685  11 241 236 265 223 714 626 733  23 639 707 651  10 622 102 725  74 825 788 837
 739 142 563  12 612 762 199 266  56 105 389 214 305 238 723 268 750  52 779 751 218 292 271  39 383 783 771 746 781
 769   3 257 737 673 115 133 797 820 132  77  67 303  33 675 295 671   1 687 770  27  93 676 666  17 787 567 587 774
 653 186 117 700 614  62 302 728 744 211 140  95 401 150 693  35 568 600 599 590  76 663 648   7  15 531 836 603 642
 717  92 249 722 616 101 407 661 684  16 325 163 262 595 696 628 519 276 646 640 144 495  25 176  57 756 617 630 294
 677 147 151 715 669 649 375  24 577 525 222  88 108 170 558 576 605 637 511 716 544   4 509 615  50 420 320 654 393
 601 161 667 602  37 633 179 426 574 409 197 155 136 207 643 504 697 573 606 650 112 481  60 128 743 447 647 645 289
 593 361 688 579 631 459 437 533 515 529 395  98 174 123 474  22 598 535 454   9 198 477 452 540 122 738 472 627 376
 674  63 119 156 555 564  86 368 553 300 466 182  94 184 448 455 657 589 635 591 187 623 610 507 513 522 450 473 585
 462 283 514 451 460 562 164  28 543 549 185 424  91 229 405  43 569  75 636 565 570 551 586 561 461 538 566 554 584
 571 550 433 695 425 476  13 499 655 318 441 422 500 244 385 372   5 322 619 475 245 216 489 497 501 530 539 594 178
 337 396 468 319 413 510 258 572 397 442 213 419 430 483 542 479 502 488 464 457 367 548 456 417 428 263 408 404 329
 444 512 256 347 324 416 384 359 508 360 517 578 492 423 352 463 613 432 491 298 398 377 273 458 604 349 382 356 443
 332 520 411 338 429 506 387 390 471 346 345 658 414 327 486 341 406 316 524 440 323 288 374 335 484 415 518 366 719
 165 620 494 469 336 386 503 392 342 818 496 267 694 438 353 330 391 485 350 403 315 272 435 490 449 410 445 313 348
 326 681 331 290 208 284 609 328 252 381 607 742 777 453 541 749 394 312 421 217 659 526 278 351 293 301 246 264 388
 439 580 467 369 334 436 532 399 344 402 487 269 665 705 251 754 291 446 225 521 718 275 107 354 592 221 380 427 219
 228 766 339 379 364 226 679 235 370 588 701 808 678 711 412 841 248 243 363 333 230 111 227 261 280 357 194 282 755
  78 796 362 355 297 343 434 358 220 789 632 838 765 690 158 286 177 546 311 209 537 250 281 314 753 206 270 114 840
 260 823 736 713 125 191 597 835  87 638 559 757 534 798 310 212 431 371  32 173 306 418 200 692 800 127 124 231 129
 299 703 732 215 760 583 608 210 247 232 547 516 308 317 239 523 277 670 131  41 730 611 830 708 304 253 240 121 254
 152 784 596 116 104 680 767 162 189 773 829 682 668 478  83  70 130 279 181 365 285 832 831 775 618 195 307 160 118
 137 745 806 259 813 183 814 110  97 689 536 527 634 552 203 154  40 768  82 321 790 470 274 704 839  44 196 135 287
 169 556 652 833 139 141 720 157 175 815 557 224 480 482  66 233 465 706  79  47 792 819 167 809 734 826  73 159 134
  90 493 149 629 641 763 776 168 795 192 662 528 340 575  72 204  64 731 171 242 582 802 726 146 741 205  61  80 581
  38 817 772  84  49  99 709 505  65 758 237 811 545 804 113 656  42 780  53 148 828 735  96 791 498 180  46 805 145
 824  68 752 172 834 624 785 234 296 721 748 691  59 400 103 621  31 724  45  34 644 764 793 729 126 109 143  54  81

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00003e+07us (= 10000.3ms, 10.0003s)
Wall-clock time (full program): 1.00611e+07us (= 10061.1ms, 10.0611s)
Satisfaction error: 1
Number of search iterations: 2318
Number of local moves: 1032 (including on plateau: 446)
Number of local minimum: 206 (including on plateau: 51)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 1: 8 255 825 783 17 7 25 4 112 9 635 75 5 479 352 327 694 742 487 588 220 835 608 680 813 833 149 817 824 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 677  73 758  86 734  94 696 808 178 112 838  99 748  98 198 777  72  88 722 121  61 123 764  42 693 745 296 836 672
 571 445 691  84 839 830 100 586 826 117 101  46 746 534  37 592  53 181  92 772 538  40 122  56 669 841 798 840  62
 705  57 535 648 545 821 702 774 679 634 518 153 214 161  49 610  75 739 139 626 130  25 801 142  93 607 263 697  67
 495 103 706 588 258  81 618 791 163 731 231 245 137 521 504 780 190  89 125 814 212 306 727  32 707 716 790 414 135
 419 253 651 157 770 120 735 837 150 832 179  74 567 299 228 795 160 170 256 819 724  11 497  47 827 194 709 585 144
 678 222 754 233 254 324 783 262 246 424  51 131 740 185  69 809 738 280 192 597 164 203 568 542 833 227 818 744 138
 701 162 797  48 675  66 792 796 531 265 270 332 134 206 154 177 676 104 119 828 747 234 765 173 674 146 831 692 114
 732  91 548 252 763 269 250 615 766 300 297 565 354 291 239 366 187 835 273 628 315 627 523 191 240 167 750 649 126
 773 794 570 313 645 230 193 408 829 261 347 196 288 292 429 417 815 355 226 800 776 218 215 267 287 145 368 385 367
 811 208 410 398 668 614 165 338 199 272 373 330 166 242 351 725 283 301 225 472 806 431 779 683 236 108 605 789 221
 637 186 559 217 784 285 247 680 204 266 129 248 456 189 174 689 662 446 169 544 743 210 632 264 741 255 507 728 358
 517 140 596 454 381 603 524 213 328 593 451 435 310 364 388 390 480 403 319 623 276 471 450 817 380 317 271 378 337
 464 360 460 211 465 109 289 345 473 395 339 452 413 478 717 382 771 298 333 606 335 393 595 418 405 492 302 349 560
 475 434 580 467 249 284 453 407 461 209 490 334 341 416 386 336 448 494 389 439 516 294 506 372 470 397 581 485 496
 312 457 488 391 229 279 477 314 554 369 400 444 462 463 573 514 639 406 379 458 619 184 309 371 411 661 402 304 340
 320 563 420 143 466 498 352 479 562 377 529 489 502 427 522 533 383 487 486   7 442 455 484 311 422 392 323 399 436
 370 493 180 604 346 303 423 569 421 325 359 530 426 342 600 437 551 361 469 290 550 520 219 396 438 556 387 316 428
 443 694  41 528  58 508 409 590 350 713 305 376 491 532 820 322 331  29 540 356 308 737 260 483 499 572 363 147 404
 357 555 474 602 133 576 519 449 509 537  30 687 543 124 729  12 106 536  45 329 116 510 589 642 640 611 447 172 630
  77 476 365 558 238 612 527 624 582  22 307 708 553  38 459 671 127 505 757 353 584  15 481 151 503 526 241 575 574
   9 769 286 513 673 564 512 658 132 501 609 549 561 643 515   8 243 415 500 232 118 541 220 742 274 432 635  60 295
 159 613 176 636  96 646  43 141 629 631 768 703 767 654 327  17 433 441 579 188 670 557 195 482  36 714 281 102 525
 148 412 113 318 149 650 384 182 539 690 686 374 591 695 583 375 647 641 552 223 598 667 201 621 620  54 216 183  97
  64 730 155 726 156 348 698  85 268  68 657 788 105 601 665 608 197 720 823 277  63 644   4 762  55 664  80 394 804
 115 807 326 759  39 251  26  31  59 810 655 749 111 663 430  50 282 715 622 362 688 733  79 719  19 684   1 599 825
 259 546  70  21 237 711 440  82 755 625  13 652 660 753 681  14 775 666 577 257 171 721 244 799 128 401  83 168 700
 158 699 425 760 468 812 638  35 107 175 682  24   6 616 566 511 805 685 704  27 321 761   5 578  44 547  65 207 778
 110  33  23 712 656 718  78  95  76 803 802 710 617 659 787 205 344  34 816  71 343 756 224 813 278  18 594  10 824
 653 834  52 782 235   3 136  16 633 152 793 786 200 723  28  87 736 785 781  90 275 822 751 293 587  20 202   2 752

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0002e+07us (= 10002ms, 10.002s)
Wall-clock time (full program): 1.00631e+07us (= 10063.1ms, 10.0631s)
Satisfaction error: 2
Number of search iterations: 2149
Number of local moves: 936 (including on plateau: 358)
Number of local minimum: 160 (including on plateau: 59)
Number of resets: 1
Number of restarts: 0

Problem in column 8: 808 586 774 791 837 262 796 615 408 338 680 213 345 407 314 479 569 590 449 624 658 141 182 85 31 82 35 95 16 => the sum is 12210 rather than 12209
Problem in column 15: 198 37 49 504 228 69 154 239 429 351 174 388 717 386 573 522 600 820 729 459 515 327 583 665 430 681 566 787 28 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 796  76   9  25 164 246 711 136 237 778 801  26   2 666 819  47 740 731  39 389 278 741  36 818 802  40 803 779 474
 723  12  65 718  11 730  91 306 294 697 791  29 772 111 800 159 798 314 230 756  23 749 766 634 805   6 783  15  21
 544 755 524 769  52 633 781  84 324 748 706  17 688  33 710 233 720  90 214 743 258 137 360 309 744  68 236 669  60
 799 771 133  16  43 724 776 128 704 806 289  28   7 123  55 121 807 146 162 739 400 729 682 738 122  45 658 700 758
 732 746 208 701 445 715  10 102 152 238 770 157 592  48 221  42 675 676 328 722 117  49 713 104   4 761 691 693 797
 503 687 125 759 147   8 777 244 103 737 257  99 657 141 768 298 707  96 424 622 253 466 168  50 648 537 526 753 649
 429 703 273 705 182 628  14  87 112 640 176 443 539 370 113 574 612 105  77 663 109  63 414 763 647 698 615 784 671
 586 726 210 489 275 690 568 261 322  59 610  98 646 603 150 191 567 655  86 699 198  13 120 265 595 681 599 626 621
 536  61 212 795 241 689 673 394 188 557 459 494 624 667 107 602 565 225  93 619   1 635 375 175   5 642 531 421 623
 367 587 284 579  94 660 684 427 108  35 631 425 482 611 132 304 641 577 161 271 386 590  97 533 174 677 582 596 514
 662 505 193 580 240 652 502 194  18 411 441 604 613   3 509 481 478 508 428 529 388  64 392 216 471 630 397 614 486
 538 500 223 608 242 398 571 184 197 497 570 581 487 562 402 576 569 420 266 542  46 434 379 439 554 415 468  19 522
 363 469 299 385 460 417 552 124 300 525 458 504 534 477 440 453 535 409 431 436 366 501 450 496 403 313 472 307 330
 490 378 343 408 320 334 321 433 527 447 339 442 326 310 461 224 359 475 518 452 556 311 498 485 467 523 506 464 492
 280 616 479 286 407 473 513 528 333 532 281 371 483 583 438 488 573 277 202 317 422 517 449 282 302 455 540 381 401
 454 399 451 462 444 351 465 794 361 260 373 543 510 418 315 546 404 369 416 254 495 484 364 406 448 288 463 335 337
 362 491 456 349 520 382 437 480 387 432 558 446 828 430 353 405 499 350 259 412 383 377 338 358 331 287 493 470 336
 435 396 555 195 521 348 327 736 516 410 227 291 187 831 620 476 283 606 702 393 728 203 347 213 279 323 345 419 297
 115 292 547 457 653 247 356 727 654 249 708 316 384 296 357 264 256 841 519 600 665 553 200 643 169 346 290 332 173
 276 564 541 148 426 222 395 733 757 139 836 250 390 295 179 301 380 318 680 809 804 354 618 550 355 372 127 218 172
 219 189 637 231 605 782 423 661 774 817 785 232 272 196 821 319 255 305 787 270 511 376 245 263 248 130 374 239 243
  88 207 650 217 747 365 178 512 760 190 308 303 211 206 578 725 183 145 745 228 672 812 827 752 545 155 235 391 274
 205 163 601 226 629 135 790 507 588 342 252 651 166 764 645 607 171 165 668 181 594 822 762  72 639 268 234 153 209
 269 192 561 131 685 344 267 644 609 714 215 721  89 185 695 632  27 325 686 167 742 352 140 341 584 716 126 220 830
 262 199 811 229 833 134 138 775 670 151  53 789 312 826 551 792  95 170 696 158 712 142 751 572 340 143  81 786  38
  82 589 591 834 664 114 597 566 674 118  54 840 559 293 144 717  20 678 575  30 638 754 808 530 116 413  78  92  41
 285  85 585 735 709  24 204 106 788 548 149 832  69 734 659 186 177 824 793 119 683 692 515 201 549 627  51 100 180
  44 820 814  71 636 694  56 563 154  58  75 838 719 617  57 679  79 593 368  67 156 129  66 750  83 815 825 560 823
 765  31 829 101 813  70  32 773 598  74  37 839  62 810 110 767  34 816 656  22 625 160 329 251 780 835  80  73 837

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00028e+07us (= 10002.8ms, 10.0028s)
Wall-clock time (full program): 1.00636e+07us (= 10063.6ms, 10.0636s)
Satisfaction error: 2
Number of search iterations: 1918
Number of local moves: 760 (including on plateau: 220)
Number of local minimum: 148 (including on plateau: 30)
Number of resets: 1
Number of restarts: 0

Problem in column 5: 164 11 52 43 445 147 182 275 241 94 240 242 460 320 407 444 520 521 653 426 605 747 629 685 833 664 709 636 813 => the sum is 12208 rather than 12209
Problem in column 13: 2 772 688 7 592 657 539 646 624 482 613 487 534 326 483 510 828 187 384 390 272 211 166 89 312 559 69 719 62 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 535 560  70 260 105 127 806 592  53 837 315  44  69 113 820 835 129 620 390 233 169 823 601 794 118 826  21 589 755
 762 575 841 175  71  46 810 813  18 796 121 162  63 134 707 778 809 285 228  78 688 200 790 647 728  12  68 718  86
 568 791 814  25 566 133 768 501 102 805 341  22  33 135 651 831 458 543 771  76  84 151 798 214 131 221 829 639 208
 737 748  72 824  93 225 751 164 196 815 578  74 822 797 301 816 792 691  87 461 124 120 140 565 160  50 179 750  77
 760 217 205  92 836 555 757 709 271 825 289 122 149 230 318 804 158 749 108 180 150 800 756 761 590 176 152 293 197
 668 713 803  43 470 781 725 765 106 733 294 138  34 634 263 774 182 744 104  56 173 235 710 518 834  19 154 381 156
 738 640 168 316 537 637 538 712  88 273  75 142 178 220  82 332 777 840 833 163  91 186 675 608 715 112 193 714 626
 394 766 215 167 507 513 673 807 148 612 329 325 331 143 830 210  85 753 622 255 181 141 600 695 644 172 296 736  59
 581 724 184 183 213 246 801 657 229 264 324 333 211 234 139 782 216 437 571 130 769 838 610 569 839 367 284 226 248
 789 362 355 286 218 633 558 677 283 270 476 696 339 313 719 203 188 549 282 457 159 191 252 764 617 347 194 754 278
 573 323 249 372 683 465 706 655 828 304 788 240 265 277 157 251 100 759 697 219 227 268 237 583 306 479  99 811 288
 370 723 114 365 621 533 557 662 399 384 385 827 432 419 171 305 342 412 253 297 408 426 392 552 795 231 204 281 349
 487 317 449 303 309 818 314 291 486 387 512 276 298 618 290 435 369 517 352 391 471 222 832 433 405 413 344 548 322
 409 320 448 812 455 350 492 376 334 554 452 375 603 477 382 443 337 428 125 389 817 319 438 407 343 262 295 311 456
 442 416 466 353 348 524 403 400 430 450 716 406 380 429 241 481 427 328 368 489 299 475 396 388 346 436 460 534 378
 499 402 431 480 119  17 383 446 508 414 410 514 595 511 424   8 418 630 335 493 310 528 473 395 357 623 497 422 567
 440 136 483 463 472 625 336 434 307 397  57 417 468 398 326 393 516 415 363 506 669 444 711 327 338 377 526 439 425
 474 485 401 404 209 340 272  61 373 411 361 496 445 593 498 561 482  13 441 467 525 522 540 279 462 605 523 420 546
 488 530 491 616 351 312 239 223 577 544   1 553 541 604 702 421   5 464  35 624 490 503 502 484 109 494 374 287 645
 123 563 670 564 364 300  67 614 648 198 599 520 478 663  47 358 510 170 615  49 559 451 423 254 469 659 551  51 672
 155 292 613 629 676  40  60 269 495 267 519 128 665 681 532 572 586  52 598 504  31 505 556 453 259 773 693 147 459
  36  32 386 674 594 591 126 509 545 527 704 700 689 531 192 585 699 137 308 667 542  10 174 521 161 356 785  62 366
 202 111 660 649 153 247 454 224 730  14 763 726 747 666 635  11  27 110 653 588 752 582  39 447 250 646 685 261 177
 258  65 734 642 562 574  95 244 570  15 146 664 500 539 596  58 529  42 257 802 371 784  29 145 580 793 770 166 679
  38 274 680 701   2  66 103 275 611  24 536 741 731 187 619  79 195 238 606 821 638 687 190  89 584 597 772 379 746
 330  83 579  80 609 636   3  48 661 743 658 780 703 232 243  23 684 652 628 654 631 354  97  98 245 165 727 256 607
 132 242  55 787 698 758 302  16 671  45 101 201  64 722 690  30 729 236 656 786 819 587  81  96 359 708 694 199 745
 212 692 547 678 682 602  90  28 775 116 783 808 735   4   7  54 721 189 643 632 717 207  94   6 144 550  41 720 732
   9 107  26 266 686 515  20  37 767 185 576 779 641 705 627 776 739 206 280 742 345 650  73 117 321 740 799 115 360

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.00616e+07us (= 10061.6ms, 10.0616s)
Satisfaction error: 3
Number of search iterations: 2663
Number of local moves: 1021 (including on plateau: 322)
Number of local minimum: 185 (including on plateau: 35)
Number of resets: 1
Number of restarts: 0

Problem in row 6: 668 713 803 43 470 781 725 765 106 733 294 138 34 634 263 774 182 744 104 56 173 235 710 518 834 19 154 381 156 => the sum is 12210 rather than 12209
Problem in row 17: 440 136 483 463 472 625 336 434 307 397 57 417 468 398 326 393 516 415 363 506 669 444 711 327 338 377 526 439 425 => the sum is 12208 rather than 12209
Problem in diagonal 1: 755 718 829 50 590 518 675 141 769 457 697 412 369 443 241 511 468 496 1 198 495 509 454 574 2 80 55 692 9 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 365 166 791 757  53 777 132 323 706 838 813  12 802 226  10 104 315  63 739  45 730 786 194  85  29  27 746 750 825
 191   4 829  46 747 436  57   5 776 255 756  62 177 656 628 172 437 790 798 180 800 803  20 820  16   8 259 744 737
 187 617  14 764  30 347 117 709 590 252 772  35  47 240 152 765  21 783 696  49 770 692 120 759 341 749 105 760 726
  90 682 613 736  11 621 141   9 681  93 814  31 175  87 235 171 742 702 712  40 678 698 169 623 563 443 210 762 677
 185 700 631 753  68 430  94 720 667 309  32  89 110  17 119 190 308 630 789   7 674 633 100 274 657 784 758 767 714
 214 653 578 515 675  51  81 600 729  18 604 587 142 126 643 111 300  38 694 266 593 774 155   3 225 680 754 735 665
 361 672 649 552 558 114 234 622 661 186 721 627 123 601 283 488 176 500 523  72 163 664  25  66  65 723 639 556 585
 108 473 725 634 670 271 493 607 521  67 766 591 228 340 543  69 229 663 583  73 550 510 360 666 164   2  50 684 569
 282 652 573 486 580  34 470 609 572 305 503  22 149 655 310 474 548 557 688 192  15 606 507   6 236 450 526 561 641
  83 645 588 648  96 124 349 658 592  13 620 577  95 545 206 212 202 637 586 281 618 597 479 411 178 562 568 495 544
 243 579 535 619 484 440 574 564 451 438 611 559  42 571  78 511 174 581  24 598 529 207 397 589 533  37 605 508 128
 260 373 455 516 532 506 429 509 449 431 651 231 492 602 528 324 130 364 608 402 496  26 425 485  33 722 250 463 517
 412 446 434 409 501 505 195  82 375 476 386 546 457 370 232 435 447 481 489 428 418 603 355 348 384 445 519 482 549
 298 382 346 576 514 422 554 465 462 512 673 490 456 499 278  58 522 475 140 433 468 405 338 337 374 527 327 420 458
 534 467 524 536 270 379 553 416 404 263 366 466 317 494 423 334 424 339 357 417 454 389 502 471 469 344 442 530 325
 391 393 459 444 328 525 654 392 368 478 399 388 318 491 541 237 763 256 307 483 401 299 342 453 811 284 295 296 413
 531 227 414 441 452 460 477 316 377 570 356 302 381 487 369 330 582 306 439 520 472 376 331 690 567 426 461 280 269
 400 390 403 268 222 715 350 407 432 713 345 358 703 351 378 497 716 551 352 566 387 285 221 638 385 480 246 253 197
 738 288 353 134 408 793 821 304 319 632 635 395 251 247 596 245 741 415 659 464 312 419 294 297 291 383 272 144 359
 311 275 372 380 290 646 165 421 265 733 321 371 734 773 362 498 728 146 303 542 161 332 719 196 796 208 427 336 398
 748 189 406 168 179 775 835 160 367 292 127 320 301 201 824 708 640 293  91 840 834 249 717 686 410 238 154 103 354
 642 135 188 182 394 322 286 795 257 839 138 170 832 828 333 277 794 248 198 685 157 539 710 215 769 223 797 106 150
 771 258 218 102 209 555 801 239 205 780  98 276 695 230 329 817 625 363 224 697 219 199 833 279 691 804 213 262 217
 624  43  23 151 193 289 273 448 314 615  88 827 778 805 781 743 116 816 254 752 167 326 242 629 504 267 788  92 261
 761  60 211 118 755 143 183  39 204 815 203 831 768 216 782 595 560  84 689 537 343 153 693 699 233 787 660  86   1
 810 156 669 785 683 538 806  71 220 513 139 668 751 137 313 799 614 819  80 676  76 129 594 241 264 159 200 184 115
 707 732  48 133 740 518 823 837  19  61 147 779 626 173 644 830  99  79  97 662 547  44 818 287 812 616 145 158  28
 826 711  59 244 836 396 575 808  64 599  70 792 647 540 679 565 181 121  36 718 125 131 727 148 705 107 122 636  41
 136 841 101 112 731  77 687  74 162 113  55 807 612 701 610 650  75 109  54 584  52 335 822 809 704 724 671  56 745

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00005e+07us (= 10000.5ms, 10.0005s)
Wall-clock time (full program): 1.00616e+07us (= 10061.6ms, 10.0616s)
Satisfaction error: 2
Number of search iterations: 2078
Number of local moves: 702 (including on plateau: 218)
Number of local minimum: 163 (including on plateau: 19)
Number of resets: 1
Number of restarts: 0

Problem in column 24: 85 820 759 623 274 3 66 666 6 411 589 485 348 337 471 453 690 638 297 196 686 215 279 629 699 241 287 148 809 => the sum is 12210 rather than 12209
Problem in column 29: 825 737 726 677 714 665 585 569 641 544 128 517 549 458 325 413 269 197 359 398 354 150 217 261 1 115 28 41 745 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 236 829 725 764  40 597 815 120  17 177 283 684 174 611 246 140 132 437  33  88 586  15 642 716 747 678 824  63 790
 565  95 633 670 578 154  22  84 138 780 216 761 171 532  78 157 183 808  30 577 237 798 828 172 795 754 192 426 775
 530 182 839 193 766  77 110 820 749 200 198 837  80 629  54  61  48 765 100 410 797  24 660 156 274 681 806 535 628
 687  37 825 832 811  23 166 213 809 774 147 822  49 838 103 512 190 786  43 121 736 168 122 414 572 503  45 162 699
 833  93 178 818 819 830 130 239 502  39  73 268 169 203 229 644 383 793 135  72 685  99 841 301 488 734 127 801 683
 757 260 679 796 730 753 118 191 251 249  55 436 210 275  59 531  96 513  85 142 745 346 836 197 662 802 144 661 630
 821  51 814 547 785 115 827 279 614 433 254 834 179 214 310 267  81 590 238 253 211  35 743 114 325 706 196 707 666
 835 189 240 769 728 148 111 826 612 155 188 554  76 153 218 737 284 776 321 205 799  79 263 293 273 591 334 669 783
 539 384 744 294 718 129 160 282 831 289 143 302  71 329 489 537 812 643 306 803 694 250 303  67 394 720 199 458 320
 438 359 486 374 714 265 241 195 270 207 366 234 307 840 242 468 109 559 385 823 605 212 304 646 770 817 416 271 286
 525 368 318 402 340 762 149 159 784 365 343 689 180 252 375 552 419 369 741 337 441 372 406 364 278 516 328 704 371
 584 297 518 387 466 358 326 220 767 370 497 789 357 287 339 750 269 727 230 332 261 403 222 266 255 551 360 672 349
 583 561 411 341 272 176 298 296 245 408 377 487 350 529 316 244 782 393 439 463 445 362 568 392 631 671 344 424 401
 467 324 544 558 322 342 363 186 435 404 492 418 376 354 460 420 425 485 351 379 708 398 461 598 508 541 185 386 319
 423 455 493 599 444 440 390 523 309 356 582 417 677 352 434 533 522 592 391  31 355 412 389 536 347 361 243 223 380
 475 256 479 348 452 395 449 259 469 575 221 569 219 432 459 451 373 553 353 400 399 464 382 650 413 397 422 447 448
 515 495 609 258 415 429 405 454 104 484 446 506 588 378 482 514  44 194 491 566 477 430 521  74 509 311 610 457 443
 248 562 247 624 291 564 517 476 594 709 542 139 500 338 526  50 427 208 560 462 580 431 638 330 481 133 556  69 407
 290 496 520 499 388 563 428 616 396 292 335  28 596 585 511 381 465  58 571 450 299 204 587 731 555 262 581 470  52
  82 570 549 524 112 546 473 483 233   2 545 548 663 519 550 281 602 700 504  29   3 494 600 595 621 308 589 409  75
 323 478  62 701  21 691 652 453  32 635 490 317 697 152 543 626 276 161 442  47 277 651 557 534 617 280 540 327 627
 145 579 123 331 315 235 740 421 125 471 721 474 567 607 640 206 619 136 702 654  66 723  56 312 573 151 601 603 313
  86 639  60  38 264 722 501 576  57 645 116 528 604 345 649  27 505 288 574 739  94 668 134 729 622 128 618 632 620
 225 690  91 102 167 623 656 693 625 634 794  36 705 673 807 719 593 106 692 507 105 664  53  20  98 227 615 108 181
 209 805 456  42   1 738 732 217 657  19 735 215 758  89 680 608 613  26 682 810 300 510 367 710 228 173 655 165   9
 295 686 137 164 141 742 305 648 498 675 768   7 676  18 763  68 779 113 527 748 667 759 472 717   5  16 119  90 606
 285 733 201 163 653 713 688 711 202 746 816 124 637 695 170 752 698 117 771 184  12 674 150 788 158  41  13 231  83
 101  10 131  25 232  65 665 778 658 636 715  11 760 333 781 659 756 187 800 804 538 777  70 146   4  64 792 703   8
 107 726  97  46 224  14 772 791 226 480 751 175 813 647 696 314 724 126 712 773  87 787  34 641   6  92 755 336 257

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00021e+07us (= 10002.1ms, 10.0021s)
Wall-clock time (full program): 1.00634e+07us (= 10063.4ms, 10.0634s)
Satisfaction error: 2
Number of search iterations: 2270
Number of local moves: 835 (including on plateau: 392)
Number of local minimum: 169 (including on plateau: 40)
Number of resets: 0
Number of restarts: 0

Problem in row 9: 539 384 744 294 718 129 160 282 831 289 143 302 71 329 489 537 812 643 306 803 694 250 303 67 394 720 199 458 320 => the sum is 12210 rather than 12209
Problem in row 23: 86 639 60 38 264 722 501 576 57 645 116 528 604 345 649 27 505 288 574 739 94 668 134 729 622 128 618 632 620 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 368   6 172 118 806 713 445 740 653  48 324  59 795 760 800 239 352 186   9 129 779 700 588 749 770  23 783  74  21
 208  45 102 192 755 717 110 378 644  47  67 197 703 792 737 146 215 222 108 714 743 353   8 776 808 769 774 580 299
  79 794 620 287  22 119 646 753 718 771  28 122 763 759 787 390 182 219 126 735 801 748 704  71 732  57  10  77  89
 124 780 117 563 766  87   3 351 681   1  63  95 767 691 727  30 322  73  12 741 638 720 758 716 709 809 761  62  42
 318 672 270   2 136 696  19 647 641 539 190 503 715 778 810  16 148  91  39 768 570 275 765 577  44 698 614  70 598
 165 782 582 269 734  40  58 388 579 684  92  53 724 288 723 134  80 113  31 756 316 589 711 639 663 670 554 162 629
 327  27  99 207 669 630 193 131 625 699 664 547 564 685 439  15 233  97 688 730 331 175 138 420 597 747 575 289 668
 114 692 210  11 683 438  84  43 619 552 613 567 562 751 523  14 105  46 526 627 440  37 697 635 666 586 466 166 736
 178 558 147 306 551 612  38 618  13 689 549 402 569 410 404 199 128  83 585 609 615 660 657 488  17 493 640 484 507
   7 607 522  36 560 624 444 527 519  90 401 656 587 528 474 617 171   4 604 496 594 600  34 335 532 502 384 237 517
 263 531 194 220 392 494 301 380 675 412 157 155 606 512 510 521 326 603 437 468 161 476 592 543 605 574 406 145 550
 224 546 633  18 533 471 367 480 407 482 544 566 391 601 409 538 334 300 648 626 116 211  35 545 524 455 578  68 559
 572 447  33 453 504 462 252 481 307 430 492 436  32 446 514 500 591   5 561 553 489 495 121 584 312 432 616 534 556
 398 408 571 479 537 247 413 542 535 426 431 345 393 490 541 228 469 379  54 443 501 477 458 465 411 238 498 467 365
  50 525 332 506 399 487 568 473 397 416 387 497 339 454 382 536 241 356 516 451 427 357 323 505 394 491 452 499 449
 434 457 485 515 425 385 752 317 271 460 298 343 294 383 266 240 344 304 372 336 833 673 433 429 321 475 362 599 403
 706 456 702 621 257 374 463 470 418 450 375 111 811 277 405 360 464 355 373 414 415 419 320 364 329 428 337 314 421
 596 255 346 350 292 395 573 722 309 242 359 824 325 371 268 381 632 839 486 234 658 628 297 354 264 223 273 313 400
 623 281 272 448 333 423 611 804 170 340 793 610 376 173 132 230 651 677 791 349 661 396 478 347 296 244 189 311 200
 721 389 274 576 483 370 726 261 303 188 130 221  29 283 180 797 813 838 361 805 328 386 472 295 315 441 127 807 290
 764  49 708 602 204 285 631 276 120 100 284 330 169 548 348 837 686 819 712 149 442 784 511 206 358 202 319 678  88
 555 225 729 520 251 152 725 583 341 693 369 245 310 265 278 246 750 777 282 250 508 291 232 342 461 366 260 417 786
 817  85 829 707 659 280 377 205 338 201 728 509 529 158 235 690 195 836 841  78 163 150 823 217 258 256 262 557 226
 719 253 286 820 302 191 652 212 151 181 830 744 308 243 196 815 796 680 229  64 125 831 518 802 153  86  52 757 213
 662 305 687 513 254 184 705 203 156 695 762 803  96 167 834 581 590 530 236 142 209 139 185 259 435  94 231 738 814
 595 216 363 821 168 781 676 140  55 637 799 634  24  51  69 679 710 818 826 248  25 267 565 159 164 816  20 742 141
 788 218 608 642 214 176 665 198 636 135 112 775 123 109  60 701 798 650 754 107 183  75 227  66 249 832 822 540 746
 733 827 649 622 187 731 671 293 103 812 694 115  26  76  93 739 424 654 828 106  82 154 422 144 179  98  72 840 835
 101 773 667 785 133 645  41 593 825 789 674 745 279 160  65 790 459 655 174  81  56 143 137 177 643 104 772 682  61

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00021e+07us (= 10002.1ms, 10.0021s)
Wall-clock time (full program): 1.00631e+07us (= 10063.1ms, 10.0631s)
Satisfaction error: 3
Number of search iterations: 1888
Number of local moves: 631 (including on plateau: 113)
Number of local minimum: 160 (including on plateau: 16)
Number of resets: 1
Number of restarts: 0

Problem in row 6: 165 782 582 269 734 40 58 388 579 684 92 53 724 288 723 134 80 113 31 756 316 589 711 639 663 670 554 162 629 => the sum is 12208 rather than 12209
Problem in row 13: 572 447 33 453 504 462 252 481 307 430 492 436 32 446 514 500 591 5 561 553 489 495 121 584 312 432 616 534 556 => the sum is 12210 rather than 12209
Problem in diagonal 1: 21 580 10 809 44 639 138 37 615 496 437 300 591 228 382 383 811 824 793 188 120 583 377 191 254 821 608 827 101 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  99  55 740  73 724  56 436  66  81 104  39 832 670 825 109 318 797 823  58 687 571 811  50 763 836  59 581 808 138
  74 448 360 831  60 144  93 678 122 101 778  38 759 574 750 840 841 800  98 595  64 676 147  36 691  42  43 766 760
 169  47 461 802 136  53 242 427 237  57 100  87 777 705 736 671 739  91 171 704  54 792 745 523 782 110 206 775 810
 166 124 119 406 236 742  69 170 529 164 453 220 677 822 142 686 162 103 596 813 132 807 145 328 806 814 791 217 770
 765  41 186 200 835 552 191 829 165 127 826 148 779 655 809 609  90 197 113 681 133 774  95 115 598 185 611 183 717
 746 102 174 319 121 397 803 118 205 160 667 432 592 666 194 669 112 229 151 649 262 735 307 828 805 114 833 131 688
 179 625 125 661 255 108 440 120 207 211 487 314 610 725 178 780 259 346 741 798 216 149 731 270 278 313 697 752 634
 761 204 378 224 203 199 117 838 239 154 589 163 758 707 157 530 286 249 713 789 256 551 712 284 764 198 560 219 407
 253 414 209 231 238 214 137 315 457 177 695 233 743 586 283 269 228 218 620 577 834 261 769 167 771 276 830 416 788
 524 202 221 271 489 309 310 184 230 786 617 275 266 375 215 248 173 459 325 390 210 738 768 733 635 345 588 719 604
 755 773 272 455 257 454 331 251 243 322 801 408 468 403 293 226 282 213 699 451 329 485 580 234 591 381 324 320 608
 384 258 404 227 531 393 804 265 518 387 837 449 471 343 557 356 294 332 273 499 357 232 439 355 521 545 347 367 464
 839 156 358 334 327 281 317 569 254 401 241 374 437 498 225 392 708 352 567 693 418 395 377 470 653 435 351 364 423
 369 535 180 466 279 386 412 398 335 308 463 510 484 558 361 446 465 410 493 411 462 299 497 496 478 323 476 362 547
 349 540 359 501 429 431 368 342 339 409 379 394 452 373 370 376 419 538 300 582 399 456 474 548 400 503 417 280 482
 458 511 520 473 506 519 189 430 433 305 543 337 340 434 263 330 336 341 420 632 244 541 382 422 450 475 421 415 539
 447 240 638 405 600 442 479 685 181 657 467 525 326 298 507 502 477 426 565 353 396 365 514  32 321 444  62 603 252
 563 562  49 533 469  28 424 292 656 579 555 389 553 182 536 245 445 488 428 267 472 285 480 402 363 460 512 500 492
 491 637 556 150 585 564 490 483 534 613 176 289 296  27 616 443 572 614 494 291 528 312 316 578 143  18 526 593 274
 161 495  31 515  52 537 441 139 623 785 297 481 527 522 646 575 594 561 172 385 599 222 391 658 354 584 301 546  15
 570 660 668 509 573 615 664 652   1 383 304 504  19 532 554 168 605 622 290  78  37 516 288 568 159 590 188 597 295
 508  24 703 606 566 690 673  26 716 587 338 636  71 105 684 728 607 505 372 193 654 123  17 223 264 629  97 723 141
 674 820 698 682 651 146  20 612 659 621 559 710 260 630 663  75 517 513 303  46 747  86  14  13  82 631 140 350 287
 107 549 641 702 700 380 624 672 749 644 247  33 344 111 645 196 366 694 726  67 711  61 680  88  63 772 212 190 235
  85 130 819 689  16 643 751 714 732 737  77 812 277  65 675  84 648 706  92 302 715  70 158 550   3 544 781 126 208
 306 793 817   9  94 794 650 662 642 618   2 821  51 175  35 753  30 730 195  72 816 696 583 627 268 784 134  12  40
 250 722  96 601 767 692 720 371 824 639  34 795   6 155 729  21 701  10 633  45 721 602 348 647   7 762  48 135 128
 744 727 640  23 734 683 187 796 619 425 152 754   4 153 201 665  68 628 818  29 116  89 576 709  44  83 799 718  25
 413 815 787 311 776 757 827 106 679 748 486 246 192   5  76   8 388  11 783 129 756  80 626 542  79 790 333  22 438

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00021e+07us (= 10002.1ms, 10.0021s)
Wall-clock time (full program): 1.00629e+07us (= 10062.9ms, 10.0629s)
Satisfaction error: 2
Number of search iterations: 2752
Number of local moves: 1123 (including on plateau: 414)
Number of local minimum: 211 (including on plateau: 57)
Number of resets: 1
Number of restarts: 0

Problem in column 8: 66 678 427 170 829 118 120 838 315 184 251 265 569 398 342 430 685 292 483 139 652 26 612 672 714 662 371 796 106 => the sum is 12210 rather than 12209
Problem in column 20: 687 595 704 813 681 649 798 789 577 390 451 499 693 411 582 632 353 267 291 385 78 193 46 67 302 72 45 29 129 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 726 351 704 176 768 778 119 374 727 659 107 268 183 800  11 103 731 805 724  86 273 164   5 761  47 780 259 672  48
 634  18 682 194 695  17 158 136 232 765 115 217 792 771 687 330 698 718  65 163 711  67 184 733  56 777  87 735 772
 712   3  15 224 385 785  90  68 713 688  21  49 709 801 804 157 770 706 382  43 146 341 742 605  88 641   7 728 786
  85 751 240   6 675 221 243 383 767 745  22 358 606 660 759 193 702 725 284  52  75 589 744 644 182   2 118 588 790
 763 648 653  37  26 774  98 329 752 721  25  99 749 794 748  71 783 482 199  94 257  72 670 719  23 499  19 308 797
 747  69 601  31 746  13 540 117 738 736 155  63 560 674 740 185 708 416  53 635 165 750 578 402   8 562 170 367 680
 732 131 679  84 646 722 167  97 723 611 483 362 650 666 661 293 685 420 230  10 130 147 340 665 154 739 598 307  77
 395 663 652  16 656 627 149  89 597 776 579 150 622 511 637 181 576 707  51 581  24  83 676 252 302 758 234 101 564
 690  73 632 195 555 669 574 456  30 528 556 139 506 730 621 161 433 566 701  14 172 151 703 335 251 546 522 114 586
 639 128 630 300 570 603 519 600 480 218 577 156 612 729 636 287 348 593 137 279 516 524  28 607 201 394 331   4 563
 585 620 651  95 500 301 568 501 571 561 187 248 447 677 477 238 504 442 536 428 298 159 474 378 345 545 339   1 533
 431 572 318 505 550 486 457 625 523 377 628 371 551 462 476 145 548  82 113 109 541 624 440  20 400 468 502 354 531
 407 614 479 496 347 529 253 497 417 569 441 310 410 397  79 316 437  12 649 490 304 530 485 254 406 638 508 464 471
 469 475 460 537 368 538 401 444 342 466 503 258 332 443 509 312 484 438 488 492 350 404 408 285 369 419 360 498 357
 309 423 454 465 320 359 616 327 526 271 409 376 521 459 450 430 512 396 390 429 515 453 412 379 507 321 255 544 381
 470 552 425 432 387 276 426 313 539 290 393 743 473 405 361 599 241 398 296 445 297 415 543 294 411 314 478 554 439
 816 413 391 311 421 782 286 223 463 388 344 514 319 283 233 510 613 392 487 260 668 219 380 547 481 245 295 587 338
 373 213 403 643 549 424 333 681 205 399 267 517 414 246 418 582 337 542 427 389 292 263 269 590 575 352 491 689 326
 291 336 153 434 837 349 247 244 305 343 647 535 261 364 435 467 315 769 775 334 489 207 229 493 584 324 455 781 206
 386 191 289 366 363 250 832 303 168 518 353 532 346 227 384 452 495 717 714 836 264 328 196 270 559 140 833 793 104
 322 835 202 741 375 204 235 288 828 458 683 592 239 237 215 573 355 236 553 278 815 325 179 256 609 323 249 705 299
 127 372 105 821 281 175 446 697 178 356 280 755 834 112 274 716 265 133 710 715 225 838  66 617 696 422 129 654 210
 190 595  59 822 262 177 580 825 317 126 275 618 222 108 211 558 124 277 608 764 720 791 841 197 671 242 451 272 306
 192 166 220 694 189 803 664 691 120 266 214 662 200 186 138 753 228 226 494 557 591 640 209 795 802 174 762 370 203
  54 787 144 779  74 141 684 629  39 173 830 645 122  45 152 810 125 449 436 773 583 700 686 212 461  93 809 594 180
  29 169 812 840  44 282 817 626 567  78 813 658 148 132  61 788  46  62 365 631 818 824 110  96 734 513 839 231  76
 106 657 806 534 527 829 820  41 160  27 737 757  80 143 116 633  34 208 623 754 520 604 756  33 811  55 667   9 162
  81 819 216 642  35  38 188 798 142  64 766 602 198  36 826 673  70 171 123 760 619 525  60 678 692 823 615 135 814
 448 565 134 789  58  57 699 807  40  32 799 655 102 111  91 693  42 121 596 808 831 472 796  92 784 100 827  50 610

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00021e+07us (= 10002.1ms, 10.0021s)
Wall-clock time (full program): 1.00629e+07us (= 10062.9ms, 10.0629s)
Satisfaction error: 2
Number of search iterations: 2215
Number of local moves: 948 (including on plateau: 302)
Number of local minimum: 155 (including on plateau: 40)
Number of resets: 1
Number of restarts: 0

Problem in column 13: 183 792 709 606 749 560 650 622 506 612 447 551 410 332 521 473 319 414 261 346 239 834 222 200 122 148 80 198 102 => the sum is 12208 rather than 12209
Problem in column 15: 11 687 804 759 748 740 661 637 621 636 477 476 79 509 450 361 233 418 435 384 215 274 211 138 152 61 116 826 91 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 801 730  15 797 117  21 786 700 787 737 678 727 198   8 717  20  42 671 409 718 131 138 102 762 162 749  60  10 416
 354   5 732  73 245 788 112 739 146 272 691 418 130   3 457 714  14 736 468 738 626  66 445 698 766   2 591 406 774
  27 407   7 616 140 804 720 164 776 759  36  88 469 771  76 792  61 141 243 617 695 244  41 704 588 516 280 634 793
 619 684 715 271 204 790 321 633 777 742 342 611 305   1  33  43  82 310 263 765 654 217  12 764 761  74 119 312 785
 735 223 741 752 137  30 489 594 755 659 667 103  54 207  31 773 613 650 153 798  99 125 604   6  18 668 716 339 470
 159 194 688 803 328  16 580 655 791 713 590 540  68 669  23 696 723 253 151 775  59  35 496  64 649 606 167  37 681
 205 334 477 585 202 679  13 706 502 702 451 615 177 800 196 597 614  92 229 509 587 165 104 548 648 656 107  52 657
 238  97 721 567 299 807 374 323 556 577 152 647 631 682  71  25 675 124 132 770 586 260 703 572 645   9 174 221 571
 629  63 620 653 233 369 210 635 285 521  91 609 622 733 495 562  11 621 101 677  28  44 660 539 593 538 460  72 535
 625 134 630 390 139 658 185 605 637 550 252 454 636 697 449 327 518 106  50  29  57 442 618 573 694 581 408 170 595
 160 145 686 644  98 553  32 561  24 534   4 596 537 576 473 578 726  89 294 427 440  84 568 627 542 459 589 551 612
 410 179 403 497  40 293 161 582 530 554 546 557 603 376 493 543 466  19 237 501 639 213 526 510 474 446 458 346 607
 405  62 402 504 255 395 154 506 628 434 533 318 286 522 574 428 386 519 257 452 426 250 393 525 491 549 455 536 564
 456 388 447 511 430 529 340 391 433 358 624 338 498 555 419 429 309 437 422 482 311 560 566 450 485 431 258 335  17
 436 439 517 523 432 476 415 486 337 347 278 490 384 494 583 383 541 343 270 352 448 421 372 444 481 344 366 387 420
 234 341 306 355 398 291 724 246 579 500 462 417 277 467 528 304 401 601 598 371 492 505 269 292 220 453 514 399 665
 316 478 361 209 833 289 515 705 484 203 364 381 362 367 325 472 464 317 527 680 480 638 268 360 503 283 349 320 356
 353 370 256 545 520 298 747 308 404 424 693 461 329 264 378 301 248 332 805 373 483 608 228 295 261 389 400 382 754
 302 212 276 363 532 413 707 397 375 396 725 331 699 287 348 273 423 748 350 254 351 524 692 345 236 240 499 664 247
 632 746 411 181 756 385 127 214  78 823 412 438 646 359 222 300 180 488 826 216 274 794 232 187 279 275 832 670 226
 231 690 303 685 780 392 479 281 831 227 262 224 142 158 379 330 365 673 841 235 809 563 157 475 175 296 333 642 251
 487 789 307 201 757 394 435 819 357 188 672  96 829 225 825 297 284 728 779 155 136 377 230 211 190 193 249 711 288
 729 687 186  48 610 290 811 208 326 324 569  93 122 315 751 817 259 796 559 123 471 651 824 113 513 156 266 507  85
 319 592 183 314 531 834 336 115  49 191 239 171 734 802 744 189 508 414 575 195 781 812 199 828 218 148 267 599 322
 465 663  22  53 463 241 683 149 166  79 815 814 810 114 163 838 200 265 689 425 121 743 368 313 840 192 837 584  94
 816 662  26 818 565 176 178 135 441 120  47 105 740  90 769  81 719 380 676 282 640 763 712 150 108 830 768 197 215
 839 552 778 126 813  67 116 110  65 147 767 100 169  87 772 206 835 623 701 143 547 641 795  70 168 661 760 512  39
 144 544 821  45 570 820 750  69  56  51 129 745  86 827 731  55 784 600 558  38 710 652 242 182  58 822 219 806  95
  83 799 172  80 782 111 709 173  34  77 118 722 666 753 184 836 758 133  46 109 128 674 783 602 443 643 708 808  75

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00005e+07us (= 10000.5ms, 10.0005s)
Wall-clock time (full program): 1.00618e+07us (= 10061.8ms, 10.0618s)
Satisfaction error: 1
Number of search iterations: 2934
Number of local moves: 983 (including on plateau: 291)
Number of local minimum: 228 (including on plateau: 49)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 0: 801 5 7 271 137 16 13 323 285 550 4 557 286 555 583 304 464 332 350 216 809 377 824 828 840 830 760 806 75 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 777 209 741   2  14  55  13 173 696  87 813 818 213 697 256 224 793 733 800 225 566  58 772 701 621 731 149   9 263
  72 370 779  10 234 699 217  49 607  15 796 202 143 756 743 759 620 736 748 689 396 230 668  42  43 191 322 289 784
  34 355  65  69 422 255  21 728 713 667 536 357  52 601  83 665 274  11 658 776  53  79 685 768 739 721 332 773 717
 679   3 691 109 755 259 573  50 126 337 695  57 706 744  16  32  26 677 816 767 171 593 124 708 747  20 156 794 778
 261  18 719 315  29 727  41 725 344  73 716 188 155 684 140 682 414 639 666 802 198 122 726 641  19 740  23 631 771
  39 186 672 243 642   1 142 724 676 539 720 112 136 729 268 531 266 657 806 564  33 231 660 574  24 638 139 605 652
 654  28  56  80 710 787 134 582 595 152 305 115  89 614 119 753 288 615 650 670 215 513  60 496 735 715 283 551 645
 432 557 703 154 723 248 571   8 649  66 662  86 675 711  17 599 181 555 655 624 117 108 540 592   7 674   6 659 630
  48 507 602 269 486 617 663 597  82 648 683  63 157 618 590 579  51 475 627 543  62   4 529 598 656 623 193 541  98
 335 589 546 203 613 591 530 505 265 532 467 184  71 450 640 512 133 611 561 350  95 547 521 445 586 510  25 476 316
 465 504 538 182 562 492 635 403 120 603 559 158 349 353 525 575  78 628  40 588 440 553 533 366 461 326 314 523 336
 338 294 563 144 520 309 516 556 118 498 413 524 515 479 304 693 363 484 490 583  90 576 596 390 468 578  54 527 226
 501 554 503 223 535 388 300 227 447 534 371 506   5 406 518 400 384 418 581 495 444 580 442 425 519 481 340 493 189
 511 359 508 416 457 331 276 376 517 671 368 380 565 456 407 373 409 387 483 299 491 480 427 437 438 452 412 464  59
 374 449 430 392 383 463 600 389 436 334 522 653 435 249 415 441 472 569 397 319 348 343 279 239 404 424 497 514 439
 499 372 402 619 462 459 398 637 378 327 451 587 278 375 448 286 241 381 291 664 471 526 377 317 537 419 426 219 362
 421 549 482 831 460 364 302 542 429 277 347 391 489 228 275 487 394 395 264 187 417 790 271 410 260 280 509 825 333
 470 237 528 433 709 254 342 341 293 379 367 328 298 399 282 810 306 502 308 608 446 311 386 365 455 803 443 329 477
 765 312 405 606 253 281 240 272 420 318 814 686 360 174 330 321 434 295 351 453 830 303 296 141 356 324 550 834 485
 647 382 220 572 169 177 258 167 610 245 247 828 829 358 252 161 609 369 162 799 746 233 385 242 702 235 681 246 678
 742 160 345 604 307 815 257 323 823 805 197 694 222 431 760 290 673 229 212 251 548 361 216 210  91 320 570 284 469
 262 616 121 644 208 822 297 473 214 128 236 625 824 270 774 206 781 194 195 205 817 690  70 301 292 346 577 201 820
 267 622 244 775 287 786 738 178 310 698 148 500 688 313 192 218 211  92 352 103 700 811 791 770 179 135 795 110 196
 131 718 102 734 285 750 354 835 634 147 159 821 722 105 166 545 792 207 172  97 798 113 749  74 408 423 705 190 273
 180 712  76 651 752 801 552  75 560  94 130 544 788 221 833 165 751 175 164  46 687 762  93 199 782  47 758 145 466
 680 769 107 567 132 232 780 661 163 838 125  35 646 325 737  45 478  99 146 111 636 730 101 629 766 785 633  85 168
 153 819 841 797 176  44 812 832 339 836 200 428 757 250 789 114 764 238 454  36 732 585  81 137  37  64 826  38  30
 632 401 116 804  88  96 808  67 151 669 150 594 474 129 626 643 612 807 138 185 204 393 763 183 754 127 707 827  61
 840 558 104 761 837 106 839 714 494 692  12 745 568  84 704 100 411  31  22 170 458 584  68 809 123  77 783  27 488

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00009e+07us (= 10000.9ms, 10.0009s)
Wall-clock time (full program): 1.00622e+07us (= 10062.2ms, 10.0622s)
Satisfaction error: 2
Number of search iterations: 2070
Number of local moves: 788 (including on plateau: 316)
Number of local minimum: 164 (including on plateau: 40)
Number of resets: 0
Number of restarts: 0

Problem in column 5: 14 234 422 755 29 642 710 723 486 613 562 520 535 457 383 462 460 709 253 169 307 208 287 285 752 132 176 88 837 => the sum is 12210 rather than 12209
Problem in column 27: 149 322 332 156 23 139 283 6 193 25 314 54 340 412 497 426 509 443 550 681 570 577 795 705 758 633 826 707 783 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 313 810 827 610 681 376 811  77  67  32  41 717 713 798 753 696  86 226 769  98  62  55 639 141 107 119 801  45 739
 797 841  69 706 664  44 607  83 564 496 135 622 830 778  99  79 120 203 131 151 553 838  60 699 176 835 115 818  96
 814 661 796 569 780 656 761  65 171  97  53 631 785 708 803 623  54 111 113 142 137 649 118  82 264 105 822  34 605
 762 813 820 808 742  73 707 109 158  92  70 733 774 770 642 198  59 161 296 612  38  87 124  93 736 792 154 133 653
 625 687 421 716 668 189 787 634 138 204 624 673 718 192 828 437 108 424 805 150 272 126 563 183 438 249 149 106  94
 633 831 731 689 261 788 701  78 223 257 174 819 724 190 836 237 163 786 738 216 136 102 170 829 104 185 231 139 238
 644 809 199 815 722 100 583 275 247 310 181 749 779 278 679 756 218 211 581 768 251 186 404 184 187 140 164 196 593
 669 566 191 700 646 157 677 833 224 210 197 784 710 538 116 209 234 263 702 269 225 789 616 327 122 201 268 207 559
 489 541 166 676 235 403 606 243 826 449 239 458 695 306 215 715 262 562 514 227 783 374 222 317 255 285 401 228 517
 579 602 258 287 794 341 422 202 282 823 267 491 173 279 297 729 319 684 551 837 303 220 521 271 336 290 242 518 291
 547 423 281 337 545 289 747 370 368 180 824 670 288 259 193 534 294 839 652 309 351 349 683 326 307 314 293 274 364
 630 277 240 331 420 352 617 347 270 391 428 832 305 373 324 643 400 418 460 194 308 385 791 406 311 369 434 283 671
 476 464 429 330 322 441 447 451 381 328 301 359 318 315 479 599 350 636 443 442 395 383 480 354 345 299 450 358 834
 356 320 300 461 339 348 531 446 329 342 362 394 416 340 452 382 363 825 430 414 325 513 387 440 471 426 304 840 353
 412 408 410 413 439 384 397 280 495 507 377 375 334 371 407 457 393 323 378 409 487 335 433 532 806 411 462 533 241
 123 466 515 459 483 444 463 338 372 361 472 467 454 455 419 260 388 453 399 360 503 473 470 543 425  89 572 477 506
 468 456  18 552 366 490 417 448 475 492 508 295 526 615 512 321 405 544 121 486 482 488 250  26 499 474 436 500 539
 312 478 427 498 435 502  47 511 520  29 565 276 380 586 536 608 603  56 253 392 567 557 103 509 522 554 556 573 254
 233 493 650 516 494 529 134 635 577 584 130 398 286  21 469 155 484 208 365 537 445 588 213 431 402 527 560 519 626
 265  76 555 505  46 504 221 528 497 178 558 112 568 580 657 355 595 343 236  20 530 481 346 585 620 601 561 465 621
 230 165 540 177 525 548  84 546   4 703 524 160 535 629 641 542 501 432 195 570  15 659 332 613 598 590 485 609  57
 229 146 628 172 589 597  95  14 651 627 690   2 148 600 711  25 611 144 415 596 591  24 246 734 587 640 549 576 571
 175 298 688  23 200 655 302 667 662 678 660 114 162  22 168 206 709 592 167 665 614 647  13 523 619 645 637 658  40
 248  75 582 153  31   9 188 793 672 550 575 284 145 632  66 128 714  43 256 765 638 680 686  19 663 704 799 732 379
  74  64 737  42  27 726 212 594 654 694 692  71  58 744   5 152 772 156 697 685 725 574 693 730  85 721  28 578 219
 143 125 674  17 129   1  90 804 802 604 782  68 110 682   3 316 745 776 666 127 712  37 750 757 698  72 764 720  35
 101 245   7 205 396 781  81 217 691 389 252 179 132  12  16 759 790 648  10 760 743 705 740 758 723 748   8 727 386
  91  33  39 390  61 763 292 800 675 807 751 232  63  88 766 755 728 367  50 273 266 159 344 767 754 773 147 357 618
 771  36  11  52 169 719 182 821 214 795 777 244  80  48 117 333 741 775 816 735 752 746 812  30  49  51 817   6 510

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00016e+07us (= 10001.6ms, 10.0016s)
Wall-clock time (full program): 1.00625e+07us (= 10062.5ms, 10.0625s)
Satisfaction error: 4
Number of search iterations: 2634
Number of local moves: 1383 (including on plateau: 587)
Number of local minimum: 214 (including on plateau: 76)
Number of resets: 1
Number of restarts: 0

Problem in row 5: 625 687 421 716 668 189 787 634 138 204 624 673 718 192 828 437 108 424 805 150 272 126 563 183 438 249 149 106 94 => the sum is 12208 rather than 12209
Problem in row 11: 547 423 281 337 545 289 747 370 368 180 824 670 288 259 193 534 294 839 652 309 351 349 683 326 307 314 293 274 364 => the sum is 12210 rather than 12209
Problem in row 12: 630 277 240 331 420 352 617 347 270 391 428 832 305 373 324 643 400 418 460 194 308 385 791 406 311 369 434 283 671 => the sum is 12210 rather than 12209
Problem in row 22: 229 146 628 172 589 597 95 14 651 627 690 2 148 600 711 25 611 144 415 596 591 24 246 734 587 640 549 576 571 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
   3 202 812 237 739 755  54 751 167  80 713 676 118 228 341 743 758 134 811 122 160 141 776 735  12 271 368 757 545
 740 121 766 714 729 763  44 810 639  66 188 683 821 240 125 773 737  33 752 224  43 230 778 180  16 137 803  25  29
 730 716 385 107 816 790  28 619 157 614  37 216 410  85 119 706  49 668 784 278  87  18 805 447 712   7 777 717 325
  58  22 707 218 705 797 113 788  56  76 628  89 313 307  13 744 636 654 787 624 262 206 794 783 590  10 323 677 229
 649 688 722 658  17 770 399 191 111 727 252 675 775  52  78 576 647   4 736 178  36 120 570 665 234 227 726 669  57
 462 641  93 792 764 702 179 759 104 666  35 566 721  31 182 678 539 651 620  39  51  83 626 335 621   6 612 642   9
 680 109 627 515 579 631 363 540 194 536 174 226 747 189 255 556 684 657 554 694  71  70 509  84 661   8 555 575 166
 615 653 659 365 782 553 176 559  24 695  19 499 423 175 143 617 710 441 672 151 310 298 535  75 643 527 173 494 223
 506 616 136 507 795 686 169 696   1 589 591 512 246 155  73 640 630 184 592  82 452 346 725 102 698 395 597 486   2
 645 585  59 170 502 488 251 599 552  99  64 289 316 596 291 551 519 560 632 504 328 159 472 602 523 568 231 482 572
 595 513  68  27 459 376 161 428 203 457 609 304 600 485 431 625 674 532 610   5 204 562 580 526 528 503 214 429 501
 691 701 467  30  14 605 274 538 460 655 525 342 567 542 469 544  15 422 275 564 440 352 424 518 435 348  41 487 464
 558 443 583 153 405 477 347 101 618 529 587 236 199 484 496 598 448 381 390 394 379 288 543 473 425 476 437 474 287
 511 561 105 396 495 537 372 445 417 433 334 541 565 418 454  45 453 398 516 586 340 480 593 371 389 491  11 548 404
 265 321 301 444 403 373 660 522 549 359 382 416 358 312 550 434 285 475 378 393 414 468 700 466 370 333 430 324 524
 450 343 354 329 388 357 606 374 451 479 411 380 521 531 419 505 300 407 493 463 217 383 264 497 834 446 375 318 314
 361 315 273 455 336 427 449 825 353 481 808 577 578 436 439 254 412 349 386 330 546 510 284 239 402 421 311 409 243
 149 413 367 742 351 492 824 235 384 270 415 840 798 350 408 331 292 397 327 197 703 401 293 267 124 283 731 569 256
 338 400 277 724 297 337 520 132 286 749 320 685 322 282 260 186 268 272 490 456 547 693 299 406 804 142 823 364 530
 442 319 209 779 302 135 681 257 734 242 573 290 767 514 762 377 339 362 244 760 426 470 250 225 420 296 634 248 152
 279 807 305 221 355 117 557  67 799 317 718 461 360 704 498 212 241 219  92 841 670 387 233 115 332 633 534 326 809
 303 771 438 210 280 215 611 831 667 249 753 281 345 774 629 245 211 263 165 110 500 603  86 746 130 765 150  77 801
 232 139 594 483 238 127 432 306 733 103 172 769 145 708 813 190 259 200  61 780 748 682 193 793 247 687 574 163 638
 192 465 829 253 269  50 652 266 308 133 750 356 622 781 309 213 148 129 164 732 827 728 295 833  95 261 662  91 796
 344 185 187 613  94  21 656 177 581 819 689 392 128 646 830  79 147 601 112 826 756 822  38 738 162 741 106  69 650
 208  62 604 369 836 181 478  63 692 183 144  26 100 635 715 276 837 815 294  46 832 644 158 156 697 835  32 802 489
  23 126 391 664 123 222 709 131 791 195 663 116 207 140 608 220  55 745 196 699 768 772 114  97 168 800 838 839 789
 366 154 171 471  88  20 690  53 607 785 138 719  72 761 828 201 820 723  42 458 508 582  74 637 679 806  60 108 588
 814 818 720 563  48 205 754 146 571 623 517  47  65 648 671  90  96 533  34 673 584 711 198  98 258 786  81  40 817

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.44319e+06us (= 7443.19ms, 7.44319s)
Wall-clock time (full program): 7.50623e+06us (= 7506.23ms, 7.50623s)
Satisfaction error: 0
Number of search iterations: 1228
Number of local moves: 623 (including on plateau: 187)
Number of local minimum: 66 (including on plateau: 31)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 836 771 699 605 764 562 621 116  83  69 801  95  21  10 754  32 627 569 121 811 557 674   8 705  44 788  64  17 385
 614  72 824  84 802 243 611  61 731 833 828 149 456  56 115  90 751 572 162 834 809 420  87 665  65 590  93 418 174
 739 161 124 181 817 168 839 110 167 831 653 204  76 169  15  47 195 769 711 830 186 786 129 708 635 725 492 189 553
 738 193 206  58 146 673 837 251 152 561 827 222 718 104 118 178 748 593 184 832 825 747 153 765  20 841  73 237 209
 626 179 721 151  82 681 750  49 273 412 826 638 229 112 106 130 119 752 604 760 595 140 211 592 820 777 139 111 624
 805 494 784 302 282 108 652 144 693 317 657 258 800 201 133  31 183 180 523 276 641 785 327 546 264 640 254 271 658
 642 607 799 210 198 797 840 596 263 182 426 339 661 197 126 277 377 177 280 335 680 252 677 559  79 632 208 305 488
 737 514 253 137 185 303 736 806 142 338 259 238 691 321 157 203 261 775 742 200 791 724 715 818  59 323 275 283 223
 350 298 230 312 290 795 655 390 244 304 235 522 793 107 175 192 310 789 306 155 796 428 231 700 397 279 373 798 755
 434 684 214 218 188 816 535 268 402 819 367 232 620 319 148 295 260 753 348 698 690 333 207 349 299 248 370 608 487
 479 249 359 383 687 767 528 462 196 362 727 388 631 380 281 288 287 216 393 316 256 331 384 714 236 407 220 634 648
 352 293 213 392 441 270 766 225 191 240 190 770 591 759 212 745 187 838 515 241 337 408 368 309 480 453 403 468 552
 346 734 301 274 525 336 497 478 246 247 438 334 582 132 363 389 589 318 374 285 265 668 493 311 332 413 345 782 812
 202 558 307 442 257 329 421 443 712 356 379 472 435 387 460 391 411 330 433 526 508 505 439 458 427 308 371 466 476
 471 469 357 372 325 444 419 324 540 436 381 491 343 422 340 394 518 565 431 470 457 326 375 353 530 284 475 424 473
 455 477 527 465 503 517 313 342 406 587 430 351 482 300 448 417   6 286 496 292 423 376 459 537 449 483 544 549 289
 269 560 474 548 396 429 355 358 401 354 543 588 490 489 498 347 481 499 328 294 521 445 484 454 622   2 215 451 314
 550 601 529 502 364 446 365 603 547 344 414 278 512 297 463 461 432 586 127 452 425 583 113  70 450 524 646 507  18
 341 122 486 545 672 495 242 520 531 555 176 597  97 542 382 516 563 636 226 645 663 575 378  50 386 551 437 205  75
 224 404 500 564 409 619 199 576 637  33 513  80  27 467 519 532 643  51 613 485 571 534 639 156 600 723 539 266  86
 154  60 398  52 618   9  43 719 360 599 659 100 567 644 568 654 584 606 615 536  41 574 709 504 666 131 679 143 217
 440 262 630 686 509 594 245 250 625 669 128 556 227 667 541 577 650 117  34 573 145 464  74 105 675 501 735 511  19
 554 272 510 585 616 135 315 578 579 676 692 602  94 612 710 628  68  67 713 649  22 221  98  12 629 566 598 320  88
 159 369 716 533 570  13 160 651 728 164 233 717 219 790 695 763 821  57  85 150  63  38 685  46 730 163 774 722 395
  77 506 166 617 123 580  42 697 773 792  45 707 228 633 808 694 689  96 101  28 405 609 647 662   5 165 623 291 400
 109 814 732 610 703 234  36 688  37 136 134 664 173 726 822 678  26 255 670  11  71  40 835 415 743 538  55 807 447
  92 706   7 823 704 158 172 720 776 141 114 682 296 781 794 762   3 170 660  24  89  66 772 361 729  30 702  62 813
 147  39 120 780   4 366   1 768  78  48  81 810 410 829 701 683 749 416 758 399 138 103 733  91 803  25 761 581 787
 267 741  23 778  29 322  14  16 696 804  53 125 740 756 757 815 671 171 656 102 239  54 779 194  35  99 746 783 744

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.37549e+06us (= 8375.49ms, 8.37549s)
Wall-clock time (full program): 8.45314e+06us (= 8453.14ms, 8.45314s)
Satisfaction error: 0
Number of search iterations: 1501
Number of local moves: 781 (including on plateau: 311)
Number of local minimum: 98 (including on plateau: 33)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 182 821 121 809  73 130 672 118  76 166 603 481 171 526 824 554 540 508  85 689 120 801 472 225 396 192 834 185 835
 531 841 151 722  91 133 572 710  49 838 779 496 158 819 687 149 823 175  67 751 164 170 160 709  99 125 517  20 703
 713 107 494 820 122 792 736 484 154  88 696 625 115 674 772 565 817  89  47 759  66 168 189 435  57 110 556 177 782
 686 826 520 671 131 102 591 114  74 186 578 581 250 743 738 194 680 337  45 717  92 109 513 205 159 720 790  79 778
 811  95  71 167 810 180 711 128 367 503 825 256 147 729 836 601 656 644 113 247  83 198 150 797 774 103 754 143 310
 678 129 139 156 112 839 522 428 204 199 647 105 228 813 290 818 359  65 181 773  93 830 677 727 161 214 661 330 831
 587 443 833 832  55 127 223 279 421 183 626 467 395 741 598 607 514 343  38 795 203 209 788 309 373 162 418 360 280
 575 812 288 176 264  86 634 706 135 195 519 116 776 257 724 734 794 265 206 579 111 643 245 829 292  78 632 286 252
 733 243 172 272 258 249 827 241 737 193 529 242 200 267 358 744 450 184 301 828 837 761 229 753 255 240 370 329 407
 458 339 174 169 476 231 732 364 771 239 468 760 605 660 840 746 293 207 348 595 295 613 278 276 233 137 338 275 289
 780 351 152 699 246 270 728 266 735 163 750 412 335 201 374 318 441 251 815 321 305 527 403 464 216 298 803 208 377
 237 202 313 716 347 319 822 448 262 315 389 715 284 297 285 283 742 784 345 399 277 568 365 447 326 454 597 439 232
 317 612 263 173 429 390 427 576 461 342 436 453 726 299 375 446 393 406 451 417 341 816 491 404 400 420 311 157 477
 324 534 108 221 445 254 353 372 273 355 525 532 346 537 308 560 430 791 248 478 487 691 498 431 582 401 385 383 357
 749 274 471 333 296 392 366 391 558 349 552 416 473 268 332 426 425 352 483 489 322 350 356 479 495 386 379 536 511
 596 501 398 190 410 327 361 516 459 437 411 402 433 294 548 388 306 455 432 344 609 303 470 340 363 442 465 523 486
 408  48 488 499 452 414 551 271 409 512 405 507  12 566 564 485 230 336 510 291 584 316 502 444 500 466 493 490 456
 557 424 571 423 546 547  54 376 550 422 226   6 543 592 469 371 438  90 707 217 545 397 419 544 482 570  60 362 701
 475 530 287 449 413 669 463   4 653 563  35  81 533 440 235 145 569 622 586 504 497 212 638  10 630 633  44 648 641
  94 585 505 474 654 460 178 574 604 796 518  19  33 480  64 153 538 549 600 594 561 539  16 649 515 197 140 664 457
  36 492 615 524 611 763 300 382   7 580 619  61  31 623   2 663 635 577 567 673 215 562 628  22 434 667 307 610   3
 142  32 659 506 509 740  70  63 593 394 314 670 725 553 588 589 136  34 606  28 676  24 599 323 712 559  51 629 685
 260 334 608 384 637 614  43 757 583 616 210 535 521  53 100 138  41 573 765  14 681  96  13 704 624 662 380 708 555
 320 213 766 639 645  18 148 764 684 793  72  40 381 141 281  98 211 682 657  77 787 325 758  29 655 541 165 679 640
 302 542 668 650 785 739 253 627 658 636  75 683 748  82   9 134 117 665 144  17 705 528 697  50  23 799 269 602   1
 191 652 690  30 719  37 238 617 618  56  39 693 814  68 224 695 124 731 752 101 646 714  52 259 730 368 590 756   5
 126 222 104 378 802 798 220 620 387 702 196 718 698 234  97 146 219 700 745 188 808 369 123  26 119 755 770 807 132
  59 354 775  58 692 783 227 777 312 621  87 675 781 244 666 155  27 769 642 106 331  42 694 688 804 721  46  62  11
 282 651 805  69 179 806 187 236 415 767  80 462 747   8  21 304 261  25 723 218 768 328 786 631 800 789  84 762  15

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00005e+07us (= 10000.5ms, 10.0005s)
Wall-clock time (full program): 1.00613e+07us (= 10061.3ms, 10.0613s)
Satisfaction error: 3
Number of search iterations: 2467
Number of local moves: 1131 (including on plateau: 447)
Number of local minimum: 244 (including on plateau: 50)
Number of resets: 1
Number of restarts: 0

Problem in row 20: 94 585 505 474 654 460 178 574 604 796 518 19 33 480 64 153 538 549 600 594 561 539 16 649 515 197 140 664 457 => the sum is 12210 rather than 12209
Problem in row 25: 302 542 668 650 785 739 253 627 658 636 75 683 748 82 9 134 117 665 144 17 705 528 697 50 23 799 269 602 1 => the sum is 12208 rather than 12209
Problem in diagonal 1: 835 20 556 720 774 727 788 643 837 595 815 784 393 560 332 294 12 6 35 796 7 63 43 18 785 30 104 354 282 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 688   6 402  13  41 417 144 795 753   4 714 790 298 771 751 350 814 668 202 330 812 801 593 107  51  85  14 686 109
  80 183 718 679 112 744 637 676 742   2 784 726  94 665 678   3 653 227 124  46 797 743 568  75  43 607  33 136 634
 237 226   9 666 186 819 423 604 789 203 793  55  59 768   8  69 749 242 160 762 610 700 747 128 167 659  12 626 733
  47 638 732  27 596 796 224 317 817 249 377 770 312 756 662 243 635 304  28 355 780 694 601 147 163  24 570 240 105
 360 172 783 791  17 755  45 731 552  30 620  67 215 754 734 281 672 129 213 617 246 745 641  68   1 571  97 645 657
  99 223 759 572  11 669  58 776 677  15 794 583 269 766 693 131 701 110 145 191 696 331 587  35 197 673 715  50 683
 134 280 706 675 415 689  54 322 200 581 713 640  66 630 531 195 578  73 625 565 681 684 150 137 173 642 230 179 661
 103 104 631 545 111 667 614   7 521 222 591 737 176 687 680 182 685  92 663 624 509 165 600 541  76 628 384 158 506
 560  83 463 613 157 605 557 728  78 448 529 534  63 671 623 236 542 155 654 118 196 486 619 563 247 585 434 142 520
 205  52 457 567 532  18 491 712 431 608 569 505  22 422 407 180 558 588 357 302 690 695 646 412 208 633 327  20 595
 589  98 544 547 586 523 468 527 382 492  81 101 273 525 763 500 575 291 310  32 441 514 524 537 204 490 279 454 559
 421 341 516 477 170  88 400 643 201 510 621 482 460 467 602 345 609 655 277  61 622 577  10 444 323 536 286 590 475
 418 546 476 528 615 340 363 465 339 470 239 106 385 429 539 473 515 383 481 366 306 479 573 162 266 458 550 496 443
 356 561 555 543 159 388 353 428 456 344 499 411 289 369 511 254 538 461 300 405 452 453 564 303 335 535 389 414 584
 501 394 420 437 517 438 436 498 507 233 396 445 480 354 321 464 530 228 299 432 472 416 478 483 371 451 409 488 311
 551 265 376 379 682 449 424 319 282 603 244 373 410 566 466 390 450 446 352 368 459 471 329 333 487 576 271 489 399
 540 455 495 580 494 395 440 419 161 392 292 367 599 219 156 365 349 207 391 362 403 484 380 430 664 250 711 782 427
 364 721 401 194 309 225 351 263 325 387 374 413 398 359 270 692 297 705 658 723 337 497 404 148 504 397 518 426 549
 800 433 824 138 347 358 307 264 209 447 833 425 697 288 248 294 308 469 660 342 378 313 381 386 522 293 738 229 278
 315 736 305 598 493 238 393 253 296 719 370 258 764 275 408 343 251 252 474 802 508 326 336 301 808 206 649 314 218
 259 803 261 171 268 290 722 295 710 346 372 188 579 130 272 702 189 375 169 611 826 232 334 704 716 174 554 670 287
 656 835 231 284 798 485 792 809 121 652 143 235 765 256  57 439  48 778 177 556  65 838 154 190 703 320 184 503 135
 629 217 117 786 616 178 151 187 513 740 139 285 435 255 198 644 442 193 175 822 257 114 839 729 724 332 406 276 810
 727 519 318 140 348 820 214 262 283 185 220 829 707 234 102 720 328 781 597 594 164 125  26 799 533 133 831 502 168
 211 627  70 115 639 361 821  84 267 241 245 837 612 149  89 725  21 512 739 636 116 126 632 816 806 212 708 582 210
 127 562  44 818 774 216 141 592 830 773  49  82 606 192  60 746  91 647 825  39 153  53 274 823 775 709 788 221 199
 772 548 338 108 811  96 750  71 553 717 462  93 767  56  42 787  16 779 650 316  64  37 113 748 574 260 152 752 777
 691 840  77  86 757  19 785 100 119 760 120  38 674 122 813 758  29 841 699 827  90  23  34 832 761  40 804 324 146
 769 741 181 132 648 123 651  62  95 836  25 834 735  74 526 698  36 618 805   5  79  87  72 828 807 730 166 815  31

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0002e+07us (= 10002ms, 10.002s)
Wall-clock time (full program): 1.00627e+07us (= 10062.7ms, 10.0627s)
Satisfaction error: 3
Number of search iterations: 2216
Number of local moves: 919 (including on plateau: 284)
Number of local minimum: 185 (including on plateau: 35)
Number of resets: 1
Number of restarts: 0

Problem in column 11: 714 784 793 377 620 794 713 591 529 569 81 621 239 499 396 244 292 374 833 370 372 143 139 220 245 49 462 120 25 => the sum is 12208 rather than 12209
Problem in column 15: 751 678 8 662 734 693 531 680 623 407 763 602 539 511 321 466 156 270 248 408 272 57 198 102 89 60 42 813 526 => the sum is 12210 rather than 12209
Problem in diagonal 0: 688 183 9 27 17 669 54 7 78 608 81 482 385 369 321 390 349 705 660 802 826 838 839 799 806 709 152 324 31 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 401 828 673 746  82 836 774  47  75  34 664 688 718  52  48 609  71  18  43 575 681 791  54 766 550 104 717  73 491
 771 198 745 123  84 675 112  23  76  45 603 744 802  50 793 657  29  96  41 700 552 773 146 671 651 291 122 841 795
  40 143 494 798 770 785 824 621 823 121 254 214 141  44  37 693  69  30  67 686 194 724 301 712 118 738 416 558 794
 710 830 725 406 178 716 642  95  46 164 641 201  80 119  35 572 576 155  66 707 216 714 113 761 578 452 140 772 799
  83 790 698 139 839 680 138 176 132 560 694 736  79  90 185 590 613 136 197 182 762 788  70 598 391  99 169 782 813
  93 203 789 218 160 431 154 500 796 217 832 734 222 116 781 607 594 134 173 838 253 205 175 829 731 192 224 168 840
 490 174 818  81 238 663 451 179 521 234 778 242 202 231 227 740 646 166 184 600 581 730 525 423 601 383 117 180 804
 163 255 208 187 137 667 296 267 583 210 775 313 190 230 769 691 570 243 129 835 557 837 343 232 825 407 128 331 831
 220 250 643 152 264 588 150 289 819 229 809 325 244 225 249 786 807 260 268 256 706 655 619 262 826 261 177 211 659
 181 226 320 259 302 661 417 342 303 834 385 284 424 293 335 337 764 199 297 372 743 209 615 319 767 696 365 240 720
 247 171 271 375 469 544 702 269 223 265 833 797 312 298 328 364 787 276 252 370 723 361 347 425 614 392 346 324 524
 379 270 310 339 274 587 384 292 332 475 354 377 311 395 422 316 780 760 322 466 822 348 546 307 479 487 315 283 477
 440 290 362 353 356 459 389 378 482 314 363 411 382 388 278 374 755 530 258 427 402 358 763 326 532 713 308 371 447
 304 373 456 367 442 429 336 515 381 409 418 309 461 413 414 480 360 446 453 300 488 474 408 497 520 628 345 338 445
 323 438 351 341 420 470 462 327 288 555 380 279 432 376 419 369 433 352 523 426 412 455 387 493 526 443 340 735 454
 215 318 528 437 396 441 527 386 435  36 428 556 394 357 415 507 349 536 405 448 368 434 545 501 509 478 511 463 286
 495 366 535 350 465  62 399 403 499 404 468 516 460 439 410 573 436  60 584 393 510 549 398 450 359 400 503 484 239
 110 481 147  65 492 237 165 543 539 538 334 449 457 512 595 548 629 473 677 571 529 627 485 564 522  16 114 679 111
 513 632 534 476 514 299 547  14 219 626 467 464 489 508 591 519  91 625 444 567 483 344 565  42 183 248 553 589  63
 537 554 582 563 559 277 612 624 125  89 212 605 458 540 506 191 245 599 505 151 207 648 708   7 101 630 585 517 272
 542 472   5 496 562 602 486 704 193 620 126 498 531 617 623 604  22 636 566 430  10 533  97 504 130 233 580 541 246
 803 658 596 670 616 161 650 159 695 709 102  39 597 647 568  57 109 611 692  86 574  72 280 127 153 195 653 726 204
 645 593 131 719 660 158 228 666 685 606  58 133 518 665 672 135 330 390 701  15  98 100 750 639 329 610 608 167 200
 637 577 579 569 640 306 634 592 633 703  26  27 748 722  17   3 551 622 654  13  85 108 189 684  78 145 784 711 172
 697 649 144 687  59 213 618 768 721 668  31  24 732 733 682  12 186 699 662 669 273   8 656  38  25 753 674  51  77
 638 727 124 749 635  32 683 801 502 816 162 275 705 792 690 149 397 729 689  92 287  49  64 281 188  20 758  68 107
 715 739 157 737 815 103 294 678 148 305 631 652 333 783 742 235 282 808 759 221  87  55 421 156 321 810  88 106  28
 811   4  21   2  53  94  61 800 170 747 115 756  11 754 236 196 471 814 777 757 355 241 812 586 285 644 752 779 105
   6   1 263 805 728  33  74 751 765 676 266 561 776 820 142 295 257 806 821  56 251  19 827   9 317 741 817 120 206

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00004e+07us (= 10000.4ms, 10.0004s)
Wall-clock time (full program): 1.00615e+07us (= 10061.5ms, 10.0615s)
Satisfaction error: 2
Number of search iterations: 2081
Number of local moves: 796 (including on plateau: 278)
Number of local minimum: 157 (including on plateau: 33)
Number of resets: 0
Number of restarts: 0

Problem in column 2: 828 198 143 830 790 203 174 255 250 226 171 270 290 373 438 318 366 481 632 554 472 658 593 577 649 727 739 4 1 => the sum is 12210 rather than 12209
Problem in column 28: 73 841 558 772 782 168 180 331 211 240 324 283 371 338 735 463 484 679 589 517 541 726 167 711 51 68 106 779 120 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 671 367 283 742  32 762 220 143  19 821 806 801 649  35 721 648 161 729 761 270  83 800  14  90 176 100  55 784 466
 638  41 144 128 191 744  39 338   1 720 802 820 807 783 687  12 799 769 712 250  18 791  77   6 817 724 281  67   3
 130 743 415 584 171 516 108  65  62 728 798 705 733 148 793 106  40 730 763 752  49 134 639 139 778 660   8 621  91
 120 701 287  17 273 734 391 401  70 682 646 777 630 691 760 496 564 747 780  25  48 754 285 122 498  15 362 181 152
 723 722  16 709   2 420 339 173 154 772 711 759 779 133 717 147  13 683 710 589 560 790 266 112  10 674 355  79  92
 637 655  34 661 386  29   7 323   4 698 731 703 668 704 765  42 636 205 714  43  61 598 597 183 585 526 566 289 159
 136 669 200 644 216 751  47 290 193 696 557 659 651  74 554 131 657 441 578 626 608 587 124   5 640 656 604  97 118
 631 645 313 692   9  11 165  23 517 543 672 572 749 613 575  36 658 203 547  27 232 525 567 650 433 619 609 227 146
 600 540 157 484 354 615 214  85 556 364 436 617 475 663 601 334 706  22 219 588  31 647 291 662 541 511 495 247 153
  56 715 312 634 195 558 244 114 614 491 596 481 444 502 732 138 718 258 421 372 474 527 390 501 548 577 513  60  24
 454 622 352 592 253 591 288  98 546 485 245 381 519 653 581 479 427  87 376 505 583 667 156 534 430 488 562  28 228
 509 486 412 654 409 452 137 103 521 499 456 377 429 478 552 571 398 239 503 482 292  20 388 565 686 455 426 514 196
 360 428 432 405 275 490 472 234 347 528 396 593 453 480 563 411 297 335 439 443 326 464 538 394 535 497 333 378 363
 524 267  45 447 471 272 349 155 544 380 451 545 470 494 437 446 461 416 459 603 515 365 298 319 507 449 522 506 492
 431 331 278 424 186 448 531 407 268 465 356 366 462 595 418 413 467 520 404 445 402 460 529 371 458 399 508 425 442
 450 336 530 353 553 489 302 523 568 469 358 395 434 370 274 307 422 504 389 321 493 277 841 316 419 264 374 440 438
 383 382 346 293 340 487 357 310 361 414 397 463 824 406 392 536 387 822 236 384 348 324 788 314 269 500 238 375 533
 400 369 635 332 620 632 666 537 242 341 468 435 261 320 260 423 385 359 477 182 576 642 204 308 257 344 794 208 532
 473 343 665 226 539 373 582 618 311 351 549 243 317 259 233 263 379 175 342 633 417 309 786 512 294 318 812 160 727
 569 328 737 284 643 315 623 689 345 231 254 121 303 329 225 262 256 192 279 299 726 295 713 322 304 305 831 830 599
 202 280 774 187 590 217 559 693 725 249 337 325 190 296 301 741 300 700  76 757 410 252 166 677 330 235 276 813 551
 255 248 716 174 785 184 629 823 178 199 206 237 180 224 141 819 403 675 327 805 265 825 170 211  58 222 753 809 688
 770 198 510 215 745 241 561 680 768 368 229 149 210 815 240 602 829 586 246 113 702 111 518 201  57 221  86 611 627
 218  46 758 194 681 766 678 787 685 115 107 164 163 230 126 189 828 607 207 393 775 286 833 690 282  96 150 550 605
 123  71 694 251 483 135 699 707 684  64 169  94 177 827 172 808  84 570 168  63 767  82 223 838 840 185 738 679 814
 104  59 606 789 676 127 834 628 756 179 197 151 116 145 158 739  81 350  99 708 771 408 837 839 212 746  50 271 573
 795  53 457  95 755 109 792 832 670 209  66  30  21 773 101 697 119 102 105 804 580  89 664 782 306  72 695 610 826
  44 816 625 188 797 117 612 836 781  80 125  33  26 132  52 740 641 110  54 652 555 142 167 796 810 616  51 776 835
 803 748 476 811 579 624 764 594 719  68  88 213  69  37  78 673  93  73 818  75 542  38 140 750 129 735 162 574 736

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00028e+07us (= 10002.8ms, 10.0028s)
Wall-clock time (full program): 1.00637e+07us (= 10063.7ms, 10.0637s)
Satisfaction error: 2
Number of search iterations: 2077
Number of local moves: 905 (including on plateau: 377)
Number of local minimum: 154 (including on plateau: 59)
Number of resets: 0
Number of restarts: 0

Problem in row 9: 600 540 157 484 354 615 214 85 556 364 436 617 475 663 601 334 706 22 219 588 31 647 291 662 541 511 495 247 153 => the sum is 12208 rather than 12209
Problem in row 11: 454 622 352 592 253 591 288 98 546 485 245 381 519 653 581 479 427 87 376 505 583 667 156 534 430 488 562 28 228 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 368  43 836 666  71 828 794  30  87 716 626 713  67 165 819 402 662  14 331  25 766  40  57 704 101 807  90 835 546
 811 124 137 570 832 521  72 195 179 200 768  93  70 252 210 734 647  65 585 603 249 120  94 808 783 618 717 410 742
  60 829 638 837  61 830 189 633  49 771 135  97 221 100 782 559 172 272 784 798 824 114 284 743 269 765 238  82  73
 243 831  47 675 158 790  38  33 380 757 669 840 128 102 731 711 155  45 593  76 780  48 262 707 558 752 637  88 375
 185 280 247 687 373 715 735 228 112 351 685 770  24 206 705 779 169 251 683 447 489 207  44 679 104 509 621 775 149
 506 523 173 776  55 841  75 354  74 197 147 163 126 703 678 517 826 276 549 689 822  26  91 817 265 591 769 453 127
 695 745 199 654 217 543 740  89  81 839 329 168 304 184 319 754 188 151 833 652 532 342 230 697 444 578 275 194 233
 586 628 204 372 139 314 291 136 344 749 292 725 361 297 660 602 201 310 748 690 746 174 241 764 134 516 317 412 256
 171 244 161 404 234 674 236 353 834 170 193 263 670 227 175 571 806 122 760 761 810  96 167 648 250 701 337 390 781
 762 357 117 485 130 341 294 401 226 787 426 350 644 299 376 308 255 392 303 630 816 424 400 646 352 385 682 242 379
 778 355 349 723 542 311 274 191 209 302 369 224 793 277 268 727 283 313 190 812 827 433 325 569 211 388 407 463 296
 266 334 365 359 409 617 335 279 306 493 257 371 419 427 332 281 347 544 573 758 384 180 471 631 305 722 756 415 273
 627 394 198 838 287 315 288 459 445 129 309 414 582 338 312 494 821 382 577 659 229 143 307 397 431 491 398 562 383
 449 363 396 600 282 560 429 483 393 564 286 295 712 267 439 320 362 343 458 370 176 378 505 395 481 451 540 492 421
 442 258 511 667 218 526 454 381 476 364 374 554 386 514 436 261 435 330 391 377 441 545 290 333 527 528 328 327 535
 518 536 462 450 423 259 469 434 420 322 264 541 300 367 403 452 437 360 298 643 461 326 411 417 358 529 624 432 293
  36 502 240 348 405 584 387 561 399 588 474 490 525 580 572 623 428 345  46 539 455 565 477 239   8 488 566 594 145
 548 448 495 497 680 547 498 109 446  27 430 346 486 425 470 537 612 568 456 465 438 524 611  31 482  80 467  13 473
 316 479  98 466 530 153 496 606 620 520 118 422 510 607 508 555 677 464 285  42 107 597 653 220 634 440 598 148 340
 519  15 507  37 105 157 480 657 289 443 531 515 503  17 538 132 650 614 550 418 500 487 592 222 478 499 553 688 513
  64 159 595 301 730 177 457 629 460 587 575 684 468 658 596  85 609 389 248 225  19 641 636 110   9 232 581 599 686
 534 579 504 192 691 589 610   7 557 605 702 512 246 661 556 133  86 671  21 323 214 755 108 253 693  50  52 738 567
 152 166 720 141 413  79 590 551 774 484 651 146 751 809 131 125 601 475  23 270 237 772 472 150 739 223 408 622 533
  41 804 574 154 655   1 708 801 706  77  69 750 318  56 619 718 111 747  66  84 142 696 802 260 645 205 119 632 649
 178 672 501  20 803 744 733 795 732  34  54 639 737 753  51 164  63 710  28 121 215 640 694 321  18  99 235 726 729
 416 724 668  11 699  12 719 721 789 219 656  83 202 728 186 271 604 796 613 160  95 823 759 138 773 231   2  58  53
 698 162 800 182 815 144 123 692 366  68 700  10 805 552  78 187 116 673 336 115 183 583 616 181 709  29 681 791 814
 615  92 825  35 676   5 356 736 664 324 406 254 635 818 156   4 278 799 741 212 213 767 797  16 663 106 208  22 786
 625 563 642  62 576  32 339 665 792 522 714 777 216 820 103 203 608 788 140 245  39 763 813 113 785 196   3   6  59

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00628e+07us (= 10062.8ms, 10.0628s)
Satisfaction error: 3
Number of search iterations: 1916
Number of local moves: 695 (including on plateau: 129)
Number of local minimum: 162 (including on plateau: 16)
Number of resets: 1
Number of restarts: 0

Problem in row 14: 449 363 396 600 282 560 429 483 393 564 286 295 712 267 439 320 362 343 458 370 176 378 505 395 481 451 540 492 421 => the sum is 12210 rather than 12209
Problem in row 23: 152 166 720 141 413 79 590 551 774 484 651 146 751 809 131 125 601 475 23 270 237 772 472 150 739 223 408 622 533 => the sum is 12208 rather than 12209
Problem in diagonal 1: 546 410 238 752 104 817 230 174 810 630 190 544 821 320 436 367 525 346 118 443 460 7 590 1 803 11 800 92 625 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 785 121 438 516  69 176 801 830 730 668 823  93 758  75 648 796 102 174  26  59  76 115 731 155 302 562 732 802  46
 180 161 835 649 682  56 813 800 101 735 600 504 827  62 199  82  67  57 232 106 128 192 746  24 826 829 814 819  83
 773 166 838 591 262 463 816  42  91 692 581 738 636  96 131 832 108 295  92 841 124 685 653  43 683 764  34  79  60
 753  21 700 535 179  58 806 825 831 126 559 113 821 116  70 715 169 473 135 606 775 163 804 144 644 243 710 114   1
 183 127 789 603 138 379 794 122 171 658 652 528 733 217 142 837  80 364 119 218 194 627 703  94 828 561 836 394 118
 167 807 154 726 291 839 817 129 254 323 449 815 741 204  35 602  87 470 173 103 493 143 508 196 812 457 573 351 490
 245 781 818 751 139 510 698 263 776 177 822 782 152 276 235  88 182 736 253 168 170 314 366 191 719 743 222 241 391
 172 213 548 579 140 526 570 313 704 247 723 840 748 268 231 284 410 266 134 151 565 338 701  95 790 744 184 141 584
 335 525 160 808 251 696 259 436 820 768 717 206 272 376 186 165 285 694 239 212 770 411 687 258 224 727 187 219 316
  71 202 203 811 242 635 292 149 109 783 405 834 282 824 188 307 220 601 380 610 760  97 442 426 506 714 105 256 755
 339 274 248 670 363 787 278 322 211 277 724 304 257 269 300 273 396 763 833 305 780 337 503 428 347 709 325 320 267
 329 229 417 381 240 721 419 309 491 665 210 421 260 317 371 321 460 810 308 360 455 667 443 255 407 693 301 374 575
 392 406 214 458 395 444 538 480 261 797 425 499 409 433 294 400 483 432 354 215 378 344 437 296 431 357 651 534 452
 280 611 312 430 382 604 384 414 324 369 459 225 445 386 230 367 461 639 471 424 572 346 466 318 375 467 397 446 605
 164 408 332 501 388 541 319 558 543 362 413 552 342 453 476 404 429 283 481 341 326 519 475 478 509 415 343 336 518
 350 643 393  36 348 288 468 472 511 496 389 529 365 345 208 522 557 489 252 434 246 387 370 402 479 427 447 587 769
 340 385 416 349 454 567 390 310 488 358 484 420  89  12 469  49 540 423 377 435 624 545 633 582 451 450 580 401 588
 465 549 517 418 505  23 353 598 521 546 619 373 544 513 474 439 532 527 333  29 551 422 303 486 477 123 456 306 207
 485 663 676 403 608 117 494 596 507 583  64  41 563 679 487 542 539  48 482 497 728 331  52 566  86  11 609 616 136
 512 368  55  54 620 286 576 708 462 622 298  20 574 712 586 553 642 157 623  65  37 216 279 533 654 158 650 564 625
 560 607 536 181 615 130   5 707  84  38 137 537 634 749 664 597 662 287 618 688  13 554 197 590 681 159   8 441 530
 673 647  68  15 523 250 628 531 233 236  72 524 621 669 657 632 734  39 772 798 569  73 234 555  30 334 281 713  98
 578 556 153 238 739 612 223 412 594  66 237 190 104 614 645 678 448 270 638 226  17 440 515 795 175  40 691 550 765
 495 754 185 244 761 660   3 729  78 520  51 147  85 592 705  16 547 568 742 702 383 805 249 779 271 399 178  47 514
 716 756 626 227  32 327 110 697 502 585 264 684 221 640 613 132  50 297 631 672 328 577 299 500  10 133  81 706 793
 792 111 737 641 659 359  45 107  25  63 162  22 372 198 745   9 774 788 593 699 646 674 145 759 189   7 656 492 740
 711 677 722 125 720 209 146   4 571  28  90 201  27 666 752 771 784 289 791 757 356 661   2 767  33 112  14 725 498
  53 293  19 195 655 352 120  31 599 265 630 290 228 762 750 778 786 275 361 799 747 637 205 690 193 671 464   6 355
 311 148 100  74 809 595  44 315 617 156 150 777  99 686 718  18 675 695 766 689 398 589  61 803  77 200 680 629 330

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.00625e+07us (= 10062.5ms, 10.0625s)
Satisfaction error: 2
Number of search iterations: 2311
Number of local moves: 766 (including on plateau: 204)
Number of local minimum: 182 (including on plateau: 37)
Number of resets: 1
Number of restarts: 0

Problem in column 6: 176 56 463 58 379 839 510 526 696 635 787 721 444 604 541 288 567 23 117 286 130 250 612 660 327 359 209 352 595 => the sum is 12210 rather than 12209
Problem in column 24: 155 24 43 144 94 196 191 95 258 426 428 255 296 318 478 402 582 486 566 533 590 555 795 779 500 759 767 690 803 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 496  35 748 644 113  92  69 678 617 786 218 591 671 828  49 817  39 597  30 776 151 544  53 729 760  29  47 162 840
 581 464 562 780 645 105 114 109 183 176  25 697 839 553 801 796 657  46  38 530 126  34 619 140 742 737 169 774 167
  81 278 841 548 674 204 161 212 656 711 488 643 675 777 173 691  60 222  19 831 456  27  50 130 800 115 795 826  65
 107 814 626 206 621  82 705 700 779 180 599 819 160 762  79 150 100  99 128 794 131 651  56 335 750 802 765 138  71
 735  80 797 733 811 182 192 400 813 835 504 559 827  96  33 695 142  77 338 244 111 609 286 577 412 306 479 197 139
 248 172 156 718 706 825  58 550 727 664 749 726 602 252 154  87  55 259 189 220 217 652  94 837 708 268 686 475 155
 307 200 788 636  67 251 808 746 598 367 542 567 688 238 376 203 211 229 277 720  73 563 266 451 531 363 552 237 354
 223 104 784 625 117 713 230 824 707 370 807 723 379 761 191 185 170 224 198 219 207 834 194 477 703 320 384 227 309
 225 369 255 672 213 409 287 702 528 635 201 683 525 283  32 425 184 716 188 751 836 272 195 190 669 532 763 241 228
 405 234 153 612 326 132 239 541 833 254 317 744 260 714 202 411 360 829 240 356 472 815 305 366 590 186 593 321 399
 424 471 144 580 304 271 606 773 830 637 698 284 265 314 127 263 325 570 313 187 596 725 351 355 618 136 381 279 382
 343 148 261 404 408 397 250 838 685 728 631 607 832 216 177 215 199 689 344 236 337 767 452 390 453 242 372 296 292
 299 419 315 401 302 500 330 491 623 221 798 348 736 378 269 353 210 253 243 467 665 741 437 331 595 235 594 447 208
 426 458 294 468 514 422 332 474 347 506 323 293 297 375 431 438 489 395 535 613 380 465 417 336 461 490 342 446 442
 483 434 449 470 443 571 421 450 298 466 444 364 258 396 327 357 476 318 543 527 508 391 473  44 352 373 455 564 554
 517 418 393 274 311 383 440 460 346 329 301 608 481 430 414 582 256 303 371 340 556 423 403 568 578 358 413 407 546
 110  62 459 448 410 575 502 387 394 648 499 439 291 503 386 589 724 416 482 469 267 569 436   9 365 524 398 520 328
  20 558 549 523 478 611 486 196 359 432 159 497 308 526 510 495 603 521 537 505 638 285 516  36 333 534 108 494 392
 629 627 484 245 551 498 463 583 288 579 361 233  70 385 280 574 388 573 445 428 406 480 462  59 350 152 232 641 743
 592 565 522 415 560 441 518  72  78 787 165  68 334  95 768 545 576 322 585 147  97 270 604 717 300 536 275 601 654
 630 680  91  61 620 515 493 158 181 588 145 205 209 492 533 696 435 704 557 513 339 124 632  17   4 616 586 663 722
 639 758 509 538 539 529 519  64  63  66   7 146 429 653 540 660 673 193 433 661 101  26 655 587 312 628 129 485 667
 566 677 264  86 646 547 341 226 247 214 610 282 512 324 615 249 701  43 792  23 666 377  18 684 116 647 668 507 561
 572 812 420 168 781   2 721 120 119  22 659 125 662 624 745  54 511 246 764 163 679  93 681 102   1 634 487 584 658
 810 106 389 276  51 709 712 362 112 137 290 133   6 650 821 731 747 427 649  52 457 122 614 755 345 793  57 753 143
 740 782  11 295 775 734 682   5 121 118  88 149 640 316 818  83 600 757 670   8 806 319 690 710  41  10 605  14 622
 174 754 141 273  12 732 642 752 134 178 349 310 166  76 816 123 676 633 804 555 402 289 693 756  42 175  16 770 766
 803  15 759  13  40 687  89 179 262  74 778 135   3  28 719 694 822 739 692  85 738 374 785 791 257 699  75 103 771
  24 715  45  98 171  90 799 157 281 501 454 231  84 164 823  48 820 809 805 789 790 368 772 730  21 769 783  37  31

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00022e+07us (= 10002.2ms, 10.0022s)
Wall-clock time (full program): 1.00632e+07us (= 10063.2ms, 10.0632s)
Satisfaction error: 2
Number of search iterations: 1888
Number of local moves: 922 (including on plateau: 428)
Number of local minimum: 138 (including on plateau: 52)
Number of resets: 0
Number of restarts: 0

Problem in column 4: 644 780 548 206 733 718 636 625 672 612 580 404 401 468 470 274 448 523 245 415 61 538 86 168 276 295 273 13 98 => the sum is 12210 rather than 12209
Problem in column 21: 151 126 456 131 111 217 73 207 836 472 596 337 665 380 508 556 267 638 406 97 339 101 666 679 457 806 402 738 790 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 841 831  91 833 104 794 140  44  36 740 657 138 780 727 660  33 187 575  72 649 645 112 463 165 110 115 117 730 820
  58 840  94 832 135 770 356 592 487 814 705 498 231 642 121  35 784 118  67 812  99 579  80 120 837 839  76 477 111
 526 102 823 826 659 745 311 161  83 600 567 698 654 708 764  61 798 166 128  98  54 512 143 171 222 124 767 675  63
 671  77 193 836 692 693 586  90 229 202 183 785 569 191 804  79 712 103 145  96 739 817 801 759 208  85  57 747  60
  82 227 213 605 719 626 538  92 136 293 228 788 673 167 696 176 192 263  31 652 789 551 796 835  69 142 830 647 153
 207 146 105  75 828 609 716 125 753 695 508 810 829 824 338 159 772 175  64  32 237 668 180 827 326 137  78 802 184
 314 130 155 560 259 235 808 154 709 815 181 714 703 670 757 253 242 199 266 261 201 724 821 133 594 260 164 732 195
  86 340  87 687 631 627 547 838 347 572 221 701 457 270 707 123 243 141 172 819 289 729 443 268 333 241 226 751 313
 255 194 170 428 599 188 685 249 822 206 834 539 341 688 325 264 452 230 346 763 216 510 209 281 699 389 296 811 220
 342 279 114 550 410 375 633 332 318 768 198 779 399 661 367 358 331 205 324 760  56 782 502 169 471 351 468 684 223
 245 275 251 535 257 200 783 310 520 376 722 667 608 378 197 369 339 403 786 329 368 737 752 182 499 225 401 247 248
 320 328 288 742 672 385 690 327 350 379 407 615 157 309 272 453 357 700 236 250 271 715 203 501 374 807 267 556 278
 285 294 297 391 287 406 277 400 388 414 377 394 371 445 553 467 413 336 384 806 404 552 563 283 409 380 544 573 516
 362 300 769 486 390 408 612 427 476 460 423 321 234 450 480 506 381 354 470 158 425 469 301 335 680 424 337 426 345
 461 302 284 441 513 291 437 343 306 421 528 525 418 322 517 578 444 319 387 454 449 451 290 352 436 447 478 466 549
 519 546 483 442 527 417 497 395 484 515 372 503 359 373 521   5 422 317 432 316 464 365 217 465 564 489 411 474 315
 439 529 504 366 286 545 494 666 412 344 361 434 431 524 472 420 438 492 405 402 455  18 571 462 127 507 416 178 511
 495 383 482 292 304 269 173 386 566 435 637 459 614 490 541 479 505  59 493 456 396 218 583 577 232 534 475 100 576
 509 522 596 122 219 360 156 488 530 485 139 349 607 473 131 496 252 674 617 558 532 211 624 639 262 641 446   9 562
 353 542 429 258 323 419  74 597 694 196 588  29 149 581 587 595 591 646 629   1 398 152 636 392 280 613 758 109 590
 559 580 643 132 108 555 151 561 415 568 625 106 611 308 574 653 514 621 603  25   2 305 616 589 274  39 440 282 750
 565 619 720  26 537 533  27  84 630   7 610 246 548 433 585 662 601 531 664 634 518  48  38 523 276 651  81 364 448
 650 691 593 119 185 604  55 813 116 126  71 303 144  53 622 543 658 648 540 725 582  34   3 602 363 686 710 179 791
  50 458 618 430 620 491 554 190  43 238  37  89 632 536  93 762  30 628 754 239 706 312 584  21 778 500 773 256 787
 704 677 797  62 623 134 557 665 212  68  51 162 299 168  70 775  14 606 679 748 741  17  42 793  24 795 776 233 717
 749 735 598  22 382 163 174 689 681  97 656 147  95  10 148 818  73 774 697 273 803 210  52 726 728  40 702 224 743
 790 766 397  28 101 254 129 676 683 718 682 215  41 655 186 570 723 393 298 204 731 295 711 177 733 805  23 214  11
 756  15 669 370  47   6 240 738 771  13 334  45  66  88   8 736 721 734 755 640 635 355 160 816 663 265 744  19 800
  16 481 746 713 792 107 809 777  12 644 307 150 189  65 113 781  20 799 765  49   4 761 825  46 638 678 348 244 330

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.53472e+06us (= 8534.72ms, 8.53472s)
Wall-clock time (full program): 8.59592e+06us (= 8595.92ms, 8.59592s)
Satisfaction error: 0
Number of search iterations: 1595
Number of local moves: 766 (including on plateau: 281)
Number of local minimum: 109 (including on plateau: 29)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 731  80 688 224 771 795  73  41 718 674 807 182 139 814 121  67  74 156 707 583 654 117 501 759 812  71 173 348 329
 752  69 581 612 649 758 202 120  83 668  68 710  88 632 631 108 129 603 208  89 676 262 636 820 755 119 411  90 680
 837 768 420 149  26 521  54  86  72 750  62 811 803 123 696  63 105 827 838 161 684 729 593 234 642  55 829 116 155
 657  87 288 372 207 825 495 140 110 689  64 142 800 760 384 177 127 746 126 196 741  94 574 104 823 826 716 164 775
 834  95 824 742 231 579  49  96 809 734 236 122 206 779 641 118 125 577 287 765 153  53 717  84 830 148 633 608 134
 256 240 804 186 828 428 135 106  47 589 219 799 160 282 778 109 100 210 482 723 810 115 334 836 776 178 817 653 209
 267 168 192 259 217 703 669 124 806 792 190 188 201 822 273 673 204 665 785 791 252 147 832  52 620 248 221 587 261
 171 298 290  99 111 562  97 813 220 740 238 183 280 769 316 656 818 285 781 212 279 841 671 265 623 152 181 494 764
 292 218 320 113 154 563 274 302 766 708 269 833 324  61 798 343 193 337 796 363 400 336 815 213 352 237 711 751 367
 253 831 233 371 347 700 314 300 373 345 245 167 214 260 794 732 239 226 679 303 835 166 330 293 761 151 607 358 782
 412 408 609 185  56 427 264 296 404 730 839 407 169 554 249 626 398 299 535 380 576 341 687 453 534 289 397 431 254
 242 436 840 355 370 697 675 291 339 227 271 307 310 318 276 772 442 695 402 368 244 235 745 328 685 361 246 278 454
 313 275 195 283 354 541 391 360 241 250 364 159 468 416 325 715 342 432 713 532 797 350 132 359 639 297 762 821 383
 403 319 470 378 446 538 389 478 452 597 374 421 479 338 308 281 295 351 399 435 451 405 510 366 651 467 377 381 450
 379 301 422 547 362 426 473 401 531 536 284 444 503 353 513 390 455 382 157 396 424 356 504 498 365 511 456 465 375
 409 492 323 548 472 386  85 509 394 423 445 270 578 415 592 434 333 525 461 349 388 502 425 441 150 458 419 545 438
 496 483 463 440 537 481 459 571 523 506 255 410 357 392 464  76 489 335 406 568 517 533 528 332  19 418 395 230 526
 443 488 540 131 575 311 460 485 644 560 573 475 486 645   2 565 449 433  37 622 469 582 199 598 263 551   3 143 477
 516 552 507 447 595 228 530 519 566 471 322 487 413 518 569 584 508 617  82 194 520 176  35 606 216 550 306  46 529
   4 613 457 480 602 258 662 615 527 243 493 524 681 652 474 570 369 205 512 567  98 448 145 580  42 491  21 277 599
 429 439 542 559 637 476 515 618 101  59 305  38 628  51 627 170 744 546 376  81 331 610 462 660 268 655 553 585 144
  45 561 634 664 543 215 621 564 698  78 722 647   9 738  91 484 294 505  92 586 600  34   5 544 247 604 136 522 726
 558 614   8 466  30  43  22 601 720  65 691 705 590 616  24 344 712 646  93 539 640 594  32 704 137 499 635 172 709
 667 753 158 670 728 321 630  15 690  79 749 790 714  60 327 556 638  17 659  75  58 625 266 128 211 661  44 430 490
 572 682 187 666 107 179 733 780 643 225 694 706 650 184  33 257 692 663  39 198 103 611 141 727 387 801  18 417 114
 189 683 326  14 789  25 629 756 197  36 658 138 385 317 203 588 672  40 223 686 133 624 557 130 232 773 702 757 747
  77 719  70 677 591 200 819 678 251  50 437 191 793 286 743 555 805  27 414 180 102 774 304 735  13 748 393 549  28
 312  23 787 788  66   7 736 767 272 163 739 724  11  48 174 699 737  57 315 619 162 786 500  20 146 725 701 816 309
 693 514  31 784 808  16 754 777  12 222 596 229 770   6 783 497 721 802 605 648 112 763  29 340  10 165 346 175   1

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.66034e+06us (= 9660.34ms, 9.66034s)
Wall-clock time (full program): 9.72122e+06us (= 9721.22ms, 9.72122s)
Satisfaction error: 0
Number of search iterations: 1874
Number of local moves: 670 (including on plateau: 189)
Number of local minimum: 138 (including on plateau: 25)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 133  71 129  78 789  22 770 823 250 719 831 310 344 772 750 448  75 706 705 726 744 149 221 450  93 785 188  43  85
  86  13 737 212 746  65 208 824  21 812 787 269  23  70 822 701 296 748 801 758 696   8   4 470  88 806  58 309 771
  47 154  51 181 727 644 676 730   3 718 786 721 144 101 820 795 401  61 407 814 153 103 173 753 281 800 760 123  82
 120  30 728  34 797 207 732 111 345 683 826 738  72  39 751 681 741 434 645 830  36  14 650 169 236  18 682  84 776
  77 150 829   2  41 299 710 740  28 832 678 127  35  20 734 694 304 654 679 774 591  25 612 546  60 762 249 241 716
  92 216 817 625 687   5 691 102  53 656 780 166 217  73 610 670 228 664 649 703 665  56 638  32 112 708 197 383 714
 558 165 778 677 365 389   7 628 203 642 575 240  29 631 578 739 231 680 736 573 544  57  38 291 510 634  31  81 599
 512 131 766 684 651 140 526  11 672 597 566 145  55 659 598  54 255 653 686 655 457 462 586 280  26 657  87  69 569
   1 294 633 135 540 257 585 663 568 531 523 182 256 613 561 685 274 576 587 483 622 472 511 162 268 620 117 159 331
 641 118 596 536 487  80 453 617 549 579 503   6 593 607 527 562  15 229 555 543 594 170 619 226 446 574 410 223 151
 528 298 514 553 533 547 713 183 517 570 484 419  10 496 461 499 488 551 532 615 421 132 305 563 497  74 460  98 148
 529 306  76 351 556 473 498 581 491 571 550 505 636 106 580 583 379 468 621 424 100 214 400 125 501 609 467 275 234
 522 276 445 600 412 417 537 477  16  37 373 486 539 584 404 480 312 624 243 495 509 327 519 451 476 493 456 283 416
 475 422 508 504 370 452 507  68 516 435 592 347 463  62 589 438 426 392 518 375 466 502 418 374 447 297 471 429 346
 474 377 420 230 382 538 530 413 525 430 442 490 605 454 489 343 415 396 479 227 258 604 425 206 334 285 524 399 515
 355 646 478 492 388 300 500 381 390 367 458 520 357 611 348 246 314 329 409 376 545 616 339 405 354 464 469 393 359
 398 534 482 311 323 293 353 265 369 449 364 288 606 455 481 783 444 439 427 330 352 423 386 564 361 432 436 459 402
 371 433 336 307 319 554 437 408 411 324 278 506 320 372 440 387 630 321 366 397 755 541 191 698 428 403 286 632 358
 363 590 209 385 213 643 277 253 395 341 325 671 328 315 267 485 743 282 808 261 406 567 368 720 290 244 130 773 557
 443 577 233 360 247 629 205 332 219 316 308 692 695 342 222 391 660 337 340 441 809 362 200 752 266 322 335 639 535
 729 799 272 141 171 803 196 693 765 218 380 810 757 138 263 251 608 271 210 224 494 601 225 326 582 242 192 588 260
 259 673 178 811 190 815 167 841 193 155 121 647 711 273 177 338 669 262 139 115 303 840 318 668 756 114 712 560 204
 796 707 137 722 313 790 819 235 245 252 105 603 356 635 172 237 675 109 119 287 136 764 767 652 199 198 292 763 124
 715 702 134 725 113 215 175 232 754 220  95 788 542 618 184  83 626  94 164 349 333 623 174 804 637 270 717 658 465
 302 834 158  97  91 559 414 248 781 195 201 301 791 825 146 161 704  49  67 163 264 792 661 431 838 176 745 667 548
 816 747 107 821 813 731 284 108 798 152 142 602 777 805  42  89 239 160  17 116  50 697 202  48 784 378 689 827 168
 779 794 513 254 690 185  59 521 724 104  33 194 640 674  27 187 384 839  45  64 627 699 782  96 818  46 700 552 179
 793 317 143 733 156 807 128 595 572 238  63 289 565 110 157 180 279 122 211  79 189 666 768 186 688 775 735 837 828
 295 835 802 648  99 350  52 126 836  66  40 147 742 749   9  19 394 759  44  12  90 723 709 761 833  24 614 662 769

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00626e+07us (= 10062.6ms, 10.0626s)
Satisfaction error: 3
Number of search iterations: 1966
Number of local moves: 942 (including on plateau: 522)
Number of local minimum: 149 (including on plateau: 46)
Number of resets: 0
Number of restarts: 0

Problem in column 13: 344 23 144 72 35 217 29 55 256 593 10 636 539 463 605 357 606 320 328 695 757 711 356 542 791 777 640 565 742 => the sum is 12208 rather than 12209
Problem in column 26: 785 806 800 18 762 708 634 657 620 574 74 609 493 297 285 464 432 403 244 322 242 114 198 270 176 378 46 775 24 => the sum is 12210 rather than 12209
Problem in diagonal 0: 133 13 51 34 41 5 7 11 568 579 484 505 539 62 489 246 444 321 808 441 494 840 767 804 838 378 700 837 769 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 841 196 553 174 833 654  48 791  99 501  54 706 158 667 822  45 795 155 182 111 604 820  91  47 250 625 547  57 783
 226 792  32 580 766 704 100 655  60 701  50 784 746 197 824 807 524  77 161 142 106 838 661 237 519 188 576  33 123
 592 131 765 115 697 562 635 733  67 207  55 748 811 136 823  65 235  66 569 107 122 214 798 497 670 806 814 125  44
 827 831 420 793 762 634 151 760 690 108  22 475 456 141 649   9 830  78 176 557 149 700 725  52 184   1 186 753  90
 716 810 263  88 230 815 120 694 599 202 618 794  82  37 801 165 305  35 778 796  53 834 302  93 800 248 781  81  69
 695 222 763 129 805 714 268 632  73 786 117 112 144 177 749 234 839  41 703 767 189 537 479 600 419 301 173 193 348
 299 734 788 663 132 738 837 705 126 143 247 153 154 104 162 483 292 167 777 804 306 627 262 754 210  98 564 619 261
 251 691 813 183 293 646 390 638 135 105 218 212 290 802 257 707 365  85 289 426 215 821 825 709 194 687 603 209 150
 648 166 739 304 331 817 303 672 148 205 270 252 195 232 219 467 657 211 223 836 816 729 425 608 172 254 775 291 244
 273 413 713 274 281 641 245 551 832 826 278 312 286 249 220 506 300 208 332 521 294 597 554 613 170 310 758 280 372
 732 269 191 751 221 335 225 643 776 313 840 363 334 308 224 611 340 389 134 240 409 352 818 366 322 271 809 266 357
 265 453 440 282 297 264 345 533 349 421 341 376 415 361 260 717 233 741 342 373 396 381 736 747 375 328 780 284 374
 199 325 504 435 394 315 828 583 434 272 323 438 180 242 231 460 674 401 347 336 279 491 378 735 458 416 471 819 241
 412 402 386 433 407 358 388 482 317 478 423 563 448 443 445 590 351 540 309 399 404 397 338 429 487 369 275 316 620
 408 318 488 339 489 360 464 508 337 515 428 354 377 368 414 359 295 477 451 344 382 449 465 430 455 410 499 536 490
 442 431 417 492 472 314 227 450 535 617 516 326 391 462 387 319 393 392 454 307 459 437 436 517 116 398 452 587 463
 485 403 145 585 534 469 383 140 545 510 432 591 466 571 447 204  68 507 362 595 532 384 324  40 581 356 457 549 544
 385 101 181 594 525 570 546 320 588 370 640 371 518 441 473 203 565   4 601 411 629 256  12 229 598 509 481 550 538
 520 476 121 206 496 216 380 355 470 616 495 609 589 444 559  80 522 712 593 596 480 333 512  56   3 628 200 439 503
 541 584 561 566 577 198 682 159 647  29 556 505 607 548 486 424 147 606 461 353  71 103  42 152 664 405 171 676 688
  70 527 685 605 560 558 474 238  27 531 612 602 539 651 418 113 523 513 614 526  14 494  89  74 633  25 321 500 673
 127 689 175 169  63  36 568 468  31 669 737 680 367 130 684 287 578 743 630 283 692  26 484 276 586 639  86 656 650
 542 395 552 615 631 110   6  18 773 511  97 693 719 711 543 636 621 572  39  95 659 296  17 137 118 718 213 493 679
  24 644  83 514 623  19 722  51 652 658 731 622  34 696 530 573 236 779 157 724 728  46 128 675 102 567 190  20 681
 502  58 364  64  84 427 498   8 579 686 653  96 761 246 346 575 645 787 726 243 723 187 555 422 139 258 329 582 666
 626  38 330 812  59 179 253 109 528 146 665 138 668 678 124 755 529 769 610 288 677  72 662 829 790   2  79 771  23
 311 160  28 574 624 201 710  61 350 239 740  30 683 721  92 277  43 720 698 730 759 267 285 298 660 799 379 757  13
  94 782  10 642  16 163 742 119 715  76 708  49 770 744  15 764 217 637 327 114 803  75 406 752 745 785 178  11 750
 156 168 699 228   7 192 671 133 727 768 343 255  21 702   5 774  87 797 164 185 259 446 400 835 789 808  62 756 772

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.31883e+06us (= 9318.83ms, 9.31883s)
Wall-clock time (full program): 9.37965e+06us (= 9379.65ms, 9.37965s)
Satisfaction error: 0
Number of search iterations: 1776
Number of local moves: 647 (including on plateau: 204)
Number of local minimum: 116 (including on plateau: 24)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 275  63  61  88 814 506 720 131 229 107 754  64 767 228 805  71 638 683 124 824 156 837 126 748  41 467 575 534 773
 118 820 811 743 836 136 185 745 459 625 502  51 828 293 220  55 140 831 125 641  94 793  91 108 175 106 744 194 740
 714  73 544  50 113 815  29  53 425 493 613  93 835 517 134 121  57 829 513 672 646 787 104 232 817 192 245 747 746
 564 827  75 311 826 147 590  65 794 105 580 145 120 727 112 213  59 830  87 563 666 566 143 216 166 825 812 313 762
 627 100  49 117 426 132 281  84 775 816 770 151  30 678 784 102 137 801 130 604 254 742 114 128 841 528 819 532 657
 689 287 173 184 238  97 171 208 418 440 763  89 304 711 728 101 176 429 199 758 187 753 834 840 157 741 488 274 772
 508 129 231 154 202 142 813 146 833 299 268 182 149 496 235 150 617 605  92 574 679 651 839 735 189 692 138 832 629
 635 198 122 265 294 111 168 822 335 158 781  83 838 650 160 319 196 522 222 558 240 447 804 191 139 658 751 778 764
 809 152 800  85 246 317 165 283 500 330 715 253 326 799 211 286  78 251 431 716 821 616 103 760 233 584 214 684 441
 723 273 162 380 201 234 327 109 230 460 619 167 278 771 255 259 783 342 674 818 334 709 272 328 321 777 306 808 289
 252 248 262 373 270 339 180 402 424 686 823 204 279 780 183 315 291 620 298 470 163 701 396 387 314 655 677 769 448
 713 450 247 356 370 210 366 243 344 483 352 551 372 454 411 457 385 703 353 559 193 419 351 717 318 718 310 512 292
 263 384 511 361 277 258 307 442 386 401 300 389 554 537 398 550 750 797 348 476 414 492 455 391 347 395 434 420 172
 239 349 464 404 295 403 556 329 377 399 340 477 360 443 406 388 381 378 543 400 423 485 430 427 510 437 687 541 338
 284 336 374 416 305 302 368 525 392 280 612 509 358 489 436 409 375 282 333 507 422 567 796 290 453 482 439 435 433
 520 394 444 530 127 343 471 592 390 546 110 405 514 359 296 539 524 337  62 367 631 362 410 515 478 463 495 588 397
 606 369 481 538 466 568 484 527 644  35 494 503 497 549 618 308  45 221 542 354  74 224 469 446 438 445 472 371 421
 249 417 603 557 491 501 465 569 177 242 461 504 412 206 719 486 357 227 475 355 518 257 490 479 533 123 611 209 516
  39 458 609 456 382 547 332 573  95 521 633 610 413  52 499 323 642 415  68 250 589 223 379 596 553 531 505 393 523
 115 594 561 676 624 602 582 519 622  81 303 288 451  43 663 614 498 164 587 376 724  48 552 597 572  72 383  98 200
 215 660 608 639 667 565 468 535  66 452 133 593 540 219 615 555  21 346 297 207   3 174 669 449 722 473  76 577 665
 217 632  80 474 621 637 652  20  32 529 144 755 640 331 480 545 661 560 662 141 585 428 623 636 694 181  13 190  46
 170 598 739 578 790 736  23 462 600 576 116 586 705 188 691 591 671 526 654 324 630 301 285   2 236 256   4  36 135
 241 670 562 806 749   1 730 320 704 364  99 791   8 203 685 656 725  12 707  33  90 244 571 599 487 363 653  96  40
 643 673 169 732  67 695 733 697  82 628   9 712 688 225  37 795 649   7 698 148 702  38 721 345 408 269 155 407  77
 583 645 581  11 696 595 266 682 179 738 601 786  16  34 634 803 626 186 668 178 119  19 731  79 664 197 316 312 264
 226 693 322 807  10 729 798 690 726 579  26 681  25 341  15 810 756   6 768 153 325  31  86 260 659 261 710  69 647
 607  42 776 548 779 752 774 737 759 782 218 802 195 350  14 680 237  24 792 161 761  28  56 648  44  47 159 432   5
 365 675 788 570  27 789 205 699 212  54  70 785 706 536 765 708 734 276 757  22 766 267 309  60 700 271  18  58  17

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.0062e+07us (= 10062ms, 10.062s)
Satisfaction error: 2
Number of search iterations: 2179
Number of local moves: 1080 (including on plateau: 572)
Number of local minimum: 142 (including on plateau: 74)
Number of resets: 0
Number of restarts: 0

Problem in column 13: 767 828 835 120 30 304 149 838 326 278 279 372 554 360 358 514 497 412 413 451 540 640 705 8 688 16 25 195 706 => the sum is 12208 rather than 12209
Problem in column 18: 683 831 829 830 801 429 605 522 251 342 620 703 797 378 282 337 221 227 415 164 346 560 526 12 7 186 6 24 276 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  63 121 551 688 821 569 277 163 744 797 829 178 820 520  88 610 673 130 646  91 107  39  44 800 756 136 155 784   9
 761  50 584 620  68 101 172 149 701 787 837  72 740 515 813 742 343 165 768  65  90  29  34 518 700 770  78 791 146
 662 109 796  96  84  31 111  76 152 729 812  83 766 550 809 826 772 156 695 414  82 162 104 705 593 599 430 780  26
 628  43 776 841  85 361 134 198 581 814 669 124 811 840 147 629 727  62 654  80 201  79 516 823 167 735  67 195 222
 546 189 631 258  42 564 126  97 596 752 672 233 720 402  66 808 807 302 827 118 215 193 539 833 822 187 280 190 194
 517 838 618 663 612 199 186  93 268 389 803 102 282 489 192 583 825 384 746 131 206  71 426 633 600 139  98 769 347
 715 257  92 759 283 545 794  55 532 739 210 204 686 817 209 335 666 171 782 158 216 115 271 792 818 241 317 262 168
 657 114 522 526 160 650 298  99 157 264 764 665 228 692 297 836 225  64 503 270 197 810 630 594 733 182 138 667 267
 730 230 623 587 184 774 575 170 304 310 242 256 232 723 320 767 625 353 702 240 524 291 229 707 585 235 274 294 123
 682 394 732 777 261 668 573 255 181 243 333 306 293 323 393 710 224 281 528 713 238 349 816 292 738 207 296 154 249
 543 329 734 313 403 722 639 287 445 303 832 399 286 660 337 439 272 259 357 366 397 202 336 582 251 492 375 321 328
 775 385 709 246 421 647 464 396 507 273 211 288 501 802 183 359 278 410 364 260 419 382 681 342 745 407 227 203 324
 604 276 677 560 318 790 504 444 334 423 373 360 301 597 339 311 355 388 400 263 377 309 495 456 369 392 284 453 457
 552 469 354 352 474 563 435 383 398 483 425 316 511 431 390 446 295 429 350 265 380 547 567 391 275 561 420 481 266
 411 416 409 451 332 462 477 374 533 239 525 449 395 345 441 448 405 433 440 367 447 379 471 387 635 351 428 460 299
 473 455 565 307 386 510 470 505 331 358 442 174 493 434 415  13 497 479 356 580 579 432 326 404 478 413 614 314 406
 490 348 422 472 427 319 509 466 491 476 370 412 436 200 679 127 542 527 521 638 362 523 106 452 220 591  28 571 484
  95 465 142 226 245  75 180 613 454 467 488 459 498 221 634 622 598 553 554 512 649 417 179 572 305 536 486 556 408
 363 502 119 443 401  73 248 534 544 608  45 658 437 166 530 508 458 513  48 595 589 616 475 161 468 557 482 574 494
 140 576 371 506 463 461 214 485 648 253 116 641 537 322 535 236 531 499 626 690 656 558  11 125 129   7 559 708 605
 153 601 135 340 540 223 652 645  12 450 487 418 664  46 627 185 208 548 651 555 568 671 177 252  61 570 617 653 500
 254 703 144  37 683 376 285 643  19 697 562 655 609  87 549  20 496 691  41 529 606 718 212 538 176 621 438  70 750
 169 637  54 112 786 175 615 588 113 676  60 685 289 164 670 586 603 684  51 577 661 541 747  40  24 519 624  35 724
  17 592 247 141 706 346 424 678  22 145  77 659 378 205 696 191  30 632  25 773 642 815 801 100  49 711 753 680 674
 110 619 219 341  56 338 607 779  23 327  38 743  18 344 694 269 105 725 173 781 640 783 728  89 737 566 602  57 698
 234 835 381 789 799 372 719 693 806  69 120 514  15 315 128  52  59  16 143 771 699 611 300 244 213  10 788 765 749
 312 819   3   5 736 675 795 751 704  53 133 644  81 834 150 196 237 757 218   2  94 839 760   1  86 687 717 122 798
 188   6 368 117 712 290 578 828 785  27   8 754  74  33 137 308 250 805  36 716 590 714 748 217 325 755 830 279 731
 365 831 231 636 721 330 148 762 824  58 726 758 108 132 741  47 103 793   4 689 778  14 480 159 151  32 804  21 763

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00025e+07us (= 10002.5ms, 10.0025s)
Wall-clock time (full program): 1.00648e+07us (= 10064.8ms, 10.0648s)
Satisfaction error: 2
Number of search iterations: 1997
Number of local moves: 639 (including on plateau: 217)
Number of local minimum: 156 (including on plateau: 23)
Number of resets: 1
Number of restarts: 0

Problem in row 3: 662 109 796 96 84 31 111 76 152 729 812 83 766 550 809 826 772 156 695 414 82 162 104 705 593 599 430 780 26 => the sum is 12210 rather than 12209
Problem in row 20: 140 576 371 506 463 461 214 485 648 253 116 641 537 322 535 236 531 499 626 690 656 558 11 125 129 7 559 708 605 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 830 815  69 838  81  47 592  25 700 640  33 766 641 156 114 820 670 777 159 705  34   7  38  23 753 140 812 113 811
 559 495 697  53  79 802 819  86 781  45  20 770 710  78  26 656 618 682 103 527  62  73  55  36 818 798 817 294 650
 608 701 837  43 181  91 125  87 570 205 652 619 738 154  29 792 695 152 165 698  41 634 699 118 778 126 215 827 629
 549 742 123 832 596  64  30 186 784  19 520 831 663 136  76 192 677 429 145 821 146 151 486 833 689 480 129 130 750
 588 552 132 206  60  75 170 127 828 235 839 834 615 211 106 779 138 696 679 823 107 326 729  37 346 763 241 195 772
 735 686  65  83 302 825 284 234 217  99 209 824 727  49 122 185 813 194 657 621 155 193 709 829 648 308 147 786 503
 475 810 220 219 550 189 249 134 190 137 246 653 789 183 202 199 607 312 385 826 184 733 685 293 662 751 288 203 835
 719 773 276 323 673 329 131 681 228 216 178 678 582 100  72 322 267 231 623 407 143 836 605 270 635 767 200 198 746
 718 285 252 158 303 334 331 530 683 168 255 749 642 271 213 282 358 310 237 601 840 736 759 296 748 258 332 204 356
 415 713 207 299 548 171 244 321 306 365 739 433 264 245 440 169 176 362 711 807 180 661 694 342 684 758 278 325 352
 210 688 305 289 627 214 227 309 336 392 841 632 585 425 404 261 172 453 794 341 283 368 822 380 540 382 279 259 391
 301 243 240 236 754 405 330 260 233 290 298 788 327 281 232 418 343 704 769 752 441 396 645 277 394 386 360 297 809
 335 295 479 344 584 328 367 438 487 448 388 633 445 422 455 490 457 383 506 375 269 373 732 313 339 376 315 452 381
 406 675 318 493 467 431 353 462 366 426 464 511 354 507 402 196 340 579 175 364 454 470 610 351 398 355 428 357 497
 291 508 434 533 566 476 280 414 505 421 348 372 478 450 320 316 393 337 401 456 447 374 521 488 516 399 403 319 443
 554 432 363 361 492 472 387 449 484  90 377 371 471 333 419 412 350 324 500 609 442 468 583 437 664 390 417 546  12
 466 378 469 349  95 538 477 430  35 499 524 262 435 528 523 518 459 643 568 489 625 411  27 427 274 436 408 345 571
 458 564 494 502 105 251 263 613 400 603 420   2 272 529 512 580 517 116  93 474 534 451 188 485 395 491 558 647 692
 221  14 602 460 409 659 519 544 498 723 461 111 238 611 410 547 397 522  57 173 545 347 104 562 413 651 567 379 465
 359 463 446 531 229 501 671 569 594   8 286 253 578 532 646 514 595 317 416   6 536 573 275 543 108 439 515 509 197
 242 504 577 565 292 690 666 384 110 496 115 162 513 526 638 624 665 649 481  31 599 212 268 556 121 423 783 250  67
  54  74 614 655 586 591 555 561 581 637  66 157 166 553 712 576 510 483 254  28 667 560 224 535 225 135 730 636  84
  44  32 600 702 248 734  18 574 616 590 691 218 222 743 631 604 119 572 139 307 557 182 424 587  82 593 597 706  77
 239 179 724 722 542  15 575 612 630 672 539  94   3 589 760 473 117 537 654 167 639 338 304  10 191 257 764 300 563
  98  71 164 693   1 761 622 541 265 644 714  56 120 782 708  48   5  13 757 150 740 208 369 728 551 716 785 755 144
 177 163 747  52 525 101 717 223 620 795 726 142 161 669 775 741 721 626 287  22 658   9 311 680  97  59 617 660 128
 273 102 800  80 720 628 668 806  42 776 370  68  96 765 796 389  63 703 482 133 793 745 109 160 112 444 124 715 247
 687 201 814 801 803 725 731 805  70 799 737 174 148 674 790  17 187  11 256 230 774 606 149 816  24  40  61  58  21
 598  51 141 787 791 762 808 804  50 771 153  46 226 707 676  89 780  92 756 266 314 768  85 797   4  88  39 744  16

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.36504e+06us (= 7365.04ms, 7.36504s)
Wall-clock time (full program): 7.45331e+06us (= 7453.31ms, 7.45331s)
Satisfaction error: 0
Number of search iterations: 1148
Number of local moves: 651 (including on plateau: 185)
Number of local minimum: 78 (including on plateau: 21)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 360 785 774   8  66 825  59 269 765 672  13 113  28 786 188 804  94 222  97 742 475 185 666 154 702 490 257 796 814
  17 248 134  64 791 716 105 757 198 148 108 776 120 779 132 330 167 782 176 809 111 746 793 759 763 736  51 803  90
 124 688  19 626 750 179 123 245 730 731  78 795  71 117 217  36 694 787 651 675  68 615 103 150 264 448 817 695 713
   5 641 721 735 761 705  12 155 381 631 633   1 121 246 673 611 659 754  65 783  49 573 208  23 214 320   4 724 801
 380 799 775 687 748 712 142 189 112 655   2 722  26 719  79 628 766 471  86 740  37 348 679  63  27 166 119 689 643
   6 760 703 739   9  67 259 271 639 200  61 708  31 752  46 610 729 756 118 592 227 733 653  34 354  11 576 807 758
 127 664 614 715 710 650  16 242 723 644 534 570 617 714 114 630 681 162 586  74  77 527  15 177 234  20  21 613 738
 560 649 568  85 692 667  76  43 585 709 627  14 589 661 128 254 604 554 642 555 135   3 552 583  73 196 153 634 618
 548 591 577 596 632 543 183  47   7 674 612 647 620 582 100 228 574 588 437 567 669 210  75 156 441 180 195 497 433
 638 511 489 398 662 575 109  32 525  33 594 492  83 640 595 624 652 581 482 521 623 391 240 145 212 110 192 559 501
 514 646 685 160 608 556 339  39 580 507  81 516 629 485 384 370 602 250 261 625 157 469  53 529 512  29 466 536 621
 599 477 522 539 565 459 253  93 562 486 392 174 510 532 563 309 533 256 377 415 418 301  35 665 412 362 422 500 478
 561 513 517 230 465 496 450 225 101 600 519 455 175 495 571  22 531 579 367 505 265 292 385 506 488 394 413 547 542
 551 524 463 328 390 457 322 308 421 343 564 414 476 473 285 323 342 439 409 434 609 417 484 314 373 389 491 336 530
 206 503 371 432 494 462 411 346 340 429 443 426 558 435 440 550 345 430 428 442 349 419 436 361 515 366 447 327 498
 372 238 811 258 237 197 438 704 376 470 333 382 410 324 396 474 310 537 243 358 404 697 520 822 453 364 288 306 487
 300 472 813 321 425 341 420 728 446 483 416 286 504 365 386 233 347 456 357 316 408 427 249 329 461 693 449 378 400
 359 334 356 266 296 353 540 784 368 431 287 326 277 337 344 737 239 773 444 407 402 780 829 263 399 375 383 311 209
 509 764 218 351 282 395 584 720 350 406 293 452 331 224 220 549 388 335 826 313 593 745 307 302 152 454 298 451 397
 275 260 297 424 338 171 528 393 762 317  89 268 235 151 403 538 325 299 557 755 841 480 231 284 794 802 777 252 363
 226 279 290 276 401 262 771 479 818 193 283 315 601 352 204 696 236 387 139 202 734 749 255 699 718 671 493 207 273
 820 186 165 732 216 136 828 831 205 169 405  50 251 107 684 369 379 168 295 115 590 637 663 747 603 668 797 223 170
 657 144 247 445  82 221 698 768 294 830 318 481 468 191 840 535 278 274 545 244 303 241 810 654 619 526 355  10 131
 676 164  45 806 281 788 670 569 232 182 682 304 597 184 707 215 267 741  54 272 458 187 726 706 523 701 161  98 213
 635  44 140 553 800 137 691 677 464 190 743 194 821 143 792 173 211 203 767 178 839 129 332 636 270 660 587 158  42
 789 159 201  58 102 122 832 607 725 126 744 836 835 163 770 305 781  41 686 172 141 508 598 578  96 291 838  25  80
 769  38 518 423  92 834 690 622  56 544 805  48 812 289 502 116 138 181 680 312 819 146 229 753  91 700 823  30 149
 566  40 104 130  95  99 827 460  70 319 772 717 808 816 656 125 280  69 751  62 837 199 616 106 798 546 678 645  18
  60  88  72 824 219  84 833 606 374  87 778 727 605 147 790 815  57 133 683  24 572  55 467 711 648 541 658  52 499

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00013e+07us (= 10001.3ms, 10.0013s)
Wall-clock time (full program): 1.00624e+07us (= 10062.4ms, 10.0624s)
Satisfaction error: 2
Number of search iterations: 1980
Number of local moves: 837 (including on plateau: 238)
Number of local minimum: 165 (including on plateau: 21)
Number of resets: 1
Number of restarts: 0

Problem in column 18: 222 782 787 754 471 756 162 554 588 581 250 256 579 439 430 537 456 773 335 299 387 168 274 741 203 41 181 69 133 => the sum is 12208 rather than 12209
Problem in column 21: 475 111 68 49 37 227 77 135 669 623 157 418 265 609 349 404 408 402 593 841 734 590 303 458 839 141 819 837 572 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 292  61 774 812 686 229 275 263 238   8 156 752 756  36 779 209  25 218 714 143 310 731 723 681 319  64 801 371 783
 136 476 778 775  39 112 750 755 303 152 270 745 772  28 683 463  18  34 727  96   4 748  31 741  11 297 795 728 742
 782 223 424 793 658  13 677 378   3  95 689 460 787  19 743 540 232 281 272  29 614 789 656 799 155 189  72 134 703
 738 109 713  17 733  70 771 640  84 157 212 618 715 612 792 321 691 541 678 170 385 769  85  56 256 194 628  46 408
 693  15 762 317 595 254 663 747  10  67 705 695 794  75 669 266 744 425 599  83   9 644 214 132  20 305 692 379 636
 680   5 649 204 601 219 623 688  12 118 711 679 607 518 660 527  90 135 567 255 348 676 568 696  98 197 707 323  49
 627  38 659 767 584 144   7 702 557  21 213 294 608 450 761 519 740  94 675 314 289 141  76 520  50 629 515 554 661
 655 562 596 776 724  82 720  23  93 634 698 545 617 770 674 271 577 129 561   6   1 338 668 148 464  68 491  30 288
 687 130 648 645 470 312 501   2 201 563 133 484 539 224 598  54 712 546 682  40 532 479 398 631 615  81 588 117 597
 721 417 440 402 493 380 576 522 390 181 105 594 500 537 579 142 592  57 667 103 359 509 386 638 295  22 523 442 637
 499 616 646 620 521 582 465  14 487 449  35 419 633 325 466 504 700 643  24 586 375 590 490  86 104 172 604 503  51
 573 525 434 571 506 364 514 556 373 462 457  60 600 147 560  16 439 165 572 513  27 494 641 363 278 384 483 581 551
 526 524 673 498 447 510 547 496  26 433 410 528  44 569 530 391 458 349 542 517 340 611 432 456 108 454 228 211 351
 507 383 469 360 482 356 287  55 552 564 429 389 369 431 485 427 619 396 430 452 471 455 260 512 511 502 412 245 399
 516 489 372 420 553 570 467 345 362 444 426 394 300 163 448 459 302 406 543 478 388 330 538 382 344 566 497 355 352
 400 350 265 387 169 587 409 262 395 475 337 766 415 477 416 365 550 304 622 407 446 307 451 435 558 443 468 346 397
 492 343 301 436 354 268 418 393 368 480 309 536 186 710 329 318 798 316 405 486 574 422 813 230 328 374 353 428 441
 377 235 242 413 401 495 411 332 423 286 414 840 283 716 361 285 461 808 336 706 653 236 370 179 625 555 250 290 226
 438 376 291 146 392 664 253 339 403 261 239 140 421 453 233 781 320 347 729 605 609 834 177 184 832 726 217 472 327
 357 182 334 203 195 585 324 823 279 331 786 168 404 624 308 160 342 191 273 836 701 284 171 341 535 758 231 753 730
 259 276 296 198 196 358 227 243 818 282 333 672 381 445 216 802 299 241 311 732 816 208 200 657 650 759 280 797 257
 234 251 313 187 206 613 367 828 666 768 248 199 150 366 202 240 113 734 101 737 544 839 247 246 531 642  77 749 811
 249 821 139 164 293 684 824 264 704 298 306 185 125 210 102 630 220 788 124 258 580 145 831 806 652 665 174 830 138
  92 790 175 815 159 719 671 335 810 717 583 252 277 173 116 610 178 739  53 754 635  52 207 694 508 267  43 192 593
 190 780 205  69 803 736 120 602 685 735 826 481 149 151 166 708 183 549  91 111 115 123 773 606 825 718 215 269 225
 274 796 154  73 167 110  99 817 757 805 725  65 114 829 131 326  88 699 639 800 647 176 180 153 751 841 193 578 222
  62 807 137  71  87 784  37 127 804 777 764 128 533 654  48 822 119 690 100 763 760 122 188 322 505 474 244 746 534
 121 838 158 237 621 589 126 437 709 819 529  63  97 835  47 565 814 575  66 603  45  79 670 473 559 548 837  89  59
  32 791 162 833  74 820  80 221 697 827 161  58  33 662 107 488 785 809 106 626 632  78 765  42 722 315 591 651  41

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00626e+07us (= 10062.6ms, 10.0626s)
Satisfaction error: 2
Number of search iterations: 2259
Number of local moves: 882 (including on plateau: 294)
Number of local minimum: 171 (including on plateau: 34)
Number of resets: 1
Number of restarts: 0

Problem in row 6: 680 5 649 204 601 219 623 688 12 118 711 679 607 518 660 527 90 135 567 255 348 676 568 696 98 197 707 323 49 => the sum is 12210 rather than 12209
Problem in row 28: 121 838 158 237 621 589 126 437 709 819 529 63 97 835 47 565 814 575 66 603 45 79 670 473 559 548 837 89 59 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 804 725 154 736 745 839  60 763  93 139  70  62 684 840 646 102 827  20 158 771 165  97 142 284 615 818  98  29 723
 609 196 166 829 217 369  54 610 837 813 126 793 611  56 201 100 115  91  82 409 131 352 562 607 838 776 800 834  25
 376 198 824 826 819  66  51  81 798  61 651 796 636  36 761 841  63  90 185 209 716 186 214 777 159 785 825  72 107
 753 520 574 459 663  83 157 134 554  37 657  74 817 836 194 517 137  57  78 525 822 204 153 823 821 606 667 141 146
 687 765 502 762 732 148 106 247 175  87 109  55 665 130 617 389 187 147 820 654 773  96 124 730 769 614 218  71 830
 228 754 123 629 795 792  21 613 338 233 744 104 624 211 191 619 145 240  50 757 808 767 273 806 184 782  99 167 112
 178 735 816 584 764  85 779 780 151 224 163 781 173 138 727 399 254 285 179 133 668 552 768 438 150 565 252 249 239
 712 640 638 815 676 174 119 760 343 406 189 171 398 268 235 677 230 222 297 299 690 578 238 832 199 699 306 135 263
 223 591 598 671 471 355 286 293 264 295 644 244 528 335 257 349 259 772 344 226 612 801 237 698 312 743 292 188 321
 207 401 221 547 183 350 260 266 193 786 205 114 812 503 220 524 304 161  49 828 747 833 622 269 648 660 783 265 248
 287 587 311 560 253 424 278 275 362 420 435 298 423 208 232 215 242 255 283 805 706 334 274 814 728 831 256 799 314
 229 225 180 543 289 346 803 206 395 418 360 386 647 316 434 202 559 309 308 262 715 582 310 590 697 537 250 300 811
 493 809 412 379 455 756 403 318 348 307 271 583 393 576 372 394 345 236 540 281 261 449 305 445 383 595 392 294 414
 437 569 630 404 327 270 313 351 835 322 417 426 354 353 457 291 542 340 422 419 504 302 357 495 328 339 429 450 526
 347 342 402 501 515 400 324 532 359 370 505 541 451 454 506  53 469 487 377 436 499 390 329 378 599 363 375 489 416
 492 415 410 391 518 380 425 441 507 397 570 571 288 485 478 231 444 439 453 373 464 460 356 382 320 195 508 358 458
 365 479 468 467 169 462 323 411 641 336 413 440 361 538 550  80 325 432 594 480 160 482 466 433 446 246 561 536 545
 407 533  77 448 474 534 601 408 317 442 579  26 603 568 593 143 514 461 527 470 170 494 381 384 117 245 512 625 556
 586 573  65 364 551 510 695 511  73 719   9 456 498 627 465 105 234 633 388 472 431 421 366 219 605 277 443 539 374
 664 330 585  68 371 572 500 110 731  48 452 546 162 642 430 447 535 488 529  19 301 544 604 168 319 181 659 685 519
   2 149 516 333  24 680 628  88 530 567 589 483 566 645 152 807 740 637 666  58 125 203 658 267 155 280 564 588 509
 634  23 276 243 521 513 700  64 490 608 548 674 496 620 463 241 597 491 694 251 182  33 702 118 103 190 475 580 679
 670 326 581 140 476 575 385 555 428 682  30 337  18 600  11 477 596 577 683 618   5 258 101 427 692  41 523 724 673
 705  15 631 113  76  47 810 707 788 688  27 473  86 693  52 213 563 733 701  94 200 484 681 396 602 192  95 653 691
  43 531 210 128 592 662 750 122 717 332 557 714   6 621 661 791 751 726 481 616  31  69 197  17 486  35 639 678  46
   4 405 176 111   1 649 279 737  92 212 655 758  13  22 652 778 759 720 787 696 522 120 656  44 734 303 282 675 367
 290 227 331  45 272 739 626 315  16 766 708 746 632 129 710 741 729 643 738 296  84 635 672 132 121  67   7 703  89
 650  10 623  34 116  42 755 789  32 704 752   8 108  38 172 797 669 742 784 749 164 689 713 177  39 216 558 368 711
 127 136 709  79 144 387 718 722 802 790 774 549 156 721 770 686  75 775  12   3 553 794 748  59  40  28 341  14 497

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.06521e+06us (= 7065.21ms, 7.06521s)
Wall-clock time (full program): 7.12682e+06us (= 7126.82ms, 7.12682s)
Satisfaction error: 0
Number of search iterations: 1287
Number of local moves: 764 (including on plateau: 197)
Number of local minimum: 69 (including on plateau: 21)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 395  19 754 114 774  27 719 765 806 184 804 314  63  88 760 654 373 686 712 742 778  46 435 204 809  54   9  10 111
 147   5 160 323 814 783 267 234 717 199 752 805 190 708 251 791 163 741 768  32 771  17 735 166 687  11 739 227   6
  56 684  48  96 740 221 652  20 758 248 780 201  61 152 796 720 375 773 812 122 714 690   8 110 755  28  44 770 775
 212 729 761  12 692  38  93 135 811 639 730 131 188  41  55 784  51 678 649 607 366 662 766  47 626 133   7 803 763
 154 621 681 193 728  72 143 668 586 229 595 414  16 192 693 462 108 782 458  13 723 540 757 252  35 124 700 588 682
  34 733 731 117 519  23 100 631 797 181 615 691 226 566  29 241 183 802 485  71 759 509 726  24 698 157 146 614 801
  25 705 647  92 596 515   3 680 697  30 702  65  49  62 701 240 713 669 618 610 641 706  74 282 670 118 171 656 472
 106 382 685 189 545 744 127  78 542 355 499  22 132 138 664 293  37 630 634 446 568 660 727  53 578 683 469 653 570
 136 699 620 182 563 645 266 609  84  85 633  59 513 137 725 319  39 707 737 507   4 667 624   1 426 604 530 471 617
 236 564 574 200 367 561 572 552 600  14 577 336 120 222 529 658 608 417  77 169 520 689 498 173 538 549  18 605 666
 262 573 527 512 503 442 511 589 532 567  15 151 279  75 619 547 629 594  21 400 381 220 216 628 464 467 477 598 410
 259 495 194 379 602 632 679 129 436 300 466 524 548 347 105 121 312 149 655 478 516 539 528 501 406 329 659 399 522
 342 599 505 456 480 581 322 551 531 419 536 290 326 487 489 237 416 526 497 377 585 218 195   2 500 592 612 447  91
 287 502 411 533 496 525 444  82 582 474 486 380 340 392 325 420 376 383 583 361 643 126 593 544 318 298 439 523 343
 590 483 484 560 167 443 559 535 238 397 398 288 450 254 461 465 389 374 418 372 363 433 401 385 504 403 473 488 434
 459 432 449 278 455 310 351 344 453 421 425 810 475 732 387 832 445 299 518 404 211 360 365 368 378 413 272 205 358
 562 415 494 164 506 390 451 492 402 482 352 281 776 297 386 233 580 330 269 359 317 277 457 798 393 491 328 490 437
 454 249 463 517 177 357 422 479 362 391 255 829 665 521 306 556 696 468 394 541 276 430 315 587 423 301 427 208 140
 579 327 349 695 338 291 257 296 440 657 265 772 557 704 144 694 356 371 826 250 313 320 335 722 364 303 337 112 235
 565 448 470 764 346 244 271 345 635 767 341 613 597 407 285 534 295 180 331 493 197 270 819 307 370 408 428 309 170
 745 431 125 253 388 321 275 353 215 827 161 412 715 350 231 476 836 481 213 268 825 283 274 674 223 709 779 134 232
 750 311 153 675 107 101 334 839 243 214 514 794 743 537 264 553 753 174 441 286 409 835 429 738 260 175 263  67 247
 716 273  68 710 294 452 795 219 156 644 203 799 834 611 332 384 762 245 396 302 142  86 777 677 348 225 354 246 159
 817 292 333 823  90 840 339 711 289 672 304 575 206 724 831 198 751 191  33 316 115 261 128 785 172 786 178 210 239
 584  97 242 824 571 280 543 168  40 569 202 638 833 637 640 308 207  69 185 688  66 625 104 820 165 781 623  50 650
 438 224 230 838  76 816 756 555  73 828 176 369 636 813 139 284 228 258 145 747 116 746  83 749 102 841 646  80 217
 748 651 792 606  26 119 787  57 103 671 186  99 209 721 676  52 324  98 179 788 663 158  94 558 130 830 460 808 616
 736 187 109 554  87 734 661 256  45 622  89 405 673 576 305  95 601  70 113 818  31  43 591 546  60 769 821 790 822
 815  79 150 550 162 703 510 837  36 123 148 141 789 718  81  58 603  64  42 642 196 793 155 508 807 627 800 648 424

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0001e+07us (= 10001ms, 10.001s)
Wall-clock time (full program): 1.0062e+07us (= 10062ms, 10.062s)
Satisfaction error: 2
Number of search iterations: 1898
Number of local moves: 806 (including on plateau: 296)
Number of local minimum: 128 (including on plateau: 34)
Number of resets: 0
Number of restarts: 0

Problem in column 6: 27 783 221 38 72 23 515 744 645 561 442 632 581 525 443 310 390 357 291 244 321 101 452 840 280 816 119 734 703 => the sum is 12210 rather than 12209
Problem in column 12: 314 805 201 131 414 691 65 22 59 336 151 524 290 380 288 810 281 829 772 613 412 794 799 575 638 369 99 405 141 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 841  35 803 675 171 830 734 599 108 826  41  75  40 673 794  62  84 835 777  34 608  23 792  27  47 727  55  53 840
  86 107 818 511  49 827 738 833 566  77 150 802  51 817 617  46 433 297 813 112 822  42  99 689  69 106  70 829 733
 737  37 469  81 570 787 771 147 758  30 129 641  50 823 701 264 158 159 751  39 187 151 206  93 580 486 775 804 825
 168 807 764 839  88 814 799 820 628  43  85 143 197 221 754 116 251 183 553 102 502 208 609 209 100 812 227 438 729
 136 134 674 132 828 704 547 832 710  44 111 753  67 728 687 815 104 137 816 256 805 157 156  95 838 139 190 146 468
  91 160 613  68 304 533 679 821 581 233 211 379 165 722 793 179 594 268 260 302 750 234 184 837 145 774 199 699 431
 242 180 690 326 294 621 321 831 739 133 103 138 203 283 600 290 491 244 724 293 755 176 746 154 148 684 377 622 801
 243 149 439 590 205 624 819 836 742  87 218 662 253 204 670 331 776 459 340 446 250 664 327 191 182 228 271 192 811
 278 427 646 239 425 786 583 706 824 109 257 370 229 308 161 141 267 392 406 226 730 225 725 281 285 371 296 809 707
 312 338 513 254 236 614 766 301 643 834 117 215 241 276 259 167 797 207 627 498 238 519 325 443 364 781 330 780 214
 216 354 424 588 286 772 494 344 748 213 762 353 163 633 410 280 756 387 444 185 262 726 601 339 194 170 196 277 632
 336 380 562 448 249 453 476 384 548 390 442 808 546 201 358 386 514 485 529 437 391 318 418 332 445 324 447 347 255
 219 450 500 378 144 563 405 223 484 396 508 337 313 368 279 429 470 362 435 359 411 806 741 319 381 527 422 345 635
 258 365 400 492 322 534 404 263 383 385 287 458 525 752 367 578 528 465 441 357 292 415 298 432 449 487 426 517 329
 376 222 488 272 473 518 440 341 490 584 246 374 481 335 389 461 247 245 366 558 598 416 407 463 483 516 545 472 403
 351 414 398 342 421 363 397 401 388 541 501 369 503 348 471 489 497 456 291 480 393 549 320 375 478 455 430 474 314
 361 582 408 532 510 162 220 464 395 555 237 413 462 606 315  79 328 550 224 200 409 198 586 616 653 618 506 543 477
 394 460 417 352 524 299 372 509 587 309 530 507 592 333 576 591 479  72 261 538 531 544 551 482  31 412 452 105 399
 577 504 295 567 349 303 535 539 152 634 402 269 360 636 493 334 240 540 155 747 350 505  94 574 346 475 603  89 542
 420 571 317 316 625  20 522  12 231   5 645 523 597 604 174 572 512 554 135 798 515 496 552 639 419 282 536 521  96
 649 694 305  56 561 164 289 593 126 709 644 466 611  38 235 658  83 619 647 343 232 569 306 657 579  24 708 526 118
 585 565 121 607 499 153 202  74 188 537 691  66 557 434 186 652 688 668 650 656 568 120 266 113 595 560 659 467  82
 692 661 252 495 610 230 114 193  98 620 666 655 744 615   6  11 559 669 177 740 720 382  25 665 769  14 623  64 140
 638 663 248 651 676  36 123 678 195 596 677 288 637  57  65 686 217 648 654 712  61 423   3   7 713 556 307 671 323
 680 767 166 791  22 173  19  73 142 696 716 731 743  71 575 761 373 732  28 631  63 454 715 683  15 451 457 300 181
 778 745  26  52 612 125  13  92 175 705 589  78 695  48 520 602   2 779   1 784 169 626 693 782 719 178 711 640 270
 721 629  58 697 768 131 189  76 275 355 749 682 642  29  80 718 796  21 667 660  45 760 436 810 702 210  16 115 172
 765   9 130 122 703  10 128  97 273 773 795 564 757 735 101 723 681  17  33 698 124 714 356 783 717 212 605 310 274
  59 800 265 736 685  60 110 127  32 790 700  90 785 311 573 788 284 759   4  18 428 789 672 119 763 630 770  54   8

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.24056e+06us (= 7240.56ms, 7.24056s)
Wall-clock time (full program): 7.30172e+06us (= 7301.72ms, 7.30172s)
Satisfaction error: 0
Number of search iterations: 1299
Number of local moves: 930 (including on plateau: 255)
Number of local minimum: 52 (including on plateau: 27)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
   4  89 758 155 722 106 728 253  74  91 782 739   3 800 231 621 323 724 733  98  68 798  80 796 806 144 801  11 671
 784   5 692  10 777  42 302 688 716 122 285 774  35 783 715 693 298 708 678 735  70 284 157  99 585  21 701 246 204
 803 661  52 746  56 330  88 765 590 193 686  72   1 566 662 635  38 521 677 235 647 723  32 732 652 167  75 184 620
 807 281  97  14  19 588 219 211 223 714 702 804 754 794 238 727 170 266 432 740 143 770 289  50 668  43 640  26 780
  17 159 290 141  16 168 199 225 614 209 720 695 747 665 295 797 523 175 779 582 173 799  95 624 127 292 810 696 577
   8  37  46 776 557   2 105 596  28 398 685 376 756 718 613 789 264 623 795 615 152 674 593  25 649 263 428  30 608
 603  31 641 673 165 110   7 598 666  57 594 103 630 617 336 563 437 659 633  59 578 512  15 634 342 587 653  67 639
 600 627  76 719 449 532 133 341 573 544 664 560 580 454  44 496  69 112 629 381 515   6 325 547 755 597 637 196  47
 711 163 683 626 581  33 326  62  39 395 721 576 690 470  84 658 274  73 676 616  12 704 101 618 260 565 517 494 481
 589  20 574  41 672 202 190 486 579 592 654 607 476 645 503 492 126 650  49 313 545 567 534 452 138 404 108 508 493
 467 591 524 619 572 471 147 527 625 308   9 480 689 502  29 605  92  45  61 539 569 570 575 522  90 525 416 553 487
 373 516 669 583 417 595 128 501 510 433 530 359 651 464 500  13 137 346 681 538 586 498 345 388 245 312 118 347 426
 511 383 460 631 513 548 191 366 531 399 443 535  34 282 387 489 113 462 478 687 643 371 602 488  27 474 272 339 550
 423 402 468 459 458 411 558  23 382 183 529 392 540 446 419 396 317 413 537 397 305 438 444 533 546 463 461 430 436
 491 536 528 322 304 370 422 556 421 497 434 294 526 482 509 427 262 562 256 403 505 349 506 310 431 418 340 343 405
 453 307 356 484 507 499 333 552 320 297 412 409 490 638 148 425 293 406 389 329 518 435 451 504 401 555 448 450 400
 252 479 457 318 769 764 455 280 258 378 495 407 410 485 365 709 644 551 364 314 393 348 337 251 369 338 270 334 415
 331 466 442 265 273 362 541 439 483 786 358 753 283 324 420 188 670 778 257 465 355 234 360 208 473 361 610 367 357
 269 414 217 391 327 233 561 291 768 675 736 237 440 408 300 287 750 771 808 222 278 306 255 315 549 150 601 429 221
 277 520 729 368 179 655 599 212 321 636 134 146 375 261 813 469 713 247 248 822 242 311 710 250 380 288 229 698 377
 236 309 344 151 731 691 743 697 838 821 296 226 267 335 767 332 663 203 271 130 827 230 351 385 353 316 185 279 232
 354 328 241 694 205 160 622 766 301 660  54 384 207 227 275 216 738 445 187 268 785 809 363 174 642 830 319 835 120
 239 571 166 299 161 194 352 707 254 154 186 787 189 180 823 171 759 791 286 164 564 213 819 192 706 818 386 829 249
 228 744 705  18 109 712 828 815 158 153 140 773 182  22 749 379 372 195 215 131 220 115 657 833 447 745 456 734 374
 139 700 169 793 831 609 741 210 737 125 519  36 136  83 206 303 760  64 111 752 814  79 129 198 628 244 781 475 837
  94 762 102 214 240 726 612 703 811 790 142 177 543 224 568 121 472 123 201 751 104 149 775 834 441 684  86 584 176
 559 742 840 839 679 656 841 172 197 816  96 178  40  65  85  24 682 554 243  53  93 730 812 276 181 825 394 424 114
 761 699 805 802 100 792 606 119  60  66 116  71 772 218 611  77 604 200 390 788 748  63 817 135 156 725 350 477  81
 826 667  78  58 820 648 632  48 132 717  87 259 763  51 514 107 646 542 145  82 757 124 680 836 162  55 117 824 832

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00021e+07us (= 10002.1ms, 10.0021s)
Wall-clock time (full program): 1.00629e+07us (= 10062.9ms, 10.0629s)
Satisfaction error: 2
Number of search iterations: 2413
Number of local moves: 966 (including on plateau: 357)
Number of local minimum: 163 (including on plateau: 45)
Number of resets: 1
Number of restarts: 0

Problem in row 8: 600 627 76 719 449 532 133 341 573 544 664 560 580 454 44 496 69 112 629 381 515 6 325 547 755 597 637 196 47 => the sum is 12208 rather than 12209
Problem in row 27: 559 742 840 839 679 656 841 172 197 816 96 178 40 65 85 24 682 554 243 53 93 730 812 276 181 825 394 424 114 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 556 791  53 821 555 102 322 636  86 103 781 748  41  78  33  64 130 298  99 720 818  77 825 793 819  95 800 794 171
 772 491 820 241 289 114  40 823 242 779 585 105  96 775 146  61  54 696  47 762 557 196 579 692 705 314 635  73 520
 738 804 493 120 573  92  81 139 434 629 741 148  57 162 125 140 113 833  35 729 744  91 655 813 236 163 817 822 682
 795 838  49 484 758 212  50 145 142  75 709  76  27  37 153 170  88 812  42 840 593 137 702 790 789 568 496 831 801
 360 588 338 668 628  97  74 828 799 119 607 551 190 149 410 199 134 210 133 841 533 723 727  82 811 233 245 718 214
 363 747 168 303 830 786 279 234 787 160 213 106 256 200 136  83 172 827  89 536 806 659 736 459 402 809 165 691 207
 743 725 112 173 644 376 810 286 746 652 678 774 109 111 194 182 222 776 155 839 159 624 121 143 671 126 227 693 138
 472 613 123 167 835 250 261 837 783 737 218 712 179 192 198 306 221 231 592 326 118 686 802 270 282 316 295 656 531
 638 732 205  80 814 312 467 219 616 815 288 808 187 191 258 293 285 388 189 228 500 754 400 319 647 247 254 829 246
 297 780 278 259 603 332 344 290 836 782 235 731 335 257 158 215 273 186 294 753 681 796 527 188 323 427 255 600 174
 462 566 377 176 633 100 401 272 824 499 798 269 248 161 129 251 317 328 792 307 730 385 640 422 315 391 347 680 389
 374 653 501 399 283 275 217 220 832 405 372 514 364 421 318 284 447 515 428 291 675 452 351 266 777 252 425 689 209
 435 464 395 481 320 419 456 373 645 238 529 407 394 390 441 369 398 482 334 355 528 379 710 342 473 378 348 449 277
 516 553 329 243 483 542 368 423 517 426 477 201 366 264 438 544 504 532 308 412 371 463 300 492 539 454 349 569 226
 506 450 417 433 545 301 490 370 420 392 345 595 518 331 591 476 413 387 208 337 365 418 478 325 543 567 327 304 357
 445 229 350 380 336 564 411 436 489 305 471 268 587 458 486 522 339 440 415 487 488 503 549 352 497 330 444 274 354
 575 353 453 384 443 262 356 538 448 375 605 260 406 386 437 367 466 507 560 465 409 263 468  18 442 470 550 396 547
 559 340 225 576 414 537   3 485 431 615 581 498 429 552 475 457 397 524 677   4 244 362 313 494 122 521 469 359 546
 341   8 432 513 309  51 663 382 404 610 116 618 548 403 582 634 430 658 333 606 474 509 511 526 115 630 623 178   2
  43 310 562  62 287 714 510 525 311 424 223 577 495 625 523 584 540 152 583 124 216 439 519 558 361 280 620 393 649
 574 107 561 480 128 512 700 589 193  56 651 683 508 383 631 166 654 505 460 586  21 135  94 565 541 479 590  48 609
 249 169 713 608  71 642 601  22  16 602 110 665 721 578 580 657 611 502 660 571 267  11 104 614 599 594 572  87  13
 597 154 672 563 230 604 181 622 358 195 147 101 673 662 416 726 632 117 598 455 185 321 302 617  26 535 701 131 688
  58 292 719 690 265 674 765 788  23 211  67 239 685 697 785 679 768 144 750  29  69 237 175  28 639 728 151 204 650
 202   7 619 667   1 751 669 150  31 164  93  32 797 745 676 626 646 670 596  55 232 637  52 695 224 749 661  59 703
  79  70 755 778  14 722 612 570 157 183 757 381 694 739 621 807 756 132 717  24  15 253  84 684  12  36 706 127 724
  68  34  17  20 554 711 784 156  25 530 648 699 766 803 735 752 664 177 759 197 343 707 281   5 271 734  38  44 687
  46 296 740 698 180 451 534  85 206 461  66 240 763 643 708 761 764 108 641 324 769 716  63 627  19  10  39 446 805
 346  45 733 742 184 704 760 767 408 666  98 203 770 816 826 834 771  72 715   6 299 276 141  30   9 773  60  65  90

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00015e+07us (= 10001.5ms, 10.0015s)
Wall-clock time (full program): 1.00624e+07us (= 10062.4ms, 10.0624s)
Satisfaction error: 2
Number of search iterations: 1973
Number of local moves: 770 (including on plateau: 171)
Number of local minimum: 163 (including on plateau: 19)
Number of resets: 0
Number of restarts: 0

Problem in column 8: 636 823 139 145 828 234 286 837 219 290 272 220 373 423 370 436 538 485 382 525 589 22 622 788 150 570 156 85 767 => the sum is 12210 rather than 12209
Problem in column 10: 103 779 629 75 119 160 652 737 815 782 499 405 238 426 392 305 375 615 610 424 56 602 195 211 164 183 530 461 666 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 657 122 148 156 666 143 822 125  62 783 702 246 583 177 663 830 687  57 171 678 120  44 127 798 145 821 820  37 819
  72 344 272  84 204 743 754 315  39 808   4 480 697 744  97 279 674  28 579  34  85 681 730 727 773  20 811 472 659
 536 170 834 119   3 800  59 580   7 723  90 240 612 166 782 147 737 507 415 479  98  82 769 557 795 689 323 149 741
 665  64 575 840 189 138 736 317 114 498 826 172 841  56 802 134 684 299 187  61 104  41 831 670 675 777 578  75 260
 139 157 449  15 785 569 763  86 386 136 791 732 799 203 159  69 686   8 646 348 175 284 458 825 746 217 780  81 717
  77 433 379 764  10 423 210 505 497 664 514 671 303 516 740 132 571 142  21  58 450 185 742 749 414 108 662 451 818
 489 728 625 144 757 250  49 539 602 174 691 622 814 173 837  83 224 222 141 253 221 387 128 213 311 770 789 251 722
 745  40 694 562 163 683 274 801 289 812 278 634 103 110 195 121 117 261 600 165 491 803 693 621 201 131 601 229 792
 364 706 588 160 263 813 212 615 409 282 725 734 750 308 381 407 290 291 339 321 354 207 716 400 277 133 577 335 252
 775 325 603 199 295 607 176 797 248 567 487 611 247 238 265 198 273 241 153 836 326 595 477 762 287 286 541 256 538
 249 581 598 292 367 718 302 652 370 587 396 835 838 231 313 436 341 107 285 530 255 350 372 464 345 275 476 334 310
 431 692 257 322 532 635 186 459 270 828 570 586 301 340 188 298 205 817 305 548  60 296 642 366 371 191 589 478 446
 359 672 262 312  68 332 304 445 456 208 594 353 361 457 426 430 816 613 827 564 324 401 669 388 318 328  47 351 524
 374 309 752 389 369 376 402 453 470 398 488 362 439 465 363 365 444 403 319 161 597 404 358 384 442 397 701 342 483
 385 410 469 484 393 347 346 377 391 518 474 412 490 254 428 501 473 100 281 793 406 378 416 373 493 337 435 593 452
 482 356 424 460 432 508 494 429 448 584 486 394 440 338 380 485 368 215 421 220 596 392 526 152 511 420 236 500 512
 599 151 447 266 259 427 434 329 556 499 810 418 528 390 475 515 467 502 527 352 306 547 383 537  78 605 202 419 181
 617 443 169 633 542 422 509 269 454 466  19 105  88 167 237 357 549 760 714 399 271 504 360 572 471 534 331 786 461
 573 190 349 395 559 194 563  13 623 441 417 183  76 616 576 649 462 413   9 695 544 510 558 529 545 463 297 551 216
 232 233  53 327 552 209 755 245 639  17 535 314 531 610 568 719 650 495 585  16 540 300 234 158 645 591 455 468 533
  79 375  73 546 481 294 437 276  25 492 179 226 525 517 550 643 629 555  92 620 553 543 101 609 582 688 408 592 519
  55 679 230 129 630  36 720   5 648 258 712 162 520 522 765 739 647 651 711 330 628   2 627 214 574 135 109 759  12
 676 626 316 805 560 565 438 197 640  91 206  67  43 661  46 700 699 698 656  18 513 244   1 102 658 733 184 641 425
 624 735 155 705 644  87 618 268 713  74 227 154 707 590 751  26 200 496 655 637 636 631 112  11 111 690 140 619 193
 839 738 710 724  23 118 604 766 726 235  71 506  52 804  22  29  27 709 668 521 771 696 218 355 267 660  66 178 106
 239 654 130 677 776 614  42 682 833 164  35 653 243 832 307 703  50 280 787 715 685 405  31 242 223 293 124 608 182
 638 382 673 781 772 566  94 779  95 192 113 333  32 116  99 667  54 758 225 806 809 729 748 288 126   6 561 503 264
 146  65 747 823 704  38 150 796 788  30 137 283  51 784 761 794 115 807 123 708 768 778 168  63 219 180 320 815  48
  93 829 228  96 211 554 756  89 411 680 632 721 196 824  33 753  70 774 767 343 523 790  14  80 606 731  45 336  24

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00016e+07us (= 10001.6ms, 10.0016s)
Wall-clock time (full program): 1.00623e+07us (= 10062.3ms, 10.0623s)
Satisfaction error: 2
Number of search iterations: 3081
Number of local moves: 1107 (including on plateau: 512)
Number of local minimum: 239 (including on plateau: 71)
Number of resets: 1
Number of restarts: 0

Problem in column 13: 583 697 612 841 799 303 814 103 750 247 838 301 361 439 490 440 528 88 76 531 525 520 43 707 52 243 32 51 196 => the sum is 12210 rather than 12209
Problem in column 27: 820 811 323 578 780 662 789 601 577 541 476 589 47 701 435 236 202 331 297 455 408 109 184 140 66 124 561 320 45 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 818  34  48 223 183 826  52 705 679 127 531 604 613 829 743 479 100 135 136 158 726 806 119 724 819 109  47  94 742
  97 231  63 740 834 707 677 753 686 557 809 814 163 128 607 474  61 148  67  46 837 653 104 810 227  36  30 811  39
  70  50 383 657 832 640  18 728 637 830 471 168 693 831 738 697 193 683  55 249 475 821 578  73  53  43 299 143 101
 178 114 741 828 833 564 131 233 729 838 199 754 175 134 727 642 156 733 538 124 508 792 153  65 779 242  96 108  95
 554  51 493 146 786 162  69 797 663 279 804 787 764 502 466 229 138 650 238 403 835 780 132 185 776 166 112  77 165
 189 202 744 294  83 827 176 801 767 431 799 182 668 271 526 770 310 709 289 344  93 773 312 768  56 309 150 159 207
 269 226 301 315 147 714 247 208 576 836 580 205 290 839 758  81 141 547 648 565 129 782 841 184 248 305 296 275 656
 262 267 400 121 171 264 765 606 808 164 281 815 805 436 681 698 232 766 286 700 155 608 244 343 191 284 217 167 472
 270 265 311 401 496 145 140 546 426 619 699 816 118 130 144 746 736 682 720 761 802 240 107 373 152 210 374 524 256
 338 236 670 322 316 266 352 372 486 717 590 137 228 716 337 674 213 320 823 840 324 395 346 139 428 201 473 332 618
 789 225 803 258 488 359 276 328 660 142 820 414 402 216 706 177  88 468 794 632 365 230 157 412 313 345 434 321 587
 367 420 796 259 330 427 368 170 454 329 695 664 203 516 769 807 298 122 628 308 196 391 388 292 186 551 340 277 658
 387 522 239 464 442 314 432 379 558 151 293 370 824 348 268 335 439 817 385 449 354 778 342 218 481 327 380 424 489
 518 263 397 295 825 371 456 483 534 251 304 319 291 353 433 435 595 334 411 386 438 394 384 382 452 669 339 376 521
 543 441 446 602 113 260 573 377 209 415 399 425 272 445 568 553 510 458 351 221 484 448 577 363 398 527 362 520 349
 410 356 492 423 418 512 417 357 297 563 504 601 429 611 413 355 366 443 190 302 419 421 323 437 451 633 447 341 278
 503 598 204 676 513 430 361 519 318 536 243 462 406 173 283 470 111 537 465 212 457 300 691 542 407 491 515 605 181
 548 569 409 478 358 643 525 416 325 499  89  41 529 235 360 317 307 440 582 485 444 254 514 560 490 552 476 530 234
  85 396 219 673 497 487 364 390 350 463 555 541 467 303  74  38 550 404  24 333 583 597 480 772 506 574 556 405 523
 535 336 422  20 389 517 545 505 285 103 194 273 572 612 662 561 626 615 117  58 511 180 540 616 651 630 570  87 477
 507 584 509 461 622  99 460 482  40 592 261 589 528  25 586  16 703  75  86 222  22 459 712 719 620 532 689 678 331
 494 715 326 711 500 566 495  10 246 684 282 579 115 571  90   5 215  19 198 455 609   6  98 755 760 599 793 722 591
 644 737 195  13 575 562  12 533  57  91 287 544  27 549 250 636 694  76 688 237 629 393  17 594 696 652 501 654 666
  84 603 588 617 585  11 731 253  45 123 627 116 631 369  42   3 687  62 647 732 211 197 790  79 659 692 690 725 610
 274 704 154 621  66 614 567  31 257 702  37 105 106 634 110 600 735 280 596 559 593 306 708 723   1 646 649 639 192
 635 763 469   8 667  68 680  60  49  72 710  54 206 739 172 378 672 169 450 408  59  26 777 748 671 381 750 745 623
 718 749   9 581  82  32 788 200 179 245  35 224 751 539 160 120 759 624 771 453 102  28 813 125 721  64 822 781 734
 625 752 665 347  44 730 775 220 133 701  33 214 288 126 161 661 762 638 785 784 675  80 188 187  15 798 795   4  23
 498 800 713 655  14  92 757 747 756 149  78 392 645  29 375 252 812 255 241 783 174  71 774  21   2 641   7 685 791

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.22692e+06us (= 7226.92ms, 7.22692s)
Wall-clock time (full program): 7.28789e+06us (= 7287.89ms, 7.28789s)
Satisfaction error: 0
Number of search iterations: 1177
Number of local moves: 688 (including on plateau: 239)
Number of local minimum: 49 (including on plateau: 32)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  95  51 835 689  25  54 589 125 664 786 764 553  38 617  66 142  48 616 278 839 116 789 713 661 798  52 336  39 831
 726 591 736 572  31 102 581  35 119 559 245 502  32 800 172  98  80 571 174 828  71 146 560 652 821 203 782 816 604
   4 127 109 733 829 705 608  68 679 638 230 632 139 568  63  62 212 777 155 610 123  33 499 822 729 234 823 428 570
  43  74 809 347  47  97 647 246 740 480 748 743  89 221 110 806  86 691 132 687 144 177 784 683 808 322 118 619 711
  26 206 128 833 840  23 825 262 213 837 818 827 103 684 792 112 235 783 163 504  58  85 375 836 459  81 113 355 633
 120 826 834 703 207  99 474  88 282 243 290 685 158 824 151  56 778 768 258 573  79 135 773 780 663 284 188 690 200
 419 274 131 261 236 781 830 226 304 281 224 723 195 763 134 159 248 747 115 841 197 153 832 156 738 811 157 629 644
 271 143 637 256 114  67 444 752 275 309 814 655 344 795 148 215  91 797 294 603 176 306 751 311 794  75 247 765 760
 233 190 545 257 360 107 596 376 437 626 819 651 154 592 175 205 273 761 211 475 793 342 378 140 535 181 358 695 744
 293 337 210 631 277 228 787 318 745 408 301 346 217 671 136 436 493 618 340 578 329 319 552 251 549 182 382 625 650
 253 323 349 237 314 122 606 242 468 276 717 229 352 799 507 178 398 454 758 494 141 208 532 503 720 263 357 701 708
 249 292 388 815 343 416 640 469 462 482 458 371 434 295 479 353 450 320 359 520 575 411 356 240 500 325 422 222 563
 315 227 289 287 380 467 531 312 400 838 456 460 513 361 517 431 390 476 391 413 384 389 255 223 715 510 321 620 338
 451 266 326 490 426 396 536 523 369 445 418 491 196 395 377 486 514 303 379 348 627 455 339 533 492 427 316 402 483
 446 471 518 185 372 331 432 333 407 296  41 464 485 646 562 599 324 420 524 365 473 657 328 565 300 394 448 362 461
 330 574 452 430 465 313 254 335 374 438 537 305 516 386 528 425 297 546 354 463 327 558 477 457 515 440 406 286 421
 648 512 401 498 429 267 555 299 387 435 368 272 397 270 399 403 587 496 623 584 291 192 481 367 259 542  46 590 611
 577 443 404 636 541 693 351 527 557 239 667 433 495 508 424 417 586 173 308 489 381 561 225 385 298 543  28 121 199
 529 441 654 635 484 576 189 519 449  90 117 453 534 506 656 409 522 373 364 250 645 554 269 439 202 597 478 220  55
 511 501 672 588 509 609 183 472  21 171 285 607 728  78 707 612 556 310 505 130 579 605  49 442  93 686 665 168 167
 567 732 525 580 674 447 169 706 363 680 551 521 600 137 415 412  14 219 497   5 547 614 244 569  24 530 540 283  44
 698 628 700 166 602 692 488 279  64 697  82 216 383 231 201 622 669 104 366 147 681 466 696 716  87 538 593  27 370
 613 639 739  36 487 666  92 526 583 129  53  60 670  94 601 802 615 126 634 332 746 582 160 585 133 649 539 100 218
 709 755 550 544 742 265  45 725 653 191  40 111 759 162 598 724 714  69 753  42 423 676  10  83 179 405 776 341 165
 668 410  57 106 145 750 302 548   7   2 660 280 817 260 677 642 643  76 392 470 719 756 662  22 193 673 734 204 334
 774 769  16 317  18 801 101 630 678 699 722 187 641 105 659 757 184 138 741  11 770  12   9  30 232 779 820 264 345
 775 694 124  34 712 790  96 730  19  72 209  73 704  37 658 791 754  59 785 186 788 564 170 688  70  77 393 807 350
 805   3  65 149 804 624 108 735 718 241 268 161 767 152 595 771 766 238 762   8 214 727 164  50  15 675 810 813   1
  61 710   6 194 796 721 150 803 772 621 307 198 749 252 702  84 682 180 594 414 812 737 566  20 288 731  13  17  29

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00013e+07us (= 10001.3ms, 10.0013s)
Wall-clock time (full program): 1.00622e+07us (= 10062.2ms, 10.0622s)
Satisfaction error: 1
Number of search iterations: 2837
Number of local moves: 902 (including on plateau: 270)
Number of local minimum: 245 (including on plateau: 41)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 0: 95 591 109 347 840 99 830 752 437 408 717 371 513 395 562 425 587 173 364 130 547 466 160 83 193 779 393 813 29 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 204 102 754 800  51 786 779   3 784 697 741 169 146   1  84  94 788 763 776 104   7 762  23  96 771 803  90 191 840
  72 275 759 773  18 125 782 250 775 767 736 382 233  59 738 225 631 753 808 151  89 171  50  52 154 769  53 765 794
 768  87 755 586  68 695 813 548 257 718 222 234 267 422 433  21 691  12 799 684  81 749  60  34 770 314 133 287 701
 797  45   8 294  80 742 746 641 750 700 703 288 682 758  56  86 728 269 594 117 279 805 256  98 704 120 132   2 729
 687  57 308 458 293 743 733 683 621 324 719 319  63 744 672 735 714 231  44 706  70  35  67 123   5 681 529 180 665
 591 675 657 210  10  17 802 639 670 690 494  47 103 724 692  14 720 360 680 602 100 617 274  15 777 254 115  76 584
 694 732 668  55 406 660 135 669 646 581 206  62  30 745 645  75 747  88  36 644  19 651  11 107 662 667 568 202 798
 614 674  24 356 174 627 705   9 717 593  66   6 562 655 564 122 659 178 648 708 170  78 126 513 643 629 575 158 656
 673 623 588  26 239 555 228 608  42 569 155 168 585 535 490 615 302 572 260 567 574 553 134 121 624 539 549 109 606
 541 573 510 341 248 461 544 576 603 136 165 159 550 401 599 515 582 441 523   4 566 619 297 309 633 518 200  95 500
 479 508 507 503 393 607 455 538 502 363 292 252 511 563 589 543 610 600 124  39 214 557 199 400 647  25 514 182 493
 525 505 452  22 546 531 498 482 604 358 291 326 570 487 403 469 653 216  13 628 547 488 229 459 605 150 285 438 429
 558 402 464 579 533 394 472 473  29 489 175 353 296 495 424 474 559 520 436 467 270  43 306 521 512 526 527 432 480
 460 418 451 346 595 483 448 387 536 551 453 528 332 427 289 486 590 276 417 415 484 384 421 335  38 420 485 431 323
 396 367 391 405 398 446 449 509 478 194 492 301 392 470 454 476 491 334 540 390 419 407 349 462 450 524 374 442 409
 481 376 364 465 444 378 428 361 262 333 707 577 447 426 290 362 217 310 463 412 425 443 712 437 348 388 375 501 477
 698 338 395 410 365 320 366 423 471 583 411 686 496 355 305 261 457 456 316 342 383 359 795 369 371 253 372 542 311
 329 414 307 820 272 343 634 368 399 339 416 748 298 381 537 354 345 652 286 350 545 386 435 613 317 218 303 516 284
 208 370 340 722 677 268 215 336 330 389 313 565 351 347 397 337 195 727 497 328 282 556 616 380 322 357 552 792 440
 255 246 737 352 835 377 241 143 203 830 430 571 299 160 176 315 238 304 611 778 404 312 650 331 321 823 434 506 327
 258 226 209 295 578 281 193 185 811 408 630 819 161 373 278 251 249 227 468 815 836 263 620 635 242 711 207 796 184
 266 220 385 740 499 224 661 822 245 244 318 689 688 196 164 273 186 277 232 325 772 837 663 658 166 530 223 596 110
 379 504 145 664 283 197 148 300 211 636 439 637 781 198 188 825 187 265 138 230 824 219 804 785 237 475 676 726 108
 131 247 172 721 519 821 183  20 205 140 831 751 189 167  91 783 212 522 601 111 774 264 812 810 163 243 752 739 235
  82 128 153 618 642 192 152  97 236  48 597 598 809 190 157 760  65 679 139 807 626 179 271 716 838 816 632 702 280
  61 780 221  49 709 177  73 554 113 119 609 638 731 826 827 685 106 725 818 181 517  79 734 534  92 142 240 696 173
 144 710  46 413 787  93 141 789  85 118 344 671 105 201 791 715 130 806 137 466 622 592 839 801  28 156 756 561 162
  27 841 625 149 834 612  69 764 560  33  41  16 699 829  83 757  58 114 693  77 587 147 666 817 640 127 828 445  71
 832 766 814  37 713  54 116  32  64 259 213 649 833  74 793 580  99 532 112 761 723 654 790 678 129  31 730 101  40

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00014e+07us (= 10001.4ms, 10.0014s)
Wall-clock time (full program): 1.00623e+07us (= 10062.3ms, 10.0623s)
Satisfaction error: 2
Number of search iterations: 2411
Number of local moves: 848 (including on plateau: 209)
Number of local minimum: 166 (including on plateau: 29)
Number of resets: 1
Number of restarts: 0

Problem in column 1: 204 72 768 797 687 591 694 614 673 541 479 525 558 460 396 481 698 329 208 255 258 266 379 131 82 61 144 27 832 => the sum is 12210 rather than 12209
Problem in column 16: 94 225 21 86 735 14 75 122 615 515 543 469 474 486 476 362 261 354 337 315 251 273 825 783 760 685 715 757 580 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 381 541 757 256 225  52 135 178 477  58  37 720 596 772 272 818 813 229 727 718 689 681 707  41 248 132 242 698   8
 539 144 779 662 143 130 292 794 327   9 218 786 743 202 702 811 730 291 109  23 699 789 701 293  10  18 123 394 748
 684  50  79 203 184  21  69 778 724 206 809 726 817 673 715  27  35  20 780  99 658 665 694 708 245  17 705  13 805
 636 696 695 387  62 118 102 683 738 249 642 643 652 519 494 664 721 205  36 151 737 672  22  24 166 312 308  78 797
  84 631 603 659 425 138 131 295 688 713 735 686 585  81 647 196 750 128 199  12 609 745 771  67 116 136 147 667 565
 115 644 729 669  90 710 104 153 700 754  53 602 618 671 567 719 736  51  14 133 732 629 535  34 113 160  74 544 556
  33 703 553 532  38  83 163 299 661 723 594 777 461 657 608 804 697   5 175 522 792 584  28 611 121  43  76 296 570
 514 605 716 111 161   2 529   6 676 760 578 538 154 674 442 600 739 110 634  89 433 208 558 543 546 141   1 481 660
 545 691 212  86 117 233  73   3 507 654 637 650 300 551 625 536 731 436 604 742  32 663 506 431 227 469 122 177 649
   7 687 628 101 146 306 103 332 516  97 598 476 613 574 525 610 591 562 568 182 181 430 554 437 501 432 201 711 540
 275 651 502 235 344 230 413 158 409 382 314 537 475 616 492 465 424 595 373 633 372 632 528 614  59 179 258 496 548
 247 460 463 302 375 357 417  31 563 557 717 298 407  72 318 518 503 627 590 559 254 324 499 497 569 277 376 468 564
 588 552 555 471 252 454 426 107 402 510 479 512 316 447 351 474 321 495 268 399 363 361 508 617 449 152 322 472 586
 386 440 473 198 378 341 329  29 505 352 542 466 418 577 487 547 524 397 530 491 371 389 509 478 266 219 462 513 592
 493 520 435 533 560 422 319 484 313 457 336 677 411 456 349 333 346 343 445 446 489 311 523 366 408 251 379 365 439
 587 470 350 412 393 285 317 383 421 576 428 511 261 480 621 323 200 280 549 812 444 490 415 368 337 232 531 403 330
 640 410 369 354 626 486 451 803 438 396 348 304 808 186 303 238 342 263 526 216 589 429 222 286 515 572 427 307 355
 253 359 785 416 746 521 406 441 453 401 326 670 362 459 339 420 320 448 282 450 364 305 370 733 405 488 217 301 169
 648 380 239 414 582 315 391 690 434 297 162 310 615 220 566 392 271 259 236 223 709 119 356 234 826 630 682 783 226
 639 358 269 837 534 395 747 575 267 766 274 189 385 289 374 228 452 264 215 762 294 224 290 398 284 583 801  94 423
 706 112 214 641 607 769 751 678 781 273 100 125 188 334 191 265 270 775 210 759 197 165 340 255 571 619 764 159 390
 623 262 180 680 500 822 810 800 367 195 347 172 712 287  40 243 309 244 213 260 517 276 194 231 331 685 728 836 345
 384 240 335 279 752 806 377 774  65 360 838 155 187 176 207 156 209 815 139 338 455 799 791 288 620 828 581 157  98
 190 741  91 573 601 483 646 597 204 283  87 257  48 183 839 353 168 561 841 443 325  64 174 753 482 840 606 734  42
 638  56  82 419 404 763 740 211 250 823 832  75 744 692 173 246 278 679 653 241 105 192 328 126 725 656 693 164 221
  63  30  60 666 807 816 770 458  15 237 819  46 145 485  68  80 527 756 833 579 124  54  85 814 655 749 593 787  88
 668  61 827 171 714 773 635 498  92 150 170 148  25 765 820 120  26 758 114 550  71 108 835 795 796 831 388 281  19
 599 704  95 149 768 580 802 504 167 142  93 137 106  45   4 193  47 825 624 755 140 824  39 767 834 776 790 645  55
  44  11 134 793 675 798 761 467  49 829  96  16  57  66  70 830 129 788 722 622 464  77 127 400 784 782 612 185 821

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00022e+07us (= 10002.2ms, 10.0022s)
Wall-clock time (full program): 1.00631e+07us (= 10063.1ms, 10.0631s)
Satisfaction error: 3
Number of search iterations: 1904
Number of local moves: 725 (including on plateau: 279)
Number of local minimum: 144 (including on plateau: 35)
Number of resets: 0
Number of restarts: 0

Problem in row 1: 381 541 757 256 225 52 135 178 477 58 37 720 596 772 272 818 813 229 727 718 689 681 707 41 248 132 242 698 8 => the sum is 12208 rather than 12209
Problem in row 20: 639 358 269 837 534 395 747 575 267 766 274 189 385 289 374 228 452 264 215 762 294 224 290 398 284 583 801 94 423 => the sum is 12210 rather than 12209
Problem in diagonal 1: 8 394 705 312 116 34 28 208 32 182 373 627 321 547 349 480 808 670 162 766 781 800 377 483 404 666 827 704 44 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 142 760 120 716  10 702 286 703   1 326 696 295  56 263 799 674 641 186 795 607 140  19 672 784 722 785  94 200  15
  54 136 162  23  33 700 336 272   9 734 765 685 783 804 803 763  55 137 741 808 189 125 712 806  25  16 706 415 412
  45 754 493 201  88 290   6 750 644 778 757 305  34 329 662 531 744 306 768 747  70  42 733 779   2 715 196 280 160
 476 745 101  13 183 743 554 761   7 727 670  61 191 254 781 792 723 233 800 679 204  90 746 683   3 121  58 167 643
 790 753   4 214 135 602  86 762 170 717 352 614 713 128 705 657 203 255 731 580  67 335 668 241 155 695  12 158 707
 774 640 103 143 247  17 154 569 499 594 730 225 664 311 711 735 724 378 439 550 270  53 627 384 656 638 252  60  63
 490 720 369 684   5 304  28 570 559 394 739 138  41 265 654 682 520  95 609 769  83 268  69 606 561 573 526 235 653
 680 586 274 738 292  22 626 633 582 610 660 165  51 260 691 620  21  97 688 615  72 349 589 726  99 478  92 227 666
 560 588 299 618 310  81 514 601 371 690 548  24 558 172 508 528 541 517 502 505 278 257 650 659 418 466 177 258  11
 523 632   8 600  40 665 513 521 649 585 485 151 537 242 422 678 118 245 699 114 163 181 593 642 522 604 463 149 465
 584 432 314 571  78 525 567 511 188 557 540  49 637  59 624 539 617  37  65 622 379 253 501 564 503 563 552 109 669
 455 518 175 457 271 426 577 489 555 515 481 556 534 219 530 578 392  14 482 461 330 428 483 568 721 315 124 453 102
 572 477 474 494 264 383 389 413 360 381 536 388 507 441 424 506 276 529 436 333 339 357 370 437 449 533 579  62 500
 498 417 387 414 377 456 460 488  84 480 373 407 342 452 468 442 591 549 397 410 420 472 467  52 603 516 307 409 471
 519 486 535 302 629 393 345 347 419 532 323 396 338 458 353 839 491 355 401 487 284 372 512 450 438 340 256 259 350
 470 309 451 395 408 546 266 794 434 447 316 583 553 454 497 429 386 321 376 475 296 421 251 473 405 331 320 359 443
 374 411 587 375 527 361 446 363 538 400 382 332 444 590 524 277 362 313 327 365 833 619 445 356 366 385 232 459 216
 239 492 364 435 574 334 404 312 425 348 440 431 496 592 433 288 279 298 301 398 628 562 207 267 403 240 484 714 821
 469 180 776 317 819 228 236 248 185 427 772 826 368 770 344 390 283 343 448 297 630 423 152 190  18 300 544 796 430
 139 237 608 293 595 787 767 328 226 828 238 221 164 510 104 150 367 599 287 402 322 742 192 303 661 813 543 565 217
 416 308 652 246 547 752 144 337 823 291 209 675 406 504 197 182 231 791 285 113 655 351 211 341 325 179 551 755 732
 275 174 676 243 673 202 171 825 218 230 318 793 112 751 354 115 129 462 222 728 811 824 269 399 229 832 250 635 289
 346 194 709 213 835 234 817 169 206  66 324 575 116 647 123 262 215 797 168 282 380 831 193 131 841 159 812 775 789
 223  96 756 281 616 358 119 132 658  35 176 651 671 748 184  85 208 818  71 199 782 495 566 836 391 294 810 802 148
 108 210 725 156 663  82 838 105 780 249  68 639 820 545  87 107 827 736 598  89 834 694 205 147 759 127 212 612 187
 146  47 621 729 636  79 244  50 687 126 134 788 667 758  80 141 798 718 273 195 771 698 686  91 106 319 749 719 153
 198  57 816 837 710 611 766  26 689  48 117 605 697 542  39  38 178 646 130  44 645 704 261  64 220 166 822 840 693
 814 173 623 809 815 701 773 100 764  20  31 509  75  43  32 145 708 648  77 224 597 613 133  73 807 596 681 161 464
 830 677  27 692 829 625 777  30 479  74  29 122 634  98  76  36 581 786  93 111 737 631  46 157 801 110 805 576 740

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00009e+07us (= 10000.9ms, 10.0009s)
Wall-clock time (full program): 1.00618e+07us (= 10061.8ms, 10.0618s)
Satisfaction error: 2
Number of search iterations: 2102
Number of local moves: 831 (including on plateau: 192)
Number of local minimum: 161 (including on plateau: 23)
Number of resets: 1
Number of restarts: 0

Problem in row 6: 774 640 103 143 247 17 154 569 499 594 730 225 664 311 711 735 724 378 439 550 270 53 627 384 656 638 252 60 63 => the sum is 12210 rather than 12209
Problem in row 20: 139 237 608 293 595 787 767 328 226 828 238 221 164 510 104 150 367 599 287 402 322 742 192 303 661 813 543 565 217 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 367 751 771  53  13 793 745 161 360  88  15 239 146 749 752 808 798 488 440  30 142  40   5 122 816 829 830 767  91
 123 769 828  42 731 759 790  26 683 424 213 214 136  65 216 768 762  10 740  27 204  35  23 327 763 826 747 794 164
 119 609  32  33 186 797 632 259  18 127 270 755 558 748 773 803 802 284 648  44  19 329 277 756  87 725 778 682  59
  66 170 722 163 132 509 735  20   6 717 141 126 187 734 777 691 813 171 466 726 738  76 795 647 359  14 741 721  46
  63 650 680 688 344 746   3 117 220 131 137 708  85 673 576 594 684 211  67 716 357  84 792  93 410 636 811 765 168
 193 311 638 695 148  43 597  28 221 714 431  54 627 661 674 704 598 182 551 106 133 775 586   1 290 710 628 577 333
 249 641 729 411 130 758   9 331   2 653 138 268 351  45 107 539 718 711 279 639 610 692 591 570 222 720 593 491  12
 317 613 592 616 183 668 703  98 291 564 134 697  90 644 532 652 550 103  96 548 615 228 549  72 176 563 604 651  60
 224 542 533 728 120 499 681 498  92 505  17 553 560 667  11 572 362 600  39 640   4 663 611 395 184  79 629 657 544
 250 541 662 536 210 659 596 298 264  52  89 198 330 529 125 535 470 621 686 483 568 658 552  21 265 601 676 685  49
 258 349 508 518 299 619 450 555  16 602 583 654 530 319 506 459 603 242 301 336 201 425 334 320  75 517 578 507 545
 234 770 614 497 240 468 543 469 540 557 432 140 565 493 445 315   8 521 217 546 625 476 455 449 149 482 511   7 441
 154 538 451 584 313 444 480 283 664 353 229 524 248 348 510 232 478 554 520 522 417 489 580  57 605 356 494 531 251
 366 448 490 467 573  24 108 475 485 479 599 354 582 472 197 406 473 370 501 525 495 624 412 393 372 384 238 559 338
 346 253 477 335 677 446 585 403 523 416 397 556 322 503 407 457 373 617 487 262 325 458 423 263 427 212 413 496 350
 418 500 405 437 456 361 364 422 460 435 390 388 345 408 452 447 492 486 223 588 306 561 519 308 739 368 245 282 404
 587 318 528 274 579 300 515 402 434 374 321 512 426 305 295 383 574 382 430 400 399 341 375 376 732 581 380 292 394
 443 316 155 454 589 481 139 630 414 203 288 807 421 377 215 286 461 772 789 369 267 296 302 571 415 463 276 200 810
 567 260 241 340 835 419 387 385 737 180 439 363 310 365 347 337 342 420 817 389 352 189 303 618 464 791 297 287 428
 687 804 304 343 606 324 269 191 534 275 742 831 272 309 516 273 378 436 575 429 278 281 167 219 689 202 307 326 642
 656 805  68 392 442 246 401 736 796 289 743 256 271 257 254 462 328 218 504 104 409 379 709 237 699 173 391 358 626
 562 332 339 169 502 252 396 433 233 715 841 838 727 285 206  25 145 294 484 235 209 837 312 655 526 398 236 323 700
 701 255 178 812 787 247 818 785 172 833 694 152 806  97 179 314  81 190 280 101 832 129 814 381 474  80 185  71 761
 696  37  62  83 643  69 128 690 637 293 623 192 266 159 809  31 121 782 707 208 815 800  41 801 607 781 244 160 724
 649 226 243 825 371 199 156 733 706 774 620 612 225 110 261 693 195 177 675 162 672 144  77 784 839 115 116 181 669
 822 153 227 702 590 118  36 595 679 386 730 157 819 151 566 102 158 786  29 754 820  86 723 827  34 355  94 196 514
 744  55 194 799  95 823 671 698 779 205 453 207 633 788 622 109 230 760  70 780 166 766 111 465 112  82  73 150 569
 527 143 438 135 665  74 124 776 635 634 660 666 547 834 174 165  99 646  51 757 513 670  58 836  48  61  38 471 764
 821  50 100  78 750  64 147 712 608 231 840 188 824 114 705  47 113 175 537 783 719 678 713 645 631 105  56  22 753

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00025e+07us (= 10002.5ms, 10.0025s)
Wall-clock time (full program): 1.00629e+07us (= 10062.9ms, 10.0629s)
Satisfaction error: 3
Number of search iterations: 2098
Number of local moves: 865 (including on plateau: 282)
Number of local minimum: 163 (including on plateau: 23)
Number of resets: 1
Number of restarts: 0

Problem in column 7: 745 790 632 735 3 597 9 703 681 596 450 543 480 108 585 364 515 139 387 269 401 396 818 128 156 36 671 124 147 => the sum is 12208 rather than 12209
Problem in column 21: 142 204 19 738 357 133 610 615 4 568 201 625 417 495 325 306 399 267 352 278 409 209 832 815 672 820 166 513 719 => the sum is 12210 rather than 12209
Problem in diagonal 0: 367 769 32 163 344 43 9 98 92 52 583 140 248 472 407 447 574 772 817 429 409 837 814 801 839 355 73 471 753 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 273 692   8  10 125 757 268 693 701 360  77 750 702 790 188 317 771 311  87 789 446 716 312 342 715  40 190 778   1
  19 776  93 318 748 730 226 719 218 787 619 661  33 407  75 118 722 784 752 718  60 802 156  55 720  49 670   9 165
 331 100 705 649 766 259 243 760 781 731 108 791 767 265 189 347 721 798 215 732  31 127 699  53   5 149  15 728 144
  17 756   6   2 690 623  12 637  48 796  63 576 712 777 679 233 799 747  81 741  98 745 513 224 518   4 769  23 320
 132 681  27 102 803 755 357 744 650 632 120 801 725 782  74 246 638 202 414 595  61 736 768 122  95  58 677 186  26
 213 575 175 322 558 763  38 565 612 713  94 723 645 630 134  83 245 689 196 691 255 758 170 396 688 123 697  96 362
 124 729 599  64  44 663  79 664 539 698 651  36 583 733 135  84 735 665 187 675 534 669   7 148 734 596 580 117 137
 330 695 593 328 708 653  35  32 674 607 582 162 640 591 673 248 326 631 115 509 620  28 163 106 147 605 521 696 191
 150 626 298 392 601 647 173 492   3 573 409 613 594 667 586 329 319 258  29 704 554 602 230 283 577 636 685  50 129
 334 572 433  13 633 592 543 418 472 589 121 177 656 465 603 267 559 541 353  18 158 105 476 291 588 600 635 648 349
 536 455 437 184 570 627 530 435 507  22 584 193 535 604 585  89 617 512 157 356 533 610  97 277 615 474 553  65 450
 522 538 523 451 452 493 303 608 343 508 587 271 420 634 440 242  25 609 244 519 480 590 289 210  57 581 574 182 514
 551 549 542 378 561 439 497 496 432 482 423 113  88 448 662 112 466 520 363 402 502 537 208 449 434 495 390 225 445
 425 489 460 488 540 299 401 454 526 531 478 169 486 275 517 405 471 338 419 272 443 377 490 438 250 494 371 491 412
 453 382 579 457 456 417 475 463 301 441 557 386 336 195 393 413 381 621 500 556 257 442 548 327 470 305 426 366 306
 503 479 376 524 464 389 324 395 383 408 447 422 367 398 552 379 286 477 373 838 424 462 302 368 308 506 406 314 335
 359 416 269 430 355 467 473 655 323 217 428 350 564 388 294 415 365 436 532 391 461 403 545 511 205 384 372 827 374
 223 274 252 555 361 247 387 348 625 351 793 270 352 284 168 770 738 831 811 337 297 411 487 525 313 394 264 290 251
 282 364 345 346 397 178 547 237 431 307 256 624 288 310 116 484 761 341 485 375 160 707 527 660 468 304 785 316 808
 566 219 380 806 358 261 742 340 285 813 214 458 315 321 410 774 504 354 578 429 209 222 369 544 199 136 228 499 676
 815 161 292 727 253 212 829 204 832 333 180 622 155 278 181 792 370  91 567  76 682 249 618 528 399 339 200 498 726
 671 153 221 709 240 107 644 159 385 276 229 616 185 287 839 759 110 216 606 146 717 231 765 643 183 279 404 800 629
 703 234 194 639 176 203 830 166 164 510 192 444 167 266 263 751 550 828 344 201 598 172 841 836 141 207 139 646 804
 227  92 711 614 128 816 775 143 236 171 197 569 309 835 300 762  72  45 710 232 206 833 281 293 296 780 152 641 783
 659 109 753 254 837 332 597 239 179  90 684 421 260 241 658 516 138  70 773 515 235  42  71 562 834 611 211 652 666
 706 126 501 822  59  82 560 220  56  37 794 280 427 130 749 628  47 101 797 198 737  46 481 686 672 824  85 563 795
 568 131 818 459 103  34 238  67 779  21 754 469 642 114 142 546 262  66 814  73 807  20 739 826 154 772 325 812 654
 700 820 810 683 119  24 295 805  30 151 825 174 111  14 764 571  78  86 668  69 821  62 400 819 746 740  99  11 714
 817  16 809 483 104 140 788  51 694  54 743  68 145  80 840 529 133  41  39  52 823 505 657 687 678 724 786 680  43

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.90598e+06us (= 7905.98ms, 7.90598s)
Wall-clock time (full program): 7.96585e+06us (= 7965.85ms, 7.96585s)
Satisfaction error: 0
Number of search iterations: 1359
Number of local moves: 722 (including on plateau: 273)
Number of local minimum: 88 (including on plateau: 32)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 816 804  85 620 830 740 768 602  38 225  37 546 835 780  44  21  49 788  28 289 792 739 167 105 758  32  24 595  52
  55 809  19 716 833  84 125 754 666  50 159 607 615 811 113 147  36  76  33 588 751 152 824   6 825 805  79 806 665
  30 532 463 733 161 735 817 108 115  41 796 559 604 803  53 104 155 221 694 832 560 135 493  64 190 123 820 619 649
 153 644  78 193 834 136 507 175  87  90 171 839 829  68 203 110 168 783 368 840 767  54 700 149 837 812 207 618 789
 205 579  47 670 347 528 828 635 111  56 808 799 838 745 179  99  92  91 127 826 673 287 592 201 365  45  88 625 723
 133 801 228 841 831 476 185 184 186 158 170 765 479 669 114  57 301 194 187 696 714 206 763 785 423 411 130 790 332
 137 511 434 317 254 143 679 695 176 138 597 778 628 256 119 117 107 760 784 564 627 126 823 191 473 233 131 707 704
 220 622 248 401 255 148 793 722 145 282 548 662 827 285 294 218 273  94 296 642 569 102 641 216 224 303 697 661 821
 319 404 264 554 306 197 320 188 499 281 340 759 762 162 195 226 438 211 729 836 814 259 818 189 684 245 354 323 533
 292 667 383 465 142 304 219 349 360 798 403 653 253  63 246 280 279 209 237 757 774 327 658 441 545 335 352 624 794
 227 690 234 510 129 267 364 295 321 240 710 743 250 305 214 271 238 262 508 522 756 230 777 231 652 451 284 706 822
 336 396 416 703 291 251 199 688 311 277 371 390 369 393 573 293 391 490 500 698 422 475 198 424 747 468 288 385 466
 334 503 488 598 481 366 310 813 426 430 417 222 453 446 509 819 299 150 358 519 263 529 382 274 232 361 419 337 471
 326 581 435 485 202 450 370 444 553 333 375 525 312 576 351 489 397 527 464 412 395 505 521 470 373 269 421 257 392
 307 429 443 386 331 526 350 318 341 517 427 268 414 480 353 491 286 534 431 399 568 432 339 483 549 460 467 394 486
 357 578 325 591 428 455 498 298 456 389 343 372 400 376 342 406 550 388 402 283 324 329 457 379 539 603 487 495 359
 380 410 367 454 484  20 520 260 415 577 378 515 469 557 440 477 600 384 409 362 613 478 541 461 338   7 425 420 447
 551 174 496 229 643  39 474 439 314 513 445  46 512 543 524 540 492 616 502 244 355 563 180 433 459 413 531 497 442
 638 239 482  81 530 547 472 278 582 634 514 132 398 363 663 544 574 693 594 204  40 200  67 556 640 570 518 100 356
 462 183 523  80 408 452 562 637 458 586 157 584 536 685 407 561 626 566 181  12  98 535 266 681 272 555 552 309 275
 815  71 606 494 436 645  73 589   9 572 636 128 247 730 571 691 538 623 381 387 169 418 177 567 146 516 596 313  65
 608 163  27 542 709 748  60  16 587 405 565  22 141 611 750 621 633 651 537 196 252  58 646 590 629 632 631 156  23
 664 290 612 302 575 671  97   5 744 687 164   3 165 605 654 580 692 682  69 261  14 800   8 676 103 752 610 585 139
 755 134 677 249 630 734 593 437 732 300 614  61 116   1 686 583 675  17 708  59  18 705  77 718 330 639 678 217  66
 728 297 795  29  26 617 701 501 720 711 647 315 118  43 674 650 599 609 182  95  72 672 449  10  11 715 781 270 172
 660 106 749 213 807  15 308 668 770 791  96 236 109  25 601 727 725 753 746  83 140 731  86 721 178  93 742 120 210
 802 322 724 344 124 374 648 683 771 773  31 160 243  42 779 719 448  51 680 122 151 736 316 702 377 558 121 166 242
 810  35 764 144 112 775 215  82 659 656 504 328  75 712 782 655 787 738 348 258 173 737   2 769  34  62 772  13 208
  89 235 797 265  70 766 154 346 657 699 786 192 212  74 776 713 761  48 726 223 345 689 241 717 276 741   4 101 506

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00013e+07us (= 10001.3ms, 10.0013s)
Wall-clock time (full program): 1.00619e+07us (= 10061.9ms, 10.0619s)
Satisfaction error: 2
Number of search iterations: 2241
Number of local moves: 907 (including on plateau: 204)
Number of local minimum: 163 (including on plateau: 22)
Number of resets: 1
Number of restarts: 0

Problem in row 14: 326 581 435 485 202 450 370 444 553 333 375 525 312 576 351 489 397 527 464 412 395 505 521 470 373 269 421 257 392 => the sum is 12210 rather than 12209
Problem in row 17: 380 410 367 454 484 20 520 260 415 577 378 515 469 557 440 477 600 384 409 362 613 478 541 461 338 7 425 420 447 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 481 803  37 774  35 627 727  24 226  44 118 722 305 285   2 269 804 678 797 801 183  77 791 734 182 160  70 756 697
 135 223 753 792 337 313 710  56 342 834 775 588 289  91  89 144 692 770 658 794 236   5 811 746 102 570  13   6 334
  29 793  81 814 217 800 666 122 762 530 747 798 112  43  19 324 674  79 738 771 165 107 815 783  36 736 100 300  48
 374 713  61  68 273 589 741 288 764 670 784  10 212 820   8 244 598 818  63 150  88  15 735 772 708 703  46 210 684
 216 405 701 698  39 138 686 558 673 669 733 283  22 187 685 178 459 650 721 694 219  62 643 777  31 773  17 141 151
  73 705 671  75 248 463 788  69 677 608 668 633  90   1  34 555 745 716  50 619  12 628 648 544 284 653  26 659 267
 502 656 752 683 109 188  51 635 664 562 252 802  72 437 139 177 531 763 662  32 128 750  45 508 179 706 396 729  99
 117 728 631 766 445 505 743 161 652 494 616 173 147   3 613 103 420 620 592 510  49 171 559 714 256 432 278 657  54
  71 534 614 751 224 478 621 660 647 591   9 599  41 185 546  52 641 320 477 503 360 757 575 572 142 586  21 602  30
 254 520 578 333   7  85 587 430 512 411 640 565 229 146 176 576 561 672 490 123 130 535 634 691 451 529 231 605 509
 454 395 525 617 522  25 564 601 549 275 134 125 517 197 472 519 486 569 397 407 436 501 513 412 365 484 293 533 322
 190 487 507 215 295 233 574 427 511 479 402  55 431 192 515 577 618 541 624 536 429 482 514 689 314 467 426 348 131
 439 419 625 315 276 571 304 345 493 579 354 582 499 403 527 563 492  57 428 358 126 389 500 649 406 413 189 473 435
 583 390 554 398 475 241 408 553 388 543 352 331 636 301 335 495 516 457 382 393 421 387 456   4 532 611 266 433 368
 470 394 357 330 416 455 373 458 488 496 383 319 448 438 344 312 446 489 372 423 341 202 442 447 580 497 822 349 318
 504 593 542 440 545 302 361 424 378 225 340 296 449 376 466 469 399 480 476 268 246 381 355 417 551 584 401 391 550
 294 230 270 468 385 380 370 346 498 253 778 290 699 328 332 409 799 201 251 441 690 369 410 603 606 211 491 363 444
 356 464 386 316 790 841 353 422 336 279 474 148 191 552 453 274 404 813 400 282 676 258 425 338 537 286 523 257 375
 206 759 434 120 364 749 367 359 260 418 594 218 362 600 781 213 308 392 839 208 573 259 326 311 521 323 539 221 585
 655 167 170 450 615 805 443 264 238 832 261 483 610 556 317 695 250 209 321 119 528 242 384 347 626 371 782 234 235
 812 164 343 111 760 327 272 595  20 137 823 277 609 732 566 715 297 776 329 198 835 339 154 306 538 199 540 228 207
 711 462 175 325 765 247 104 712  92 158 263 524 829 809 292 719 245  87 461 227 720 265 287 169 629 195 548 465 724
 377  64 307 249 709 581 291 298 299  84 612 262 758 680 240 255 121 237 243 831 681 718 127 310 687  28 688 828 644
 181  98 807 366 632 704 156 180 379  53 303 567 786 665 590 622 113 309 204 174 646 840  60 203 761 193 824 163 630
 682 808 214 748 560 796  94 675 222  65  67 726 460 755 414 651  59 184 152 196 702 637 186  18 526 281 700 351 280
 663  58 140 547 768 145 155 157 172 819 105 149 696 607 795 604 194  82 506 737 779 707  66  14 108 830 731 136 739
 817  78 780 166 639 132  96 725 769 159 350 836 597 485 837 679 200 129 271 124 638 642  38  11  47  97 825 232 810
 742  76  93 168 114  74 471 827 115 116  33 806 452 767 789 596 110  16 162 623 518 744 557  80 717 205 730 785 723
 821  23 101 106 645 415 133 838  83 826 239  42 661 568 833 220  27  95 143 667 654 740 153  40 787  86 693 754 816

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.00623e+07us (= 10062.3ms, 10.0623s)
Satisfaction error: 2
Number of search iterations: 2927
Number of local moves: 1161 (including on plateau: 465)
Number of local minimum: 233 (including on plateau: 62)
Number of resets: 1
Number of restarts: 0

Problem in row 2: 135 223 753 792 337 313 710 56 342 834 775 588 289 91 89 144 692 770 658 794 236 5 811 746 102 570 13 6 334 => the sum is 12208 rather than 12209
Problem in row 10: 254 520 578 333 7 85 587 430 512 411 640 565 229 146 176 576 561 672 490 123 130 535 634 691 451 529 231 605 509 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 789  86 786 247 346 228 116  80 150 298 782 468 750 794 726 550  16  51 760 795 738 765 234  18 756  13  48  29 790
 758   6 708  75 159 104 689 148 111 771 669 357 119 776  67 299 188 701 785 246  43 226 799 122 732 283 680 813 775
 720 281  66  70 557  72 717  14 694 761 792 716  19 754  60 730   9 117 724 420   7 230 797  49 670 336 268 755 804
 747 660 605  98  77 151 713 112 164 138 783 100  69 735 108 193 128 173 728 736  79 309 764  47 714 822 739 712 805
 698 312  73   2   1  88 784  11 700 718 687  54 121 671 187 722 109 124 752 693 681 275 673 199  42 706 729 741 656
 733 158 710 651  53  28  71 176 528 600 621 186 169 620  22 333 599  56 709 586 296 622 672 120 654 208 584 740 704
 666 152 703 215 171 265 154 269 627 392 614 613 579 590   3  89 664 337 674 686 633  21  32 381 721 102 593 617 646
 661 219 737 640 300 351  76 384  23 679 658 636 602 702  27  82 538  26 558 203 612  10 577 597 608 221 695 134 653
 540 543 585  52 527 526 114 257  90 522 525  83 533 531 607 487 630 143 596  20  85 641 659 610 572 231 513 302 685
 562 446 595 546 198   5 696 177 637 200 569 564 623 541 598  68 581  40 547 223 561  57 692 575 471 129 301 497 510
 553 611  17 504 534 250  59 316 443 574   8 520 514 458 648 211 501 140 243 632 591 576 567 492 537  65 508 482 655
 500 521 484 551 554 463   4 115 560 156 502  31 615 348 518 464 506 240 618 175 479 544 573 542 183 477 524 530 432
 450 490 451 517 571 515 609 398 386 435 382 454  12 478 565 552 179 494 178 400 373 415 394 447 461 555 470 157 421
 548 485 419 457 445 407 330 397 355 401 652 425 473 456 483 452 428 390 368 427 402 358 429 496 378 361 308 344 335
 413 493 311 237 505 476 350 349 366 345 519 334 462 480 507 545 305 481 374 418 472 408 372 380 498 529 503 318 459
 359 466 449 453 313 387 437 416 833 315 469 362 690 405 403 277 625 379 375 465 409 364 412 255 475 307 393 442 274
 431 424 340 832 748 251 422 439 292 743 391 270 322 332 342 356 448 780 204 293 266 488 438 516 363 395 389 324 370
 168 371 410 321 430 353 806 556 329 383 287 841 249 282 436 236 404 731 388 352 512 303 385 663 426 580 314 297 396
 365 668 290 325 323 276 310 486 235 360 406 319 210 414 326 642 327 536 830 707 376 727 285 423 280 834 339 328 262
 338 377 286 213 583 279 341 697 227 812 304 828 284 205 238 768 399 367 271 817 189 347 264 288 317 667 568 604 331
 202 665 306 759 634 798 267 563 241 638 145 195 369 272 197 643 207 715 167 511 823 719 252 291 229 753 354 181 113
 259 810 239 295 749 809 606 826 244 578 126 742 153 258 744 260 343 635 278 233 191 821 155 182 216 631  63 645 118
 172 253 224 232 248 603 824 619 757 218 222 256 174 245 495 723 770 779 535 691 144 734 840 242 192 594  44 162 217
 263 649 136 725 746 825 647 796 837 441 101 225 184 209 769 220 160 745 105 294 273 320  55 827 161 539  87 835  35
  84 190 815 774 130 683 601 587 137 194 147 772 676 127 206 675 816 624 261 523 781 185 110 644 455 589 146  97 180
 131 254 106 831 532 778 570 767 788 212 139 616 773  91 677 711 141 549  37  81 801 509  45 800 133 839  46 214  38
  34 705 793 433 440 699 499 818 132 170 559 142 791 165 814 662 751 582  78 444 123 489 125 829  50 289 434  64  95
  41 103 491 588 678 762 196 629 639  94 135 474 838 107 628  93 650 682  36  99 802 688 149 763  96  92 803 820  33
  24 811  74 566 657 777 201 807 684  61  15 626 836 163 808 166 787 592  30  39 467  58 460 411 819  62 766  25 417

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.59679e+06us (= 7596.79ms, 7.59679s)
Wall-clock time (full program): 7.65764e+06us (= 7657.64ms, 7.65764s)
Satisfaction error: 0
Number of search iterations: 1333
Number of local moves: 860 (including on plateau: 356)
Number of local minimum: 52 (including on plateau: 39)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  25  12  40 752  20 282 818 224 799 727 349 770 768 787  57  94  37 737  32 676  53 755  23 206 802  74 789 726 775
  88   2  60  50  45 225 689 169 744 788 751 781 658 790 780 368 261 384  36 596 350   9 771 613 769 801  34   6 591
  92 767  17 303 115 180 773 170 791   1 724 753 774 657 696 106  99 797  48 745  14 589 717  84 522 679 374 454 168
  33 725  26  22 266 319 684 284 197 761 593 748 757 398 554  55  13 686 248 734 346 700 590  46 690  15 786 792 141
 306 794 222  75 421 271 715  24 812 793 653 731 776 388 779 255  39  65 184 562  16 625 647  30  63 762 370 746  85
 190 740 202  29 221 103 664 140 538 693 702 720 663 629 682 136 399 298 251 651 113 703 574  98 632 635 618   4 181
 785   3  47 716 145 610 310 529 669 586 547 637 620 736 544  31 157 178 295 687 208 244 719 678  42 713  28 640 105
 417 605 245 200  41 405 712  52 666 641 649 588 552 680 535 209 192  66 523 116 268 104 621 143 763 436 633 673 474
 604 559 241 203  19 357 600 497  70 698 558  11 491 576 489 674 531 237 198   8 378 517 564 550 543 587 671 567 211
 644 655 352 111 307  62 524 107 697  10 634 738 624 659 496  90 463 147 480 583 162 100 572 569 557 570 645 533 118
 407 565  91 685 330 161 487 575 479 599 325 595 577 608 416  49 580 153 429 519 193 639 402   5 513 503 628 545 151
 536 560 484 481 305 453 382 274 383 506  18 443 518 631 493 643 127 548 450 467 606 469 468  86 344 581  21 492 440
 509 528 534  81 156 196 457 502 541 585 514 602  38 262 622 377 578 540 532 494 309 431 537 499   7 573 430 555 220
 571  59 318 551 455 471 294 553 150 490 677 447 614 397 433 482 379 452 460 505 411 566 300 227 410 516 331 486 204
 476 451 445 393 409 442 662 179 458 441 462 425 432 347 456 340 386 356 413 243 408 385 464 473 328 616 435 478 406
 308 390 579 345 668 326 782 526 264 275 353 568 372 401 343 549 389 250 313 546 428 475 446 376 342 392 267 498 438
 434 396 257 381 483 772 329 391 293 439 320 259 324 365 504 355 766 704 272 611 525 317 361 366 364 315 335 387 584
 400 218 733 459 609 667 333 419 598 412 556 230 424 729 276 292 232 164 358 304 461 501 312 427 423 351 281 404 636
 354 449 339 371 648 805 247 826 269 212 821 249 101 186 465 395 444 500 840 327 508 280 341 362 375 256 213 403 623
 288 470 321 380 626 743 437 511 415 285 420 466 422  89 253 311 638 683 373 816 426 338 174 359 289  72 612 214 778
 732 334 835 216 601 699 242 254 813 277 238 414 123 252 270 833 296 485 286 360 299 348 146 804 363 297 229 322 841
 287 128 563 730 617 709  69 827 302 149 367 188 233 135 394 824 652 477 694 177 764 765 205 619 189 158 291 154 542
 258 114 756 273 670 800  44 191 301 829 290  96 228 219 235 520 718 739 750 148 711 231 808 260 784 194 236 131 675
 199 119 803 582 811  64 369 488 279 323 124 167  95 112 741 838 630 530 747 223 592 332 138 809 314 239 226 654 661
 822 656 828 839 185 512 172 759  71 130 159  93 142 418 217 539 823 109 681 207 615 240 760 705 472  43 278 173 561
 834 265 672 819 837 597  80 742 283 187  77 166 495  83 132 831 316 234 521 448 754 133 155 714 246 830 646  61  51
 728 660 798 642 810 507  73 758 163 175  68 120 263  27 108 527 665  87 832 139 749 708 201 510 215  97 777 195 607
 706 814 691 825 701 134 144 723  35 121  78 122  58 594  79 650 692 820 336 152 735 102  56 795 722 183 210 806 125
 176 171 710 695 688 337 117 515 129  76 182  82  67  54 160 836 707 783 627 165 807 603 137 796 126 721 815 110 817

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 9.47036e+06us (= 9470.36ms, 9.47036s)
Wall-clock time (full program): 9.53123e+06us (= 9531.23ms, 9.53123s)
Satisfaction error: 0
Number of search iterations: 1826
Number of local moves: 884 (including on plateau: 320)
Number of local minimum: 100 (including on plateau: 43)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 455  14 210  70 826 702 660 621 813 595 135 489 240 173 441 737 819 590  85 747  29 825 121  63 156  83 611  75 824
 806 828 791 403 836 142 809 112  51  92 839 820 597 147  91 587 164 649  41 712 223 838  40  22  32 102 541 818  76
 758 113  82 125 118 760 644 769 761 805 251 158 202 216 671 717 807 830 160 829 640 770  87 184 141  95 475  28  13
 642  35 822  49 832  58 736 753 448 129  61 664  64  68 724 468 739 773 126 607 119 538 834 169  96 833 552 166 104
 808 232 827 157  74 111 681 750  31 145 177 561 532  88 729 637 754 675 577 794  39 837  98 242 411 134 547 161 400
 331 151 193 253 793 756 716 257 243 200 284 738 580 180 512 789 797 687 438 175 201 279 109 767 229 359 741 255 196
 176 306 289 569 554 277 823 273 305 239 163 191 677 234 318 187 264 785 715 759 190 197 816 351 733 337 763 582 136
 256 300 369 189 802 263 686 821 584 481  78 835 703 237 801 181 779 775 635 225 138 133  52 122 205 354 373 727 105
 329 358 684 742 154 183 602 314 272 307 130 238 583 226 831 207 278 734 491 714 599 778 270 376 222 268 746 252 321
 674 247 204 598 788 267 562 248 302 840 227 219 718 246 814 394 171 787 335 419 178 301 330 332  89 274 762 650 233
 507 364 356 780 168 271 641 198 304 338 841 221 422 260 810 212 363 694 576 259 261 499 402 298 266 220 661 721 296
 313 377 382 781 353 324 566 428 355 390 457 726 275 224 349 294 431 589 362 336 258 297 388 360 435 322 777 732 328
 647 341 286 543 790 292 542 137 262 452 285 386 368 505 361 319 416 346 745 449 467 195 440 380 504 399 404 442 506
 464 374 415 490 478 333 557 519 325 391 327 469 521 463 485 421 295 509 432 299 453 370 458 393 417 309 480 315 447
 384 188 340 371 465 282 556 456 357 424 482 426 412 533 446 381 531 484 167 430 320 423 461 392 535 757 510 379 317
 281 527 425 479 408 470 342 439 466 249 433 372 500 418 414 472 352 144 585 347 378 643 581 316 110 396 565 493 604
 672 474 473 174 365 345 287 367 615 405 451 514 406 445 511 311 401  86 245 657 530 155 563 398 366 638 573 323 459
 495 192 534 486 450 501 236 592 605 550 454 148  44 591 420 546 397 343   5 334 429 539 513 497 492 574 186 540 516
 652 628 503  60 443 407 218 344 409 670 410 545  84 462   1 632 387 123  30 520 613 553 772 483 548 427  12 487 786
 162 471 494 213 502 571   9 348 663  69 568 140  97 567 575 603 525 182 619 150 526 709 559 529 682 620  38 326 692
 608 662 477 283 606 631  34 254   2 689 645  72 230 680  46 633 609 101 560 614  99 117 549 537 720 498 185 517 551
 588 688 659 235 179 488 280 106 544 616 460 288  94 586 564  36 629 508 710 667 214 395 697 496 536 610  50 244  42
 523 618  56 389 146 752 383 515 658 555 522 206  17 594 203 524 626   7 165 291 701 708  10 679 707 217 231 572 634
 132 648 624 444 685  45   4 518   8  27 622 265 625 627  43 651  23  18 437 528 699 596 782 768 570 623 339 241 617
 108 796 250 413 116 668  15 558 691 804 722 653 276 593  48 103 159 199 705  33 704  79 600 771   6 719 293 312 815
  62 764 612 666  65 654 211 579 646 100 578 711 601 735 208  37  71  25 676   3 798  21 385 740 776  26  67 723 669
  80 795  47 811  19 215 170 128  81 639 673  73 783 656 375 290  93 107 784  66 817  90 436 655 799 630 476 678 743
 143 698 751 636 139 748  11  77 725 308 269 731 766 749 303 713 120 149  59 131 812 172 803 124 730 690 194 434  24
 153  20  54 800  55 693 228 728 683 700 665 350 792 706 115 127 209 310 744 114 774 152  53 765 696 695  57  16 755

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00005e+07us (= 10000.5ms, 10.0005s)
Wall-clock time (full program): 1.00611e+07us (= 10061.1ms, 10.0611s)
Satisfaction error: 1
Number of search iterations: 2261
Number of local moves: 777 (including on plateau: 354)
Number of local minimum: 164 (including on plateau: 37)
Number of resets: 0
Number of restarts: 0

Problem in diagonal 1: 824 818 475 833 411 767 816 133 599 419 576 589 416 421 446 418 406 148 410 69 2 106 383 45 116 666 47 698 153 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  79 586 266 819  67 832 108 170 788 806 697 565 107  99 126 824  86 831  65 699 473 626 432 835 714  39 177 121 172
 231  11  59 826 111 821  63 633 756 757 255  69  68 828  89  88 614  42 146 657 509 470 830 836 570 275 615 841 139
 511 502 808  66 715 816 798  57 593 396 722  62 167  90 376 222 171 462 135 818 834 123 762 129 674  70 809 103 218
 198 624  92 810  49 489 178 156 518 196 839 117  75 718 759 205 118 324 106 822 601 603 721 181 794 632 169 497 618
 180 658  98 150 792 761 337 100 690 833 696 226 154 199 245  56 109 522 536 500 812 737 814 183 840  33 216  91 641
 559 779 811  74  78 423  87 157 223 752 800 278 291 162 519 258 155 456  96 595 801 708 455 770 803 498 159 215 247
 747 535 781 116 133 476 820 256 709 195 483 105  81 188 363 345 186 639 389 241 235 807 402 780 574 804 304 242 273
 695 725 110 225 125 668 209 823 461 785 643 213 142 789 320 237 251 790 236 257 765 571 285 272 243 184 393 163 629
 733 636 232 161 151 705 550 130 825 602 815 114 173 292 622 265 817 334 355 358 755 200 239 289 606 176 220 344 510
 238 773 340 260 300 685 366 827 428 782 433 204 227 240 837 270 313 659 158 202 427 689 619 233 212 322 214 185 766
 211 647 331 350 286 547 556 307 346 687 656 391 439 229 751 295 281 299 776 316 330 352 306 544 351 194 422 293 716
 308 453 409 298 280 327 341 261 333 731 425 407 303 284 764 838 287 768 829 325 421 335 418 309 371 250 412 179 543
 353 359 267 262 719 538 349 276 297 454 610 234 385 367 675 394 734 787 219 301 360 373 554 395 463 403 415 414 252
 400 499 370 442 296 417 388 318 390 793 438 317 368 328 660 539 392 486 383 436 271 372 339 288 429 413 264 769 404
 302 452 268 378 387 445 426 541 326 501 362 143 515 253 484 576 277 523 450 449 508 613 398 506 342 587 312 381 504
 369 514 495 437 379 382  97 492 650 380 319 457 505  76 420 682 441 560 321 479 460 440 605 493 310 546  38 487 375
 634 290 329 542 467 206 684 516 491 365 115 534 435 477 444 399 540  41 521 520 348 611 145 364 416 446 448 545 336
 144 147 464 590 356 406 401 517 524 494  51  93 592 447 197 526 361  35 654 628 434 465 607 475 566 558 549 551 377
 548 580 512 496 552 244 224 311 676 451 112 503 424 727  61 408 612 120  77 652 459  60 490 430 488 411 531 468 582
 128  34 741 466 704 230 609 623 410  29 315 568 678 533 567 323 670 174 572 217 208 210 530 419 480 617 553 557  44
 282 279 625 608 443 332 485 653  84 405  85 597 513 711 207 666  52 175 528 688  20 564 631 124  32 577 642 720 481
 472 182 471 588 742 274 482   6 578   5  72 805 649 651 189 723 701 555 478   4  48  19  55 744 160 532 710 616 698
 221 164 581 583 680 136 673 763 134  95  83 706 561 726 132 469 525  12 621 669 149  36 119 707 665 594 600 692 113
 630 228 507 575 694 153 713 655  37  25 474 645 743 529 137  64 596 431 599   1 667 148 700  22  26 620 648 679 263
 259 527 732 585 357 138 562 662 127 347 191 758 729  15 458 646 338 384 677 305 563  80 661  43  13 748 736  31 537
 591 314 635   9 663 686  28 190 101  94 354 802 745 735 397 740 584  53 681 131 187 254  23 672 598 746 283 644 269
 640 569  50 738 778   8 754 637  46  82 165 791 717 671  47 760 702 343 604 166 193 248  21 728 294 141 589 703  24
 749  40  58 739 753  54 799 386  30 140 249 813 730 772 579 374 573 627 201 771 203 712   3 192  71 775   7  14 795
 797 102 767  16 152  10 122 786 638  27 750 691 693  73 784  17 724 777 796   2 168 783  45 246 104  18 774 664 683

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00018e+07us (= 10001.8ms, 10.0018s)
Wall-clock time (full program): 1.00626e+07us (= 10062.6ms, 10.0626s)
Satisfaction error: 2
Number of search iterations: 2421
Number of local moves: 946 (including on plateau: 477)
Number of local minimum: 200 (including on plateau: 52)
Number of resets: 0
Number of restarts: 0

Problem in column 12: 565 69 62 117 226 278 105 213 114 204 391 407 234 317 143 457 534 93 503 568 597 805 706 645 758 802 791 813 691 => the sum is 12208 rather than 12209
Problem in column 17: 86 614 171 118 109 155 186 251 817 313 281 287 734 392 277 441 540 361 612 670 52 701 525 596 338 584 702 573 724 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 762 817 340 642  95 831 827 230  66 200  76 818  36 254 646 166 726 506  78 536 155 144  82 809  48  31 797 757 734
 744 260 841 167 791 146 821 675 836 109  30 737 119 583 782  73 838 494 115 242  79 553 120 126 391 118 773 123 523
 720 770 799 202 460 132 685 777 673 783 110 833 215 722 695  69 829  94 116  25  43  65 815  67 107  71 508 147 677
 732 716 252 780 549  97 796 626 157 158 244 136 188 314 811 208 786 238 171 826 240 161 832  92 814 840 153 141 151
 415 711  26 408 712 663 750 819  51 218 149 180 282 813 698  70 749 596 748 308 114 224 163 800 566  96 174 105 601
 824 820  91 490 795 731 793 774 190 472 148 211 431 690 807  77 707 236 143 237 152  80 204 839 134 104  88 106 835
 678 258 522 785 823 613 396 758 273 683  89 654 130 288 193 249 738 741 196 704 363 129 661 138 206 298 267 192 184
 309 343 808 187 565 545 511 825 779 307 175 217 205 657 435 327 491 636 274 111 182 497 764 264 837 102 150 100 606
 571 164 284 232 577  93 599 637 798 286 368 457 173 727 766 212 623 822 597 255 562 401 304 595 127 181 373 177 248
 638 292 320 390 768 633 746 686 671 752 142 400 541 358 221 169 507 751 296 253 290 265 337 342 306 462 293 112 268
 303 235 294 199 691 499 505 479 330 321 784 271 433 718 349 347 706 828 754 185 128 229 289 269 189 658 410 302 504
 440 456 341 178 266 765 481 446 452 357 295 656 537 297 356 228 473 338 328 203 336 394 801 735 502 529 404 222 393
 353 201 527 355 413 227 475 561 389 515 834 411 350 374 220 377 463 582 498 474 432 261 348 398 830 323 270 279 469
 262 443 458 332 370 312 480 418 263 528 316 352 397 448 214 769 429 454 359 351 444 392 383 570 598 362 488 761 256
 278 517 526 416 376 403 581 534 318 436 384 484 378 285 382 299 405 489 521 301 380 428 538 366 361 399 447 468 509
 558 395 198 471 487 493 495 239 233 453 455 367 223 422 387 386 470 518 365 620 451 610 442 414 329 160 540 604 424
 437 544 319 317 354 113 245 369 478 512 438 587 548 624 525 496 364  44 407 409 464 421 406 510 426 492 483 532 345
 530 379 486 628 519 450 210 300 627 516 459 477 124 331 213 439  28 272 467 315 482 427 524 311 339 461 546 717 632
 243 550  39 584  56 194 325 216 674 708 514 574 535  29 622 589 520  57 133 680 513 645 709 360 572 600 385 580   3
 108 689 555 664 344 191 313 277 594  50 560 564 291 122 542 618 259 225 614  87 568 612 485 417 634 775 419 501 131
 246 576 465  37 503 434 226 176  52 644 466 334 701 611 629 547 251 372 653 579  46 172 500 402 648 552 703 651  33
 280  27 616  58 557 556 101 425 669 445 697 725 682 281 207 592 197 670 575 662 559   2 420  86 324 554 590 643   9
  72 607 569 605  81 563   1  32 639 585 684  41 603  35 165 652 168 145 641 699 753 743   5 635  63 615 543 625 640
 241 551  20 139 121  17 154 231 209 588 679 739 631 195 423 476  54 573 371   7 812 736 449 305 672 723 802 586 705
 567  16 694 714  15 335  84 326  42 593 730 688 441  61  21 755   6 159 617 608 781 621 533  62  98 692 810 531 609
  64  47 759   4 275 655  12 140 763 310 760 186 719 602 578 728 162 322 287 816 696 767  83 745  22 430  18 591 668
  99  49  14 756 137 681 333  74 676 659 276  38 805 234  40 772  19 170 412 792 803 804  68 789 539 771   8 649 742
  75 721 381 776 135 747  45  34  24  10 700  59 713 346 103 729  85 247 667 740 666 724 687 710 733 787 117 388  60
 660  55 665 693 375  90 219 125 283  11 647  13 778 788 179 790 156 630 806 183 715 702 257  53 794  23 650 619 250

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0001e+07us (= 10001ms, 10.001s)
Wall-clock time (full program): 1.0062e+07us (= 10062ms, 10.062s)
Satisfaction error: 2
Number of search iterations: 2394
Number of local moves: 988 (including on plateau: 336)
Number of local minimum: 168 (including on plateau: 43)
Number of resets: 1
Number of restarts: 0

Problem in column 5: 95 791 460 549 712 795 823 565 577 768 691 266 413 370 376 487 354 519 56 344 503 557 81 121 15 275 137 135 375 => the sum is 12210 rather than 12209
Problem in column 20: 536 242 25 826 308 237 704 111 255 253 185 203 474 351 301 620 409 315 680 87 579 662 699 7 608 816 792 740 183 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 108 794  62 643 833 140 612 100  66 815 785 166 683  46 806 763 655 708 395 137 743 705 122  73 430  51  98  78 592
  97 421 111 841 150 190 789 352 124 704 837 120 189  75 597 824 658 236  81 509 123 727  93 771 800  77 389 793 531
  89 596 832 229 135 818 648 168 114 179 605 428 626 112 823 835 184 830 297 556 220 757  92 401 128 130 730  48 599
 104 656  67 681 753 222 247 522  80 801 839  91 637  74 470 836 748 840  41 278  49 585 268 497 219  85 197 786 536
 146 744  69 579 141 214 724 231 318 548 838  70 813 224 792 692 563 162 301 139 295 817 760 110 834 218 127 159 581
 215 519 217 242 252 783 825 293 207 733 752 106 805 369 201 192 211 600 102 331 103 765 314 822 198 460 647 216 729
 313 736 119 209 151  90 618 355 203 243 828 149 161 283 193 766 649 788 697 339 205 562 821 749 155 180 778 204 665
 227 810 233 829 296 262 177 588 272 812 288 323 700 191 797 238 720 567 285 304 255 456 212 284 754 257 270 125 677
 362 634 234 174  44 266 664 226 781 240 826  53 710 327 384 145 831 326 577 176 740 680 351 328 344  94 737 277 678
 248 750 225 506 273 299 624 455 208 138 423 353 438 237 407 325 420 256 802 827 282 452 321 311 373 199 555 738 764
 294 617 129 309 244 280 798 338 223 472 713 287 486 154 254 258 302 281 819 399 322 659 202 809 476 458 594 306 726
 820 500 249 525 142 560 361 494 795 232 269 635 213 463 411 187 396 442 305 363 342 540 264 693 374 390 573 200 471
 513 520 319 316 491 464 360 508 453 386 364 347 292 495 263 289 487 391 644 595 410 695 378 524 182 380 312 315 516
 454 598 350 505 432 459 239 308 343 404 473 484 186 554 165 706 290 478 345 426 481 502 462 317 451 235 613 412 537
 368 392 521 379 335 503 450 349 418 483 320 427 365 551 358 461 469 501 440 359 529 329 393 336 332 535 565 366 375
  99 511 265 354 105 541 376 388 433 398 337 636 417 357 330 474 564 527 333 638 512 475 405 467 449 477 434 499 408
 650 416  38 485 558 431 496  27   9 688 447 370 394 480 578 443 493 422 445 259 381  17 652 534 436 439 645 448 528
 552 260 566  82 425 586 402 489 654 382 444  19 699 490 446 580 518 152 183 755 676 298 346  29 610 532 466 415 153
 437  28 574  57 406 542 570 385 539 593  16 587 414 616 602 291 504 543  32 622 732  95 601 107 507 715  47 424 623
 492 372 633 419 553 400 195  45 591 164 620 561 575 641 631 457  40 719 261   8 441 397 514 181 663 632 143 640 221
 533 341 629 526 550 606 557 271 383 538 117 701  76 782 515 510  33 377 523 482 488 157 286 545  60 668 348 576  31
 725 109 723 662 711 274   2  72 549 530  23 413 669 589 170 611  59 686 671 101 698 429 670 250  86 741 267 694  25
 468 167 667 409 728 684  13 739 675 759 126 435  56 498 609 246 604 572  39 621 703  54   1 642 661 628 134  26 245
 568 160 673  87 639  21 324 773 590 666  61 761  43 808 228  96 583  18 230 682 646 276 547 387 113 770 627 716 116
 603  37 569 546  22 479 136 584 718  50  24 685  58 777  84 571 614 607 799 653 707 185 712  63 118 803 115 615 275
 721 132 807   3 790 608 163 787 768  64 158 758 196 657  68  14  52  34 544 173 709 171 742 148 745 734 672 660 131
 796  65 747 188 690  42 517 816 717 175  30 746 691 582  79 251  12  55 619 791  36 121 696 300 679  11 780 674 303
 804  83 814 702 735 714 144 784 206   7 279 687 307 689 172  15 356  20 630  35 371 147 774 756 779 559   6 465 169
 403 241 767 722 625 731 178 762 772   5 367 811 310  88 776 133 194  71 769 651  10 156 210 775 253 751 340 334   4

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00005e+07us (= 10000.5ms, 10.0005s)
Wall-clock time (full program): 1.00611e+07us (= 10061.1ms, 10.0611s)
Satisfaction error: 1
Number of search iterations: 1968
Number of local moves: 818 (including on plateau: 343)
Number of local minimum: 172 (including on plateau: 39)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 0: 108 421 832 681 141 783 618 588 781 138 713 635 292 554 358 474 493 152 32 8 488 429 1 387 118 734 780 465 4 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  16 723 151  10 138 817 792  20  65 607 116 755 819 754 306  12 724 786 805  57 117 780 814  21 133 183 811 161 716
  90 798 172 284 361 141 770  18 219 784 227 756 699 783 232  84 726 785 809 789 338  36 731 218   9 115 797 195 243
 744 781   3   4  73 752 664 225 163 668  82 768  13 759 209  47 602 772 719 707 156 715 779  35   5 234 739 346 445
 736 118  64  69 725 762 431 300  95 560 164 697 641 714  15  24 801 695 264 702 327 748 712  51  11 775 804 126  78
 257 689   1 678   8 771 629 238 250 627 190 741   6 667 679 186 791 807 706 682  99 632 110  23 687  28 648 224 155
  92 612  93 643  33 609 749  89  29 669 256 369 757 171 152 656 698 635 644 325 590 676 733 184 670 268 711  94   2
 750 742 111 418  44 613  81 206  43 305 158 542 674 692 143 675 599 710 639 660 554 556  59 357 636 252 130 167 693
  50 758 159 694  61  19 331  14 196 548 519 608 614 619 659 605 662 506 596 685 569  25 647 220 600 106 280 255 604
 530 640 127 597 638 525 258   7 235 292 358 546 524 591 132 575 564 587 572 646  71 621 579  67 514 174 153 537 549
 460 498 322 708 466 553 589 658 482  46 555 543 617 557 176 580 458 626  68  49 391  66 484 396 571  98 293 423 476
 471 663 582 634 536 540  27  62 223 281  17 563 531 496 485 567 618 497 177 565  31 588 620 502 562  79 309 520 463
 652 465 574 390 475 509 507 522 278 404 528  58 529 512  48 500 451  37 178 568 616 630 611 513 464 207 157 416 410
 436 505 473 545 552 521 461 515 468 211 518 534 208 349 429 419  54 335  56 452 450 539 422 470 337 467 421 503 559
 457 454 426 523 526 427 406 474 395 359 414 499 501 491 481 405 532 356 175 533 415 538 377  39 447 448 137 488 486
 477 344 493 598 469 479 384 389 364 787 363 342 387 236 438 399 343 380 375 437 558 483 379 402 374 311 472 302 444
 487 365 441 339 456 412 383 407 433 408 381 382 413 443 585 434 371 254 420 334 478 824 351 378 400 442 348 401 439
 373 424 489 392 355 372 286 411 594 732 376 394 319 403 324 393 806 304 366 299 425 347 535 285 462 362 583 430 368
 326 341 340 578 308 350 737 581 551 480 354 828 336 386 367 277 398 738 417 273 312 323 332 330 490 295 492 260 409
 315 303 601 202 294 282 628 317 665 237 651 200 229 352 767 259 228 333 709 283 265 267 301 576 510 592 494 653 696
 271 289 370 320 353 388 593 215 428 743 246 310 272 191 774 212 144 245 385 740 764 222 105 690 313 728 654 449 795
 291 230 625 314 681 146 307 606 818 544 205 226 296 192 288 274 166 328 440 247 661 213 287 701 170 751 655 812 735
 262 233 649 275 765 633 566 713 671 397 263 241 290 297 717 148 197 216 316 318 253 836 298 329 276 631 541 680 198
 261 210 677 187 823 168 279 821 837 321 747 194 773 104 204 188 121 270 360 217 459 180 799 832 203 839 645 242 248
 550 119 746 179 266 840 239 729 727 160 753 251 103 745 794 691 586 244 511 221 833 162 112 547  76 517 199 136 173
 831 154 760 113 147  75 149 802 815 657 835  88 109 240 181 527 249 139 495 504 777 142  72 766 761 686 432 603 100
 684 622 584 827 703 140 672 705 508 165 673  86 129 124 816 782 125  87 269 683 231 169 120 822 135 453 128 666 101
 810  34 763  70 615 182 150 720 623 102 730  41 577 145 718 722  26  22  91  85 800 107 134 808 734 769 114 796 721
 345  42 776 793 688 123  97 642 841  52 826 570  55  74 573 778 131 435 446 108 214 189  96 834 830 838  30 700  83
 185  53 637 825 650  60  45 803 193  63 704  77 788 122 516 790  38  80 201  40 455 595 610 813 829 561  32 624 820

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.00618e+07us (= 10061.8ms, 10.0618s)
Satisfaction error: 2
Number of search iterations: 2434
Number of local moves: 863 (including on plateau: 279)
Number of local minimum: 187 (including on plateau: 29)
Number of resets: 1
Number of restarts: 0

Problem in column 7: 792 770 664 431 629 749 81 331 258 589 27 507 461 406 384 383 286 737 628 593 307 566 279 239 149 672 150 97 45 => the sum is 12210 rather than 12209
Problem in column 15: 306 232 209 15 679 152 143 659 132 176 485 48 429 481 438 585 324 367 767 774 288 717 204 794 181 816 718 573 516 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 493 840 167  83 188 205 818 815 204 694  30 112 123 698 820 140 122  39 183 602 560  87 656 472  42 816 599 776 825
  91 696 130 800 772  69 727 678 652 803 137 821 127 206 185 647 777  98  60 494 754 730 629 615  59 189  57 120  86
 102 585 834  71 625 117 789 760 203 731  63  62  58 792  70 793 126 244 481 838 231  66 833 775 132 162 377 584 705
 575 841 181 829 302 144 196 544 653 685 133 156  85 240 567  95 673  61 155 236 179 159 687 606 695 813 294 712 713
 817 741 131 421 836 238 831 670 601 735 165  84  80 211 681 719 830 146 111 184 169  67 794 664  79 227 201 199 577
 765 822 198 215  92 489 301 797 603 268 142 250 232 160 790 791 121 174 436 243 213 409 642 837 212 134 407 827 639
 742 697 801  90 210 780 839 634 208 163 135 303 623 217 714 197 147  50 195  96 785 353 835 819 106 272 224 187 787
 767 723 214 455 241 256 756 810 249 141 773 298 574 164 235 218 266 359 261 285 726 194 632 259 168 251 716 578 640
 706 325 172 274 115 315 663 492 832 150 180 242 693 254 752 299 260 290 389 119 778 245 828 795 138 157 257 750 739
 446 729 190 269 345 209 237 808 733 649 166 357 118 322 643 425 291 139 308 400 680 486 233 282 380 333 419 805 807
 432 651 363 314 265 309 219 395 812 289 824 200 320 202 344 145 414 207 798 422 566 248 426 638 148 507 749 255 747
 430 441 439 267 258 438 371 373 362 276 292 491 456 319 746 482 428 420 370 769 351 376 823 364 247 176 631 435 378
 352 296 387 221 379 424 310 418 457 764 440 480 539 366 536 454 467 334 372 402 317 533 547 393 408 330 369 510 404
 499 281 368 216 280 444 358 624 234 295 826 339 385 534 386 519 423 671 316 283 511 394 573 410 453 220 427 479 461
 161 405 392 396 447 553 350 583 463 512 579 490 336 429 548 535 346 565 598 375 496 271 143 293 335 365 527 332 384
 549 398 413 406 445 590 415 312 562 434 521 337 503 354 437 318 477 658 411 618 397  32 388 349 475 328 323 229 530
 381 151 586 551  55 558 569 342 182 361 416 476 487 470 589 433  10 286 468 460 177 537 246 611 690 471 657 506 483
 367 572 473 513 466 321 568 307 331 600 383 582 324 355  19 451 627  23 617 443 526 581 390 609 644 401  28 495 192
 226 101 502 500 556 541 619 125 610 564 552 633 343 488  82 660 509 676  12 403 538  93 412 128 458 348 545 516 469
 193 450 465 484 498 561 347  88 636 622 442 682  13 666  94 605 462 485 508  37 459 546 313 191 692 701 329 532 108
 103  64 655 782 710  29 528 149  44 616 505 736 604 417  22 540 523 691 650 464   1 531 340 580 648 570 278 124 305
 517 110 672 555 474 522 515 356  21 613 448 675 784 557 225 518 593 588 732 587  51   4 114 109 717 525  34 520  73
 304 514 478 614 635 630  38  77  72 382 571 597 595  47 279 449 550 686 768 501 360 757 300  99 662 554 391  24 275
   3 105 654 659 709  49 152 253 699 129 452 753 679  68 252 504 543 737 596 626 608 806 228  43 646 758 341 113  45
 239 262 689   6   7 607 154 338 620 100 683 591 223 700  18 708 669 762 641 621 170 628  48 136 637 703 594 497 158
 264  11 761  16 720 770 104  89 529 107 326  31 667 725 809  35  81 674 645 688 230 763  20 263 748 524 811 744  54
 677  75  65 755 661 592  41 270 311 374 563 722 665 771 327 399 704 684 153 715 542 814  46  33  25 576  40 178 431
 287 306 802 745 743 668  97  26  53 116 728 707 774 766 288  74 718 724 171  14 222 759  78 559 786  15 788   9 186
 721  17  27 702 175 781 297  76 273  36 734   2 799 711 751  56  52 738 804 284 612 740   5 277 779 783 796 173   8

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00016e+07us (= 10001.6ms, 10.0016s)
Wall-clock time (full program): 1.00625e+07us (= 10062.5ms, 10.0625s)
Satisfaction error: 2
Number of search iterations: 2063
Number of local moves: 924 (including on plateau: 299)
Number of local minimum: 152 (including on plateau: 40)
Number of resets: 1
Number of restarts: 0

Problem in row 18: 367 572 473 513 466 321 568 307 331 600 383 582 324 355 19 451 627 23 617 443 526 581 390 609 644 401 28 495 192 => the sum is 12208 rather than 12209
Problem in row 24: 3 105 654 659 709 49 152 253 699 129 452 753 679 68 252 504 543 737 596 626 608 806 228 43 646 758 341 113 45 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 814 824 713 141 757 175 185 743 721 112 786 733 679 583 105 102  36 401 764  34 178 131 596 382  47 163 236 232 836
  65 126 808 834 745 122 592 734 685 789 750 709 738 156 835 134  31  27 572 172  48  79 819 182 825  30  43 472  87
 269 132 838 108 777 288  80 815 758  64 227 652 762 828  77 213 177 575 632 205 359 781 486 769  33 109 506 597  92
 100 793 158 802 696 716  96 798 728 822 803 727 724 795 265  71 147  85 203  83  29  82 711 243 184 515 500 183 150
 293  67 699 115 759 139  97 744 800 608 690 751 797 768 272 783 263 244 450 104  84  60 481 662 526 153 314 180 306
 101 138 792 196 582 837  62 839 710 119 701 826 282 642 143 166 170 230 732 625  44 249 809 408 140 648 613 251 154
 358 410 706 195 533 202 823 694 599 168 821 120 812 161 210 218 118 674 555 127  75 137 830 464 305 707 773 179 235
 289 124 820 248 740 285 224 668 540 349 804 152 322 816 188 261 290 369 714 207 623 806 247 627 176 181 634 173 332
 279 352 591 256 491 335 818 320 556  90 229 324 216 665 250 377 208 774 780 167 831 206 698 633 283 303 639 345 194
 262 414 366 338 428 128 287 209 580 364 273 558 165 801 312 492 258 336 755 833 340 238 657 704 317 680 677 192 245
 297 318 423 478 636 129 316 311 480 260 637 291 294 604 375 237 225 554 557 729 254 394 418 737 255 459 771 343 427
 187 148 276 430 502 257 169 321 810 174 398 367 832 411 461 417  91 687 811 403 388 302 197 688 420 726 718 350 268
 354 301 308 348 595 630 331 509 347 333 242 458 361 589 360 510 788 390 584 304 233 319 477 587 379 389 400 374 409
 191 286 280 299 474 511 368 370 346 351 416 590 422 529 432 467 413 465 484 337 455 520 412 693 404 457 534 341 362
 353 437 482 378 431 395 330 239 380 453 384 372 463 434 505 396 565 421 468 508 528 504 469 339 215 307 593 479 381
 541 266 393 435 334 397 405 438 440 371 442 226 383 454 407 402 519 521 323 620 449 576 487 513 536 355 406 125 445
 616 392 419 494 264 436 241 518 443 441 516 373 186 433 547 615 309 560 117 498 466 444 499 342 426 635  18 514 447
 535 564 223 415 386 493 542 503 471 641 488 204 629 439 538 452 568  99 284 470 619 160 220 171 601 522  88 357 527
 483  68 146 607 363 600 655 577 326 476 110 562 543 387 766 456 485 553  10 473 462 517  23 391 588 136 365 530 551
 640 501 496 602 212 691 656  39 448  15 424 523 532 292 544 573 689 113  63  70 606 628 567 157 660  24 310 645 489
 574 646  52 545 228 650 507 581 103 429 653 672 563 399 570 451 586  35  38 281  40 475 626 123 566 598 190 531 497
 548 686 661 622 234 614 561 550 221 667 164 585 151 193 579 776 618 344 231 571 609  11  49 133 552 446 198  57 578
 638 663 271 659 274 549  13 201 296 702 246 621 460 219 765  73 807 605  66 539 746 617 214 252  59 647 240 695  72
 684 669   1 658  51  17 708   8 130 722 300  69 611 107 546 697 666 189 298 631 670 748 376  20 791  76 200 767 799
 692 649  86 525 356 524 603 270  14 490 277   5 106   2 643 723 610 754 275 712 772 385 142 327   9 671  95 817 675
 775 664 111   6 149 425 705   7  58 782  81  41  32  98 651 703 805 162 116 736 725 719  22 329 717 700 313 787 790
 730 760  78 512  25 295 761  93  74 612 222 683  54 155  50 644 199 569 253 841 747 770 315  61 676 267 594 840 328
  46  55 753 752  28 654 796  16  89  42 121   3  53 114 794 779 829 742 749 144  45 673 217 735 778 681 682  26 813
 495 756 259 211 159 715 278  94  56 763   4  12  37 135  19  21 739 731 325 785 784 678 145 537 741 624 559 827 720

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00018e+07us (= 10001.8ms, 10.0018s)
Wall-clock time (full program): 1.00629e+07us (= 10062.9ms, 10.0629s)
Satisfaction error: 3
Number of search iterations: 1924
Number of local moves: 748 (including on plateau: 200)
Number of local minimum: 156 (including on plateau: 26)
Number of resets: 1
Number of restarts: 0

Problem in row 9: 279 352 591 256 491 335 818 320 556 90 229 324 216 665 250 377 208 774 780 167 831 206 698 633 283 303 639 345 194 => the sum is 12210 rather than 12209
Problem in row 27: 730 760 78 512 25 295 761 93 74 612 222 683 54 155 50 644 199 569 253 841 747 770 315 61 676 267 594 840 328 => the sum is 12208 rather than 12209
Problem in diagonal 0: 814 126 838 802 759 837 823 668 556 364 637 367 361 529 505 402 309 99 10 70 40 11 214 20 9 700 594 26 720 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 811  14 222 756 284 394 803 794 808 813  34 499 198  53 733 762 324   6 112 798  26 789  11 183 368 804  64 249 497
 757  47 125 807 728 775 392 179 744 319  23   8 160  57 786 801 108 364  68 763 159 642 126 769 168 805 743   1 785
  21 180 732 191 790 759 765 779 745 697 122 591 151 173 691 768 177 201 482 760 178 483 107 718 121 144  67  40 576
 514 103 212  66 750 771 672 655 682 692  24 597 161 669 677 792 337  84 102 752 175  79  63 528 558   2 781   3 708
 710  10 109 643  36  20 676 652 748 747 308 738 227 593 736 767 157  55 124 741  18 251 327 694 145 549 715  95 618
 717 646 228  86 720  31 660 770 723 654 118 766 674 600 681 689  73 169 661 678  51  28  15   9  37 300 611 167 647
 634 361  76 657 560 719  72 727 730 598  60 774 275 129 699 612 296  62  87 633 304 377 192 724 114 242 688 220 587
 533 619 185 379 559 479 623  50 662 580 224 793 101 589 436 569  74 336 310 555 565  99 313 599 184 493 557 111 632
 527 311  13 289 721 626 755 523 666 603 540 625  17   7 564 709 186  71 641 635 659 136 266 548 235 207 561  32 536
 503 280 570 671 629 568 445 526 510 393 294 547 113 606 639 562 307 552 574  96 194 232 277 590  41 620   4 258 608
 607 200 519 433 450 502 585 520 531 541 578 586 513 489 631 538  44 383 116 572 518   5 340 522 501 374 419 170  22
  46 269 577 455 551 532 406 628 504 485 211 498 464 530 546 407 490 575 241  43 423 444 306 571 440 119 684 115 649
 475 467 452 449 174 422 486 447 507 553 297 508 512 573 415 476 349 428 432 206 396 487  70 588 525 309 471 226 509
 481 385 363 453 443 326  19 484 338 529 459 365 438 496 461 416 451 491 495 353 473 515 454 465 470 325 427 477 357
 566 542 563 439 442 429 421 506  69 463 430 424 359 446 321 273 524 400 550 320 478 413 283 605 500 342 373 370 358
 346 343 316 384 378 380 474 356 386 420 437 434 457 435 411 312 825 329 537 276 390 391 332 367 431 369 492 696 505
 408 425 456 372 835 318 387 814 299 401 351 472 441 376 418 381 215 347 354 156 352 402 640 417 388 410 360 713 301
 345 700 268 664 458 399 334 395 414 263 302 830 362 404 426 221 622 592 355 405 199 650 469 213 247 488 333 584 267
 328 663 254 375 348 382 171 240 331 292 809 322 545 287 335 262 594 409 815 462 837 366 583 255 279 648 229 517 271
 305 595 288 250 230 317 818 264 703 839 290 293 812 260 278 257 776 341 147 248 282 295 637 397 281 729 244 630 403
 195 616 544 189 286 164 398 236 225 190 726 231 371 323 234 274 777 516 265 466 621 742 734 135 480 543 259 653 816
 219 610 828 210 128 218 143 841 137 344 686 303 764 204 182 208 604 739 298 165 202 810 614 176 787 707 166 761 155
 154 203 806 702 270 223 350 120 330 233 624 149 638 237 314 243 668 802 679 272 246 680 567 834 795 253 127 556 134
 239 252 602 285 687 799 209 130 104 117 737 152 712 162 172 217 617 740 685 146 831 701 722  88 609 535 193 656 110
 181 339 214 754 389 245  77  93  91 187 753 148 778 749 158 256 796 673 782 196 705 711 735 106 822 448 123 651  49
 216 539 613 819 141 138 791 238  80 131 746 188 644 494  52  42 521 627 150 153 698  97 693 197 690  16 824 833 838
 142 827 636 132  85  89  90  61  58  27 601 261 714 683  83 315 704 706 658  25 695 582 675 670 554 460 836 784  56
 817 840 665 205  98 468  82 100  30  65 780  48 579 797  38  45 581 615 731 534 751 511 832 163 667 139 133 820  75
 412 823 773  94  39 716 105  81  54  33 645  59  29 788  92  35  12 596 758 800 783 291 826  78 772 829 725 821 140

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0001e+07us (= 10001ms, 10.001s)
Wall-clock time (full program): 1.00621e+07us (= 10062.1ms, 10.0621s)
Satisfaction error: 2
Number of search iterations: 1883
Number of local moves: 835 (including on plateau: 350)
Number of local minimum: 141 (including on plateau: 35)
Number of resets: 0
Number of restarts: 0

Problem in diagonal 0: 811 47 732 66 36 31 72 50 666 393 578 498 512 496 321 312 215 592 815 248 621 810 567 88 822 16 836 820 140 => the sum is 12211 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 330 136  52 790 164  89 769 808 123  39 765  77  76 135 798 721 776  95 809 784 751 752 153 137  49  45 812 722 452
 167  14  92 126 738  72 792 782 669 240 647 716 777 421 761  15 415 110 184 717 215 756 281  91 762  94 748  11 796
 233  90 275 708 747 159 276 683 697 691 674 118 681 741 758 260 278  20 745 744 232 287  29 257 266 713   9 178 660
   8 768  82  16 185 313 743 739 709 220   6 733 783 731 684 203 371  35 759  32 288 677  22 189 772   3 662 723 753
 219 343  44 687 346 245 699 187 715 665 712 221 268 740 726 673 146 650 656 672 317 528  17  84 623 107  28 247 644
 152 495  10 780  13 109 405 742 655 632  25 749 690 622 725 183 143  71 754 560 112 320 148 181 688 652 629 269 695
   4 661 101 607 649 214  50 795  66 353 617 680 701 675 642 664 151 707 685 312  93 124  18 142 635 162 541 586 574
 667 603  51 736 614 176 598 207 648 640 608 689 425 636 671 358  81 676 643 511  57   2 272  74 682 236  42  24 582
 551 615 173 593 625 522 663 102  63  68 606 120  26 595 518 545 641 550 589 556   7 241 616  97 521 637 580 168 621
 587 527 539 581 653 324 474  69  38 633 564  60 602 507 486 387 139 529 597   5 517 336 235 202 583 412 601 449 573
 620 485 546 534 445 547 535  23 590 552  99  86 540 584 592 638 125 549 201 548  33 225 567 226 572 559 533 111 544
 450 386 398 440 536 565 530  54 585 506 500 104 515 508 505 359 394 510 133 555 461 106 409 308 563 407 537 501 384
 380 494 465 646 531 475 469 163  12 490 484 410 195 397 543 466 234 471 497 476 532 477 524 299 504 113 503 470 489
 558 482 444 451 458 339 431 373  56 423 430 600 429 481 491 419 408 370 399 342 403 443 488 374 480 442 453 338 404
 264 439 455 448 345 446 360 411 365 526 472 467 307 413 523 463 456 454 434 433 357 375 361 498 420 402 356 447 512
 261 349 464 322 385 262 376 468 557 460 355 372 416 382 424 390 802 350 388 344 391 801 438 487 368 351 426 379 441
 807 428 392 284 323 427 319 258 819 478 393 253 435 316 280 719 289 378 826 389 775 367 315 418 314 340 310 318 239
  31 729 298 282 628 406 263 352 331 401 328 462 496 354 329 274 770 591 364 270 295 724 630 578 396 417 206 604 400
 296 381 422 337 311 830 493 618 145 216 369 243 222 436 335 763 771 366 804 332 609 666 383 509 108 333 265 341 305
 705 325 822 205 246 300 395 290 180 778 624 306 283 285 304 703 698 292 186 711 237 271 256 634 334 569 303 658 309
   1 347 575 279 302 576 182 218 779 800 250 735 348 301 293 115 631 259 172 363 813 613 327 794 793 437 210 483 213
 217 227 611 326 192 767 273 831 223 230 166 211 787 199 154 773 727 209 414 286 704 806 554 568 212 321 255 737 229
 155 267 734  98 238 599 820 570 513 188 204 514 197 291 244 679 538 190 128 728 710 519 692 730 160 297 837 231 138
 718 194 781 127 825 362  88 208 525 720 165 249 824 193 131 134 610 577 191 147 626 566 764 588 277 834  53 645  87
 823 158 702 144 841 196 177 479 248 198 785 492 149 129  80 132 242 803  48 254 654 579 840 678 816 732 156 596  78
 670 516 668 829  43 594  75 612 627 140 116 696 114 150  59 252 571 651 432  36 157 200 553 815  79 750 838 805 161
 810  83 473 746  85 817 814 562 520 760 174 561 542 169  30 105 122 117  37 170 619 179 693 788  55 836 459 818  65
 714 839 766  40 700 821  73 502 294  62 377 786 130 799  27  61 659 797  64 791 639  46 789 706 119 175 171 228  34
 811 828 774  47  41 657  67 103 457 100 694 499 251  19  96 755  21 832  70 141 605 224 835 757  58 833 686 121 827

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00023e+07us (= 10002.3ms, 10.0023s)
Wall-clock time (full program): 1.00678e+07us (= 10067.8ms, 10.0678s)
Satisfaction error: 2
Number of search iterations: 2489
Number of local moves: 951 (including on plateau: 419)
Number of local minimum: 195 (including on plateau: 45)
Number of resets: 0
Number of restarts: 0

Problem in column 22: 752 756 287 677 528 320 124 2 241 336 225 106 477 443 375 801 367 724 666 271 613 806 519 566 579 200 179 46 224 => the sum is 12210 rather than 12209
Problem in column 28: 722 11 178 723 247 269 586 24 168 449 111 501 470 338 447 379 318 604 341 658 483 737 231 645 596 805 818 228 121 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 465 833 811 146 708 130  19 125 538  53 562 815 540 802  81  52  22 727  93  56  94  24 697 734 728  26 819 725 784
 654  66 477 574 686 133 433  27 266 720 796 782 254 764 126  41  67 817  84  42 242  78 667 821 827  40  71 822 832
 841 129 434 532 189 100  49 128 721  65 807 724 162 798  21  63  60 700 170 564 116 799 707 740 736 148 771 825 110
 139  73 699 839 768  86 216 345 730  75 588 820 329 142  31 122  44 804 194 611 150 111 778 761 757 835 267 698 197
 107 812 676 715 824 215 179 270 813 105 660 236 619 147 112 153 226 828  96 806 831  64 679 823 412 188 103 163 347
 752 161 623 751 762 123  88 195 624 620 840 169 673 754 144 287 241 229 156 166 145 154 773 735 800  92 209 766 177
 255 222 808 750 837 571 805  76 838 273 639 561 695 187 302 118 182 143 503 178 332 234 829 585 439 181 317 252  97
 729 250 792 744 599 251 120 690 454 208 794 366 447 239 357 258 663 253 225 256 262 683 634 559 598 164 175 134 305
 278 248 604 661 684 230 308 104 402 176 626 327 801 536 316 309 280 218 243 712 789 205 826 488 556 368 321 304 289
 583 235 629 155 238 259 141  99 529 674 543 219 295 322 420 171 786 275 726 836 390 350 748 662 610 297 377 341 299
 293 440 816 272 186 140 183 834 763 227 670 622 475 269 301 294 312 298 830 223 180 365 636 496 548 363 356 372 445
 352 285 553 678 344 160 569 348 565 340 645 472 582 358 246 284 291 339 603 281 389 533 633 581 460 393 330 214 381
 489 257 602 296 495 494 614 567 490 521 349 282 237 669 334 286 396 592 244 479 435 382 498 474 515 342 361 249 260
 306 313 497 566 656 468 527 665 343 300 542 453 240 324 217 403 407 422 500 374 319 446 473 323 652 399 314 337 423
 459 288 414 371 307 452 587 450 385 265 386 409 379 387 457 493 485 406 557 448 478 442 432 427 335 509 425 384 392
 469 355 449 441 507 463  43 418 484 367 411 354 471 376 429 394 326 528 451 520 456 616 415 470 370 290 476 336 524
 404 594  35 549 491 419 537 518 664 331 431 391 362 400 499 593 380 579   8 601 378 373  30 455 212 405 552 512 506
 600 437 173 458 513 351 558 505  89 643 375 201  23 525 554 516 685 395 261 480 464 416  72 277 292 504 642 560 640
 486 398 436 514 353 630 426 408  68 580  50 444 196 563 544 590 421 658 397 158 716 359 190 247 424 461 508 517 467
 417 410 310 547 136 595 333 696   4  69 369 438 157 586 539 655 589 526 577  10 462 501 204 159 325 607 694 646 648
 487 597 388  82 135 573 731 428  32 193 149 545 283 635 657 631 608 492 541 268  18 675 131 276 206 621 689 627 511
  54 596 152 102 207 430 704  16 555 519 211 632 530 653 483 609 202 502 613 481 531  59  36 320 203 787 710 575 737
 722 714  20 198 615 691  13 522 121 659  61 628 220 551 546 672 713 578 318  74 523 550 231 228 101  90 677 568 605
  25 649 221 303 274 742 795 606 132 718  39  45 315 117 717 572 780 108 790 759 311 466  87 338  85 770 705  38 702
 124 637 232  58   7 647 151 743 671 756 224 625 570  47 638 576 709 651 701 591 641 767  29  57 383 644  55 263  12
 706 781  79 401  51 719 765 753 535 692  48 115 233 138 814 783 791   9 364 584 809 617 200  15 172 510 443  80   2
 328 666  11 137 271 755 777 688  70 534 192 360 681 119 746 738 747  17 779 618 413 818 168  46  34 733  33  37 693
 680   3 191 184 167 650 793 213 210 741  28  91 758  62 803 797 687 114 482 245 723 776 279 106 264 668 711 769  14
   5 760  77 185 199 732 745 772 113 785 174  83 682 739 775 749 109   1 703 788 612 346 127   6 165 774  98  95 810

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.5735e+06us (= 6573.5ms, 6.5735s)
Wall-clock time (full program): 6.63289e+06us (= 6632.89ms, 6.63289s)
Satisfaction error: 0
Number of search iterations: 967
Number of local moves: 690 (including on plateau: 220)
Number of local minimum: 55 (including on plateau: 31)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  92 704  82 715 129 786 120 841 826  63  59  56 107 151 659 747 836 113 830 801  93  40 766 727 106 142 645 815 158
 229 658  66 525 820 299 790 144 741  99  62 180 802 825 682 245  52  48  75 390 179  19 817 649 691 703 539 838  42
  76 500 831 597 774 209  97 839 793 117  79 572 156 150 534 596 111 758 118 746 154 127 813 595 231 166 828 574  68
 176 497 714 642 322  34 687 756 762 177 145 457 536  61 626 197 832 729 102 455 131 189 223 581 501 187 603 823  64
 170 438 119 632 592  65 208 459 210 121  78 733 788 109 512 693 244 771  72 781 239 110 188 796 824  71 760 688 738
 243 794 354 834 297 712 148 291 157 204 133 448  91 288 767 821 837 334  96 718 224  46 753 833  84  49 814 677 162
 165 744 226 206 217 578 616 555 370 167 341 358 175 139 754 795 461 401 397 198 439 169 835 230 650  81 602 568 772
 202 736 311 719 624 294 277 514 192 292 140 268 168 201 731 769 174 515 164 798 203 827 183 667 346 130 728 740 296
 278 635 279 222 784 160 251 809 710 293 382 215  89 108 799 641 115 173 238 283 218 422 643 706 780 407 717 551 301
 212 800 199 284 708 182 343 570 200 692 235 227 371 298 662 637 259 489 450 755 360 267 225 185 745 318 651 590 295
 193 622 149 257 274 275 325 732 347 367 783 669 290 272 696 665 416 335 829 356 263 233 418 661 338 214 340 528 362
 351 547 220 241 414 544 269 644 300 463 365 812 337 394 398 716 431 155 564 306 237 261 302 265 391 600 599 797 286
 307 657 542 328 324 361 342 262 314 315 424 759 765 442 405 271 282 743 383 234 355 412 374 331 434 419 485 511 428
 310 470 258 406 369 280 353 388 408 634 386 411 381 702 529 444 399 440 350 352 685 333 496 467 380 410 312 447 409
 417 429 481 305 458 373 327 486 522 437 364 254 471 425 321 499 368 541 400 323 577 317 313 552 446 432 413 449 509
 498 336 309 372 462 523 363 339 441 521 421 191 348 359 464  39 532 533 454 453 403 452 320 445 582 477 482 563 527
 402 508 451 484 387 546 556 242 647 423 415  58 396 376 433 384 186 126 479 469 436 627 456 524 379 504 385 326 604
 493 378 473 620 232 474  11 519 543 332 465 389 565 319 255 468 609  45 593 480 483 404 557 426 430 260 545 270 571
 503 487 505 588 580 587 488 561 256  10 435  77 395 490 530 585 553 134 250 520 506 605 538 116 584 531   7 221 567
 652 285 713 472 190 607  69 213 707 690 516  98 495 617  30 248 475 540 549 513 575 502 135  70 558 554 253 228 655
 573  87 589 621 606  23 629 548 240 601 246 678 586 638  44 146 711 344 507 478 392 648 510  94  53 517 566   8 526
 749  26 630 181 287 535 689  57 559 178 628 330 680 615 124  43 819 125 598 100 670 698 695  74 537 726  12 211 633
 782  37 722 137 569 184  80 476 491 750 631 618 420 494  32  41 724 639 676 466 562 697  20 443  14 610   1 132 761
 560 159 668 138 152  31 614 105 636 699 656 393 683 492 377 219 686 673 550   4 613 735 264  27 679 663  13 112 608
 653  86 672 625  95 612 664 273  50 594 763 375 660 778 194 576 349 247 671  35 768 640 694 104  36 646 128  85 136
 591 216 805 171   6 654 681 345  15 619 804 789 583 806  33 114 518  54 666 611 818 623 147 153 366  83 236 123 579
 810  67   9  90 730 777 721 196  47 773 787 764 122  28 316  55 195 705 357 249 816 779 143 460 675 742 266 103 427
 700 101  21 737 785 770 684  29 674 803 709 329  25 840 161 252  18 751 752 172   2 723  73 289  88 791   3 207 720
 822 205 811  60  22 734 807  16  51 775 757 701 725 792 141 303  17 748  38 163 808 304 308 739 281 776 276  24   5

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00022e+07us (= 10002.2ms, 10.0022s)
Wall-clock time (full program): 1.00643e+07us (= 10064.3ms, 10.0643s)
Satisfaction error: 2
Number of search iterations: 1875
Number of local moves: 936 (including on plateau: 456)
Number of local minimum: 117 (including on plateau: 54)
Number of resets: 0
Number of restarts: 0

Problem in column 13: 107 802 156 536 788 91 175 168 89 371 290 337 765 381 471 348 396 565 395 495 586 680 420 683 660 583 122 25 725 => the sum is 12210 rather than 12209
Problem in column 19: 830 75 118 102 72 96 397 164 238 450 829 564 383 350 400 454 479 593 250 549 507 598 676 550 671 666 357 752 38 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 111 623 268 541 151 244 209 779 628 661  76  27 799  72  83 169  54 817 785 653 128 830  74  90 742 144 823 792 836
 701 539 150 641 173 805 118 502 107 163  29 642  31  86  67  89 833 648 554 767  79 431 730 138 727 229 831 826 573
  65 775 839 739 211 728 136 776 750 253 226  59 170 754  68  37 168 682 453 713 369 740  53 123 714  52 735  48 773
  28 242 124 589 794 797 159 613 786 427 139 752 120 528 790 155 132 520 586 808  78 696  94 157 753 112 430 101 699
 206 829 630 300 529 734 544 703 105 781 116 231  22 197 104  92 191 747 832 199  51 684 145 304 667 807 597  56 806
  75 239 249 187 666 803 276 762 536 769 174  42  58 575  84  69  97 652 835 685 315 720 195 840 784 323 302  88 809
 237 246 557 687 793 196 622 614 716 269 222 119 162  91 212 333 282 673 363 389 117 670 422 617 569 215 726 319 771
 167 820 480 301 265 216 811 568 760 818 248 181 210 479 287 203 109 602 828 292 115 524 293  62 621 186 841 279 643
 225 272 154 837 243 270 515 665 559 386 254 207 258 205 164 306 290 801 359 558 813 650 299 827 547 351 344 188 662
 343 198 294 288 780 615 285 579 796 721  61 335 178 766 165 281 131 509 227 751 250 562 221 516 570 317 604 232 634
 322 240 296 354 370 310 149 584 605 774 556 220 346 821 327 457 379 432 534 255 298 593 326 702 256 429 468 274 532
 236 318 371 257 458 390 193 542 574 275 387 802 321 651 233 262 357 777 251 672 224 567 342 512 439 325 425 543 505
 192 433 414 491 214 435 413 838 334 388 469 204 356 418 261 495 368 417 345 424 428 631 366 283 585 501 415 540 551
 360 609 441 303 396 426 247 595 444 364 286 403 358 577 365 402 454 466 271 332 459 472 320 671 594 519 401 141 533
 538 406 571 380 436 461 412 416 377 583 553 463 297 445 349 355 423 473 443 395 378 421 313 330 434 420 338 361 438
 352 407 383 475 393 470 620 374 452 324 446 499 504 526 411 550 381 267 316 340 467 464 341 450 311 375 518 488 305
 437 230 440 372 545 397 522 336 576 498 385 373 494 688 523 410 578 362 398 405 601 347 535 172 400 460 175 448 102
 507 596 486 514 610 409 521 280 376  50 455 513 581  40 404 353 677 328 474 277 487 348 490 148 447 482 566 506 284
 496 399 465  45 462 419 478 273 503 592 497 485 483 295 481 655 658 201 384 561 612 219 350 484 367 527 259 548  11
 639 456 508  73 266 531 560 391 189 122 587 600 449  66 552 618 718 235 624 563 442 278 394 637 308 635   5 724  39
 669 492 683  43 616 537 471  60 331 603  44 693 633 489 555 632 500 289 627 108  16 184 572 213 307 590 686 511  55
 717 158 700 611  98 765  64   1 517 133 657 530 608 223 761 510 772 252  20 202 738  25 606 599 177 582 171 675 337
 731 674  30 245 733  41  18 549 135 140 815 580 476 113 668 711 625 176 741  49 649 234  32 392 208 598 690 663 493
 746  10 659  87 218 451 689  80  26 228 660 732 692 309 705 619 712  47 142 125 800 260 814 744 137 647 153 565 152
 679 736 654 656 146  33 788  82 147 129 812 564 607 194 768 709   9 185 179 106 787 160 715 588  46 645 103 782 200
 824 745 629  63 676   2 156  85 291 161 834 591 664 810 546 681 764  81 166 636 644  96 770 312 217   8  36 707  14
 825 264  17 646 763  12 725 114 110 134 698 680 822 708 748 723 758 477 263 183 697  93 798  24  57 722  95  15  38
 778  71   7 729 127 691 719  13 241 706 819 678 694 743 791 638  34  23  19 640 408 180 795 749  99 382 329   6 100
   3 182 710 756  77  21 789  35 238 757 704   4 816 339 737 695 755  70 190 121 759 130 804 525 126 626 143 783 314

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.0002e+07us (= 10002ms, 10.002s)
Wall-clock time (full program): 1.00634e+07us (= 10063.4ms, 10.0634s)
Satisfaction error: 2
Number of search iterations: 2701
Number of local moves: 1004 (including on plateau: 314)
Number of local minimum: 215 (including on plateau: 45)
Number of resets: 1
Number of restarts: 0

Problem in column 4: 541 641 739 589 300 187 687 301 837 288 354 257 491 303 380 475 372 514 45 73 43 611 245 87 656 63 646 729 756 => the sum is 12210 rather than 12209
Problem in column 14: 72 86 754 528 197 575 91 479 205 766 821 651 418 577 445 526 688 40 295 66 489 223 113 309 194 810 708 743 339 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 785 646 141 797 112 169 626 746 713 627 754  36 111 696 768 144 653 274  37 301 686  86 665  32 136 796  96  70 506
 584 802 129  99 599 465 697 390 839 701  93  41  31 422 694 256 366 800 121 437 138 122 670 573  79 664 781 287 329
  95 691 827 814 104 195  92 831 805 394 571  54 191 711 205 107 174 615  59 666 709  42 724 159  45 755 780  38 756
 570 624 181 818 164 735 798 635 841 654 553 254  88 745 712  90 239 269  94 552 173 147 819 204 200 633  87  73 257
 473 804 117 126  63 500 242 829 293 640 721 311 124 834 826  66 517 636 211 737 836  75 541 152 516 657  76  84 202
 572 292 514 120 220 824 188 212 658 695 793 165  98 157 230 228 140 689 162 765 197 728 772 762 323 828 208 213 456
 790 816 168 810 815 314 589 217 142 671 125 196 154 736 315 180 445 757 118 277 807 182 833 172 207 733 243 219 178
 683 218 158 167 307 194 782 295 427 693 245 235 233 248 679 146 346 273 150 649 784 813 705 281 363 643 407 504 581
 247 270 227 176 203 634 656 428 630 632 286 359 558 335 266 477 759 651 175 794 830 360 361 261 358 224 265 237 550
 773 544 105 604 216 750 607 185 260 835 255 278 344 723 388 306 186 369 383 838 707 252 644 177 423 244 221 240 352
 613 662 246 673 539 297 600 585 355 840 234 333 837 294 316 322 280 364 251 372 625 231 424 189 310 370 232 579 236
 285 637 580 799 559 201 582 305 379 638 340 395 258 375 339 223 435 304 282 356 560 272 318 779 413 354 210 565 466
 347 426 596 262 497 289 704 321 179 714 527 380 377 279 398 302 595 832 325 450 412 373 368 319 417 536 386 345 253
 459 299 440 371 443 209 494 532 284 288 362 351 309 433 568 812 446 449 545 431 430 455 387 461 353 404 403 392 399
 148 378 414 415 464 777 298 467 458 411 655 420 320 276 313 439 515 393 451 381 538 474 416 406 348 385 463 326 460
 331 296 402 330 554 660 546 472 505 342 405 338 409 382 337 444 343 513 267 561 468 521 391 441 555 438 396 303 259
 166  30 432 410 283 408 317 535 574 300 525 496 151 588 401 425 562 566 534 327 374 462 419 522 490 334 528 700 350
 106 510 479 492 502 508 341 601 376 263 470 448 482 397 489  62 264 529 652 557 519 469 110 642 483 487 453 457  61
  28 447 478 641 556 629 400 421 481  68  64 531 503 663 454 563  29 614 598 127 549 436 537 726 567 511 389 114  85
 729 163 226 100 113 238 192 499 540 170 512 569 576 542 620 622 758 156  72 524  33 611 442 603 577 476 530 587 429
 669 367 132 543 498 357 349 485 590 324 480  40 486 149 594 547 139 583 731 193 495 674 332 475 675 491  81 639  91
 533 328 668 488 609 215 133 109 592  69 681 708 493 134 520 484  16 434 720 471 108   1 501 602 452 198 678 619 645
  60 690 732 214 650 102  78 648  15   5 667 659 597 718 101 593   9  55 661 518  52 682  11 680 699 308 775 612 618
 647  47 787 623 507  10 155 687 130  65 610 685 769  57  49 717 753 291 809 222  56 702  51 418 131 123 749 621 738
 727 710  17 184  23 271  74 548 617 564 586 739 792 249 135 715 672  27 725 190  50 692  53 676   2  39 698 803 631
 137  48 742  13 761  46 526  35  71 116   6 821 591  97 608 703 684  82 801 161 312 795 509 606 778  21 763 760 616
  24 171 808 241 290 706 199  18  83 250   8 820 786 575 115 825 748 578 688  34  67 811 119 734 744 206  14 817 730
 605 268 747 751 767 766 225  20 365 160 677 741 770  58  26 628 752   3 823 229 143  19  43  12 789  77 774 183 788
  22  25 716 128 791 740 719 153   7  80   4 806 771 336 743 783 384 103 764  89 551 722  44 145 776 275 523 822 187

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00007e+07us (= 10000.7ms, 10.0007s)
Wall-clock time (full program): 1.00622e+07us (= 10062.2ms, 10.0622s)
Satisfaction error: 2
Number of search iterations: 2220
Number of local moves: 727 (including on plateau: 256)
Number of local minimum: 147 (including on plateau: 30)
Number of resets: 0
Number of restarts: 0

Problem in column 1: 785 584 95 570 473 572 790 683 247 773 613 285 347 459 148 331 166 106 28 729 669 533 60 647 727 137 24 605 22 => the sum is 12208 rather than 12209
Problem in column 26: 796 664 755 633 657 828 733 643 224 244 370 354 536 404 385 438 334 487 511 476 491 198 308 123 39 21 206 77 275 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 814 827  77 114 547 495 106 553 674 261 133 113  26 228 751 819  83 726 158  86 573 597 670 130 828 146  97 824 753
 605 834  64  41 587 129  70 124 711 110 772 838 105  33 519 672 682 478 655  40 679 560 781 168 778 126 139 792 117
 615 707 832  60 658  84  49  96 639  81 138 119 144 161 773 715 545 457 659 101 164 716 803 145 683 676  53 826 510
 704 644 604 278 236 128  74 135 777  90 280 688 177 200 701 738  68 634 211 471 535 755 737 680 730  94 109 514 217
 837 761 789 141 811 159 134 157 600 255 798 181 176 174 675  43 662 229 770  42 702 686 744 300 743 204  72 152 212
 225 358 247 183 449 839 178 151 717 169 829 102 132 149 198 831 254 822 685 357 298 226 664 760 657 116 699  91 823
 747 150 220  35 598 222 817 107 833 338  88 801 317 555 695 203 812 492 188 189 720 762 469 233 624 252 163 377 202
 387 295 633 215 583 386 195 815 197 257 240 453 180 193 213 263 684 764 214 216 590 631 756 651 740 273 201 243 741
 802 271 131 266 782 325 316 143 246 599 251 491 455 140 147 232 629 303 452 245 841 754 752 256 602 290 784 339 365
 499 285 167 293 758 262 283 324 835 571 186 279 299 249 190 205 596 820 196 797 791 731 745 199 693  89 264 284 319
 429 292 234 274 805 276 286 321 244 242 334 315 250 333 402 206 294 825 649 191 771 373 719 446 786 296 486 322 808
 332 404 307 619 739 330 389 378 207 379 496 275 479 343 366 165 785 736 301 337 351 441 447 260 577 480 360 472 454
 328 371 405 537 483 434 830 210 635 352 288 282 340 451 475 314 426 440 306 194 443 281 521 768 650 265 466 350 364
 329 302 392 353 517 238 395 776 354 369 482 346 506 341 355 836 231 342 372 361 344 775 438 504 515 368 399 410 259
 414 221 445 467 384 533 312 374 532 391 345 413 433 331 536 748 370 450 376 568 432 458 313 347 390 494 381 428 323
 485 448 326 690 423 409 525 474 435 397 396 348 593 187 362  46 580 584 406 524 394 382 418 393 308 310 460 503 403
 173 493 427 529 415 383 625 444 416 470 439 385  10 509 585 270 541 512 425 430 459 582 100 462 336 465 642 507 175
 411 502 400 552 120 468 421 614 398 484 501 235 420 500 652 618 160 258 526 572 218 594 356 318 287 363 335 437 489
 305 595 542 663  39 638 653 607 424 543  25 627 463 513 575 548 118 156 241 569  98  23 289 431  20 712 565 591 636
 476 407 490 436  59 554 648 601 528  18 643 559 616 520 581 538  78  51  87 511 162 564 148 567 349 612 522 223 661
 153 558 621 562 227 546 401 606 172 269 588 626 540 603 641 697 297  57  34 412 578  52  50 408 127 508 608 698 570
 171 637 589 656  82 592 706  17 623 630 579 709 464 609 142 518 125  36 531 550 112 277 367 456  56 617 488 691 179
  85 576  11 647 224 628   3 708 248 539 530 734 667 461 645 481 137 477 566 309 523 192  80 610  79 703  30 622 694
 122  45 359 563 561  76 632 527 123 613 669 692 671 620 208 574 556 268 544 728 237  31 155   4 239 779 735 767 111
 804  66 549 646 417 796 787 725  93 678 722  44 586 710 757  58 253  47 422 666  75  62  48 681  92 665  71  29 660
  95 557 677 320 267 714 729 788 166 790  55 713 765 746  16 108 795 291 505 700 219  24  32 473  65  73 724 687 115
  54 209 766 818 272  19  12 654 170 689 534  37 774 807  15 696 718 497 487 723  22 442 182 750   2 668 810   7 375
  28  67 721 611  63 733 793 742  27 809 136   5 821 794  21  61 311  69 516 769 498 230 304 705  99 806 783  14 673
 780 327 184 640 103 813 840  38 185 816 732 799 800 749  13   6 419 388 727 551 380   8 121 104 154 759 763   9   1

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.76803e+06us (= 6768.03ms, 6.76803s)
Wall-clock time (full program): 6.829e+06us (= 6829ms, 6.829s)
Satisfaction error: 0
Number of search iterations: 1344
Number of local moves: 778 (including on plateau: 253)
Number of local minimum: 64 (including on plateau: 40)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
   6  45 212 680 196  44 576 732 777 784 774 253 771  56 775 663 710  71 306 690 228 651 158 317 760   7 145 804  18
 718  79 773 786 201 193 148 262 779 747 144 719 764 334  41 205 757 104 669  57 783 192 726  25 768  32 255 142 806
 442 666 498 143 266 355 633 307 723 622  12 164 716  19 114 335  51 438 360 753 646 731 691  29 803  13 795  77 807
 772 789 214 189 149 222 536  10 694 746 745  59 310 210  53 188  47 125 402 695 727 697 683 216 641 420 108 754 808
 763 778  26 288 397  39  22  34 755 767 653 788 339 722 684   2 130  86 631 701 637 649 725  23  14 152 126 658 620
 721 563 436 685 138 207 279  60 761 692  35  31 675   5 705 672 712  15 400 713 665 681 116 168 571  73  58 655 717
 674 699 265 392  33  74 252  85 603 654 689 240 585 593 557 118 208 610 644 621 730 608   4 135 574  81 186 659 636
 728 769 185 347 112   3 308   8 468 687 290  21 625 667 798  17 497 597 600 611 543  11 682 638 673 166 123 491 544
 522 569 358  36 238 629  95 588  55 296  75  16 591 501 656 206 456 590 521 700  20 617 551 708 640 242 546 606 581
 575 533 100  48  52 511 507 482 503   1 537 283 380 679 564  27 418 111 567 532 706 664 720 579 514 113 616 479 408
 525 555 124 231 159 487  91 200 580 573 154 578 568 435 626  72 613 470 523 277 676 312 643 452 650 129 493 539 474
 596 517  54 141 247 478  40 495 426 505 233 218 670 467 619 615 245  70 552 451 607 441 526 463 577 388 492 605 471
 518 550 403 147 394 387 434 476 453  28 538 314  97 614 376 494 465 513 541 477 460 432 483 582 486 276 321 488 462
 395 433 429 391 496 448 445 409 346 490 396 354 424 440 506 454 327 570 548 437 519 499 378 336   9 372 444 464 450
 301 416 422 589 485 389 319 531 298 415 282 524 302 473 398 447 370 365 345 502 457 439 443 328 427 377 285 799 481
 289 446 592 583 412 381 414 362 419 401 504 430 352 364 459 510 325 318 735 250 367 425 406 393 449 480 303 311 529
 348 411 599 740 428 256 472 421 466 329 323 359 417 278 455 287 594 407 781 351 383 350 219 281 209 836 410 431 368
 338 484 556 547 458 304 349 405 316 269 469 560 340 330 263 244 657 841 750 284 413 382 366 752 295 527 172 267 271
 353 374 741 423 632 702 688 248 220 357 489 363 780 225 379 715 618 275 698 293 234 369 386 224 107 534 251 170 361
 197 300 762 627 743 274 461 390 341 545 677 157 204 230 299 714 709 291 178 813 385 292 332 261 217 508 765 342 195
 344 384 737 612 758 796 257 315 320 404 167 801 770 155 326 751 333 235 223 194 749 151 258 286 179 561 647 270 226
 331 305 528 584 739 542 671 509  90 272 634 793 119 343  96 259 280 324 190 839 161 756 101 835 191 558 811 221 127
 375 187 598 254 810 744 792 782 122 227 601 309 268 132 115 805 237 648 229 139 337 140 776 239 211 790 787 184 371
 181 294 738 559 703 825 704 822 165 241 106 812  87 635 110 236 183 273 213  82 246 562 802 661  99 794 809 169  98
 134 120 163 322 553 215 264 136 549  63 815 645 202 742 182 628 356 748 156 297  66  89 678 313 821 630 686 820 816
  94 232 174 609 572 759 668 693  92 117 837 604 160 797  84 840 180 819 153 199 176 766 177 827 198 814 249  76 243
  93 133 831 587 475 595 602 829 696 373  69 642  61 109 736 624 175 729 131  65 105 173  24 828 817 838 639 150  80
  50 535 554 623 711 785 662 800 162  64 128 660 530 830 399 515 733 832  42 103 146  62  67 586  49 707 171 500 203
 826  43 137  46 652 565 520 818  30 540 833 512 102 824 834 566 823 734 121  83  37  68  88 724 260 791 516  78  38

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.691e+06us (= 6691ms, 6.691s)
Wall-clock time (full program): 6.7521e+06us (= 6752.1ms, 6.7521s)
Satisfaction error: 0
Number of search iterations: 1016
Number of local moves: 663 (including on plateau: 193)
Number of local minimum: 50 (including on plateau: 24)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 459 835 632 777  73 814 679 607 100 529 682 561  66 667  63 538 130 138 149 834 838  88  37  79 117 761 774 110  72
  44 640 181 776  97 745 146 608 556 143 837 819 737 802 126 535 832  56  46 502 466  95  43 384 164 184 634 793 218
 118 686 839 684 730 795 589 543 124 704 813 131 792 157 171  93  86 140  98 736 671 654  30 237 176 626 456 240  90
 123 185 205 460 231 797 151 421  38 683 104 754 135 801 743 195 139 689 172 660 662 260 728 605  82 830 492 163 701
 156 739 829 668 740 216 365 756 194  96 733 731 152 178 798 557  89 112 106 685 633 284 238 224 136 816 487 168 323
  31 624 840 465 251 623 154 755 222 144 678 578 775 811 192 611 119  49  55 179 836 134 196 831 806 315 594  92 249
 120 213 696 808 191 226 826 247 109 750 760 512 169 784 116 211 232 782 153 703 710  81 694 250 150 727 699 115 175
 252 827 468 420 281 664 239 833 127 821 210 807 125 248 367 747 206 236 245 320 554 253 655 180 174 670 788 294 198
  94 286 767 659 244 628 261 698 824 643 273 234 769 262 197 235 401 395 309 170 773 338 209 259 298 791 748 223 221
 307 732 536 810 292 270 145 796 363 825 333 296 303 190 356 818 266 132 280 665 229 297 609 340 293 308 735 346 337
 304 691 597 759 361 212 299 388 345 379 663 433 243 409 202 803 399 324 214 339 302 374 785 312 257 376 778 347 314
 265 230 279 378 274 357 282 550 241 277 646 828 382 271 264 702 447 648 484 267 386 383 841 334 335 364 602 359 533
 316 410 325 509 275 358 425 408 470 328 464 332 450 453 295 301 787 549 319 310 461 311 744 321 373 416 742 342 415
 463 390 380 381 343 422 287 288 789 368 442 520 435 317 413 377 437 407 396 488 454 444 534 348 497 341 582 330 336
 457 349 404 432 372 537 414 474 370 429 467 448 524 289 516 436 360 327 353 483 387 427 394 482 369 417 451 449 392
 476 430 469 438 496 491 545 563 362 519 531 571 428 493 475 443 398 326 559 424  76  22 527 351 375 393  34 532 462
  87 445 411 522 515 577  15 400 580 546 389  32 498 473 452 350 486 458 494 530 553 572 426 581 540 440  27 419 391
 596 500 431 242 585 403 439 472 489  45 495 186 521 477 517  91 542  47 528 446 592 385 228 645 499 481 305 518 504
 627 560 177 187 480 203 511 418 610 406 272 526 397 490  41  67 590 603 423 501 204 598 199 636 441 591 285 600 566
 548  71 503  52 584 569 570 148 510 217 653 479  54 644 552  70 666 255 618  75 625 613 344  19 635 579 283 658 615
 612  77 219 107 562 567 620  53  10 525 352 137 568 616 601 182 713 355 555 313  25 558 405 705 573 506 291 725 677
 753 434 155 588 575  85 574  61 650  33 539 129 629 734 586 647 471 622 523 593 161  50 595 507 505 193 254 547  16
 485  59 101  60 651 514   5 583 631  78 656 121 614 652 544 402  28 565 604 637 513 551  29 681 749 102 227 693 674
 673 258 183 200 669 541 675  83 306 692   4 278 695 108 708 621 564 587 676  84  69 720 478  74 715 167 256 617 508
 757 576 103 366 718 165 619 263 716 729  26 147 721 113 714 269 642 763 820  24 246 672 225  11  68  58 159 697 822
 722 128 166   2 687   1 779 188 741 300   6 771  36 639 706 290 661 233 751 641 105 719  13 780 599  23 111 630 781
 765 158  17  48  51   9 786 122 726  65 162 649 215  99 709 201 724 783 794 173 141 800 371 638 680 711 133 707 772
 809 354 690 331 114   8  39 207 688 189   7 142 712  14  21 717 752 805 723 160 208 758 815 657 799   3 220 455 812
 790 322 606  80 766 412 770 276 318 746  12  57  64  18 764 700  42 823 762 268 329 768 817 738 804  20  62  40  35

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00014e+07us (= 10001.4ms, 10.0014s)
Wall-clock time (full program): 1.00625e+07us (= 10062.5ms, 10.0625s)
Satisfaction error: 2
Number of search iterations: 1969
Number of local moves: 867 (including on plateau: 395)
Number of local minimum: 147 (including on plateau: 53)
Number of resets: 0
Number of restarts: 0

Problem in column 5: 73 97 730 231 740 251 191 281 244 292 361 274 275 343 372 496 515 585 480 584 562 575 651 669 718 687 51 114 766 => the sum is 12208 rather than 12209
Problem in column 20: 834 502 736 660 685 179 703 320 170 665 339 267 310 488 483 424 530 446 501 75 313 593 637 84 24 641 173 160 268 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 463 617 685  47 208 401 186 806 812  79  93 348 143 789  58 176 818 120 764 721 353 720 781 182 132  30  55 784 838
 748 839 804 103  76 101 779 719 826 243  75 154 202 831  92 442 840 679 119 774 106  68  74  72 159 578 437 461 808
 759 703 828  48  67 100 142 824 127 677 139 508  51 627  65 841 646 689 124 590 757 221 102  62  33 440 829 541 669
 706 710  71 427  82  84 626 787 809 770  86 636 110 698  36 131 833 248 167 777  39 564 225  81 122 795  63 785 741
 179 658 640 755 511 150 484 674 722 684 235 294  94 140 264 270 635 736 137 654  52 213 162 398 817  45 316 672 618
 178 819 172 676 138 515 222 815 118 205  78 571  98 803 585 660 837 293 152 481 318 180 165 820 125 631 155 766 633
 702 682 105 832 752 285 470 466 648 805 136 822 192 326 195 134 233 406 234 704 445 220 405 317 583 126 206 524 254
 649 454 290 223 392 319 183 780 191 158 250 295 194 232 196 738 286 760 112 382 424 776 478 616 343 769 393 594 732
 830 310 109 265 245 311 342 242 574 207 163 647 170 750 181 735 115 709 553 810 816 314 753 230 184 628 304 525 187
 269 226 256 305 296 238 763 823 661 664 313 790 329 164 210 836 104 241 217 814 758 274 302 227 394 312 404 665 354
 797 365 267 255 260 497 212 198 821 203 825 692 327 228 268 584 351 231 355 549 701 517 336 280 244 796 271 502 277
 188 169 237 307 157 414 381 373 798 697 156 421 201 344 361 464 387 783 429 518 835 483 322 761 434 320 301 605 363
 190 306 252 239 377 371 555 433 482 731 423 447 419 717 359 278 438 514 426 557 410 368 408 259 399 509 261 651 430
 218 298 360 251 473 827 600 476 504 297 338 369 384 453 501 488 379 308 531 492 328 303 479 485 448 367 370 506 376
 512 510 409 467 291 487 455 324 390 380 417 451 472 593 415 431 292 346 253 498 475 246 397 352 425 460 450 436 575
 462 569 349 441 733 287 347 334 262 446 279 276 696 339 477 443 675 560 563 358 321 330 465  88 490 625 362 374 258
 130 570 357 562 528 332 537 458 340 389 581 403 281 283 493 275 407 378 345 366 411 428 471 559 449 554 439 335 547
 623 545 507 350 538  44 606 619 375 494 705 214 372 495 288  80 680   3 613 337 168 385 364 412 568 516 469 289 550
 325 546 459 540 556 690 383 391 468 444 396 629 638 263 457  40 500  22 519 299  34 561 536 572 534  89 552 247 520
  73 565  57 456 526 708 693 151  83  17 615  20 529 644 642 333 663 388 603 386 395  59 595 695 530  35 793 420 535
 694 171 489 544 582 566 116 160 282 496 573  61 522 608 576 145 657 586 634 300  26 707 474 133 729  32 599 224 523
 653  96 683 551 687 767 128   7 197 418 331 144 716  64 604 597 614 266 416 114 491  25 632 670 678 400 610 111 539
 148 315 609 533 611 737   9 177 432 341 624 480 659 513 601 189 503  50 612 135 402 711  53 580 607 668 452 174 284
 521 356 567 588 688   6 650  12 435 630 742 113 620 107 681 598  11 199 577 149 123 596 637 486 643 621 730  46  77
 579 499 771 749  15 773 240  49 413 532 762 655 662  13 714  31  91 589 645 108 173 505 712 639  21 216 775 209  69
  95 129 786 229 834 671 200  10  60 558 788 121 734 153 747 257   2 591 691  37 666 728 718 743   4 527 794 219 117
 185 161 323 699 792 745 542 249 204 587 813 800 811 211 652 799 141 686   8  66 740 193 147  42 723 739  14  99  38
  97   5  54  41  43 765 756 309  90  29 548 673 801 802 700 592  70  56 754  87 727 768 744 641 667 166 778 422  24
 236  16 713 726 751  18 602 543  85  28 725 175 782  19 791 622   1 772 656 146 715 746 272 807 724 215  27  23 273

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00003e+07us (= 10000.3ms, 10.0003s)
Wall-clock time (full program): 1.0061e+07us (= 10061ms, 10.061s)
Satisfaction error: 2
Number of search iterations: 1935
Number of local moves: 863 (including on plateau: 312)
Number of local minimum: 147 (including on plateau: 29)
Number of resets: 0
Number of restarts: 0

Problem in row 17: 130 570 357 562 528 332 537 458 340 389 581 403 281 283 493 275 407 378 345 366 411 428 471 559 449 554 439 335 547 => the sum is 12208 rather than 12209
Problem in row 19: 325 546 459 540 556 690 383 391 468 444 396 629 638 263 457 40 500 22 519 299 34 561 536 572 534 89 552 247 520 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 818 819 798 140 347 664 232 688  33 436  78  87  51 145 119 504 446 574 835 582 643 726  40 407 226 422  38 539 772
 705 251  42  59 161 777  62 817 618 494 349 684 231  71 178 563 814 832 699  34 564  54  28 764  96 796 639 268 559
  98 747 797 666 805 789  43 591  68 698  69 129  17  89  95 616  58 767 746  36 135 207 736 569  93 139 839 740 827
 709 194 244 123 171 831 610 696  81 149 181  44 416 203  85 239 802 620 681 219 542 112  65 717 834 729 716 631 565
 100 469 152  75 748 213 111 829  60 492  84 727 687 160 173 648 738 158 118 754 721 101 134 733 761 713 584 399 567
 840 157  63 275 778 248 255 833 303 230 291 166 534 150 214 809 176 331  74  92 647 240 269 784 368 766 790 787 739
 837 162 126 265 227 191 826 561 246 221 233 136 665 193  73 499 204 743 801 396 156 103 830 730 277 137 807 783 781
 222 159 198 172 154 164 270 435 185 825 302 820 813 234 210 812 199 273 308 245 808 841 224 619 153 325 701 722 816
 133 556 155 223 217 644 263 623 771 838 286 188 667 340 253 750 151 765 186 281 828 147 143 645 314 190 706 271 676
 206 257 363 572 278 310 319 500 264 486 411 318 274 410 144 774 791 470 333 735 675 284 237 650 241 252 342 704 609
 258 621 294 439 306 236 282 501 404 810  32 822 673 398 276 614 259 200 625 395 218 141 590 693 450 107 462 762 341
 380 287 382 415 115 311 412 553 776 491 169 779 346 357 823 211 432 307 343 419 316 322 238 568 379 296 317 824 641
 455 401 560 305 792 378 403 557 285 192 261 581 463 483 335 472 323 488 465 362 312 788 338 702 130 364 332 356 326
 391 295 471 414 400 365 428 836 487 429 431 345 359 327 339 515 293 570 405 385 367 328 406 511 353 433 554 292 480
 454 372 376 413 443 444 478 459 389 579 313 388 348 425 473 421 397 304 336 481 461 476 437 442 315 493 514 344 434
 445 448 457 360 334 552 506 297 394 467 524 300 597 449 417 309 366 550 215 452 375 489 369 354 484 477 321 393 508
 606 243 533 538  86 352 528 183 613 383 496 521  47 522 426 527 775 530 402 520 110 482 351 320 630 586 479  45 374
 466 180 536 519 573 468 652 122 420  57 537 387 503 392 512 490 290 390 608 430 622 409 288 229 540 580 424 125 460
 507 509 545 725 513 593 373 201 337 116 475 505 142 525 516 202 532 551 529 596  18 451 549 355 686 662 175 109 212
 615  79 418 195 680 543 438 330 594  72 617 531 427 523 301  12 657 605 633 370 104 795 577 187 583 718 458  64  83
 510 566 672 627 371 456 576 283  26 108 689 651 299 611 518  14 485  21 179 632  29 216 575  66 757 671 661 678 262
  23 408 526 607 712  48 384 464 558 547 708 498 146 719 495 208 548 128 628 272 197 377 660 279 555 646 114 677  77
 637 635 685 599 649 544   7 254 589 182 562 546 474 815 710 228 517 682 266 105 220  11 447 177 732 629   3 289  15
 655 804 598 691  88 132 714  25 260 184 811 235 578 769 751  90 250  52 381 700 587 669 636 502 658 127   8 163  91
 106 497 642 441 358 624 763  70 697 168 453 117 571 692 786 174 603 707 592 638 324 731 604  56  67 102 256 205 165
 247 595 756   5 585 601  27  16 690 759 674 626 350  37 724 249 800  94  50 541 654 634 794  35 600  24 679 361   2
 602 695   9 803 588 670 758 298 656 329 785 148  80 770 749 242  97  99  55 742  41 703 755  13 683 170   4 225 440
  46  10 780 806  19  22 744 167 653 773 668 663 723 659 799 196 124 189 640 734 782 760 121  53 113 535   6 423   1
 138 793  31 737 711  39 745  20 752 694 720 267 728 741 715 821  82 209  76  61 753 612 768  49 131 120 280  30 386

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00019e+07us (= 10001.9ms, 10.0019s)
Wall-clock time (full program): 1.00626e+07us (= 10062.6ms, 10.0626s)
Satisfaction error: 2
Number of search iterations: 2511
Number of local moves: 799 (including on plateau: 379)
Number of local minimum: 191 (including on plateau: 43)
Number of resets: 0
Number of restarts: 0

Problem in row 9: 133 556 155 223 217 644 263 623 771 838 286 188 667 340 253 750 151 765 186 281 828 147 143 645 314 190 706 271 676 => the sum is 12210 rather than 12209
Problem in row 17: 606 243 533 538 86 352 528 183 613 383 496 521 47 522 426 527 775 530 402 520 110 482 351 320 630 586 479 45 374 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 839 608 140 473 117 833 768 701  23 705 109 116 755 785 593 453 164  64 100  78  76 630 631 821  31  91  62 749 694
 835 510  84  74 767 783 141 815  75 805  39 133 562 793 831 107 727  24  44  83 222  79 610 640 840 577 520 452  37
  82 761 795 291 105 824 817 723 169 679 809 101 250 118 672  68  59  35 232  73 304 157 800 641  28 634 445 743 794
 149 621 834 801 494 837 601 773  50 497 122 454 814 209  93 818  67 137 207 160 213 102 110 716 138 829 215 765 383
 841 780  96 197 779 600 759 711  48 680 372 129 418 186 740 523 143 125 214 166 194 158 225 540 811 674 126 190 784
 231 700 132 808 545 830 106 798 321 554 224 303 724 733 686 134 167 139 247 245 147 199 746 533 196 715 142 827  77
 249 573 119 266 200 556 725 823 263 636 182 816 697 156 150 413 789 279 148 192 146 179 806 754 265 714 272 689 152
  34 586 343 838 698 730 176 441  56 796 161 168 444  95 275 628 319 226 193 177 289 596 762 836 230 288 807 227 790
 180 825 355 290 244 826 340 652 813 678 151 559 280 205 203 165 282 399 267 607 459 298 745 580 312 704 240 316 234
 346 775 297 738 534 832 131 449 127 729 313 283 656 216 281 198 357 262 428 442 253 336 218 578 310 309 788 786 237
 183 483 374 294 804 604 159 388 212 702 252 358 246 437 482 411 370 287 339 342 828 362 736 696 455 269 300 360 476
 307 589 243 695 264 393 581 792 404 514 387 812 384 529 271 432 410 488 466 219  92 257 242 565 220 420 576 322 335
 395 546 539 256 184 531 173 648 547 618 409 260 782 373 427 772 440 334 344 286 259 446 318 517 347 402 306 328 422
 381 503 278 363 460 236 467 329 653 431 451 248 480 323 401 389 348 462 337 521 491 536 502 326 537 493 583 396 284
 352 354 359 235 356 458 251 438 486 448 308 376 416 501 553 276 400 417 377 527 797 481 311 499 365 292 575 477 524
 392 274 490 394 361 211 403 382 518 571 349 447 564 450 472 315 542 405 429 570 296 625 461 228 330 471 397 443 419
 385 327 484 464 175 299 496 293 567 325 423 424 532 495 390 135 331 558 587 543 320 659 485 414 487 613 111 457 430
 504 171 407 367 549 188 519 221 333  72 371  52 535 468 509 314 602 421 369 508 301 595 683 345 615 516 590 500 584
 474 210 623 597   8 238 655 239 425  45 465 611 550 552 609  60 492 415 435 375 470 317 548 261 606 469 350 525 585
 456 338 560 270   3 268 436 189 479 368 512 551  16 475 408 526 713 699 671 379 463   2  41 353 712 651 439 663 568
 574  86 563  32 572 185 661 108 708 305 637 582 579 633 684 223  33 638 685 538  14 681  30 285 605  70 731 128 639
 569  12 505 172 515 113 561 332 366 181 642 391 255 627 544 522 644 620 541 616 710   1 670 324 506 104  54 513 599
 676 498 660 530 603 120  49  43 726  38 412 233 364 191 643 592 478 507 703 739 528 378  20 112 632  47 351 667 669
 555  89 778 187 719 295  81  69 624  66 619 566   4  15 145 406 121 617 622 756 751 654 426 217 668 658 721  87 693
 718 114 677 688 398  29 626 144 380  65 614 752 489 612 170 434 662 758 757 666 591 650  58 154  36  98 728 130  11
 706 201 647 208 115  22  90  51 649 195 737 753   6 646  18 781 742 707 776 799 675 598 664  99 511   9 722  42  40
 770 273  10 717 206  17 734 136 692  26 682 810 153 629 162 557 202 750 709 720 777 665  80  19 588 302  13 123 687
  21  61  53 204 744 254  46  88 763 386 691 747  25 594 673 822 803 645 741 819 769 820 103  71 771 155 258  27  55
   5 341 764 760 690  97 657 433 732  94 766 174 229 163 124 735 802 791 241  63 774 748 178  85  57 635 787 277   7

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 5.7444e+06us (= 5744.4ms, 5.7444s)
Wall-clock time (full program): 5.80561e+06us (= 5805.61ms, 5.80561s)
Satisfaction error: 0
Number of search iterations: 887
Number of local moves: 743 (including on plateau: 168)
Number of local minimum: 21 (including on plateau: 13)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 504  43  18  26 810 151 523 624 704 815 816 831 135 105  76 733 702 156 108  35 747 769 838  78 807 711  42 187 115
 139 452  31  21 786 666 748  75 617 795 576 309  25  63  50 703 650  61  69  97 626 776 817  51 742 214 705 808 537
 205  79 526 125 821  77 804 422 605 119 569 595  86 122 802 762 739  73 167 195 829 820 757 830 121 700 117  74  68
  52  66 145 516 681 721 771 244 178 800 805 827  95 172  20 718 754 148 542 547 695 693 792  48 215 581  30  85 268
 136 157 237 191 823 146 658 783 814 120 832 175 570 131 144 744 818  57 590  98 745 680 691 142 755 560 154  60 198
 143  49 186 223 766 836 201 536 206 619 734 275 111 203 171 803 228 161 713 324 674 425 682 768 152 824 169 257 770
 677 173 568 179 611 709 837 342 124 219 784 834 369 102 229 194 236 202 749 208 735 767 654 116 231 233 180 114 833
 138 162 640 293 638 256 661 828 798 278 618 141 586 188 153 314 707 270 688 253 623 840 689 207 126 337 193 317 267
 579 321 288 315 636 137 736 671 841 273 657 335 365 424 280 240 216 174 775 358 310 670 506 181 177 328 326 327 763
 609 301 227 210 248 222 649 279 332 839 499 364 633 221 196 282 297 302 701 250 591 665 645 224 230 254 401 822 716
 631 379 147 289 308 255 165 717 313 509 835 312 356 251 272 382 252 305 825 311 480 675 637 374 376 454 269 392 738
 753 325 276 287 580 443 318 334 543 372 519 445 743 347 339 381 336 294 338 340 602 557 483 348 277 522 349 438 320
 622 316 664 354 319 346 331 323 303 486 459 574 470 495 353 345 247 449 351 437 585 592 394 375 226 429 413 439 512
 793 811 583 405 329 283 453 431 243 484 462 370 387 419 298 423 420 409 465 447 433 476 450 468 218 242 286 239 482
 485 428 371 418 448 435 479 350 498 472 160 456 343 330 341 404 444 403 539 518 414 367 386 390 478 463 461 434 494
 477 530 521 344 563 535 388 407 246 406 496 296 529 517 540 377 511  29 410 400 513 299 621 395 359 265 497 322 416
 399  83 524  65 532  39 554 391 362 474 440 464 446 333 508 510 451 551 473 411 559 373 550 383 492 427 455 457 503
 397 385 103 613 300 549 266 292 515 360 488 389 466 491 541 469 520 599 460 402 209 234 249 384 430 415 566 507 610
 235 475 285 458 561 571 274 110 553 487 357 548 261 295 432 544 672 489 149 500 290 123  47 647 467 653 573 490 663
 363 646  72 556 493 564 159  91 594 352 211 584 263 534 436 606 572 685 514  34 260 232 129 601 471 481 616 528 562
   5 652 441 628 213 614 531 107  12 587 238  99 291 651 575 502 545 620  41 597 306 271 217 660 578 612 505 565 546
 366 690 442 639 259 538 199 393  55 607 192 525 212 627 368 596 659 725 644 501   4 304 132 558 582  33 662 635  62
 150 630 673 648 163  64   1 264 641 603 176 106 552 679 555 589   3 588 396 669 185 100 284 741 751 417 655 729 197
 684 752 714 593 130  16 608 533  96 527 128 642 678 756 667 133   6 710 166 643  82  19 118  17 692 598 724 577 200
 634 708 759 715  45 668 241 164 258 225  88 781 726 694 772 140 127 600 101 746  90 220   7 697  59 567 604 760  13
 380 706 764 779  23 683  92 204 732  54  14 632 686 778 782  58 184 720  53 629 134  27 170 750 687  32 696  84 676
 426 730 408 722  28 740  46 791  94 190   8  37 699 801 727  87 615 813 656 774  44  67 182 796 698  22   9 737 262
 421 361 777 809  93 158 104 723 625 113  38 183 398 761 785 155 109 790 245 773  89 112  71 812 731 765 794  36 378
 806 799 819 788   2 787 412 780 307  24  10  80 728 719 797  15 189 826 281 712 355  56  11 168  81  70 758 789  40

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00017e+07us (= 10001.7ms, 10.0017s)
Wall-clock time (full program): 1.00624e+07us (= 10062.4ms, 10.0624s)
Satisfaction error: 1
Number of search iterations: 2185
Number of local moves: 713 (including on plateau: 181)
Number of local minimum: 159 (including on plateau: 25)
Number of resets: 0
Number of restarts: 0

Problem in diagonal 1: 115 808 117 581 755 768 654 840 310 250 825 294 247 423 341 517 446 389 357 352 12 393 1 16 45 779 408 361 806 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
   8 768 680  48 820 297  27 229  74 790 800 366 827 465 825 679 347 777 684 113  38 785 120  87 814 655  21  51  14
  24 248 143 243 783  33 236  23 192 654 564 713 733 695 754  16 190 789 119  86  70 818  84 662 732 793 734 433 645
 736  65  25  80 663 204 727 517  17 767 676 209 804  30 755 697 285 730 116 169 227 796 653 287 592 607   2 137 636
 720 135 126 254 722 370   7 668  71 830 757  13 801   3 744 181 326 672 309 715  26 683 103 180 664 343 771 393 622
 606  22  41  59 735   6 770 686 656 728 633 638 423 658 731 610   5 609  89 152 107 747 659  46  35 682 267  18 791
 758 171  10 166  52 379 565  78 628 621 624 280 673 716 644  11 252 787  36 712  58 797 748  55 521 563 278 232 794
 584 300 187  91 588 261  29  57  98 773 690 702 544 572 705 615  15 640 273 647  43 689  39  93 561 772 761 177 703
 671 360 649 230 611 196 710 724 599 708 620 509 337 657 613 445  66  76  50 555 200   9 632  82 490 577 101 240 492
 639 176 218 118  60 305 583 709 505 635 604   4 536 630 484  63 110 648 179 614 349 646 643 497 652 641 121 250 589
 674 605 602 231 131  61 502 585 631 559 701 276  44 616 443 591 162 469 526 158 129 472  85 132 531 596 742 404 551
 581 666 529 383 587  31 440 257 556 122 511 193 302 482 428 537 501 681  40 696 226 642 441 275 540 627 223 246 466
 425 545 369 244 582 161 504 594 415 481  77 452 456 499 670 519 608 485 461 546 237 488 574 506  53 491 234 178 355
 286 483  92 427 455 377 351 554 520 489 389 462 480 532 400 392 324 459 467 316 322 420 479 474 407 422 553 419 458
 421 597 573 414 552 338 580 391 432 298 626 514 310 265 448 487 284 463 329 547 371 447 417 451 296 384 418 102 454
 612 507 327 381 500 516 495 569 378 476   1 374 253 475 470 549 362 486 350 342 416 496 460 317 571 394 385 334 413
 600 221 376 508 406 598 464 388 449 247 390 438 311 576 397 201 403 382 386 321 833 375 323 568 401 473 356 562 256
 435 344 380 518 372 539 522 345 189 364 444 367 477 354 424 437 348 457 601 434 528 304 212 274 453 436 750 493 408
 405 368 426 515 259 769 430 242 281 513 336 694 721 358 303 266 328 294 409 313 619 333 220 510 534 255 784 442 282
 320 691 301 550 341 478 352 387 410 270 809 623 706 335 332 398 717 258 399 151 586 260 295 299 353 431 339 541 277
 306 184 331 530 197 494 208 811 346 412 523 737 239 149 340 778 805 361 665 402 524  64 203 288 173 308 774 661 396
 235 570 678 525 450 725 292 191 669 411 215 365 271 182 134 293 751 359 788 262 291 249 763 268 357 667 373 557 318
 283 831 289 803 741 779 395 749 756 198 142 159 157 251 188 245 533 214 782 213 821 109 211 542 225 100 446 740 307
 330 183 617 629 216 593 802 128 579 186 123 776 202  94 160  81 829 168 429 538 832 279 828 812 194 222 726 527 127
 241 760 765 762 219 817 238 150 195 314 272 618 154 153 155 711 707 363 498 723 595 130 207 841 140 205 468 700 108
  28 264 660 816 578 560 699 290 185  19 210 144  69  37 174 603 745 269 837 780 819  99 148 693 840 133 590 808 112
 263 746 775 512 325 815 138 319 704  68 156 172 164  45 104 795 677 163 535 799 567 199 543 813 139 228  72 634 739
  88 688 471 687 147 503 206 651 170  56 167 824 146 810 165 217 729  54 315 766 823 111 685 807 106  42 798 753 224
  96 566 826 835  20 312 115 781 786 141  32 575 836 764 105  73 625  62 839  90 838 637 675 792  83  67  75 439 124
 834 145 743 650  97 692 822 136 718  79 117  12 233 806 114 719 175  34 698  49 714 125 759 558 752  95  47 738 548

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00006e+07us (= 10000.6ms, 10.0006s)
Wall-clock time (full program): 1.00614e+07us (= 10061.4ms, 10.0614s)
Satisfaction error: 3
Number of search iterations: 2035
Number of local moves: 690 (including on plateau: 158)
Number of local minimum: 158 (including on plateau: 19)
Number of resets: 1
Number of restarts: 0

Problem in row 9: 639 176 218 118 60 305 583 709 505 635 604 4 536 630 484 63 110 648 179 614 349 646 643 497 652 641 121 250 589 => the sum is 12208 rather than 12209
Problem in row 23: 330 183 617 629 216 593 802 128 579 186 123 776 202 94 160 81 829 168 429 538 832 279 828 812 194 222 726 527 127 => the sum is 12210 rather than 12209
Problem in diagonal 0: 8 248 25 254 735 379 29 724 505 559 511 452 480 265 470 201 348 294 399 402 291 109 828 841 840 228 798 439 548 => the sum is 12210 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 827 155 552 111 662 594 829 696 743 407  64 194 718  80 122 204 143 119  86 613 214 704 835  95 801 640 129  63 809
  75 663 598 147 821 716 553 617 812 684  93 586 581  71  66 781  81 543  42 796 479 166 255  51 792 158 627 273  82
 817 176 837 151 693 705 632 757 707 181 146 651 766 365  94 518  78 100  47 818  55 132 790 252 638 167 708  50 178
 243 190 717 159  58 508 831 687 481 692 222 150 732 286 138 206 107 238 290 229 828 813 805 218 799  52 659 779  92
 571 240 631 239 750 266 839 549 762 754 183 612 556 174 356  74  87 697  85 545  76 110 180 128 802 815 756 247 125
  72 811 171 412  44 841 748 838 706 795 164 678 185 253 225 649 211 118  98 304 816 117 149 832 695 237 734  45 261
  62 182 565 145 113 592 320 682 823 836 494 668 568 140 130 519 354 527 179 666 293 298 826 226 723 124 738 152 264
 720 208 722 819  56 711 691 539 822 258 382 824 833 381 661 674  57 295 191 217 374 223 162 260 219 249 285 192 184
 306 231 830 205 302 579 606 751 153 721 175 611 193 156 522 753  68 227 372 745 780 468 333 274 357 242 316 807 126
 268 269 793 421 135 840 270 198 425 786 189 672 235 272 348 646 213 294 331 820 719 165 230 456 546 291 593 420 364
 741 196 287 675 278 463 657 825 297 329 326 251 349 377 310 730 322 351 834 342 432 254 199 350 411 422 423 332 446
 256 398 330 492 397 451 472 512 311 308 370 688 409 415 281 787 477 803 529 378 275 352 328 465 569 215 248 384 309
 321 388 442 343 430 301 284 643 276 300 353 800 434 232 245 542 416 449 775 360 367 400 455 267 450 475 605 324 532
 362 262 457 338 346 459 344 334 271 511 445 470 419 473 452 610 187 435 604 341 335 471 444 727 482 292 336 607 395
 340 480 636 399 567 317 312 318 624 257 515 314 525 263 404 319 361 375 299 307 389 369 394 429 615 385 583 686 427
  11 496  61 315 387 498 244 501 591 386 524 431 551 487 402 305 635 528 582 440 413 485 424 392 390 595 406 371 358
 359 439 504 142 466 443 414 438 497 448 467 506 587 410 417 541 380 484 376 462 437  43  27 454 401 489 561 654 363
 537 495 428 345 490 548 526 137 680 433 533 200 578 596 483  70 618 493 355 393 405 507 523 478  20 502 426   7 403
 461 555 368 564  12 460 540 173 212 623  77  59 603 391 109 210 476 538 685 177 436 550 637 580 520 536 667 491 499
 601 323 562 373 513 488 106 396 453 241 558 104   3 469 808 277 699 530   2 197 547 590 652 574 505 474 112 517 535
 584 516  84 576 531  90 133 163  39 644 669  37 577 500 236  49 630 534 645 544  69 619 608 626 514 733 246 510 503
  34 641 265 509 679 148 778  38 622  41 735 161 296 628 690  79 642 671 739 602  73 101  13 588 186 609 589 566 486
 188 656  19 714 777 203   6 172  91 136 769 234 102 614 575 563 681 625 701  96 621 585 521 554  32 749  15 560 650
 740 665 154 660 655 139 141 103  88 105  21 114 599 670 794 221 712 464 747  54 710 597 764   8  29 634 127 791 703
 664 746 160 789  26 280 123 170 116  24 737  16 653 806 742 325 713 673 408 134 201 616 755 715   9  33 220 572 783
 557 658  65  35 760  60  83 121 195 282 767 337  99 736 726 169 648  25 700 573 629 771 752 647 250   4 216 559 785
 728 702 683 724 798 259 115 339  97 776 784 761  36 788 774 327 759 676 600 120 313 168  28  40  18 689  46  31  30
 763 458 131 639 441 202 233 224 108 228 770 797  17 418 289 782 729  14 209 366 303 731  67 814 347 765 144 447 773
   1  10 157 768  22  48 379 288 207  23 677 283   5 758 810 279 725 383 698 570 620 804  53 709  89 633 694 772 744

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 6.51086e+06us (= 6510.86ms, 6.51086s)
Wall-clock time (full program): 6.57219e+06us (= 6572.19ms, 6.57219s)
Satisfaction error: 0
Number of search iterations: 1372
Number of local moves: 708 (including on plateau: 247)
Number of local minimum: 80 (including on plateau: 32)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 612 833  99 815  61 100 121  73 788 676  58 762 194  19 835 717 654 837 742 807  64 110 767 569 448  77 198 107  66
 820 357  86 479  85  32 125  60 715  89 770 532  26  70 610 641 529  80 549 712 620 144  98 638 709 838 143 831 821
 761 826 426 152  21  56 214  97 817 811 799 644 201  31 131 701 570  44 830 823 185 269 130 737 797 233 827  47  29
 595 637 786 841  94 430 818  62 782 771  84 683 584  74 101 516 228 253 229 633 825 109 105 652 780 162 126  96 153
 692 738 237 127 809 575 225 215 496 287 203 705  53 207 252 656 694 800 773 749 181  30 156 684 840 278 132 168 247
 670 752 216 645  50 798 244 165 836 164 184 567 536 155 839 255 708 272 806 726 224 166  91 832 533 283 117 167 208
 605 743 358 417  25 814 834 223 716 267 139 804 555 205  92 665 699  93 486 177 704 301 828 226 518 141 238  37 299
 783 491 297 240 254 714 188 794 731 685 389 589 142 258 206 785 276 129 286 182 813 514 243 643 630 191 209 173 374
 520 655 268 682 259 538 112 331 418 200 360 662 124 340 313 822 736 161 758 507 558 293 295 675 720 344 186 160 212
 681 271 284 220 386 718 174 199 686 651 178 803 679 249 251 729 816 219 760 640 250 149 414 231 470 294 337 257 213
 488 421 351 378 288 706 696 315 537 373 397 328 658 122 342 428 424 256 410 713 666 481 192 372 631 345 309 348 234
 568 383 270 263 441 494 756 277 248 819 235 399 354 466 469 425 361 282 395 296 474 687 368 530 400 180 365 702 302
 513 615 359 563 436 382 304 526 525 505 419 564 775 281 409 187 232 438 439 334 432 475 371 317 480 416 327 311 274
 659 509 362 535 352 218 413 468 320 321 500 387 585 363 477 375 455 444 408 422 183 376 172 398 600 449 453 522 483
 465 458 322 350 367 427 308 275 339 557 499 489 262 407 381 431 406 747 290 461 380 411 492 543 471 501 401 434 335
 347 447 487 390 405 338 391 581 170 385 508 561 582 392 120 579 504 346 305 503 446 451 450 402 524 442 497 364 292
 264 490 388 493 412 303 384 515 433 379 484 241 369 473 443  82 370 396 326 324 332 552 478 625 318 703 435 573 624
 316 554 245 539 510  22 556 593 452 578 403 598  27 460 482 614 437  45 541 246 559 528 454 415 115 572 423 440 485
 239  88 319  63 495 634 642 544 329 341 498 279 404 725 657  55  28 377 291 546 545 594 606 560   1 511 587 574 677
 260 540 310 148 648 591 459 628 154 553 698 217 102 517 691  49  46 523 429 393 197 521  78 596 280 547 751 583 700
 300 609 464 562 632 189 735 463 159 312 764 145 195 754 467 550 103 506 527 456  36 104 542  11 133 607 647 621 616
  42  41 608 202 619 680 519 602  59 512 639  40 580 577 571 137  52 730  12 420 193 394 695 221 314 661 727 689 673
 175 242 566 343 650 548   4 667  48 531 660 211 622 664 671  76 613 502 204 601 623 590  17 111  87 728   9 768 678
 113  51 744 599 672 333 649 603 114 534 586  34 349 646 653 136 230 617 108 210  39 597 457   2 236 765 766 565 801
 134 146 777 636 769 196 746  65 169   8 763  75 629 697  16 158 551 674 724  35 176 733 588  79 355 759 796  10 745
 227  24 808   5 307 138 693 707  54  83 128 273 711 721 611 171 222 753 151  18 626 476 793 618 330 366 627 792 776
 265 116 119 106 791 772 118 688  38 592  72 285 710 812 604 445 179 353  95 150 779 741 734  43 306 787   3 774 732
  81  15 829 781 576 140  33 719 778  90 123 261 739 722 325 757 750 669  69  68 810 723 805   7 163  23 784 356  13
  14 157 824 635 795 323 748 755 298 135 668  71 462 802 190  67 336 663 266  57 289 690 790 472  20   6 789 740 147

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00032e+07us (= 10003.2ms, 10.0032s)
Wall-clock time (full program): 1.00652e+07us (= 10065.2ms, 10.0652s)
Satisfaction error: 3
Number of search iterations: 1918
Number of local moves: 760 (including on plateau: 198)
Number of local minimum: 162 (including on plateau: 21)
Number of resets: 1
Number of restarts: 0

Problem in column 8: 73 60 97 62 215 165 223 794 331 199 315 277 526 468 275 581 515 593 544 628 463 602 667 603 65 707 688 719 755 => the sum is 12210 rather than 12209
Problem in column 11: 58 770 799 84 203 184 139 389 360 178 397 235 419 500 499 508 484 403 498 698 764 639 660 586 763 128 72 123 668 => the sum is 12208 rather than 12209
Problem in diagonal 1: 66 831 827 162 840 832 828 514 558 640 410 282 232 375 381 392 369 598 498 553 159 602 4 333 769 5 119 15 14 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 533 768  38 809 510 791 245  17 199 284 631 265  19 779 745 748 451  10 294 188   9 214 718 789 747 804 289 198 117
 408  23 715   8 394 259  13 766  81  16 764 112  55 737 762 708  30 672 233 741 796 327  85 648 806 425 171 659 795
  20 771 525   5 115 765  11 759 127 656 663 254  37 644 767  77 773 376 680 251 595 161  18 692 689 777  34 248 719
 178 717 753  15 693 805 303 817 146 813 677 409 255  83 714 243 807 726 113  51 607 195  45 314 667  42 148  58 815
 174 637 136   7  25 662 512 811 353  31 769 681 296 324 725 658 542 716 123 551 295  90 218 784 105 706 494 129 655
 347 776 150   3  50   2 690 684 267 669 688 652 378 100 675 703   6 676 183 640 743 134 619 345 756  35 566  52 620
  22 782 727 772 157 459 653 728  72 477 639  26 252 132 570  29 711 588 660  70 593 189 227 276 615 219 169 641 754
  14 539 450 679 702 763 554  49 574 463 529  61 253  41 630 596 300 548 535  79 109 543 643 614 599 647  56 618  21
 673 749 721 704 428 616   4 666  57 175 661  33 172  64 490 163 581 699  27 526 231 262 201 700 685 121 479 582 739
 390 572 710 670  69 563 629 468 186 341 664  91 279 103 649 544 556 580  71 364 462 193 650 104 579  78 466 555 623
 415 520  99 469 622 550 433 465 729 697 467 128  40 398 454 485 412 594 686  65  86 577 613 389 436   1 369 483 527
 273 383 120 509 634 446 633 536  48 564 291 732  46 627 600 470 513 531 545  67  36 532 609 488 547 645 359  39 386
  24 400 561 453 456 352 461 348 387 416 625 497 317 110 441 491 339 541 500 503 654 499  12 528 373 524 440 473 484
 332 418 519 476 537 447 313 458 429 382 375 406 511 501 585 493 489 492  32 325 340 427 557  80 424 431 502 571 357
 326 591 159 482 306 487 434 472 471 377 380 522 691 413 598 518 391 504 430 460 362 122 319 439 307 611 464 224 349
 411 360 271 258 538 421 626 368 495 540 584 367 486 407 384 356 432 393 404 239 517 397 358 646 437 335 445 496 238
 514 334 374 350 223 498 403 354 423 821 395 281 323 523 250 396 696 366 388 338 457 290 414 298 455 402 822 478 343
 534 346 274 507 363 604 320 299 371 505 160 818 635 420 241 452 344 792 342 624 444 567 270 401 322 603 166 304 181
 316 351 799 278 215 337 426 336 200 793 480 709 575 712 399  95 379 301 601 449 385 752 283 549 179 698 237 202 173
 331 293 329 405 819 232 740 204 422 372 381 760 442 288 244 234 230 249 808 794 736 297 553 761 285 311 208 269 212
 315 192 310 309 825 108 263 638 831 185 355 731 694 417 256 802 292 264 286 800 361 521 228 141 419 560 602 247 257
 781 194 302 333 565 220 266 826 746 530 229 783 586 226  93 775 124 147 277 216 605 824 235 153  60 410 720 678 305
 713 135 583 242 211 158 187  59 816 170 111  62 589 657 321 642 814  44 695 632 176 774 829 106 272  96 758 751 606
 733 610 167 757 222 810 778 370 568 114 155 328 573 742 133 177 190 107 683 312 592 734 578 236 213 116 435 559 217
 744 151 812 701 209  66 820  97 621  92 318 608 723 755  89 261 827 126 730 330 365 268 838 125 156 240 221 786 130
 562 138 260 392 275  54 797 137 722 191  43 590 515 576 143 203 162 280 438 801 131 724 225 475 705 828 834 798 210
 788 142 308 164 837  47 119 149 506 668  63 552 839 587  76  94 118  74 790 674 617 836 246 197 196 597 287 803 835
 558 152 832 682 474 206 508 184 750 180  28 182 787 207  88 145 546 738 139 671 823  53 785 830 102 665 628 168  98
 780 165 205 770 735 481  68 144 612 687  84 569 841 636  87 651 154  75 516 448  82 707 833 101  73 282 840 140 443

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 8.39108e+06us (= 8391.08ms, 8.39108s)
Wall-clock time (full program): 8.44936e+06us (= 8449.36ms, 8.44936s)
Satisfaction error: 0
Number of search iterations: 1716
Number of local moves: 789 (including on plateau: 253)
Number of local minimum: 119 (including on plateau: 26)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 736 804 656 654 707   4 765  30  98 202 187 158 768 666  41 715 131 175 716  89 673 215 793  79 799  42  97 813 396
 786  16 644 785 787  51 740 161 753 762  61 313 797 203  10 735 207  25 701 613 592 167 759 109 254 196 166  49 767
  35  47 655  20 766 239 746 205 695  22 814   5 594 720 306 725 709 743 769 164 631  36  34 155 758 190 661  78 687
 796 712 576   1 728  94 771 180 257 694 117  88 577 682 708 276 669  14  23 375 760 150 794  93 650   3  40 657 724
 747 639 587 692   9  77  45 286 710 634 607  48 457 191   8 267 690 660 775 147 679 102 723 171  32 179 627 691 729
 699 671 319 744 781 283 745 151 780 703  63  83  29  66 596 641 575 684 620 633  59  84 667  17 640  31   6 230 609
 705 739 225 565 685 271   2  46 638 756 717  11 129 120 754  52 528 584 570 521 678 159   7 101 677 693 111 543 622
 549 649 388 567  12 154 500 400 568 624 108 405 281  67 618 437 476 680 579 555 523  19 630 217 663 140 216 561 623
 546 614 591 422 734 121 664  58  13 696 211 351 345  26 548 702 648 670 616  28  15 538 116 299 635 643 107 727 525
 515 637  64 626 505 214 497 294 552 300  50 100 429 621 611 475 516 646 510  18 104 544 327 348 683 511 605 385 522
 487 258  56 563 461 383 489 296 418 662 163 519 141 578 514 530 455 495  71 501 612 551 406 260 492 534 252 491 571
 647 359 330 421 590 297 586 379 366 554  82 394 181 185 466 444 597 305 512 593 413 490 417 265 446 453 320 545 572
 439 245 152 542 326 398 537 404 425 436 315 496 665 234 504 508 378 513 397 364 389 443 473 382 550 632  24 588 450
 339 598 168 484 494 344 474 186 628 401 464 380 323 412 506 324 480 672 371 430 517 458 438 288 433 541 395 393 268
 479 354 471 441 384 414 334 357 509 420 361 343 462 360 482 499 376 520 228 311 468 601 448 486 428 325 431 292 625
 251 806 362 407 301 485 183 529 539 488 269 372 368 583 426 582 367 606 730 284 298 195 469 467 189 564 442 329 318
 415 535 776 741 337 411 356 338 262 452 328 280 818 264 229 532 387 277 374 460 445 402 347 533 270 250 686 409 295
 377 493 675 507 410 477 340 483 342 373 432 603 221 599 449 246 241 358 459 815 261 456 451 503 293 435 287 447 176
 336 556 749 440 465 674 381 689 363 721 658 232 540 273 275 569 249 314 237 573 125 602 126 434 308 408 304 370 238
 391 282 558  96 322 600 243 751 481 784 653 817 681 419 331 213 642 536 236 206 226 355 341 732 390 253 274 137 259
 335 135 386 105 365 416 350 581 803 173 524 697 278 763 231 303 317 177 222 777 809 352 178 731 752 349 559  87 454
 194 291 424 184 143 801 223 427 289 172 562 737 805 256 198 204 835 332 651 316 312 811 478 553 200 827 652 114 218
 156 139 498 321 353 711 802 698 247 153 823 829 309 636 770 227 333 209 738 279 346 244  21 574 142 518 615 310 208
  37 285 174 192 403 547  92 826 112 235 831 722 472 810  99 659 199 157 193 791 148 774 118 589 248 755 807 839  95
 119  27 188 789 824 726 719 560 224 220  57 714 392 169 820 750 128  69  85 266 170 834 595 748 837 162 819 133  65
  60  76 764 790  91 782 263 830 210 123 566 610 307 557  62 136 836 149 115 668 526 463 182 788 134 808 840 201 272
 130 290 165  33  74 619 145 704 645  81 604 617  90 369 816  70  75 783 197 798 502 733 706 832 106 761 399 822  43
 103 828 470  38  72 795  73 527 160 255 757 585 219 608  53 242  55  44 212 580 688 718 742 779  68 773 838 841  86
 800 124 138  39  80 821 144 833 122 113 825 700 531 772 778 146 110 812 302  54 240 713 423 676 132 233 629 127 792

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00021e+07us (= 10002.1ms, 10.0021s)
Wall-clock time (full program): 1.0063e+07us (= 10063ms, 10.063s)
Satisfaction error: 1
Number of search iterations: 2138
Number of local moves: 886 (including on plateau: 219)
Number of local minimum: 165 (including on plateau: 31)
Number of resets: 1
Number of restarts: 0

Problem in diagonal 0: 736 16 655 1 9 283 2 400 13 300 163 394 665 412 482 582 387 358 237 206 809 811 21 589 837 808 399 841 792 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 169  86 126 362 633 364  45 709  76 707  44 790 629 502  54 447 796 568 106 798  63 743 112  82 804 640 755 225 774
  47 814 129 730 695 159 132 671 494 794  81 558 756  46 164 383 819 791 153 699 131  27  55  51  32 511 779 769 739
  29  49 291 267 549 144  33 744 107 737  99  77 698 825  11 101 831 766 807 770 111 802  96 835 102 782 263 773 510
 815 103 187 799 817 459 610 186  79 571 157 554 839 294  74 777 175 722 776 738  62  41 108 136 158 255 828 784 105
 260 143 448 547 689 824 161 765 145 775 156 321 588 193  91 542 179 821 441 221 665 250 248 243 203 651 785 198 656
 113 116 139 301 673  53 487 572  92 734 180 125 768 286  80 632 797 840 120 712 213 657 123 803 124 812 324 763 570
 280 165 736  90 445 249 762 701 209 367 174 281 792 173 218 607 232 569 231 780 196 379 811 274  73 731 376 680 628
 160 271 194 837 795 239 394 816 200 827 178 298 530 299 185 830 269 391 163 316 275 751 201 183 220 468 611 603 705
  64 192 365 257 322 340 606 360 832 674  71 303 841 172 217 622 241 820 389 345 813 154 212 251 264 786 408 618 670
 369 266 575 245 696 127 759 520 356 219 199 493 836 418 104 710 166 635 184 838 282 399 279 244 427 237 253 662 711
 110 310 343 315 716 311 332 435 372 748 826 416 519 189 109 772 242 452 531 171 333 359 288 259 834 265 666 272 714
 349 326 557 538 337 338 548 460 224 355 436 829 823 287 462 752 215 329 392 205 518 295 216 348 309 420 404 229 708
 344 354 234 465 293 429 616 414 476 334 406 434 532 405 407 623 430 283 314 339 469 358 384 319 523 806 578 202 438
 749 483 477 480 370 450 292 505 423 461 387 258 403 410 608 458 424 262 336 412 297 308 312 296 236 528 409 818 357
 290 451 401 481 256 822 413 482 397 508 366 306 346 353 398 491 284 550 402 395 342 323 515 426 545 485 375 428 378
 421 390 331 368 453 457 381 400 512 602 514 382 207 525 614  28 270 437 419 506 472 593 617 464 446 254 352 431 363
 475 473  83 373 433 422 317 411 562 507 393 500 149 443 529 150 471 522 537 495 380 371 621 497 444 226 197 592 636
 496 526 536 432 204 396 654 152 663 137 726  60 151 652 573 210 534 504 155 541 442 440 551 669 521 425 439 385  35
 455 335 561 556 268 706 574 642 235  19 513 691 285 276 533 134 467 330 114 456 466 687 581 516 559 470 223 492  65
 347 587 300 499 555 490 351 486 591  70 677 702 117 649 488  93 540 563 415 147 478 589 697 498 544  23 328 318  67
 579 631 182 527 599 718 313  75  40 659 601 539 190 503 517 325 745  56 585 613  38 715 474 590 535 141 484 214  21
 553 454 302 580  66 634 417  24 604 130 594 729  72 639 723 584 577   8 560 118 605   9 564 576 638  78 543 582 246
 630 509 289 658 177 615  26 162 660 148 489  87 206 655 778  68 619 195 653 598 566 684 678  25 624 643   3 181 583
 648 524 675 667 240   5 683 167 211 304 668 789 327 735 661 361 119   6 694  57 552 320 647 753 746 142  34 133 341
 721 793 783 717  13 800 374 122 760 247 740  88  69  36 747 449 597  16 596  97 703 565 646 641  10 620  58  31 170
 600 754 650  59  22 679 546  94 627  89 692  18 140 758 733 191 222 252 761  61 809 676 719 609 688 188 307 228  37
 681 682 757  30  20 138 567  43 686 121 781 742   1 637 644 305 146 233 664   2 764  85 626 208 808 261 728 463 386
 645 732 725  17 278 100 586 479 805 350 273 724 227 801 767 388  98  50 672 727 377   4 135 700 750 277  14   7 501
 810 690 833  12 595 741 230 612 771  15 788 115 168  48 720 176 704 238  39  52 787 625 693 713  42  84 685 128  95

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 7.85747e+06us (= 7857.47ms, 7.85747s)
Wall-clock time (full program): 7.91861e+06us (= 7918.61ms, 7.91861s)
Satisfaction error: 0
Number of search iterations: 1519
Number of local moves: 618 (including on plateau: 212)
Number of local minimum: 119 (including on plateau: 24)
Number of resets: 0
Number of restarts: 0

@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
  10 677 204 764 691 754 166  37 205 767  88  24 118 798 812  17 760 165  59 787 706  81  13 739 776 196 811 182 802
 287 709 251 827 121 257 210 784 219 244  42 710 763 820 814  34 543 761  74 778 737 297   3 793 302   5 806   6  12
  26   9   8 797 819 756 222 262 650 698  92 734 310 818 745  32 694 230 280 633  85 191 699 672 692  18 813 188  36
 232  21 161   7 733 791 141 317 668 770 529 669 295 680 554 664 712 419 107 641 558   1  15 788 774  63  76 156 667
 213 294 175 729  33  49  23  72 697 748 265 757 162 804 690 689 614 168 131 364 651 715 732  19 328 599 753 646  89
 264 111 132 666 695 339  62 662  54 730 752 701 172 586 631 635 565 199  66 717 612 187 643 343 629   2 726 125 203
  28   4 100 304 792 207  14 642 605 720  16 703  98 622  31 602 597  77 581 655  11 566 292 708 686 670 588 684 606
 229 241 336 290 723  27 574  20 645 568 192 527 108 674  60 721 634 158 216 648 583 329 505 486 660 562 683 178 632
  39 106  61 360 652 135 637 598 547 628 240 595  67 615 231 704 437 255 143 627 610  46 682 740 536 678 517 102 621
 548 475 330 136 607  57 556 540 140  35 523 534 227  41 357 560 673 170 526 311 542  84 665 604 661 557 617 530 603
  48 743 285 535 585  40 573 549 676 576 123 531  38 636 490 601  65 109  29 450 430 436 465 580 653 400 483 541 539
 439 480 137  90 521 515 644 478 659 525 169  50 119 481 577 551 153 555 378 502 567 249 470 332 520 592 468 503 485
 406 491 315 452 416 488 422 512  55 552 258 507 441 414 499 410 352 401 497 538 473 350 506 456 445 394 396 319 444
 513 411 361 215 326 524 462 466 457 340 392 412 235 451 494 559 479 296 476 509 467 356 474 409 575 359 493 299 399
 403 385 432 333 427 438 591 418 496 298 318 425 423 498 460 522 381 405 458 448 471 431 353 413 386 373 454 327 442
 389 334 447 348 420 477 464 537 375 380 472 388 345 469 286 415 367 484 453 256 609 288 826 417 424 307 308 545 379
 370 426 429 449 397 482 463 284 828 272 362 266 663 273 390 831 323 301 306 433 325 349 613 428 489 341 331 398 387
 407 368 519 656 455 354 391 363 250 322 584 218 696 395 309 446 233 822 402 514 508 840 268 220 372 459 223 376 239
 242 303 777 681 384 346 246 807 254 569 781 217 687 371 355 374 382 702 582 270 263 619 228 282 279 267 274 320 347
 639 383 758 624 365 492 116 277 366 803 324 335 435 313 271 201 225 608 564 775 344 305 408 546 283 736 184 281 248
 768 751 796 342 314 259 377 193 838 243 544 171 671 197 237  82 144 724 829 198 647 821 293 183 133 238 200 727 289
 779 291 404 181 252 825 762 832 731 211 572 209 533 351 278 338 550 780 337 202 134 596 795 300 117 127 114 511  97
 759 769 817 234 173 440 275 155 713 159 321 194 722 195 675 224 147 623 611 208 261 532 785 312  78 750 212 716 149
 638 718 728 593 167 122 516 688 139 236 504  79 719  80 587 179 164 625 495 186 253 369 206 836 260 755  30 630 707
 816 741 658 124 180 824 657 138  64 276 783  86 594 245 773  83 358 616 765 221 247 799  93  56 815 316 128 563 190
 738 571 705  69 711 500 725 176 146 189 626  95 771 101 163 794 501 561 735  25 835 154 115  45 126 693  51 801 487
 570 746 434 528  43 553 461 443 110 145 714 421 786  96 104 105 185 160 620  47  58 800 789 226  22 834 837 590 782
 809  73 700 772  87 640 805 830 510  53 790 810 393  91 269 766 148 150 742  52 151 579 130 177 113 174 589 157 649
 600 578 749 103 120 518 654 129 112 152 833 841 618  94  68  70 823 685 747 214  71 839 142  99  75 744  44 808 679

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00018e+07us (= 10001.8ms, 10.0018s)
Wall-clock time (full program): 1.00632e+07us (= 10063.2ms, 10.0632s)
Satisfaction error: 2
Number of search iterations: 2811
Number of local moves: 944 (including on plateau: 303)
Number of local minimum: 222 (including on plateau: 34)
Number of resets: 1
Number of restarts: 0

Problem in column 15: 812 814 745 554 690 631 31 60 231 357 490 577 499 494 460 286 390 309 355 271 237 278 675 587 773 163 104 269 68 => the sum is 12210 rather than 12209
Problem in column 23: 13 3 699 15 732 643 292 505 682 665 465 470 506 474 353 826 613 268 228 408 293 795 785 206 93 115 789 130 142 => the sum is 12208 rather than 12209
@@@@@@@@@@@@
Variable heuristic: Adaptive Search
Value heuristic: Adaptive Search
Started from a custom variables assignment: false
Search resumed from a previous run: false
Parallel search: false
Number of threads (not used if no parallel search): 16
Number of variable assignments samplings at start (if custom start and resume are set to false): 10
Variables of local minimum are frozen for: 169 local moves
Selected variables are frozen for: 0 local moves
85 variables are reset when 169 variables are frozen
Do a restart each time 841 resets are performed
############
Solution:
 664 686 642 725  63 789  87 636 444 523  80  68 666 234  72  47 127 101 130 670  74 612 434 104 777 634 665 741 714
 834 390 730 648  98 654 137 647 691 170 497  64 526 186  54  46 804 113 159 449  53  91 759 660 246 650 219 805 829
 721 835 417 623 820 838 145 509 576 739  83 102 103 106 166  81  66 148 116 539 348 336 784 138 638 823 463 772 174
 232 799 716 569  85 827  99 695 669 247 210 254 577 722 128 100 117  86 243 761  69 126 559 813 572 825 790 188 131
 282 696 774 357 812 791 586 402 504 410 536 147 781 778  59 260 139 107 483 782 115  73 275  79 731 205 204 663 178
 713 628 819 754 167 841  88 213 780 133 783 221 146 755 134  31 135 183 163 158 189 616 191 387 685 815 522 756 203
 822 626 587 748 308 760 767 736 809 531 235 171 273 278 266 233 792  78  70 176 201  82 420 236 762 280 156 599 207
 223 801 671 830 226 649 747 785 697 259 162 545 281 198 155 150 429 136 279 770 119 837 175 195 151 366 288 726 359
 832 543 475 528 304 318 249 230 381 450 356 798 810 393 277 701 317 269 276 688 817 267 306 298 206 374 200 319 227
 668 624 441 596 231 591 190 169 708 824 316 358 297 307 711 149 157 293 124 814 215 182 255 458 769 240 698 271 553
 335 525 831 743 385 560 256 414 555 263 797 439 285 398 212 289 451 416 424 220 413 452 351 478 411 454 286 225 341
 301 601 568 299 239 397 517 339 404 474 388 735 311 196 682 312 422 836 347 399 392 372 340 333 251 261 717 370 406
 303 459 646 724 428 453 248 265 540 309 419 566 481 427 742 268 567 310 408 331 461 214 407 541 365 472 346 324 185
 322 354 360 389 395 272 394 486 821 480 535 816 321 313 364 400 503 237 320 334 362 369 222 436 445 323 808 382 446
 345 425 589 430 132 391 295 238 448 715 409 284 405 502 661 274 192 637 344 437 482 734 383 330 415 363 556 361 432
 384 353 376 513 524 418 683 473 290 165 534 253 421  41 477 426 371 329 443 494 457 470 675 573 471 142 467 521 465
 519 129 325 125 431 368 401 488 583 379 492 469 423 194 433 367 378 342 375 564 287 460 562 505 506 462 493 549 600
 496 574 228 294 653 270 510 550  27 386 447 332  48 508 350 593 327 114 485 484 594 530 677  52 514 605 479 571 511
 507 218 355  35 520 456 640 547 609 533  13  96 608 455 629 512  77 633 120  18 667 590 632  11 580 499 570 592 487
 291 199 154 118 595 217 598 518 180  93 500 464 578 641 527 579 678 614 544   5 582  61 611 490  19 765 561 585 442
 563 250 373  84 602 202 627 588 241  56 554 655 764 575 242 498 630 558 501  22  60 693 613 662  40 692 110 173 581
 466 229  50 302 542 197 380 109 105  71 606 615 603 635 707 617 631 435 749 537 489  43 604 597 140 328  44 706 672
 546 300 209 257 532  97  58  75  29 766 643 727 141 187 619 702 659 807 676  24 516 644 651 723 704 168 177   7 565
 193  37 112  36 753   9 752  62  34 557 315 495  28 681 705 710 656 793 620 111 712 694 718   3 403 610 584 152 674
 179  25  26 552  57  90 548 305  23 476 618 622 657 750 625 699 828 679 806 652 438 673  17 703 108 144 645   6 258
  38 252  30 338   2 440 529 709 224 538 123 515 740 164 337 840 839 788 771 746 802 607 551 744 143   8  32  33 326
  95 122 396  92 794  49 639 684 343 172  51 349  45 160 621 833  67 732 689 751 737 491  10 803 680 658  14 720 412
 314 377  65 208 700  20 775 216 283 757 728 262 796 738 468 719  55 745 768 184 800 729  15 818 296   1 352  16   4
  21 153 244 292 811 245 264 121 211 733 779 787  94 687 786 773 795 690 776  89 758 161  12  39 181  42 763  76 826

SATISFACTION run
Permutation problem: true
Time budget: 1e+07us (= 10000ms, 10s)
Search time: 1.00011e+07us (= 10001.1ms, 10.0011s)
Wall-clock time (full program): 1.00618e+07us (= 10061.8ms, 10.0618s)
Satisfaction error: 2
Number of search iterations: 2769
Number of local moves: 1226 (including on plateau: 502)
Number of local minimum: 206 (including on plateau: 48)
Number of resets: 1
Number of restarts: 0

Problem in column 2: 686 390 835 799 696 628 626 801 543 624 525 601 459 354 425 353 129 574 218 199 250 229 300 37 25 252 122 377 153 => the sum is 12210 rather than 12209
Problem in column 29: 714 829 174 131 178 203 207 359 227 553 341 406 185 446 432 465 600 511 487 442 581 672 565 674 258 326 412 4 826 => the sum is 12208 rather than 12209
